// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_373_000)
{
    // 45DC 003F;	
    // (䗜) CJK UNIFIED IDEOGRAPH-45DC	[FB80 C5DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45DC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_001)
{
    // 45DC 0061;	
    // (䗜) CJK UNIFIED IDEOGRAPH-45DC	[FB80 C5DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45DC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_002)
{
    // 45DC 0041;	
    // (䗜) CJK UNIFIED IDEOGRAPH-45DC	[FB80 C5DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45DC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_003)
{
    // 45DC 0062;	
    // (䗜) CJK UNIFIED IDEOGRAPH-45DC	[FB80 C5DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45DC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_004)
{
    // 45DD 0021;	
    // (䗝) CJK UNIFIED IDEOGRAPH-45DD	[FB80 C5DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45DD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_005)
{
    // 45DD 003F;	
    // (䗝) CJK UNIFIED IDEOGRAPH-45DD	[FB80 C5DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45DD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_006)
{
    // 45DD 0061;	
    // (䗝) CJK UNIFIED IDEOGRAPH-45DD	[FB80 C5DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45DD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_007)
{
    // 45DD 0041;	
    // (䗝) CJK UNIFIED IDEOGRAPH-45DD	[FB80 C5DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45DD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_008)
{
    // 45DD 0062;	
    // (䗝) CJK UNIFIED IDEOGRAPH-45DD	[FB80 C5DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45DD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_009)
{
    // 45DE 0021;	
    // (䗞) CJK UNIFIED IDEOGRAPH-45DE	[FB80 C5DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45DE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_010)
{
    // 45DE 003F;	
    // (䗞) CJK UNIFIED IDEOGRAPH-45DE	[FB80 C5DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45DE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_011)
{
    // 45DE 0061;	
    // (䗞) CJK UNIFIED IDEOGRAPH-45DE	[FB80 C5DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45DE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_012)
{
    // 45DE 0041;	
    // (䗞) CJK UNIFIED IDEOGRAPH-45DE	[FB80 C5DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45DE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_013)
{
    // 45DE 0062;	
    // (䗞) CJK UNIFIED IDEOGRAPH-45DE	[FB80 C5DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45DE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_014)
{
    // 45DF 0021;	
    // (䗟) CJK UNIFIED IDEOGRAPH-45DF	[FB80 C5DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45DF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_015)
{
    // 45DF 003F;	
    // (䗟) CJK UNIFIED IDEOGRAPH-45DF	[FB80 C5DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45DF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_016)
{
    // 45DF 0061;	
    // (䗟) CJK UNIFIED IDEOGRAPH-45DF	[FB80 C5DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45DF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_017)
{
    // 45DF 0041;	
    // (䗟) CJK UNIFIED IDEOGRAPH-45DF	[FB80 C5DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45DF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_018)
{
    // 45DF 0062;	
    // (䗟) CJK UNIFIED IDEOGRAPH-45DF	[FB80 C5DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45DF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_019)
{
    // 45E0 0021;	
    // (䗠) CJK UNIFIED IDEOGRAPH-45E0	[FB80 C5E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_020)
{
    // 45E0 003F;	
    // (䗠) CJK UNIFIED IDEOGRAPH-45E0	[FB80 C5E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_021)
{
    // 45E0 0061;	
    // (䗠) CJK UNIFIED IDEOGRAPH-45E0	[FB80 C5E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_022)
{
    // 45E0 0041;	
    // (䗠) CJK UNIFIED IDEOGRAPH-45E0	[FB80 C5E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45E0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_023)
{
    // 45E0 0062;	
    // (䗠) CJK UNIFIED IDEOGRAPH-45E0	[FB80 C5E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_024)
{
    // 45E1 0021;	
    // (䗡) CJK UNIFIED IDEOGRAPH-45E1	[FB80 C5E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_025)
{
    // 45E1 003F;	
    // (䗡) CJK UNIFIED IDEOGRAPH-45E1	[FB80 C5E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_026)
{
    // 45E1 0061;	
    // (䗡) CJK UNIFIED IDEOGRAPH-45E1	[FB80 C5E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_027)
{
    // 45E1 0041;	
    // (䗡) CJK UNIFIED IDEOGRAPH-45E1	[FB80 C5E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45E1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_028)
{
    // 45E1 0062;	
    // (䗡) CJK UNIFIED IDEOGRAPH-45E1	[FB80 C5E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_029)
{
    // 45E2 0021;	
    // (䗢) CJK UNIFIED IDEOGRAPH-45E2	[FB80 C5E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_030)
{
    // 45E2 003F;	
    // (䗢) CJK UNIFIED IDEOGRAPH-45E2	[FB80 C5E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_031)
{
    // 45E2 0061;	
    // (䗢) CJK UNIFIED IDEOGRAPH-45E2	[FB80 C5E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_032)
{
    // 45E2 0041;	
    // (䗢) CJK UNIFIED IDEOGRAPH-45E2	[FB80 C5E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45E2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_033)
{
    // 45E2 0062;	
    // (䗢) CJK UNIFIED IDEOGRAPH-45E2	[FB80 C5E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_034)
{
    // 45E3 0021;	
    // (䗣) CJK UNIFIED IDEOGRAPH-45E3	[FB80 C5E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_035)
{
    // 45E3 003F;	
    // (䗣) CJK UNIFIED IDEOGRAPH-45E3	[FB80 C5E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_036)
{
    // 45E3 0061;	
    // (䗣) CJK UNIFIED IDEOGRAPH-45E3	[FB80 C5E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_037)
{
    // 45E3 0041;	
    // (䗣) CJK UNIFIED IDEOGRAPH-45E3	[FB80 C5E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45E3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_038)
{
    // 45E3 0062;	
    // (䗣) CJK UNIFIED IDEOGRAPH-45E3	[FB80 C5E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_039)
{
    // 45E4 0021;	
    // (䗤) CJK UNIFIED IDEOGRAPH-45E4	[FB80 C5E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_040)
{
    // 45E4 003F;	
    // (䗤) CJK UNIFIED IDEOGRAPH-45E4	[FB80 C5E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_041)
{
    // 45E4 0061;	
    // (䗤) CJK UNIFIED IDEOGRAPH-45E4	[FB80 C5E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_042)
{
    // 45E4 0041;	
    // (䗤) CJK UNIFIED IDEOGRAPH-45E4	[FB80 C5E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45E4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_043)
{
    // 45E4 0062;	
    // (䗤) CJK UNIFIED IDEOGRAPH-45E4	[FB80 C5E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_044)
{
    // 45E5 0021;	
    // (䗥) CJK UNIFIED IDEOGRAPH-45E5	[FB80 C5E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_045)
{
    // 45E5 003F;	
    // (䗥) CJK UNIFIED IDEOGRAPH-45E5	[FB80 C5E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_046)
{
    // 45E5 0061;	
    // (䗥) CJK UNIFIED IDEOGRAPH-45E5	[FB80 C5E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_047)
{
    // 45E5 0041;	
    // (䗥) CJK UNIFIED IDEOGRAPH-45E5	[FB80 C5E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45E5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_048)
{
    // 45E5 0062;	
    // (䗥) CJK UNIFIED IDEOGRAPH-45E5	[FB80 C5E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_049)
{
    // 45E6 0021;	
    // (䗦) CJK UNIFIED IDEOGRAPH-45E6	[FB80 C5E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_050)
{
    // 45E6 003F;	
    // (䗦) CJK UNIFIED IDEOGRAPH-45E6	[FB80 C5E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_051)
{
    // 45E6 0061;	
    // (䗦) CJK UNIFIED IDEOGRAPH-45E6	[FB80 C5E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_052)
{
    // 45E6 0041;	
    // (䗦) CJK UNIFIED IDEOGRAPH-45E6	[FB80 C5E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45E6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_053)
{
    // 45E6 0062;	
    // (䗦) CJK UNIFIED IDEOGRAPH-45E6	[FB80 C5E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_054)
{
    // 45E7 0021;	
    // (䗧) CJK UNIFIED IDEOGRAPH-45E7	[FB80 C5E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_055)
{
    // 45E7 003F;	
    // (䗧) CJK UNIFIED IDEOGRAPH-45E7	[FB80 C5E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_056)
{
    // 45E7 0061;	
    // (䗧) CJK UNIFIED IDEOGRAPH-45E7	[FB80 C5E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_057)
{
    // 45E7 0041;	
    // (䗧) CJK UNIFIED IDEOGRAPH-45E7	[FB80 C5E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45E7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_058)
{
    // 45E7 0062;	
    // (䗧) CJK UNIFIED IDEOGRAPH-45E7	[FB80 C5E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_059)
{
    // 45E8 0021;	
    // (䗨) CJK UNIFIED IDEOGRAPH-45E8	[FB80 C5E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_060)
{
    // 45E8 003F;	
    // (䗨) CJK UNIFIED IDEOGRAPH-45E8	[FB80 C5E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_061)
{
    // 45E8 0061;	
    // (䗨) CJK UNIFIED IDEOGRAPH-45E8	[FB80 C5E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_062)
{
    // 45E8 0041;	
    // (䗨) CJK UNIFIED IDEOGRAPH-45E8	[FB80 C5E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45E8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_063)
{
    // 45E8 0062;	
    // (䗨) CJK UNIFIED IDEOGRAPH-45E8	[FB80 C5E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_064)
{
    // 45E9 0021;	
    // (䗩) CJK UNIFIED IDEOGRAPH-45E9	[FB80 C5E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_065)
{
    // 45E9 003F;	
    // (䗩) CJK UNIFIED IDEOGRAPH-45E9	[FB80 C5E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_066)
{
    // 45E9 0061;	
    // (䗩) CJK UNIFIED IDEOGRAPH-45E9	[FB80 C5E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_067)
{
    // 45E9 0041;	
    // (䗩) CJK UNIFIED IDEOGRAPH-45E9	[FB80 C5E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45E9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_068)
{
    // 45E9 0062;	
    // (䗩) CJK UNIFIED IDEOGRAPH-45E9	[FB80 C5E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45E9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_069)
{
    // 45EA 0021;	
    // (䗪) CJK UNIFIED IDEOGRAPH-45EA	[FB80 C5EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45EA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_070)
{
    // 45EA 003F;	
    // (䗪) CJK UNIFIED IDEOGRAPH-45EA	[FB80 C5EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45EA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_071)
{
    // 45EA 0061;	
    // (䗪) CJK UNIFIED IDEOGRAPH-45EA	[FB80 C5EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45EA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_072)
{
    // 45EA 0041;	
    // (䗪) CJK UNIFIED IDEOGRAPH-45EA	[FB80 C5EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45EA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_073)
{
    // 45EA 0062;	
    // (䗪) CJK UNIFIED IDEOGRAPH-45EA	[FB80 C5EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45EA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_074)
{
    // 45EB 0021;	
    // (䗫) CJK UNIFIED IDEOGRAPH-45EB	[FB80 C5EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45EB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_075)
{
    // 45EB 003F;	
    // (䗫) CJK UNIFIED IDEOGRAPH-45EB	[FB80 C5EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45EB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_076)
{
    // 45EB 0061;	
    // (䗫) CJK UNIFIED IDEOGRAPH-45EB	[FB80 C5EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45EB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_077)
{
    // 45EB 0041;	
    // (䗫) CJK UNIFIED IDEOGRAPH-45EB	[FB80 C5EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45EB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_078)
{
    // 45EB 0062;	
    // (䗫) CJK UNIFIED IDEOGRAPH-45EB	[FB80 C5EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45EB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_079)
{
    // 45EC 0021;	
    // (䗬) CJK UNIFIED IDEOGRAPH-45EC	[FB80 C5EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45EC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_080)
{
    // 45EC 003F;	
    // (䗬) CJK UNIFIED IDEOGRAPH-45EC	[FB80 C5EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45EC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_081)
{
    // 45EC 0061;	
    // (䗬) CJK UNIFIED IDEOGRAPH-45EC	[FB80 C5EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45EC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_082)
{
    // 45EC 0041;	
    // (䗬) CJK UNIFIED IDEOGRAPH-45EC	[FB80 C5EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45EC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_083)
{
    // 45EC 0062;	
    // (䗬) CJK UNIFIED IDEOGRAPH-45EC	[FB80 C5EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45EC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_084)
{
    // 45ED 0021;	
    // (䗭) CJK UNIFIED IDEOGRAPH-45ED	[FB80 C5ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45ED, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_085)
{
    // 45ED 003F;	
    // (䗭) CJK UNIFIED IDEOGRAPH-45ED	[FB80 C5ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45ED, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_086)
{
    // 45ED 0061;	
    // (䗭) CJK UNIFIED IDEOGRAPH-45ED	[FB80 C5ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45ED, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_087)
{
    // 45ED 0041;	
    // (䗭) CJK UNIFIED IDEOGRAPH-45ED	[FB80 C5ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45ED, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_088)
{
    // 45ED 0062;	
    // (䗭) CJK UNIFIED IDEOGRAPH-45ED	[FB80 C5ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45ED, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_089)
{
    // 45EE 0021;	
    // (䗮) CJK UNIFIED IDEOGRAPH-45EE	[FB80 C5EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45EE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_090)
{
    // 45EE 003F;	
    // (䗮) CJK UNIFIED IDEOGRAPH-45EE	[FB80 C5EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45EE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_091)
{
    // 45EE 0061;	
    // (䗮) CJK UNIFIED IDEOGRAPH-45EE	[FB80 C5EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45EE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_092)
{
    // 45EE 0041;	
    // (䗮) CJK UNIFIED IDEOGRAPH-45EE	[FB80 C5EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45EE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_093)
{
    // 45EE 0062;	
    // (䗮) CJK UNIFIED IDEOGRAPH-45EE	[FB80 C5EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45EE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_094)
{
    // 45EF 0021;	
    // (䗯) CJK UNIFIED IDEOGRAPH-45EF	[FB80 C5EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45EF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_095)
{
    // 45EF 003F;	
    // (䗯) CJK UNIFIED IDEOGRAPH-45EF	[FB80 C5EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45EF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_096)
{
    // 45EF 0061;	
    // (䗯) CJK UNIFIED IDEOGRAPH-45EF	[FB80 C5EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45EF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_097)
{
    // 45EF 0041;	
    // (䗯) CJK UNIFIED IDEOGRAPH-45EF	[FB80 C5EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45EF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_098)
{
    // 45EF 0062;	
    // (䗯) CJK UNIFIED IDEOGRAPH-45EF	[FB80 C5EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45EF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_099)
{
    // 45F0 0021;	
    // (䗰) CJK UNIFIED IDEOGRAPH-45F0	[FB80 C5F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_100)
{
    // 45F0 003F;	
    // (䗰) CJK UNIFIED IDEOGRAPH-45F0	[FB80 C5F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_101)
{
    // 45F0 0061;	
    // (䗰) CJK UNIFIED IDEOGRAPH-45F0	[FB80 C5F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_102)
{
    // 45F0 0041;	
    // (䗰) CJK UNIFIED IDEOGRAPH-45F0	[FB80 C5F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45F0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_103)
{
    // 45F0 0062;	
    // (䗰) CJK UNIFIED IDEOGRAPH-45F0	[FB80 C5F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_104)
{
    // 45F1 0021;	
    // (䗱) CJK UNIFIED IDEOGRAPH-45F1	[FB80 C5F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_105)
{
    // 45F1 003F;	
    // (䗱) CJK UNIFIED IDEOGRAPH-45F1	[FB80 C5F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_106)
{
    // 45F1 0061;	
    // (䗱) CJK UNIFIED IDEOGRAPH-45F1	[FB80 C5F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_107)
{
    // 45F1 0041;	
    // (䗱) CJK UNIFIED IDEOGRAPH-45F1	[FB80 C5F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45F1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_108)
{
    // 45F1 0062;	
    // (䗱) CJK UNIFIED IDEOGRAPH-45F1	[FB80 C5F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_109)
{
    // 45F2 0021;	
    // (䗲) CJK UNIFIED IDEOGRAPH-45F2	[FB80 C5F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_110)
{
    // 45F2 003F;	
    // (䗲) CJK UNIFIED IDEOGRAPH-45F2	[FB80 C5F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_111)
{
    // 45F2 0061;	
    // (䗲) CJK UNIFIED IDEOGRAPH-45F2	[FB80 C5F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_112)
{
    // 45F2 0041;	
    // (䗲) CJK UNIFIED IDEOGRAPH-45F2	[FB80 C5F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45F2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_113)
{
    // 45F2 0062;	
    // (䗲) CJK UNIFIED IDEOGRAPH-45F2	[FB80 C5F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_114)
{
    // 45F3 0021;	
    // (䗳) CJK UNIFIED IDEOGRAPH-45F3	[FB80 C5F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_115)
{
    // 45F3 003F;	
    // (䗳) CJK UNIFIED IDEOGRAPH-45F3	[FB80 C5F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_116)
{
    // 45F3 0061;	
    // (䗳) CJK UNIFIED IDEOGRAPH-45F3	[FB80 C5F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_117)
{
    // 45F3 0041;	
    // (䗳) CJK UNIFIED IDEOGRAPH-45F3	[FB80 C5F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45F3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_118)
{
    // 45F3 0062;	
    // (䗳) CJK UNIFIED IDEOGRAPH-45F3	[FB80 C5F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_119)
{
    // 45F4 0021;	
    // (䗴) CJK UNIFIED IDEOGRAPH-45F4	[FB80 C5F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_120)
{
    // 45F4 003F;	
    // (䗴) CJK UNIFIED IDEOGRAPH-45F4	[FB80 C5F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_121)
{
    // 45F4 0061;	
    // (䗴) CJK UNIFIED IDEOGRAPH-45F4	[FB80 C5F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_122)
{
    // 45F4 0041;	
    // (䗴) CJK UNIFIED IDEOGRAPH-45F4	[FB80 C5F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45F4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_123)
{
    // 45F4 0062;	
    // (䗴) CJK UNIFIED IDEOGRAPH-45F4	[FB80 C5F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_124)
{
    // 45F5 0021;	
    // (䗵) CJK UNIFIED IDEOGRAPH-45F5	[FB80 C5F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_125)
{
    // 45F5 003F;	
    // (䗵) CJK UNIFIED IDEOGRAPH-45F5	[FB80 C5F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_126)
{
    // 45F5 0061;	
    // (䗵) CJK UNIFIED IDEOGRAPH-45F5	[FB80 C5F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_127)
{
    // 45F5 0041;	
    // (䗵) CJK UNIFIED IDEOGRAPH-45F5	[FB80 C5F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45F5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_128)
{
    // 45F5 0062;	
    // (䗵) CJK UNIFIED IDEOGRAPH-45F5	[FB80 C5F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_129)
{
    // 45F6 0021;	
    // (䗶) CJK UNIFIED IDEOGRAPH-45F6	[FB80 C5F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_130)
{
    // 45F6 003F;	
    // (䗶) CJK UNIFIED IDEOGRAPH-45F6	[FB80 C5F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_131)
{
    // 45F6 0061;	
    // (䗶) CJK UNIFIED IDEOGRAPH-45F6	[FB80 C5F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_132)
{
    // 45F6 0041;	
    // (䗶) CJK UNIFIED IDEOGRAPH-45F6	[FB80 C5F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45F6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_133)
{
    // 45F6 0062;	
    // (䗶) CJK UNIFIED IDEOGRAPH-45F6	[FB80 C5F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_134)
{
    // 45F7 0021;	
    // (䗷) CJK UNIFIED IDEOGRAPH-45F7	[FB80 C5F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_135)
{
    // 45F7 003F;	
    // (䗷) CJK UNIFIED IDEOGRAPH-45F7	[FB80 C5F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_136)
{
    // 45F7 0061;	
    // (䗷) CJK UNIFIED IDEOGRAPH-45F7	[FB80 C5F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_137)
{
    // 45F7 0041;	
    // (䗷) CJK UNIFIED IDEOGRAPH-45F7	[FB80 C5F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45F7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_138)
{
    // 45F7 0062;	
    // (䗷) CJK UNIFIED IDEOGRAPH-45F7	[FB80 C5F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_139)
{
    // 45F8 0021;	
    // (䗸) CJK UNIFIED IDEOGRAPH-45F8	[FB80 C5F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_140)
{
    // 45F8 003F;	
    // (䗸) CJK UNIFIED IDEOGRAPH-45F8	[FB80 C5F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_141)
{
    // 45F8 0061;	
    // (䗸) CJK UNIFIED IDEOGRAPH-45F8	[FB80 C5F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_142)
{
    // 45F8 0041;	
    // (䗸) CJK UNIFIED IDEOGRAPH-45F8	[FB80 C5F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45F8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_143)
{
    // 45F8 0062;	
    // (䗸) CJK UNIFIED IDEOGRAPH-45F8	[FB80 C5F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_144)
{
    // 45F9 0021;	
    // (䗹) CJK UNIFIED IDEOGRAPH-45F9	[FB80 C5F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_145)
{
    // 2F9C2 0021;	
    // (䗹) CJK COMPATIBILITY IDEOGRAPH-2F9C2	[FB80 C5F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_146)
{
    // 45F9 003F;	
    // (䗹) CJK UNIFIED IDEOGRAPH-45F9	[FB80 C5F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_147)
{
    // 2F9C2 003F;	
    // (䗹) CJK COMPATIBILITY IDEOGRAPH-2F9C2	[FB80 C5F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_148)
{
    // 45F9 0061;	
    // (䗹) CJK UNIFIED IDEOGRAPH-45F9	[FB80 C5F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_149)
{
    // 2F9C2 0061;	
    // (䗹) CJK COMPATIBILITY IDEOGRAPH-2F9C2	[FB80 C5F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_150)
{
    // 45F9 0041;	
    // (䗹) CJK UNIFIED IDEOGRAPH-45F9	[FB80 C5F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45F9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_151)
{
    // 2F9C2 0041;	
    // (䗹) CJK COMPATIBILITY IDEOGRAPH-2F9C2	[FB80 C5F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9C2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_152)
{
    // 45F9 0062;	
    // (䗹) CJK UNIFIED IDEOGRAPH-45F9	[FB80 C5F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45F9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_153)
{
    // 2F9C2 0062;	
    // (䗹) CJK COMPATIBILITY IDEOGRAPH-2F9C2	[FB80 C5F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_154)
{
    // 45FA 0021;	
    // (䗺) CJK UNIFIED IDEOGRAPH-45FA	[FB80 C5FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45FA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_155)
{
    // 45FA 003F;	
    // (䗺) CJK UNIFIED IDEOGRAPH-45FA	[FB80 C5FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45FA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_156)
{
    // 45FA 0061;	
    // (䗺) CJK UNIFIED IDEOGRAPH-45FA	[FB80 C5FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45FA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_157)
{
    // 45FA 0041;	
    // (䗺) CJK UNIFIED IDEOGRAPH-45FA	[FB80 C5FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45FA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_158)
{
    // 45FA 0062;	
    // (䗺) CJK UNIFIED IDEOGRAPH-45FA	[FB80 C5FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45FA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_159)
{
    // 45FB 0021;	
    // (䗻) CJK UNIFIED IDEOGRAPH-45FB	[FB80 C5FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45FB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_160)
{
    // 45FB 003F;	
    // (䗻) CJK UNIFIED IDEOGRAPH-45FB	[FB80 C5FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45FB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_161)
{
    // 45FB 0061;	
    // (䗻) CJK UNIFIED IDEOGRAPH-45FB	[FB80 C5FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45FB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_162)
{
    // 45FB 0041;	
    // (䗻) CJK UNIFIED IDEOGRAPH-45FB	[FB80 C5FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45FB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_163)
{
    // 45FB 0062;	
    // (䗻) CJK UNIFIED IDEOGRAPH-45FB	[FB80 C5FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45FB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_164)
{
    // 45FC 0021;	
    // (䗼) CJK UNIFIED IDEOGRAPH-45FC	[FB80 C5FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45FC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_165)
{
    // 45FC 003F;	
    // (䗼) CJK UNIFIED IDEOGRAPH-45FC	[FB80 C5FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45FC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_166)
{
    // 45FC 0061;	
    // (䗼) CJK UNIFIED IDEOGRAPH-45FC	[FB80 C5FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45FC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_167)
{
    // 45FC 0041;	
    // (䗼) CJK UNIFIED IDEOGRAPH-45FC	[FB80 C5FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45FC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_168)
{
    // 45FC 0062;	
    // (䗼) CJK UNIFIED IDEOGRAPH-45FC	[FB80 C5FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45FC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_169)
{
    // 45FD 0021;	
    // (䗽) CJK UNIFIED IDEOGRAPH-45FD	[FB80 C5FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45FD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_170)
{
    // 45FD 003F;	
    // (䗽) CJK UNIFIED IDEOGRAPH-45FD	[FB80 C5FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45FD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_171)
{
    // 45FD 0061;	
    // (䗽) CJK UNIFIED IDEOGRAPH-45FD	[FB80 C5FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45FD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_172)
{
    // 45FD 0041;	
    // (䗽) CJK UNIFIED IDEOGRAPH-45FD	[FB80 C5FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45FD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_173)
{
    // 45FD 0062;	
    // (䗽) CJK UNIFIED IDEOGRAPH-45FD	[FB80 C5FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45FD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_174)
{
    // 45FE 0021;	
    // (䗾) CJK UNIFIED IDEOGRAPH-45FE	[FB80 C5FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45FE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_175)
{
    // 45FE 003F;	
    // (䗾) CJK UNIFIED IDEOGRAPH-45FE	[FB80 C5FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45FE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_176)
{
    // 45FE 0061;	
    // (䗾) CJK UNIFIED IDEOGRAPH-45FE	[FB80 C5FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45FE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_177)
{
    // 45FE 0041;	
    // (䗾) CJK UNIFIED IDEOGRAPH-45FE	[FB80 C5FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45FE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_178)
{
    // 45FE 0062;	
    // (䗾) CJK UNIFIED IDEOGRAPH-45FE	[FB80 C5FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45FE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_179)
{
    // 45FF 0021;	
    // (䗿) CJK UNIFIED IDEOGRAPH-45FF	[FB80 C5FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45FF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_180)
{
    // 45FF 003F;	
    // (䗿) CJK UNIFIED IDEOGRAPH-45FF	[FB80 C5FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45FF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_181)
{
    // 45FF 0061;	
    // (䗿) CJK UNIFIED IDEOGRAPH-45FF	[FB80 C5FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45FF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_182)
{
    // 45FF 0041;	
    // (䗿) CJK UNIFIED IDEOGRAPH-45FF	[FB80 C5FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45FF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_183)
{
    // 45FF 0062;	
    // (䗿) CJK UNIFIED IDEOGRAPH-45FF	[FB80 C5FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45FF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_184)
{
    // 4600 0021;	
    // (䘀) CJK UNIFIED IDEOGRAPH-4600	[FB80 C600 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4600, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC600, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_185)
{
    // 4600 003F;	
    // (䘀) CJK UNIFIED IDEOGRAPH-4600	[FB80 C600 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4600, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC600, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_186)
{
    // 4600 0061;	
    // (䘀) CJK UNIFIED IDEOGRAPH-4600	[FB80 C600 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4600, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC600, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_187)
{
    // 4600 0041;	
    // (䘀) CJK UNIFIED IDEOGRAPH-4600	[FB80 C600 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4600, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC600, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_188)
{
    // 4600 0062;	
    // (䘀) CJK UNIFIED IDEOGRAPH-4600	[FB80 C600 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4600, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC600, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_189)
{
    // 4601 0021;	
    // (䘁) CJK UNIFIED IDEOGRAPH-4601	[FB80 C601 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4601, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC601, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_190)
{
    // 4601 003F;	
    // (䘁) CJK UNIFIED IDEOGRAPH-4601	[FB80 C601 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4601, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC601, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_191)
{
    // 4601 0061;	
    // (䘁) CJK UNIFIED IDEOGRAPH-4601	[FB80 C601 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4601, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC601, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_192)
{
    // 4601 0041;	
    // (䘁) CJK UNIFIED IDEOGRAPH-4601	[FB80 C601 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4601, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC601, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_193)
{
    // 4601 0062;	
    // (䘁) CJK UNIFIED IDEOGRAPH-4601	[FB80 C601 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4601, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC601, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_194)
{
    // 4602 0021;	
    // (䘂) CJK UNIFIED IDEOGRAPH-4602	[FB80 C602 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4602, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC602, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_195)
{
    // 4602 003F;	
    // (䘂) CJK UNIFIED IDEOGRAPH-4602	[FB80 C602 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4602, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC602, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_196)
{
    // 4602 0061;	
    // (䘂) CJK UNIFIED IDEOGRAPH-4602	[FB80 C602 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4602, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC602, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_197)
{
    // 4602 0041;	
    // (䘂) CJK UNIFIED IDEOGRAPH-4602	[FB80 C602 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4602, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC602, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_198)
{
    // 4602 0062;	
    // (䘂) CJK UNIFIED IDEOGRAPH-4602	[FB80 C602 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4602, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC602, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_199)
{
    // 4603 0021;	
    // (䘃) CJK UNIFIED IDEOGRAPH-4603	[FB80 C603 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4603, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC603, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_200)
{
    // 4603 003F;	
    // (䘃) CJK UNIFIED IDEOGRAPH-4603	[FB80 C603 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4603, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC603, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_201)
{
    // 4603 0061;	
    // (䘃) CJK UNIFIED IDEOGRAPH-4603	[FB80 C603 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4603, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC603, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_202)
{
    // 4603 0041;	
    // (䘃) CJK UNIFIED IDEOGRAPH-4603	[FB80 C603 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4603, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC603, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_203)
{
    // 4603 0062;	
    // (䘃) CJK UNIFIED IDEOGRAPH-4603	[FB80 C603 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4603, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC603, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_204)
{
    // 4604 0021;	
    // (䘄) CJK UNIFIED IDEOGRAPH-4604	[FB80 C604 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4604, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC604, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_205)
{
    // 4604 003F;	
    // (䘄) CJK UNIFIED IDEOGRAPH-4604	[FB80 C604 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4604, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC604, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_206)
{
    // 4604 0061;	
    // (䘄) CJK UNIFIED IDEOGRAPH-4604	[FB80 C604 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4604, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC604, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_207)
{
    // 4604 0041;	
    // (䘄) CJK UNIFIED IDEOGRAPH-4604	[FB80 C604 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4604, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC604, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_208)
{
    // 4604 0062;	
    // (䘄) CJK UNIFIED IDEOGRAPH-4604	[FB80 C604 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4604, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC604, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_209)
{
    // 4605 0021;	
    // (䘅) CJK UNIFIED IDEOGRAPH-4605	[FB80 C605 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4605, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC605, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_210)
{
    // 4605 003F;	
    // (䘅) CJK UNIFIED IDEOGRAPH-4605	[FB80 C605 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4605, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC605, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_211)
{
    // 4605 0061;	
    // (䘅) CJK UNIFIED IDEOGRAPH-4605	[FB80 C605 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4605, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC605, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_212)
{
    // 4605 0041;	
    // (䘅) CJK UNIFIED IDEOGRAPH-4605	[FB80 C605 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4605, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC605, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_213)
{
    // 4605 0062;	
    // (䘅) CJK UNIFIED IDEOGRAPH-4605	[FB80 C605 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4605, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC605, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_214)
{
    // 4606 0021;	
    // (䘆) CJK UNIFIED IDEOGRAPH-4606	[FB80 C606 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4606, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC606, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_215)
{
    // 4606 003F;	
    // (䘆) CJK UNIFIED IDEOGRAPH-4606	[FB80 C606 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4606, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC606, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_216)
{
    // 4606 0061;	
    // (䘆) CJK UNIFIED IDEOGRAPH-4606	[FB80 C606 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4606, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC606, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_217)
{
    // 4606 0041;	
    // (䘆) CJK UNIFIED IDEOGRAPH-4606	[FB80 C606 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4606, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC606, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_218)
{
    // 4606 0062;	
    // (䘆) CJK UNIFIED IDEOGRAPH-4606	[FB80 C606 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4606, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC606, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_219)
{
    // 4607 0021;	
    // (䘇) CJK UNIFIED IDEOGRAPH-4607	[FB80 C607 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4607, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC607, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_220)
{
    // 4607 003F;	
    // (䘇) CJK UNIFIED IDEOGRAPH-4607	[FB80 C607 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4607, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC607, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_221)
{
    // 4607 0061;	
    // (䘇) CJK UNIFIED IDEOGRAPH-4607	[FB80 C607 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4607, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC607, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_222)
{
    // 4607 0041;	
    // (䘇) CJK UNIFIED IDEOGRAPH-4607	[FB80 C607 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4607, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC607, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_223)
{
    // 4607 0062;	
    // (䘇) CJK UNIFIED IDEOGRAPH-4607	[FB80 C607 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4607, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC607, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_224)
{
    // 4608 0021;	
    // (䘈) CJK UNIFIED IDEOGRAPH-4608	[FB80 C608 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4608, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC608, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_225)
{
    // 4608 003F;	
    // (䘈) CJK UNIFIED IDEOGRAPH-4608	[FB80 C608 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4608, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC608, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_226)
{
    // 4608 0061;	
    // (䘈) CJK UNIFIED IDEOGRAPH-4608	[FB80 C608 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4608, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC608, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_227)
{
    // 4608 0041;	
    // (䘈) CJK UNIFIED IDEOGRAPH-4608	[FB80 C608 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4608, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC608, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_228)
{
    // 4608 0062;	
    // (䘈) CJK UNIFIED IDEOGRAPH-4608	[FB80 C608 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4608, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC608, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_229)
{
    // 4609 0021;	
    // (䘉) CJK UNIFIED IDEOGRAPH-4609	[FB80 C609 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4609, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC609, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_230)
{
    // 4609 003F;	
    // (䘉) CJK UNIFIED IDEOGRAPH-4609	[FB80 C609 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4609, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC609, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_231)
{
    // 4609 0061;	
    // (䘉) CJK UNIFIED IDEOGRAPH-4609	[FB80 C609 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4609, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC609, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_232)
{
    // 4609 0041;	
    // (䘉) CJK UNIFIED IDEOGRAPH-4609	[FB80 C609 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4609, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC609, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_233)
{
    // 4609 0062;	
    // (䘉) CJK UNIFIED IDEOGRAPH-4609	[FB80 C609 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4609, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC609, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_234)
{
    // 460A 0021;	
    // (䘊) CJK UNIFIED IDEOGRAPH-460A	[FB80 C60A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x460A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC60A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_235)
{
    // 460A 003F;	
    // (䘊) CJK UNIFIED IDEOGRAPH-460A	[FB80 C60A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x460A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC60A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_236)
{
    // 460A 0061;	
    // (䘊) CJK UNIFIED IDEOGRAPH-460A	[FB80 C60A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x460A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC60A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_237)
{
    // 460A 0041;	
    // (䘊) CJK UNIFIED IDEOGRAPH-460A	[FB80 C60A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x460A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC60A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_238)
{
    // 460A 0062;	
    // (䘊) CJK UNIFIED IDEOGRAPH-460A	[FB80 C60A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x460A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC60A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_239)
{
    // 460B 0021;	
    // (䘋) CJK UNIFIED IDEOGRAPH-460B	[FB80 C60B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x460B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC60B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_240)
{
    // 460B 003F;	
    // (䘋) CJK UNIFIED IDEOGRAPH-460B	[FB80 C60B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x460B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC60B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_241)
{
    // 460B 0061;	
    // (䘋) CJK UNIFIED IDEOGRAPH-460B	[FB80 C60B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x460B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC60B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_242)
{
    // 460B 0041;	
    // (䘋) CJK UNIFIED IDEOGRAPH-460B	[FB80 C60B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x460B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC60B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_243)
{
    // 460B 0062;	
    // (䘋) CJK UNIFIED IDEOGRAPH-460B	[FB80 C60B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x460B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC60B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_244)
{
    // 460C 0021;	
    // (䘌) CJK UNIFIED IDEOGRAPH-460C	[FB80 C60C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x460C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC60C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_245)
{
    // 460C 003F;	
    // (䘌) CJK UNIFIED IDEOGRAPH-460C	[FB80 C60C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x460C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC60C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_246)
{
    // 460C 0061;	
    // (䘌) CJK UNIFIED IDEOGRAPH-460C	[FB80 C60C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x460C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC60C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_247)
{
    // 460C 0041;	
    // (䘌) CJK UNIFIED IDEOGRAPH-460C	[FB80 C60C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x460C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC60C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_248)
{
    // 460C 0062;	
    // (䘌) CJK UNIFIED IDEOGRAPH-460C	[FB80 C60C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x460C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC60C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_249)
{
    // 460D 0021;	
    // (䘍) CJK UNIFIED IDEOGRAPH-460D	[FB80 C60D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x460D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC60D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_250)
{
    // 460D 003F;	
    // (䘍) CJK UNIFIED IDEOGRAPH-460D	[FB80 C60D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x460D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC60D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_251)
{
    // 460D 0061;	
    // (䘍) CJK UNIFIED IDEOGRAPH-460D	[FB80 C60D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x460D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC60D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_252)
{
    // 460D 0041;	
    // (䘍) CJK UNIFIED IDEOGRAPH-460D	[FB80 C60D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x460D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC60D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_253)
{
    // 460D 0062;	
    // (䘍) CJK UNIFIED IDEOGRAPH-460D	[FB80 C60D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x460D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC60D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_254)
{
    // 460E 0021;	
    // (䘎) CJK UNIFIED IDEOGRAPH-460E	[FB80 C60E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x460E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC60E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_255)
{
    // 460E 003F;	
    // (䘎) CJK UNIFIED IDEOGRAPH-460E	[FB80 C60E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x460E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC60E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_256)
{
    // 460E 0061;	
    // (䘎) CJK UNIFIED IDEOGRAPH-460E	[FB80 C60E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x460E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC60E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_257)
{
    // 460E 0041;	
    // (䘎) CJK UNIFIED IDEOGRAPH-460E	[FB80 C60E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x460E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC60E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_258)
{
    // 460E 0062;	
    // (䘎) CJK UNIFIED IDEOGRAPH-460E	[FB80 C60E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x460E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC60E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_259)
{
    // 460F 0021;	
    // (䘏) CJK UNIFIED IDEOGRAPH-460F	[FB80 C60F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x460F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC60F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_260)
{
    // 460F 003F;	
    // (䘏) CJK UNIFIED IDEOGRAPH-460F	[FB80 C60F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x460F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC60F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_261)
{
    // 460F 0061;	
    // (䘏) CJK UNIFIED IDEOGRAPH-460F	[FB80 C60F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x460F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC60F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_262)
{
    // 460F 0041;	
    // (䘏) CJK UNIFIED IDEOGRAPH-460F	[FB80 C60F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x460F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC60F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_263)
{
    // 460F 0062;	
    // (䘏) CJK UNIFIED IDEOGRAPH-460F	[FB80 C60F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x460F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC60F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_264)
{
    // 4610 0021;	
    // (䘐) CJK UNIFIED IDEOGRAPH-4610	[FB80 C610 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4610, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC610, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_265)
{
    // 4610 003F;	
    // (䘐) CJK UNIFIED IDEOGRAPH-4610	[FB80 C610 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4610, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC610, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_266)
{
    // 4610 0061;	
    // (䘐) CJK UNIFIED IDEOGRAPH-4610	[FB80 C610 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4610, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC610, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_267)
{
    // 4610 0041;	
    // (䘐) CJK UNIFIED IDEOGRAPH-4610	[FB80 C610 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4610, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC610, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_268)
{
    // 4610 0062;	
    // (䘐) CJK UNIFIED IDEOGRAPH-4610	[FB80 C610 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4610, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC610, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_269)
{
    // 4611 0021;	
    // (䘑) CJK UNIFIED IDEOGRAPH-4611	[FB80 C611 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4611, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC611, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_270)
{
    // 4611 003F;	
    // (䘑) CJK UNIFIED IDEOGRAPH-4611	[FB80 C611 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4611, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC611, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_271)
{
    // 4611 0061;	
    // (䘑) CJK UNIFIED IDEOGRAPH-4611	[FB80 C611 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4611, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC611, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_272)
{
    // 4611 0041;	
    // (䘑) CJK UNIFIED IDEOGRAPH-4611	[FB80 C611 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4611, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC611, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_273)
{
    // 4611 0062;	
    // (䘑) CJK UNIFIED IDEOGRAPH-4611	[FB80 C611 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4611, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC611, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_274)
{
    // 4612 0021;	
    // (䘒) CJK UNIFIED IDEOGRAPH-4612	[FB80 C612 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4612, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC612, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_275)
{
    // 4612 003F;	
    // (䘒) CJK UNIFIED IDEOGRAPH-4612	[FB80 C612 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4612, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC612, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_276)
{
    // 4612 0061;	
    // (䘒) CJK UNIFIED IDEOGRAPH-4612	[FB80 C612 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4612, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC612, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_277)
{
    // 4612 0041;	
    // (䘒) CJK UNIFIED IDEOGRAPH-4612	[FB80 C612 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4612, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC612, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_278)
{
    // 4612 0062;	
    // (䘒) CJK UNIFIED IDEOGRAPH-4612	[FB80 C612 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4612, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC612, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_279)
{
    // 4613 0021;	
    // (䘓) CJK UNIFIED IDEOGRAPH-4613	[FB80 C613 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4613, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC613, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_280)
{
    // 4613 003F;	
    // (䘓) CJK UNIFIED IDEOGRAPH-4613	[FB80 C613 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4613, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC613, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_281)
{
    // 4613 0061;	
    // (䘓) CJK UNIFIED IDEOGRAPH-4613	[FB80 C613 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4613, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC613, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_282)
{
    // 4613 0041;	
    // (䘓) CJK UNIFIED IDEOGRAPH-4613	[FB80 C613 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4613, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC613, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_283)
{
    // 4613 0062;	
    // (䘓) CJK UNIFIED IDEOGRAPH-4613	[FB80 C613 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4613, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC613, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_284)
{
    // 4614 0021;	
    // (䘔) CJK UNIFIED IDEOGRAPH-4614	[FB80 C614 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4614, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC614, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_285)
{
    // 4614 003F;	
    // (䘔) CJK UNIFIED IDEOGRAPH-4614	[FB80 C614 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4614, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC614, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_286)
{
    // 4614 0061;	
    // (䘔) CJK UNIFIED IDEOGRAPH-4614	[FB80 C614 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4614, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC614, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_287)
{
    // 4614 0041;	
    // (䘔) CJK UNIFIED IDEOGRAPH-4614	[FB80 C614 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4614, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC614, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_288)
{
    // 4614 0062;	
    // (䘔) CJK UNIFIED IDEOGRAPH-4614	[FB80 C614 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4614, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC614, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_289)
{
    // 4615 0021;	
    // (䘕) CJK UNIFIED IDEOGRAPH-4615	[FB80 C615 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4615, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC615, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_290)
{
    // 4615 003F;	
    // (䘕) CJK UNIFIED IDEOGRAPH-4615	[FB80 C615 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4615, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC615, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_291)
{
    // 4615 0061;	
    // (䘕) CJK UNIFIED IDEOGRAPH-4615	[FB80 C615 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4615, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC615, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_292)
{
    // 4615 0041;	
    // (䘕) CJK UNIFIED IDEOGRAPH-4615	[FB80 C615 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4615, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC615, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_293)
{
    // 4615 0062;	
    // (䘕) CJK UNIFIED IDEOGRAPH-4615	[FB80 C615 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4615, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC615, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_294)
{
    // 4616 0021;	
    // (䘖) CJK UNIFIED IDEOGRAPH-4616	[FB80 C616 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4616, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC616, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_295)
{
    // 4616 003F;	
    // (䘖) CJK UNIFIED IDEOGRAPH-4616	[FB80 C616 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4616, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC616, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_296)
{
    // 4616 0061;	
    // (䘖) CJK UNIFIED IDEOGRAPH-4616	[FB80 C616 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4616, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC616, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_297)
{
    // 4616 0041;	
    // (䘖) CJK UNIFIED IDEOGRAPH-4616	[FB80 C616 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4616, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC616, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_298)
{
    // 4616 0062;	
    // (䘖) CJK UNIFIED IDEOGRAPH-4616	[FB80 C616 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4616, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC616, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_299)
{
    // 4617 0021;	
    // (䘗) CJK UNIFIED IDEOGRAPH-4617	[FB80 C617 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4617, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC617, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_300)
{
    // 4617 003F;	
    // (䘗) CJK UNIFIED IDEOGRAPH-4617	[FB80 C617 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4617, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC617, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_301)
{
    // 4617 0061;	
    // (䘗) CJK UNIFIED IDEOGRAPH-4617	[FB80 C617 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4617, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC617, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_302)
{
    // 4617 0041;	
    // (䘗) CJK UNIFIED IDEOGRAPH-4617	[FB80 C617 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4617, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC617, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_303)
{
    // 4617 0062;	
    // (䘗) CJK UNIFIED IDEOGRAPH-4617	[FB80 C617 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4617, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC617, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_304)
{
    // 4618 0021;	
    // (䘘) CJK UNIFIED IDEOGRAPH-4618	[FB80 C618 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4618, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC618, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_305)
{
    // 4618 003F;	
    // (䘘) CJK UNIFIED IDEOGRAPH-4618	[FB80 C618 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4618, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC618, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_306)
{
    // 4618 0061;	
    // (䘘) CJK UNIFIED IDEOGRAPH-4618	[FB80 C618 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4618, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC618, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_307)
{
    // 4618 0041;	
    // (䘘) CJK UNIFIED IDEOGRAPH-4618	[FB80 C618 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4618, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC618, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_308)
{
    // 4618 0062;	
    // (䘘) CJK UNIFIED IDEOGRAPH-4618	[FB80 C618 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4618, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC618, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_309)
{
    // 4619 0021;	
    // (䘙) CJK UNIFIED IDEOGRAPH-4619	[FB80 C619 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4619, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC619, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_310)
{
    // 4619 003F;	
    // (䘙) CJK UNIFIED IDEOGRAPH-4619	[FB80 C619 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4619, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC619, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_311)
{
    // 4619 0061;	
    // (䘙) CJK UNIFIED IDEOGRAPH-4619	[FB80 C619 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4619, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC619, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_312)
{
    // 4619 0041;	
    // (䘙) CJK UNIFIED IDEOGRAPH-4619	[FB80 C619 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4619, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC619, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_313)
{
    // 4619 0062;	
    // (䘙) CJK UNIFIED IDEOGRAPH-4619	[FB80 C619 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4619, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC619, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_314)
{
    // 461A 0021;	
    // (䘚) CJK UNIFIED IDEOGRAPH-461A	[FB80 C61A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x461A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC61A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_315)
{
    // 461A 003F;	
    // (䘚) CJK UNIFIED IDEOGRAPH-461A	[FB80 C61A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x461A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC61A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_316)
{
    // 461A 0061;	
    // (䘚) CJK UNIFIED IDEOGRAPH-461A	[FB80 C61A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x461A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC61A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_317)
{
    // 461A 0041;	
    // (䘚) CJK UNIFIED IDEOGRAPH-461A	[FB80 C61A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x461A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC61A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_318)
{
    // 461A 0062;	
    // (䘚) CJK UNIFIED IDEOGRAPH-461A	[FB80 C61A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x461A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC61A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_319)
{
    // 461B 0021;	
    // (䘛) CJK UNIFIED IDEOGRAPH-461B	[FB80 C61B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x461B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC61B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_320)
{
    // 461B 003F;	
    // (䘛) CJK UNIFIED IDEOGRAPH-461B	[FB80 C61B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x461B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC61B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_321)
{
    // 461B 0061;	
    // (䘛) CJK UNIFIED IDEOGRAPH-461B	[FB80 C61B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x461B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC61B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_322)
{
    // 461B 0041;	
    // (䘛) CJK UNIFIED IDEOGRAPH-461B	[FB80 C61B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x461B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC61B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_323)
{
    // 461B 0062;	
    // (䘛) CJK UNIFIED IDEOGRAPH-461B	[FB80 C61B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x461B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC61B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_324)
{
    // 461C 0021;	
    // (䘜) CJK UNIFIED IDEOGRAPH-461C	[FB80 C61C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x461C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC61C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_325)
{
    // 461C 003F;	
    // (䘜) CJK UNIFIED IDEOGRAPH-461C	[FB80 C61C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x461C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC61C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_326)
{
    // 461C 0061;	
    // (䘜) CJK UNIFIED IDEOGRAPH-461C	[FB80 C61C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x461C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC61C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_327)
{
    // 461C 0041;	
    // (䘜) CJK UNIFIED IDEOGRAPH-461C	[FB80 C61C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x461C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC61C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_328)
{
    // 461C 0062;	
    // (䘜) CJK UNIFIED IDEOGRAPH-461C	[FB80 C61C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x461C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC61C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_329)
{
    // 461D 0021;	
    // (䘝) CJK UNIFIED IDEOGRAPH-461D	[FB80 C61D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x461D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC61D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_330)
{
    // 461D 003F;	
    // (䘝) CJK UNIFIED IDEOGRAPH-461D	[FB80 C61D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x461D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC61D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_331)
{
    // 461D 0061;	
    // (䘝) CJK UNIFIED IDEOGRAPH-461D	[FB80 C61D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x461D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC61D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_332)
{
    // 461D 0041;	
    // (䘝) CJK UNIFIED IDEOGRAPH-461D	[FB80 C61D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x461D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC61D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_333)
{
    // 461D 0062;	
    // (䘝) CJK UNIFIED IDEOGRAPH-461D	[FB80 C61D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x461D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC61D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_334)
{
    // 461E 0021;	
    // (䘞) CJK UNIFIED IDEOGRAPH-461E	[FB80 C61E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x461E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC61E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_335)
{
    // 461E 003F;	
    // (䘞) CJK UNIFIED IDEOGRAPH-461E	[FB80 C61E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x461E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC61E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_336)
{
    // 461E 0061;	
    // (䘞) CJK UNIFIED IDEOGRAPH-461E	[FB80 C61E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x461E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC61E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_337)
{
    // 461E 0041;	
    // (䘞) CJK UNIFIED IDEOGRAPH-461E	[FB80 C61E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x461E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC61E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_338)
{
    // 461E 0062;	
    // (䘞) CJK UNIFIED IDEOGRAPH-461E	[FB80 C61E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x461E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC61E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_339)
{
    // 461F 0021;	
    // (䘟) CJK UNIFIED IDEOGRAPH-461F	[FB80 C61F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x461F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC61F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_340)
{
    // 461F 003F;	
    // (䘟) CJK UNIFIED IDEOGRAPH-461F	[FB80 C61F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x461F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC61F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_341)
{
    // 461F 0061;	
    // (䘟) CJK UNIFIED IDEOGRAPH-461F	[FB80 C61F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x461F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC61F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_342)
{
    // 461F 0041;	
    // (䘟) CJK UNIFIED IDEOGRAPH-461F	[FB80 C61F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x461F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC61F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_343)
{
    // 461F 0062;	
    // (䘟) CJK UNIFIED IDEOGRAPH-461F	[FB80 C61F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x461F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC61F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_344)
{
    // 4620 0021;	
    // (䘠) CJK UNIFIED IDEOGRAPH-4620	[FB80 C620 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4620, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC620, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_345)
{
    // 4620 003F;	
    // (䘠) CJK UNIFIED IDEOGRAPH-4620	[FB80 C620 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4620, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC620, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_346)
{
    // 4620 0061;	
    // (䘠) CJK UNIFIED IDEOGRAPH-4620	[FB80 C620 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4620, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC620, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_347)
{
    // 4620 0041;	
    // (䘠) CJK UNIFIED IDEOGRAPH-4620	[FB80 C620 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4620, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC620, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_348)
{
    // 4620 0062;	
    // (䘠) CJK UNIFIED IDEOGRAPH-4620	[FB80 C620 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4620, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC620, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_349)
{
    // 4621 0021;	
    // (䘡) CJK UNIFIED IDEOGRAPH-4621	[FB80 C621 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4621, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC621, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_350)
{
    // 4621 003F;	
    // (䘡) CJK UNIFIED IDEOGRAPH-4621	[FB80 C621 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4621, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC621, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_351)
{
    // 4621 0061;	
    // (䘡) CJK UNIFIED IDEOGRAPH-4621	[FB80 C621 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4621, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC621, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_352)
{
    // 4621 0041;	
    // (䘡) CJK UNIFIED IDEOGRAPH-4621	[FB80 C621 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4621, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC621, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_353)
{
    // 4621 0062;	
    // (䘡) CJK UNIFIED IDEOGRAPH-4621	[FB80 C621 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4621, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC621, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_354)
{
    // 4622 0021;	
    // (䘢) CJK UNIFIED IDEOGRAPH-4622	[FB80 C622 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4622, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC622, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_355)
{
    // 4622 003F;	
    // (䘢) CJK UNIFIED IDEOGRAPH-4622	[FB80 C622 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4622, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC622, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_356)
{
    // 4622 0061;	
    // (䘢) CJK UNIFIED IDEOGRAPH-4622	[FB80 C622 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4622, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC622, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_357)
{
    // 4622 0041;	
    // (䘢) CJK UNIFIED IDEOGRAPH-4622	[FB80 C622 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4622, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC622, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_358)
{
    // 4622 0062;	
    // (䘢) CJK UNIFIED IDEOGRAPH-4622	[FB80 C622 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4622, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC622, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_359)
{
    // 4623 0021;	
    // (䘣) CJK UNIFIED IDEOGRAPH-4623	[FB80 C623 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4623, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC623, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_360)
{
    // 4623 003F;	
    // (䘣) CJK UNIFIED IDEOGRAPH-4623	[FB80 C623 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4623, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC623, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_361)
{
    // 4623 0061;	
    // (䘣) CJK UNIFIED IDEOGRAPH-4623	[FB80 C623 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4623, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC623, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_362)
{
    // 4623 0041;	
    // (䘣) CJK UNIFIED IDEOGRAPH-4623	[FB80 C623 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4623, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC623, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_363)
{
    // 4623 0062;	
    // (䘣) CJK UNIFIED IDEOGRAPH-4623	[FB80 C623 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4623, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC623, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_364)
{
    // 4624 0021;	
    // (䘤) CJK UNIFIED IDEOGRAPH-4624	[FB80 C624 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4624, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC624, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_365)
{
    // 4624 003F;	
    // (䘤) CJK UNIFIED IDEOGRAPH-4624	[FB80 C624 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4624, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC624, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_366)
{
    // 4624 0061;	
    // (䘤) CJK UNIFIED IDEOGRAPH-4624	[FB80 C624 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4624, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC624, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_367)
{
    // 4624 0041;	
    // (䘤) CJK UNIFIED IDEOGRAPH-4624	[FB80 C624 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4624, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC624, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_368)
{
    // 4624 0062;	
    // (䘤) CJK UNIFIED IDEOGRAPH-4624	[FB80 C624 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4624, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC624, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_369)
{
    // 4625 0021;	
    // (䘥) CJK UNIFIED IDEOGRAPH-4625	[FB80 C625 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4625, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC625, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_370)
{
    // 4625 003F;	
    // (䘥) CJK UNIFIED IDEOGRAPH-4625	[FB80 C625 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4625, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC625, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_371)
{
    // 4625 0061;	
    // (䘥) CJK UNIFIED IDEOGRAPH-4625	[FB80 C625 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4625, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC625, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_372)
{
    // 4625 0041;	
    // (䘥) CJK UNIFIED IDEOGRAPH-4625	[FB80 C625 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4625, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC625, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_373)
{
    // 4625 0062;	
    // (䘥) CJK UNIFIED IDEOGRAPH-4625	[FB80 C625 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4625, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC625, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_374)
{
    // 4626 0021;	
    // (䘦) CJK UNIFIED IDEOGRAPH-4626	[FB80 C626 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4626, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC626, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_375)
{
    // 4626 003F;	
    // (䘦) CJK UNIFIED IDEOGRAPH-4626	[FB80 C626 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4626, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC626, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_376)
{
    // 4626 0061;	
    // (䘦) CJK UNIFIED IDEOGRAPH-4626	[FB80 C626 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4626, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC626, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_377)
{
    // 4626 0041;	
    // (䘦) CJK UNIFIED IDEOGRAPH-4626	[FB80 C626 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4626, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC626, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_378)
{
    // 4626 0062;	
    // (䘦) CJK UNIFIED IDEOGRAPH-4626	[FB80 C626 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4626, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC626, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_379)
{
    // 4627 0021;	
    // (䘧) CJK UNIFIED IDEOGRAPH-4627	[FB80 C627 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4627, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC627, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_380)
{
    // 4627 003F;	
    // (䘧) CJK UNIFIED IDEOGRAPH-4627	[FB80 C627 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4627, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC627, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_381)
{
    // 4627 0061;	
    // (䘧) CJK UNIFIED IDEOGRAPH-4627	[FB80 C627 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4627, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC627, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_382)
{
    // 4627 0041;	
    // (䘧) CJK UNIFIED IDEOGRAPH-4627	[FB80 C627 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4627, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC627, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_383)
{
    // 4627 0062;	
    // (䘧) CJK UNIFIED IDEOGRAPH-4627	[FB80 C627 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4627, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC627, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_384)
{
    // 4628 0021;	
    // (䘨) CJK UNIFIED IDEOGRAPH-4628	[FB80 C628 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4628, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC628, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_385)
{
    // 4628 003F;	
    // (䘨) CJK UNIFIED IDEOGRAPH-4628	[FB80 C628 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4628, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC628, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_386)
{
    // 4628 0061;	
    // (䘨) CJK UNIFIED IDEOGRAPH-4628	[FB80 C628 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4628, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC628, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_387)
{
    // 4628 0041;	
    // (䘨) CJK UNIFIED IDEOGRAPH-4628	[FB80 C628 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4628, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC628, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_388)
{
    // 4628 0062;	
    // (䘨) CJK UNIFIED IDEOGRAPH-4628	[FB80 C628 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4628, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC628, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_389)
{
    // 4629 0021;	
    // (䘩) CJK UNIFIED IDEOGRAPH-4629	[FB80 C629 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4629, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC629, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_390)
{
    // 4629 003F;	
    // (䘩) CJK UNIFIED IDEOGRAPH-4629	[FB80 C629 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4629, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC629, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_391)
{
    // 4629 0061;	
    // (䘩) CJK UNIFIED IDEOGRAPH-4629	[FB80 C629 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4629, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC629, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_392)
{
    // 4629 0041;	
    // (䘩) CJK UNIFIED IDEOGRAPH-4629	[FB80 C629 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4629, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC629, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_393)
{
    // 4629 0062;	
    // (䘩) CJK UNIFIED IDEOGRAPH-4629	[FB80 C629 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4629, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC629, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_394)
{
    // 462A 0021;	
    // (䘪) CJK UNIFIED IDEOGRAPH-462A	[FB80 C62A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x462A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC62A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_395)
{
    // 462A 003F;	
    // (䘪) CJK UNIFIED IDEOGRAPH-462A	[FB80 C62A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x462A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC62A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_396)
{
    // 462A 0061;	
    // (䘪) CJK UNIFIED IDEOGRAPH-462A	[FB80 C62A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x462A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC62A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_397)
{
    // 462A 0041;	
    // (䘪) CJK UNIFIED IDEOGRAPH-462A	[FB80 C62A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x462A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC62A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_398)
{
    // 462A 0062;	
    // (䘪) CJK UNIFIED IDEOGRAPH-462A	[FB80 C62A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x462A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC62A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_399)
{
    // 462B 0021;	
    // (䘫) CJK UNIFIED IDEOGRAPH-462B	[FB80 C62B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x462B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC62B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_400)
{
    // 462B 003F;	
    // (䘫) CJK UNIFIED IDEOGRAPH-462B	[FB80 C62B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x462B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC62B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_401)
{
    // 462B 0061;	
    // (䘫) CJK UNIFIED IDEOGRAPH-462B	[FB80 C62B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x462B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC62B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_402)
{
    // 462B 0041;	
    // (䘫) CJK UNIFIED IDEOGRAPH-462B	[FB80 C62B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x462B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC62B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_403)
{
    // 462B 0062;	
    // (䘫) CJK UNIFIED IDEOGRAPH-462B	[FB80 C62B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x462B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC62B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_404)
{
    // 462C 0021;	
    // (䘬) CJK UNIFIED IDEOGRAPH-462C	[FB80 C62C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x462C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC62C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_405)
{
    // 462C 003F;	
    // (䘬) CJK UNIFIED IDEOGRAPH-462C	[FB80 C62C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x462C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC62C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_406)
{
    // 462C 0061;	
    // (䘬) CJK UNIFIED IDEOGRAPH-462C	[FB80 C62C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x462C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC62C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_407)
{
    // 462C 0041;	
    // (䘬) CJK UNIFIED IDEOGRAPH-462C	[FB80 C62C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x462C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC62C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_408)
{
    // 462C 0062;	
    // (䘬) CJK UNIFIED IDEOGRAPH-462C	[FB80 C62C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x462C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC62C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_409)
{
    // 462D 0021;	
    // (䘭) CJK UNIFIED IDEOGRAPH-462D	[FB80 C62D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x462D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC62D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_410)
{
    // 462D 003F;	
    // (䘭) CJK UNIFIED IDEOGRAPH-462D	[FB80 C62D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x462D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC62D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_411)
{
    // 462D 0061;	
    // (䘭) CJK UNIFIED IDEOGRAPH-462D	[FB80 C62D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x462D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC62D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_412)
{
    // 462D 0041;	
    // (䘭) CJK UNIFIED IDEOGRAPH-462D	[FB80 C62D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x462D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC62D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_413)
{
    // 462D 0062;	
    // (䘭) CJK UNIFIED IDEOGRAPH-462D	[FB80 C62D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x462D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC62D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_414)
{
    // 462E 0021;	
    // (䘮) CJK UNIFIED IDEOGRAPH-462E	[FB80 C62E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x462E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC62E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_415)
{
    // 462E 003F;	
    // (䘮) CJK UNIFIED IDEOGRAPH-462E	[FB80 C62E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x462E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC62E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_416)
{
    // 462E 0061;	
    // (䘮) CJK UNIFIED IDEOGRAPH-462E	[FB80 C62E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x462E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC62E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_417)
{
    // 462E 0041;	
    // (䘮) CJK UNIFIED IDEOGRAPH-462E	[FB80 C62E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x462E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC62E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_418)
{
    // 462E 0062;	
    // (䘮) CJK UNIFIED IDEOGRAPH-462E	[FB80 C62E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x462E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC62E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_419)
{
    // 462F 0021;	
    // (䘯) CJK UNIFIED IDEOGRAPH-462F	[FB80 C62F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x462F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC62F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_420)
{
    // 462F 003F;	
    // (䘯) CJK UNIFIED IDEOGRAPH-462F	[FB80 C62F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x462F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC62F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_421)
{
    // 462F 0061;	
    // (䘯) CJK UNIFIED IDEOGRAPH-462F	[FB80 C62F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x462F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC62F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_422)
{
    // 462F 0041;	
    // (䘯) CJK UNIFIED IDEOGRAPH-462F	[FB80 C62F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x462F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC62F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_423)
{
    // 462F 0062;	
    // (䘯) CJK UNIFIED IDEOGRAPH-462F	[FB80 C62F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x462F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC62F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_424)
{
    // 4630 0021;	
    // (䘰) CJK UNIFIED IDEOGRAPH-4630	[FB80 C630 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4630, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC630, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_425)
{
    // 4630 003F;	
    // (䘰) CJK UNIFIED IDEOGRAPH-4630	[FB80 C630 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4630, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC630, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_426)
{
    // 4630 0061;	
    // (䘰) CJK UNIFIED IDEOGRAPH-4630	[FB80 C630 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4630, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC630, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_427)
{
    // 4630 0041;	
    // (䘰) CJK UNIFIED IDEOGRAPH-4630	[FB80 C630 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4630, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC630, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_428)
{
    // 4630 0062;	
    // (䘰) CJK UNIFIED IDEOGRAPH-4630	[FB80 C630 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4630, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC630, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_429)
{
    // 4631 0021;	
    // (䘱) CJK UNIFIED IDEOGRAPH-4631	[FB80 C631 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4631, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC631, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_430)
{
    // 4631 003F;	
    // (䘱) CJK UNIFIED IDEOGRAPH-4631	[FB80 C631 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4631, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC631, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_431)
{
    // 4631 0061;	
    // (䘱) CJK UNIFIED IDEOGRAPH-4631	[FB80 C631 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4631, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_432)
{
    // 4631 0041;	
    // (䘱) CJK UNIFIED IDEOGRAPH-4631	[FB80 C631 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4631, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_433)
{
    // 4631 0062;	
    // (䘱) CJK UNIFIED IDEOGRAPH-4631	[FB80 C631 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4631, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC631, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_434)
{
    // 4632 0021;	
    // (䘲) CJK UNIFIED IDEOGRAPH-4632	[FB80 C632 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4632, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC632, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_435)
{
    // 4632 003F;	
    // (䘲) CJK UNIFIED IDEOGRAPH-4632	[FB80 C632 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4632, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC632, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_436)
{
    // 4632 0061;	
    // (䘲) CJK UNIFIED IDEOGRAPH-4632	[FB80 C632 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4632, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC632, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_437)
{
    // 4632 0041;	
    // (䘲) CJK UNIFIED IDEOGRAPH-4632	[FB80 C632 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4632, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC632, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_438)
{
    // 4632 0062;	
    // (䘲) CJK UNIFIED IDEOGRAPH-4632	[FB80 C632 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4632, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC632, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_439)
{
    // 4633 0021;	
    // (䘳) CJK UNIFIED IDEOGRAPH-4633	[FB80 C633 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4633, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC633, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_440)
{
    // 4633 003F;	
    // (䘳) CJK UNIFIED IDEOGRAPH-4633	[FB80 C633 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4633, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC633, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_441)
{
    // 4633 0061;	
    // (䘳) CJK UNIFIED IDEOGRAPH-4633	[FB80 C633 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4633, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC633, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_442)
{
    // 4633 0041;	
    // (䘳) CJK UNIFIED IDEOGRAPH-4633	[FB80 C633 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4633, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC633, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_443)
{
    // 4633 0062;	
    // (䘳) CJK UNIFIED IDEOGRAPH-4633	[FB80 C633 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4633, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC633, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_444)
{
    // 4634 0021;	
    // (䘴) CJK UNIFIED IDEOGRAPH-4634	[FB80 C634 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4634, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC634, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_445)
{
    // 4634 003F;	
    // (䘴) CJK UNIFIED IDEOGRAPH-4634	[FB80 C634 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4634, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC634, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_446)
{
    // 4634 0061;	
    // (䘴) CJK UNIFIED IDEOGRAPH-4634	[FB80 C634 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4634, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC634, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_447)
{
    // 4634 0041;	
    // (䘴) CJK UNIFIED IDEOGRAPH-4634	[FB80 C634 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4634, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC634, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_448)
{
    // 4634 0062;	
    // (䘴) CJK UNIFIED IDEOGRAPH-4634	[FB80 C634 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4634, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC634, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_449)
{
    // 4635 0021;	
    // (䘵) CJK UNIFIED IDEOGRAPH-4635	[FB80 C635 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4635, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC635, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_450)
{
    // 2F9C8 0021;	
    // (䘵) CJK COMPATIBILITY IDEOGRAPH-2F9C8	[FB80 C635 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC635, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_451)
{
    // 4635 003F;	
    // (䘵) CJK UNIFIED IDEOGRAPH-4635	[FB80 C635 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4635, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC635, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_452)
{
    // 2F9C8 003F;	
    // (䘵) CJK COMPATIBILITY IDEOGRAPH-2F9C8	[FB80 C635 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC635, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_453)
{
    // 4635 0061;	
    // (䘵) CJK UNIFIED IDEOGRAPH-4635	[FB80 C635 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4635, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC635, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_454)
{
    // 2F9C8 0061;	
    // (䘵) CJK COMPATIBILITY IDEOGRAPH-2F9C8	[FB80 C635 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC635, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_455)
{
    // 4635 0041;	
    // (䘵) CJK UNIFIED IDEOGRAPH-4635	[FB80 C635 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4635, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC635, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_456)
{
    // 2F9C8 0041;	
    // (䘵) CJK COMPATIBILITY IDEOGRAPH-2F9C8	[FB80 C635 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9C8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC635, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_457)
{
    // 4635 0062;	
    // (䘵) CJK UNIFIED IDEOGRAPH-4635	[FB80 C635 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4635, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC635, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_458)
{
    // 2F9C8 0062;	
    // (䘵) CJK COMPATIBILITY IDEOGRAPH-2F9C8	[FB80 C635 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC635, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_459)
{
    // 4636 0021;	
    // (䘶) CJK UNIFIED IDEOGRAPH-4636	[FB80 C636 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4636, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC636, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_460)
{
    // 4636 003F;	
    // (䘶) CJK UNIFIED IDEOGRAPH-4636	[FB80 C636 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4636, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC636, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_461)
{
    // 4636 0061;	
    // (䘶) CJK UNIFIED IDEOGRAPH-4636	[FB80 C636 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4636, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC636, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_462)
{
    // 4636 0041;	
    // (䘶) CJK UNIFIED IDEOGRAPH-4636	[FB80 C636 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4636, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC636, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_463)
{
    // 4636 0062;	
    // (䘶) CJK UNIFIED IDEOGRAPH-4636	[FB80 C636 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4636, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC636, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_464)
{
    // 4637 0021;	
    // (䘷) CJK UNIFIED IDEOGRAPH-4637	[FB80 C637 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4637, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC637, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_465)
{
    // 4637 003F;	
    // (䘷) CJK UNIFIED IDEOGRAPH-4637	[FB80 C637 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4637, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC637, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_466)
{
    // 4637 0061;	
    // (䘷) CJK UNIFIED IDEOGRAPH-4637	[FB80 C637 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4637, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC637, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_467)
{
    // 4637 0041;	
    // (䘷) CJK UNIFIED IDEOGRAPH-4637	[FB80 C637 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4637, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC637, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_468)
{
    // 4637 0062;	
    // (䘷) CJK UNIFIED IDEOGRAPH-4637	[FB80 C637 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4637, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC637, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_469)
{
    // 4638 0021;	
    // (䘸) CJK UNIFIED IDEOGRAPH-4638	[FB80 C638 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4638, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC638, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_470)
{
    // 4638 003F;	
    // (䘸) CJK UNIFIED IDEOGRAPH-4638	[FB80 C638 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4638, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC638, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_471)
{
    // 4638 0061;	
    // (䘸) CJK UNIFIED IDEOGRAPH-4638	[FB80 C638 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4638, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC638, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_472)
{
    // 4638 0041;	
    // (䘸) CJK UNIFIED IDEOGRAPH-4638	[FB80 C638 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4638, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC638, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_473)
{
    // 4638 0062;	
    // (䘸) CJK UNIFIED IDEOGRAPH-4638	[FB80 C638 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4638, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC638, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_474)
{
    // 4639 0021;	
    // (䘹) CJK UNIFIED IDEOGRAPH-4639	[FB80 C639 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4639, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC639, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_475)
{
    // 4639 003F;	
    // (䘹) CJK UNIFIED IDEOGRAPH-4639	[FB80 C639 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4639, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC639, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_476)
{
    // 4639 0061;	
    // (䘹) CJK UNIFIED IDEOGRAPH-4639	[FB80 C639 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4639, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC639, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_477)
{
    // 4639 0041;	
    // (䘹) CJK UNIFIED IDEOGRAPH-4639	[FB80 C639 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4639, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC639, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_478)
{
    // 4639 0062;	
    // (䘹) CJK UNIFIED IDEOGRAPH-4639	[FB80 C639 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4639, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC639, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_479)
{
    // 463A 0021;	
    // (䘺) CJK UNIFIED IDEOGRAPH-463A	[FB80 C63A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x463A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC63A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_480)
{
    // 463A 003F;	
    // (䘺) CJK UNIFIED IDEOGRAPH-463A	[FB80 C63A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x463A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC63A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_481)
{
    // 463A 0061;	
    // (䘺) CJK UNIFIED IDEOGRAPH-463A	[FB80 C63A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x463A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC63A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_482)
{
    // 463A 0041;	
    // (䘺) CJK UNIFIED IDEOGRAPH-463A	[FB80 C63A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x463A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC63A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_483)
{
    // 463A 0062;	
    // (䘺) CJK UNIFIED IDEOGRAPH-463A	[FB80 C63A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x463A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC63A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_484)
{
    // 463B 0021;	
    // (䘻) CJK UNIFIED IDEOGRAPH-463B	[FB80 C63B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x463B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC63B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_485)
{
    // 463B 003F;	
    // (䘻) CJK UNIFIED IDEOGRAPH-463B	[FB80 C63B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x463B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC63B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_486)
{
    // 463B 0061;	
    // (䘻) CJK UNIFIED IDEOGRAPH-463B	[FB80 C63B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x463B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC63B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_487)
{
    // 463B 0041;	
    // (䘻) CJK UNIFIED IDEOGRAPH-463B	[FB80 C63B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x463B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC63B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_488)
{
    // 463B 0062;	
    // (䘻) CJK UNIFIED IDEOGRAPH-463B	[FB80 C63B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x463B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC63B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_489)
{
    // 463C 0021;	
    // (䘼) CJK UNIFIED IDEOGRAPH-463C	[FB80 C63C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x463C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC63C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_490)
{
    // 463C 003F;	
    // (䘼) CJK UNIFIED IDEOGRAPH-463C	[FB80 C63C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x463C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC63C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_491)
{
    // 463C 0061;	
    // (䘼) CJK UNIFIED IDEOGRAPH-463C	[FB80 C63C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x463C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC63C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_492)
{
    // 463C 0041;	
    // (䘼) CJK UNIFIED IDEOGRAPH-463C	[FB80 C63C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x463C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC63C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_493)
{
    // 463C 0062;	
    // (䘼) CJK UNIFIED IDEOGRAPH-463C	[FB80 C63C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x463C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC63C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_494)
{
    // 463D 0021;	
    // (䘽) CJK UNIFIED IDEOGRAPH-463D	[FB80 C63D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x463D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC63D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_495)
{
    // 463D 003F;	
    // (䘽) CJK UNIFIED IDEOGRAPH-463D	[FB80 C63D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x463D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC63D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_496)
{
    // 463D 0061;	
    // (䘽) CJK UNIFIED IDEOGRAPH-463D	[FB80 C63D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x463D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC63D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_497)
{
    // 463D 0041;	
    // (䘽) CJK UNIFIED IDEOGRAPH-463D	[FB80 C63D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x463D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC63D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_498)
{
    // 463D 0062;	
    // (䘽) CJK UNIFIED IDEOGRAPH-463D	[FB80 C63D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x463D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC63D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_373_499)
{
    // 463E 0021;	
    // (䘾) CJK UNIFIED IDEOGRAPH-463E	[FB80 C63E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x463E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC63E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

