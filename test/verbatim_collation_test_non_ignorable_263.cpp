// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_263_000)
{
    // A394 003F;	
    // (ꎔ) YI SYLLABLE NRAT	[4387 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA394, 0x003F };
    uint32_t const ces[9] = { 0x4387, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_001)
{
    // A394 0061;	
    // (ꎔ) YI SYLLABLE NRAT	[4387 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA394, 0x0061 };
    uint32_t const ces[9] = { 0x4387, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_002)
{
    // A394 0041;	
    // (ꎔ) YI SYLLABLE NRAT	[4387 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA394, 0x0041 };
    uint32_t const ces[9] = { 0x4387, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_003)
{
    // A394 0062;	
    // (ꎔ) YI SYLLABLE NRAT	[4387 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA394, 0x0062 };
    uint32_t const ces[9] = { 0x4387, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_004)
{
    // A395 0021;	
    // (ꎕ) YI SYLLABLE NRAX	[4388 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA395, 0x0021 };
    uint32_t const ces[9] = { 0x4388, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_005)
{
    // A395 003F;	
    // (ꎕ) YI SYLLABLE NRAX	[4388 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA395, 0x003F };
    uint32_t const ces[9] = { 0x4388, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_006)
{
    // A395 0061;	
    // (ꎕ) YI SYLLABLE NRAX	[4388 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA395, 0x0061 };
    uint32_t const ces[9] = { 0x4388, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_007)
{
    // A395 0041;	
    // (ꎕ) YI SYLLABLE NRAX	[4388 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA395, 0x0041 };
    uint32_t const ces[9] = { 0x4388, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_008)
{
    // A395 0062;	
    // (ꎕ) YI SYLLABLE NRAX	[4388 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA395, 0x0062 };
    uint32_t const ces[9] = { 0x4388, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_009)
{
    // A396 0021;	
    // (ꎖ) YI SYLLABLE NRA	[4389 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA396, 0x0021 };
    uint32_t const ces[9] = { 0x4389, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_010)
{
    // A396 003F;	
    // (ꎖ) YI SYLLABLE NRA	[4389 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA396, 0x003F };
    uint32_t const ces[9] = { 0x4389, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_011)
{
    // A396 0061;	
    // (ꎖ) YI SYLLABLE NRA	[4389 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA396, 0x0061 };
    uint32_t const ces[9] = { 0x4389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_012)
{
    // A396 0041;	
    // (ꎖ) YI SYLLABLE NRA	[4389 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA396, 0x0041 };
    uint32_t const ces[9] = { 0x4389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_013)
{
    // A396 0062;	
    // (ꎖ) YI SYLLABLE NRA	[4389 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA396, 0x0062 };
    uint32_t const ces[9] = { 0x4389, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_014)
{
    // A397 0021;	
    // (ꎗ) YI SYLLABLE NRAP	[438A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA397, 0x0021 };
    uint32_t const ces[9] = { 0x438A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_015)
{
    // A397 003F;	
    // (ꎗ) YI SYLLABLE NRAP	[438A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA397, 0x003F };
    uint32_t const ces[9] = { 0x438A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_016)
{
    // A397 0061;	
    // (ꎗ) YI SYLLABLE NRAP	[438A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA397, 0x0061 };
    uint32_t const ces[9] = { 0x438A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_017)
{
    // A397 0041;	
    // (ꎗ) YI SYLLABLE NRAP	[438A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA397, 0x0041 };
    uint32_t const ces[9] = { 0x438A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_018)
{
    // A397 0062;	
    // (ꎗ) YI SYLLABLE NRAP	[438A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA397, 0x0062 };
    uint32_t const ces[9] = { 0x438A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_019)
{
    // A398 0021;	
    // (ꎘ) YI SYLLABLE NROX	[438B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA398, 0x0021 };
    uint32_t const ces[9] = { 0x438B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_020)
{
    // A398 003F;	
    // (ꎘ) YI SYLLABLE NROX	[438B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA398, 0x003F };
    uint32_t const ces[9] = { 0x438B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_021)
{
    // A398 0061;	
    // (ꎘ) YI SYLLABLE NROX	[438B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA398, 0x0061 };
    uint32_t const ces[9] = { 0x438B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_022)
{
    // A398 0041;	
    // (ꎘ) YI SYLLABLE NROX	[438B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA398, 0x0041 };
    uint32_t const ces[9] = { 0x438B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_023)
{
    // A398 0062;	
    // (ꎘ) YI SYLLABLE NROX	[438B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA398, 0x0062 };
    uint32_t const ces[9] = { 0x438B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_024)
{
    // A399 0021;	
    // (ꎙ) YI SYLLABLE NRO	[438C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA399, 0x0021 };
    uint32_t const ces[9] = { 0x438C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_025)
{
    // A399 003F;	
    // (ꎙ) YI SYLLABLE NRO	[438C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA399, 0x003F };
    uint32_t const ces[9] = { 0x438C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_026)
{
    // A399 0061;	
    // (ꎙ) YI SYLLABLE NRO	[438C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA399, 0x0061 };
    uint32_t const ces[9] = { 0x438C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_027)
{
    // A399 0041;	
    // (ꎙ) YI SYLLABLE NRO	[438C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA399, 0x0041 };
    uint32_t const ces[9] = { 0x438C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_028)
{
    // A399 0062;	
    // (ꎙ) YI SYLLABLE NRO	[438C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA399, 0x0062 };
    uint32_t const ces[9] = { 0x438C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_029)
{
    // A39A 0021;	
    // (ꎚ) YI SYLLABLE NROP	[438D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA39A, 0x0021 };
    uint32_t const ces[9] = { 0x438D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_030)
{
    // A39A 003F;	
    // (ꎚ) YI SYLLABLE NROP	[438D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA39A, 0x003F };
    uint32_t const ces[9] = { 0x438D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_031)
{
    // A39A 0061;	
    // (ꎚ) YI SYLLABLE NROP	[438D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA39A, 0x0061 };
    uint32_t const ces[9] = { 0x438D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_032)
{
    // A39A 0041;	
    // (ꎚ) YI SYLLABLE NROP	[438D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA39A, 0x0041 };
    uint32_t const ces[9] = { 0x438D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_033)
{
    // A39A 0062;	
    // (ꎚ) YI SYLLABLE NROP	[438D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA39A, 0x0062 };
    uint32_t const ces[9] = { 0x438D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_034)
{
    // A39B 0021;	
    // (ꎛ) YI SYLLABLE NRET	[438E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA39B, 0x0021 };
    uint32_t const ces[9] = { 0x438E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_035)
{
    // A39B 003F;	
    // (ꎛ) YI SYLLABLE NRET	[438E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA39B, 0x003F };
    uint32_t const ces[9] = { 0x438E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_036)
{
    // A39B 0061;	
    // (ꎛ) YI SYLLABLE NRET	[438E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA39B, 0x0061 };
    uint32_t const ces[9] = { 0x438E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_037)
{
    // A39B 0041;	
    // (ꎛ) YI SYLLABLE NRET	[438E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA39B, 0x0041 };
    uint32_t const ces[9] = { 0x438E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_038)
{
    // A39B 0062;	
    // (ꎛ) YI SYLLABLE NRET	[438E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA39B, 0x0062 };
    uint32_t const ces[9] = { 0x438E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_039)
{
    // A39C 0021;	
    // (ꎜ) YI SYLLABLE NREX	[438F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA39C, 0x0021 };
    uint32_t const ces[9] = { 0x438F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_040)
{
    // A39C 003F;	
    // (ꎜ) YI SYLLABLE NREX	[438F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA39C, 0x003F };
    uint32_t const ces[9] = { 0x438F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_041)
{
    // A39C 0061;	
    // (ꎜ) YI SYLLABLE NREX	[438F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA39C, 0x0061 };
    uint32_t const ces[9] = { 0x438F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_042)
{
    // A39C 0041;	
    // (ꎜ) YI SYLLABLE NREX	[438F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA39C, 0x0041 };
    uint32_t const ces[9] = { 0x438F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_043)
{
    // A39C 0062;	
    // (ꎜ) YI SYLLABLE NREX	[438F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA39C, 0x0062 };
    uint32_t const ces[9] = { 0x438F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_044)
{
    // A39D 0021;	
    // (ꎝ) YI SYLLABLE NRE	[4390 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA39D, 0x0021 };
    uint32_t const ces[9] = { 0x4390, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_045)
{
    // A39D 003F;	
    // (ꎝ) YI SYLLABLE NRE	[4390 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA39D, 0x003F };
    uint32_t const ces[9] = { 0x4390, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_046)
{
    // A39D 0061;	
    // (ꎝ) YI SYLLABLE NRE	[4390 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA39D, 0x0061 };
    uint32_t const ces[9] = { 0x4390, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_047)
{
    // A39D 0041;	
    // (ꎝ) YI SYLLABLE NRE	[4390 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA39D, 0x0041 };
    uint32_t const ces[9] = { 0x4390, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_048)
{
    // A39D 0062;	
    // (ꎝ) YI SYLLABLE NRE	[4390 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA39D, 0x0062 };
    uint32_t const ces[9] = { 0x4390, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_049)
{
    // A39E 0021;	
    // (ꎞ) YI SYLLABLE NREP	[4391 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA39E, 0x0021 };
    uint32_t const ces[9] = { 0x4391, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_050)
{
    // A39E 003F;	
    // (ꎞ) YI SYLLABLE NREP	[4391 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA39E, 0x003F };
    uint32_t const ces[9] = { 0x4391, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_051)
{
    // A39E 0061;	
    // (ꎞ) YI SYLLABLE NREP	[4391 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA39E, 0x0061 };
    uint32_t const ces[9] = { 0x4391, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_052)
{
    // A39E 0041;	
    // (ꎞ) YI SYLLABLE NREP	[4391 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA39E, 0x0041 };
    uint32_t const ces[9] = { 0x4391, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_053)
{
    // A39E 0062;	
    // (ꎞ) YI SYLLABLE NREP	[4391 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA39E, 0x0062 };
    uint32_t const ces[9] = { 0x4391, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_054)
{
    // A39F 0021;	
    // (ꎟ) YI SYLLABLE NRUT	[4392 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA39F, 0x0021 };
    uint32_t const ces[9] = { 0x4392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_055)
{
    // A39F 003F;	
    // (ꎟ) YI SYLLABLE NRUT	[4392 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA39F, 0x003F };
    uint32_t const ces[9] = { 0x4392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_056)
{
    // A39F 0061;	
    // (ꎟ) YI SYLLABLE NRUT	[4392 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA39F, 0x0061 };
    uint32_t const ces[9] = { 0x4392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_057)
{
    // A39F 0041;	
    // (ꎟ) YI SYLLABLE NRUT	[4392 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA39F, 0x0041 };
    uint32_t const ces[9] = { 0x4392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_058)
{
    // A39F 0062;	
    // (ꎟ) YI SYLLABLE NRUT	[4392 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA39F, 0x0062 };
    uint32_t const ces[9] = { 0x4392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_059)
{
    // A3A0 0021;	
    // (ꎠ) YI SYLLABLE NRUX	[4393 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A0, 0x0021 };
    uint32_t const ces[9] = { 0x4393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_060)
{
    // A3A0 003F;	
    // (ꎠ) YI SYLLABLE NRUX	[4393 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A0, 0x003F };
    uint32_t const ces[9] = { 0x4393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_061)
{
    // A3A0 0061;	
    // (ꎠ) YI SYLLABLE NRUX	[4393 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A0, 0x0061 };
    uint32_t const ces[9] = { 0x4393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_062)
{
    // A3A0 0041;	
    // (ꎠ) YI SYLLABLE NRUX	[4393 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3A0, 0x0041 };
    uint32_t const ces[9] = { 0x4393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_063)
{
    // A3A0 0062;	
    // (ꎠ) YI SYLLABLE NRUX	[4393 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A0, 0x0062 };
    uint32_t const ces[9] = { 0x4393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_064)
{
    // A3A1 0021;	
    // (ꎡ) YI SYLLABLE NRU	[4394 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A1, 0x0021 };
    uint32_t const ces[9] = { 0x4394, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_065)
{
    // A3A1 003F;	
    // (ꎡ) YI SYLLABLE NRU	[4394 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A1, 0x003F };
    uint32_t const ces[9] = { 0x4394, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_066)
{
    // A3A1 0061;	
    // (ꎡ) YI SYLLABLE NRU	[4394 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A1, 0x0061 };
    uint32_t const ces[9] = { 0x4394, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_067)
{
    // A3A1 0041;	
    // (ꎡ) YI SYLLABLE NRU	[4394 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3A1, 0x0041 };
    uint32_t const ces[9] = { 0x4394, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_068)
{
    // A3A1 0062;	
    // (ꎡ) YI SYLLABLE NRU	[4394 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A1, 0x0062 };
    uint32_t const ces[9] = { 0x4394, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_069)
{
    // A3A2 0021;	
    // (ꎢ) YI SYLLABLE NRUP	[4395 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A2, 0x0021 };
    uint32_t const ces[9] = { 0x4395, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_070)
{
    // A3A2 003F;	
    // (ꎢ) YI SYLLABLE NRUP	[4395 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A2, 0x003F };
    uint32_t const ces[9] = { 0x4395, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_071)
{
    // A3A2 0061;	
    // (ꎢ) YI SYLLABLE NRUP	[4395 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A2, 0x0061 };
    uint32_t const ces[9] = { 0x4395, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_072)
{
    // A3A2 0041;	
    // (ꎢ) YI SYLLABLE NRUP	[4395 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3A2, 0x0041 };
    uint32_t const ces[9] = { 0x4395, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_073)
{
    // A3A2 0062;	
    // (ꎢ) YI SYLLABLE NRUP	[4395 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A2, 0x0062 };
    uint32_t const ces[9] = { 0x4395, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_074)
{
    // A3A3 0021;	
    // (ꎣ) YI SYLLABLE NRURX	[4396 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A3, 0x0021 };
    uint32_t const ces[9] = { 0x4396, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_075)
{
    // A3A3 003F;	
    // (ꎣ) YI SYLLABLE NRURX	[4396 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A3, 0x003F };
    uint32_t const ces[9] = { 0x4396, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_076)
{
    // A3A3 0061;	
    // (ꎣ) YI SYLLABLE NRURX	[4396 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A3, 0x0061 };
    uint32_t const ces[9] = { 0x4396, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_077)
{
    // A3A3 0041;	
    // (ꎣ) YI SYLLABLE NRURX	[4396 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3A3, 0x0041 };
    uint32_t const ces[9] = { 0x4396, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_078)
{
    // A3A3 0062;	
    // (ꎣ) YI SYLLABLE NRURX	[4396 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A3, 0x0062 };
    uint32_t const ces[9] = { 0x4396, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_079)
{
    // A3A4 0021;	
    // (ꎤ) YI SYLLABLE NRUR	[4397 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A4, 0x0021 };
    uint32_t const ces[9] = { 0x4397, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_080)
{
    // A3A4 003F;	
    // (ꎤ) YI SYLLABLE NRUR	[4397 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A4, 0x003F };
    uint32_t const ces[9] = { 0x4397, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_081)
{
    // A3A4 0061;	
    // (ꎤ) YI SYLLABLE NRUR	[4397 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A4, 0x0061 };
    uint32_t const ces[9] = { 0x4397, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_082)
{
    // A3A4 0041;	
    // (ꎤ) YI SYLLABLE NRUR	[4397 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3A4, 0x0041 };
    uint32_t const ces[9] = { 0x4397, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_083)
{
    // A3A4 0062;	
    // (ꎤ) YI SYLLABLE NRUR	[4397 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A4, 0x0062 };
    uint32_t const ces[9] = { 0x4397, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_084)
{
    // A3A5 0021;	
    // (ꎥ) YI SYLLABLE NRYT	[4398 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A5, 0x0021 };
    uint32_t const ces[9] = { 0x4398, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_085)
{
    // A3A5 003F;	
    // (ꎥ) YI SYLLABLE NRYT	[4398 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A5, 0x003F };
    uint32_t const ces[9] = { 0x4398, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_086)
{
    // A3A5 0061;	
    // (ꎥ) YI SYLLABLE NRYT	[4398 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A5, 0x0061 };
    uint32_t const ces[9] = { 0x4398, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_087)
{
    // A3A5 0041;	
    // (ꎥ) YI SYLLABLE NRYT	[4398 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3A5, 0x0041 };
    uint32_t const ces[9] = { 0x4398, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_088)
{
    // A3A5 0062;	
    // (ꎥ) YI SYLLABLE NRYT	[4398 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A5, 0x0062 };
    uint32_t const ces[9] = { 0x4398, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_089)
{
    // A3A6 0021;	
    // (ꎦ) YI SYLLABLE NRYX	[4399 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A6, 0x0021 };
    uint32_t const ces[9] = { 0x4399, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_090)
{
    // A3A6 003F;	
    // (ꎦ) YI SYLLABLE NRYX	[4399 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A6, 0x003F };
    uint32_t const ces[9] = { 0x4399, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_091)
{
    // A3A6 0061;	
    // (ꎦ) YI SYLLABLE NRYX	[4399 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A6, 0x0061 };
    uint32_t const ces[9] = { 0x4399, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_092)
{
    // A3A6 0041;	
    // (ꎦ) YI SYLLABLE NRYX	[4399 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3A6, 0x0041 };
    uint32_t const ces[9] = { 0x4399, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_093)
{
    // A3A6 0062;	
    // (ꎦ) YI SYLLABLE NRYX	[4399 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A6, 0x0062 };
    uint32_t const ces[9] = { 0x4399, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_094)
{
    // A3A7 0021;	
    // (ꎧ) YI SYLLABLE NRY	[439A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A7, 0x0021 };
    uint32_t const ces[9] = { 0x439A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_095)
{
    // A3A7 003F;	
    // (ꎧ) YI SYLLABLE NRY	[439A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A7, 0x003F };
    uint32_t const ces[9] = { 0x439A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_096)
{
    // A3A7 0061;	
    // (ꎧ) YI SYLLABLE NRY	[439A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A7, 0x0061 };
    uint32_t const ces[9] = { 0x439A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_097)
{
    // A3A7 0041;	
    // (ꎧ) YI SYLLABLE NRY	[439A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3A7, 0x0041 };
    uint32_t const ces[9] = { 0x439A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_098)
{
    // A3A7 0062;	
    // (ꎧ) YI SYLLABLE NRY	[439A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A7, 0x0062 };
    uint32_t const ces[9] = { 0x439A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_099)
{
    // A3A8 0021;	
    // (ꎨ) YI SYLLABLE NRYP	[439B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A8, 0x0021 };
    uint32_t const ces[9] = { 0x439B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_100)
{
    // A3A8 003F;	
    // (ꎨ) YI SYLLABLE NRYP	[439B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A8, 0x003F };
    uint32_t const ces[9] = { 0x439B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_101)
{
    // A3A8 0061;	
    // (ꎨ) YI SYLLABLE NRYP	[439B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A8, 0x0061 };
    uint32_t const ces[9] = { 0x439B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_102)
{
    // A3A8 0041;	
    // (ꎨ) YI SYLLABLE NRYP	[439B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3A8, 0x0041 };
    uint32_t const ces[9] = { 0x439B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_103)
{
    // A3A8 0062;	
    // (ꎨ) YI SYLLABLE NRYP	[439B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A8, 0x0062 };
    uint32_t const ces[9] = { 0x439B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_104)
{
    // A3A9 0021;	
    // (ꎩ) YI SYLLABLE NRYRX	[439C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A9, 0x0021 };
    uint32_t const ces[9] = { 0x439C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_105)
{
    // A3A9 003F;	
    // (ꎩ) YI SYLLABLE NRYRX	[439C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A9, 0x003F };
    uint32_t const ces[9] = { 0x439C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_106)
{
    // A3A9 0061;	
    // (ꎩ) YI SYLLABLE NRYRX	[439C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A9, 0x0061 };
    uint32_t const ces[9] = { 0x439C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_107)
{
    // A3A9 0041;	
    // (ꎩ) YI SYLLABLE NRYRX	[439C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3A9, 0x0041 };
    uint32_t const ces[9] = { 0x439C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_108)
{
    // A3A9 0062;	
    // (ꎩ) YI SYLLABLE NRYRX	[439C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3A9, 0x0062 };
    uint32_t const ces[9] = { 0x439C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_109)
{
    // A3AA 0021;	
    // (ꎪ) YI SYLLABLE NRYR	[439D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3AA, 0x0021 };
    uint32_t const ces[9] = { 0x439D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_110)
{
    // A3AA 003F;	
    // (ꎪ) YI SYLLABLE NRYR	[439D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3AA, 0x003F };
    uint32_t const ces[9] = { 0x439D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_111)
{
    // A3AA 0061;	
    // (ꎪ) YI SYLLABLE NRYR	[439D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3AA, 0x0061 };
    uint32_t const ces[9] = { 0x439D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_112)
{
    // A3AA 0041;	
    // (ꎪ) YI SYLLABLE NRYR	[439D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3AA, 0x0041 };
    uint32_t const ces[9] = { 0x439D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_113)
{
    // A3AA 0062;	
    // (ꎪ) YI SYLLABLE NRYR	[439D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3AA, 0x0062 };
    uint32_t const ces[9] = { 0x439D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_114)
{
    // A3AB 0021;	
    // (ꎫ) YI SYLLABLE SHAT	[439E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3AB, 0x0021 };
    uint32_t const ces[9] = { 0x439E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_115)
{
    // A3AB 003F;	
    // (ꎫ) YI SYLLABLE SHAT	[439E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3AB, 0x003F };
    uint32_t const ces[9] = { 0x439E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_116)
{
    // A3AB 0061;	
    // (ꎫ) YI SYLLABLE SHAT	[439E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3AB, 0x0061 };
    uint32_t const ces[9] = { 0x439E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_117)
{
    // A3AB 0041;	
    // (ꎫ) YI SYLLABLE SHAT	[439E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3AB, 0x0041 };
    uint32_t const ces[9] = { 0x439E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_118)
{
    // A3AB 0062;	
    // (ꎫ) YI SYLLABLE SHAT	[439E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3AB, 0x0062 };
    uint32_t const ces[9] = { 0x439E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_119)
{
    // A3AC 0021;	
    // (ꎬ) YI SYLLABLE SHAX	[439F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3AC, 0x0021 };
    uint32_t const ces[9] = { 0x439F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_120)
{
    // A3AC 003F;	
    // (ꎬ) YI SYLLABLE SHAX	[439F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3AC, 0x003F };
    uint32_t const ces[9] = { 0x439F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_121)
{
    // A3AC 0061;	
    // (ꎬ) YI SYLLABLE SHAX	[439F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3AC, 0x0061 };
    uint32_t const ces[9] = { 0x439F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_122)
{
    // A3AC 0041;	
    // (ꎬ) YI SYLLABLE SHAX	[439F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3AC, 0x0041 };
    uint32_t const ces[9] = { 0x439F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_123)
{
    // A3AC 0062;	
    // (ꎬ) YI SYLLABLE SHAX	[439F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3AC, 0x0062 };
    uint32_t const ces[9] = { 0x439F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_124)
{
    // A3AD 0021;	
    // (ꎭ) YI SYLLABLE SHA	[43A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3AD, 0x0021 };
    uint32_t const ces[9] = { 0x43A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_125)
{
    // A3AD 003F;	
    // (ꎭ) YI SYLLABLE SHA	[43A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3AD, 0x003F };
    uint32_t const ces[9] = { 0x43A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_126)
{
    // A3AD 0061;	
    // (ꎭ) YI SYLLABLE SHA	[43A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3AD, 0x0061 };
    uint32_t const ces[9] = { 0x43A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_127)
{
    // A3AD 0041;	
    // (ꎭ) YI SYLLABLE SHA	[43A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3AD, 0x0041 };
    uint32_t const ces[9] = { 0x43A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_128)
{
    // A3AD 0062;	
    // (ꎭ) YI SYLLABLE SHA	[43A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3AD, 0x0062 };
    uint32_t const ces[9] = { 0x43A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_129)
{
    // A3AE 0021;	
    // (ꎮ) YI SYLLABLE SHAP	[43A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3AE, 0x0021 };
    uint32_t const ces[9] = { 0x43A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_130)
{
    // A3AE 003F;	
    // (ꎮ) YI SYLLABLE SHAP	[43A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3AE, 0x003F };
    uint32_t const ces[9] = { 0x43A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_131)
{
    // A3AE 0061;	
    // (ꎮ) YI SYLLABLE SHAP	[43A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3AE, 0x0061 };
    uint32_t const ces[9] = { 0x43A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_132)
{
    // A3AE 0041;	
    // (ꎮ) YI SYLLABLE SHAP	[43A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3AE, 0x0041 };
    uint32_t const ces[9] = { 0x43A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_133)
{
    // A3AE 0062;	
    // (ꎮ) YI SYLLABLE SHAP	[43A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3AE, 0x0062 };
    uint32_t const ces[9] = { 0x43A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_134)
{
    // A3AF 0021;	
    // (ꎯ) YI SYLLABLE SHUOX	[43A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3AF, 0x0021 };
    uint32_t const ces[9] = { 0x43A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_135)
{
    // A3AF 003F;	
    // (ꎯ) YI SYLLABLE SHUOX	[43A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3AF, 0x003F };
    uint32_t const ces[9] = { 0x43A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_136)
{
    // A3AF 0061;	
    // (ꎯ) YI SYLLABLE SHUOX	[43A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3AF, 0x0061 };
    uint32_t const ces[9] = { 0x43A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_137)
{
    // A3AF 0041;	
    // (ꎯ) YI SYLLABLE SHUOX	[43A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3AF, 0x0041 };
    uint32_t const ces[9] = { 0x43A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_138)
{
    // A3AF 0062;	
    // (ꎯ) YI SYLLABLE SHUOX	[43A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3AF, 0x0062 };
    uint32_t const ces[9] = { 0x43A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_139)
{
    // A3B0 0021;	
    // (ꎰ) YI SYLLABLE SHUO	[43A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B0, 0x0021 };
    uint32_t const ces[9] = { 0x43A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_140)
{
    // A3B0 003F;	
    // (ꎰ) YI SYLLABLE SHUO	[43A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B0, 0x003F };
    uint32_t const ces[9] = { 0x43A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_141)
{
    // A3B0 0061;	
    // (ꎰ) YI SYLLABLE SHUO	[43A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B0, 0x0061 };
    uint32_t const ces[9] = { 0x43A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_142)
{
    // A3B0 0041;	
    // (ꎰ) YI SYLLABLE SHUO	[43A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3B0, 0x0041 };
    uint32_t const ces[9] = { 0x43A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_143)
{
    // A3B0 0062;	
    // (ꎰ) YI SYLLABLE SHUO	[43A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B0, 0x0062 };
    uint32_t const ces[9] = { 0x43A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_144)
{
    // A3B1 0021;	
    // (ꎱ) YI SYLLABLE SHUOP	[43A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B1, 0x0021 };
    uint32_t const ces[9] = { 0x43A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_145)
{
    // A3B1 003F;	
    // (ꎱ) YI SYLLABLE SHUOP	[43A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B1, 0x003F };
    uint32_t const ces[9] = { 0x43A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_146)
{
    // A3B1 0061;	
    // (ꎱ) YI SYLLABLE SHUOP	[43A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B1, 0x0061 };
    uint32_t const ces[9] = { 0x43A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_147)
{
    // A3B1 0041;	
    // (ꎱ) YI SYLLABLE SHUOP	[43A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3B1, 0x0041 };
    uint32_t const ces[9] = { 0x43A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_148)
{
    // A3B1 0062;	
    // (ꎱ) YI SYLLABLE SHUOP	[43A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B1, 0x0062 };
    uint32_t const ces[9] = { 0x43A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_149)
{
    // A3B2 0021;	
    // (ꎲ) YI SYLLABLE SHOT	[43A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B2, 0x0021 };
    uint32_t const ces[9] = { 0x43A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_150)
{
    // A3B2 003F;	
    // (ꎲ) YI SYLLABLE SHOT	[43A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B2, 0x003F };
    uint32_t const ces[9] = { 0x43A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_151)
{
    // A3B2 0061;	
    // (ꎲ) YI SYLLABLE SHOT	[43A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B2, 0x0061 };
    uint32_t const ces[9] = { 0x43A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_152)
{
    // A3B2 0041;	
    // (ꎲ) YI SYLLABLE SHOT	[43A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3B2, 0x0041 };
    uint32_t const ces[9] = { 0x43A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_153)
{
    // A3B2 0062;	
    // (ꎲ) YI SYLLABLE SHOT	[43A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B2, 0x0062 };
    uint32_t const ces[9] = { 0x43A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_154)
{
    // A3B3 0021;	
    // (ꎳ) YI SYLLABLE SHOX	[43A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B3, 0x0021 };
    uint32_t const ces[9] = { 0x43A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_155)
{
    // A3B3 003F;	
    // (ꎳ) YI SYLLABLE SHOX	[43A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B3, 0x003F };
    uint32_t const ces[9] = { 0x43A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_156)
{
    // A3B3 0061;	
    // (ꎳ) YI SYLLABLE SHOX	[43A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B3, 0x0061 };
    uint32_t const ces[9] = { 0x43A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_157)
{
    // A3B3 0041;	
    // (ꎳ) YI SYLLABLE SHOX	[43A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3B3, 0x0041 };
    uint32_t const ces[9] = { 0x43A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_158)
{
    // A3B3 0062;	
    // (ꎳ) YI SYLLABLE SHOX	[43A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B3, 0x0062 };
    uint32_t const ces[9] = { 0x43A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_159)
{
    // A3B4 0021;	
    // (ꎴ) YI SYLLABLE SHO	[43A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B4, 0x0021 };
    uint32_t const ces[9] = { 0x43A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_160)
{
    // A3B4 003F;	
    // (ꎴ) YI SYLLABLE SHO	[43A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B4, 0x003F };
    uint32_t const ces[9] = { 0x43A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_161)
{
    // A3B4 0061;	
    // (ꎴ) YI SYLLABLE SHO	[43A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B4, 0x0061 };
    uint32_t const ces[9] = { 0x43A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_162)
{
    // A3B4 0041;	
    // (ꎴ) YI SYLLABLE SHO	[43A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3B4, 0x0041 };
    uint32_t const ces[9] = { 0x43A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_163)
{
    // A3B4 0062;	
    // (ꎴ) YI SYLLABLE SHO	[43A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B4, 0x0062 };
    uint32_t const ces[9] = { 0x43A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_164)
{
    // A3B5 0021;	
    // (ꎵ) YI SYLLABLE SHOP	[43A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B5, 0x0021 };
    uint32_t const ces[9] = { 0x43A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_165)
{
    // A3B5 003F;	
    // (ꎵ) YI SYLLABLE SHOP	[43A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B5, 0x003F };
    uint32_t const ces[9] = { 0x43A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_166)
{
    // A3B5 0061;	
    // (ꎵ) YI SYLLABLE SHOP	[43A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B5, 0x0061 };
    uint32_t const ces[9] = { 0x43A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_167)
{
    // A3B5 0041;	
    // (ꎵ) YI SYLLABLE SHOP	[43A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3B5, 0x0041 };
    uint32_t const ces[9] = { 0x43A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_168)
{
    // A3B5 0062;	
    // (ꎵ) YI SYLLABLE SHOP	[43A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B5, 0x0062 };
    uint32_t const ces[9] = { 0x43A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_169)
{
    // A3B6 0021;	
    // (ꎶ) YI SYLLABLE SHET	[43A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B6, 0x0021 };
    uint32_t const ces[9] = { 0x43A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_170)
{
    // A3B6 003F;	
    // (ꎶ) YI SYLLABLE SHET	[43A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B6, 0x003F };
    uint32_t const ces[9] = { 0x43A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_171)
{
    // A3B6 0061;	
    // (ꎶ) YI SYLLABLE SHET	[43A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B6, 0x0061 };
    uint32_t const ces[9] = { 0x43A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_172)
{
    // A3B6 0041;	
    // (ꎶ) YI SYLLABLE SHET	[43A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3B6, 0x0041 };
    uint32_t const ces[9] = { 0x43A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_173)
{
    // A3B6 0062;	
    // (ꎶ) YI SYLLABLE SHET	[43A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B6, 0x0062 };
    uint32_t const ces[9] = { 0x43A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_174)
{
    // A3B7 0021;	
    // (ꎷ) YI SYLLABLE SHEX	[43AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B7, 0x0021 };
    uint32_t const ces[9] = { 0x43AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_175)
{
    // A3B7 003F;	
    // (ꎷ) YI SYLLABLE SHEX	[43AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B7, 0x003F };
    uint32_t const ces[9] = { 0x43AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_176)
{
    // A3B7 0061;	
    // (ꎷ) YI SYLLABLE SHEX	[43AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B7, 0x0061 };
    uint32_t const ces[9] = { 0x43AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_177)
{
    // A3B7 0041;	
    // (ꎷ) YI SYLLABLE SHEX	[43AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3B7, 0x0041 };
    uint32_t const ces[9] = { 0x43AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_178)
{
    // A3B7 0062;	
    // (ꎷ) YI SYLLABLE SHEX	[43AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B7, 0x0062 };
    uint32_t const ces[9] = { 0x43AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_179)
{
    // A3B8 0021;	
    // (ꎸ) YI SYLLABLE SHE	[43AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B8, 0x0021 };
    uint32_t const ces[9] = { 0x43AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_180)
{
    // A3B8 003F;	
    // (ꎸ) YI SYLLABLE SHE	[43AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B8, 0x003F };
    uint32_t const ces[9] = { 0x43AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_181)
{
    // A3B8 0061;	
    // (ꎸ) YI SYLLABLE SHE	[43AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B8, 0x0061 };
    uint32_t const ces[9] = { 0x43AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_182)
{
    // A3B8 0041;	
    // (ꎸ) YI SYLLABLE SHE	[43AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3B8, 0x0041 };
    uint32_t const ces[9] = { 0x43AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_183)
{
    // A3B8 0062;	
    // (ꎸ) YI SYLLABLE SHE	[43AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B8, 0x0062 };
    uint32_t const ces[9] = { 0x43AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_184)
{
    // A3B9 0021;	
    // (ꎹ) YI SYLLABLE SHEP	[43AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B9, 0x0021 };
    uint32_t const ces[9] = { 0x43AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_185)
{
    // A3B9 003F;	
    // (ꎹ) YI SYLLABLE SHEP	[43AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B9, 0x003F };
    uint32_t const ces[9] = { 0x43AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_186)
{
    // A3B9 0061;	
    // (ꎹ) YI SYLLABLE SHEP	[43AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B9, 0x0061 };
    uint32_t const ces[9] = { 0x43AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_187)
{
    // A3B9 0041;	
    // (ꎹ) YI SYLLABLE SHEP	[43AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3B9, 0x0041 };
    uint32_t const ces[9] = { 0x43AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_188)
{
    // A3B9 0062;	
    // (ꎹ) YI SYLLABLE SHEP	[43AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3B9, 0x0062 };
    uint32_t const ces[9] = { 0x43AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_189)
{
    // A3BA 0021;	
    // (ꎺ) YI SYLLABLE SHUT	[43AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3BA, 0x0021 };
    uint32_t const ces[9] = { 0x43AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_190)
{
    // A3BA 003F;	
    // (ꎺ) YI SYLLABLE SHUT	[43AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3BA, 0x003F };
    uint32_t const ces[9] = { 0x43AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_191)
{
    // A3BA 0061;	
    // (ꎺ) YI SYLLABLE SHUT	[43AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3BA, 0x0061 };
    uint32_t const ces[9] = { 0x43AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_192)
{
    // A3BA 0041;	
    // (ꎺ) YI SYLLABLE SHUT	[43AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3BA, 0x0041 };
    uint32_t const ces[9] = { 0x43AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_193)
{
    // A3BA 0062;	
    // (ꎺ) YI SYLLABLE SHUT	[43AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3BA, 0x0062 };
    uint32_t const ces[9] = { 0x43AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_194)
{
    // A3BB 0021;	
    // (ꎻ) YI SYLLABLE SHUX	[43AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3BB, 0x0021 };
    uint32_t const ces[9] = { 0x43AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_195)
{
    // A3BB 003F;	
    // (ꎻ) YI SYLLABLE SHUX	[43AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3BB, 0x003F };
    uint32_t const ces[9] = { 0x43AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_196)
{
    // A3BB 0061;	
    // (ꎻ) YI SYLLABLE SHUX	[43AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3BB, 0x0061 };
    uint32_t const ces[9] = { 0x43AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_197)
{
    // A3BB 0041;	
    // (ꎻ) YI SYLLABLE SHUX	[43AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3BB, 0x0041 };
    uint32_t const ces[9] = { 0x43AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_198)
{
    // A3BB 0062;	
    // (ꎻ) YI SYLLABLE SHUX	[43AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3BB, 0x0062 };
    uint32_t const ces[9] = { 0x43AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_199)
{
    // A3BC 0021;	
    // (ꎼ) YI SYLLABLE SHU	[43AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3BC, 0x0021 };
    uint32_t const ces[9] = { 0x43AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_200)
{
    // A3BC 003F;	
    // (ꎼ) YI SYLLABLE SHU	[43AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3BC, 0x003F };
    uint32_t const ces[9] = { 0x43AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_201)
{
    // A3BC 0061;	
    // (ꎼ) YI SYLLABLE SHU	[43AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3BC, 0x0061 };
    uint32_t const ces[9] = { 0x43AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_202)
{
    // A3BC 0041;	
    // (ꎼ) YI SYLLABLE SHU	[43AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3BC, 0x0041 };
    uint32_t const ces[9] = { 0x43AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_203)
{
    // A3BC 0062;	
    // (ꎼ) YI SYLLABLE SHU	[43AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3BC, 0x0062 };
    uint32_t const ces[9] = { 0x43AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_204)
{
    // A3BD 0021;	
    // (ꎽ) YI SYLLABLE SHUP	[43B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3BD, 0x0021 };
    uint32_t const ces[9] = { 0x43B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_205)
{
    // A3BD 003F;	
    // (ꎽ) YI SYLLABLE SHUP	[43B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3BD, 0x003F };
    uint32_t const ces[9] = { 0x43B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_206)
{
    // A3BD 0061;	
    // (ꎽ) YI SYLLABLE SHUP	[43B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3BD, 0x0061 };
    uint32_t const ces[9] = { 0x43B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_207)
{
    // A3BD 0041;	
    // (ꎽ) YI SYLLABLE SHUP	[43B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3BD, 0x0041 };
    uint32_t const ces[9] = { 0x43B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_208)
{
    // A3BD 0062;	
    // (ꎽ) YI SYLLABLE SHUP	[43B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3BD, 0x0062 };
    uint32_t const ces[9] = { 0x43B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_209)
{
    // A3BE 0021;	
    // (ꎾ) YI SYLLABLE SHURX	[43B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3BE, 0x0021 };
    uint32_t const ces[9] = { 0x43B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_210)
{
    // A3BE 003F;	
    // (ꎾ) YI SYLLABLE SHURX	[43B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3BE, 0x003F };
    uint32_t const ces[9] = { 0x43B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_211)
{
    // A3BE 0061;	
    // (ꎾ) YI SYLLABLE SHURX	[43B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3BE, 0x0061 };
    uint32_t const ces[9] = { 0x43B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_212)
{
    // A3BE 0041;	
    // (ꎾ) YI SYLLABLE SHURX	[43B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3BE, 0x0041 };
    uint32_t const ces[9] = { 0x43B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_213)
{
    // A3BE 0062;	
    // (ꎾ) YI SYLLABLE SHURX	[43B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3BE, 0x0062 };
    uint32_t const ces[9] = { 0x43B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_214)
{
    // A3BF 0021;	
    // (ꎿ) YI SYLLABLE SHUR	[43B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3BF, 0x0021 };
    uint32_t const ces[9] = { 0x43B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_215)
{
    // A3BF 003F;	
    // (ꎿ) YI SYLLABLE SHUR	[43B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3BF, 0x003F };
    uint32_t const ces[9] = { 0x43B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_216)
{
    // A3BF 0061;	
    // (ꎿ) YI SYLLABLE SHUR	[43B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3BF, 0x0061 };
    uint32_t const ces[9] = { 0x43B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_217)
{
    // A3BF 0041;	
    // (ꎿ) YI SYLLABLE SHUR	[43B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3BF, 0x0041 };
    uint32_t const ces[9] = { 0x43B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_218)
{
    // A3BF 0062;	
    // (ꎿ) YI SYLLABLE SHUR	[43B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3BF, 0x0062 };
    uint32_t const ces[9] = { 0x43B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_219)
{
    // A3C0 0021;	
    // (ꏀ) YI SYLLABLE SHYT	[43B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C0, 0x0021 };
    uint32_t const ces[9] = { 0x43B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_220)
{
    // A3C0 003F;	
    // (ꏀ) YI SYLLABLE SHYT	[43B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C0, 0x003F };
    uint32_t const ces[9] = { 0x43B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_221)
{
    // A3C0 0061;	
    // (ꏀ) YI SYLLABLE SHYT	[43B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C0, 0x0061 };
    uint32_t const ces[9] = { 0x43B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_222)
{
    // A3C0 0041;	
    // (ꏀ) YI SYLLABLE SHYT	[43B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3C0, 0x0041 };
    uint32_t const ces[9] = { 0x43B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_223)
{
    // A3C0 0062;	
    // (ꏀ) YI SYLLABLE SHYT	[43B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C0, 0x0062 };
    uint32_t const ces[9] = { 0x43B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_224)
{
    // A3C1 0021;	
    // (ꏁ) YI SYLLABLE SHYX	[43B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C1, 0x0021 };
    uint32_t const ces[9] = { 0x43B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_225)
{
    // A3C1 003F;	
    // (ꏁ) YI SYLLABLE SHYX	[43B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C1, 0x003F };
    uint32_t const ces[9] = { 0x43B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_226)
{
    // A3C1 0061;	
    // (ꏁ) YI SYLLABLE SHYX	[43B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C1, 0x0061 };
    uint32_t const ces[9] = { 0x43B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_227)
{
    // A3C1 0041;	
    // (ꏁ) YI SYLLABLE SHYX	[43B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3C1, 0x0041 };
    uint32_t const ces[9] = { 0x43B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_228)
{
    // A3C1 0062;	
    // (ꏁ) YI SYLLABLE SHYX	[43B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C1, 0x0062 };
    uint32_t const ces[9] = { 0x43B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_229)
{
    // A3C2 0021;	
    // (ꏂ) YI SYLLABLE SHY	[43B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C2, 0x0021 };
    uint32_t const ces[9] = { 0x43B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_230)
{
    // A3C2 003F;	
    // (ꏂ) YI SYLLABLE SHY	[43B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C2, 0x003F };
    uint32_t const ces[9] = { 0x43B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_231)
{
    // A3C2 0061;	
    // (ꏂ) YI SYLLABLE SHY	[43B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C2, 0x0061 };
    uint32_t const ces[9] = { 0x43B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_232)
{
    // A3C2 0041;	
    // (ꏂ) YI SYLLABLE SHY	[43B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3C2, 0x0041 };
    uint32_t const ces[9] = { 0x43B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_233)
{
    // A3C2 0062;	
    // (ꏂ) YI SYLLABLE SHY	[43B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C2, 0x0062 };
    uint32_t const ces[9] = { 0x43B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_234)
{
    // A3C3 0021;	
    // (ꏃ) YI SYLLABLE SHYP	[43B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C3, 0x0021 };
    uint32_t const ces[9] = { 0x43B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_235)
{
    // A3C3 003F;	
    // (ꏃ) YI SYLLABLE SHYP	[43B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C3, 0x003F };
    uint32_t const ces[9] = { 0x43B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_236)
{
    // A3C3 0061;	
    // (ꏃ) YI SYLLABLE SHYP	[43B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C3, 0x0061 };
    uint32_t const ces[9] = { 0x43B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_237)
{
    // A3C3 0041;	
    // (ꏃ) YI SYLLABLE SHYP	[43B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3C3, 0x0041 };
    uint32_t const ces[9] = { 0x43B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_238)
{
    // A3C3 0062;	
    // (ꏃ) YI SYLLABLE SHYP	[43B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C3, 0x0062 };
    uint32_t const ces[9] = { 0x43B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_239)
{
    // A3C4 0021;	
    // (ꏄ) YI SYLLABLE SHYRX	[43B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C4, 0x0021 };
    uint32_t const ces[9] = { 0x43B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_240)
{
    // A3C4 003F;	
    // (ꏄ) YI SYLLABLE SHYRX	[43B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C4, 0x003F };
    uint32_t const ces[9] = { 0x43B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_241)
{
    // A3C4 0061;	
    // (ꏄ) YI SYLLABLE SHYRX	[43B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C4, 0x0061 };
    uint32_t const ces[9] = { 0x43B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_242)
{
    // A3C4 0041;	
    // (ꏄ) YI SYLLABLE SHYRX	[43B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3C4, 0x0041 };
    uint32_t const ces[9] = { 0x43B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_243)
{
    // A3C4 0062;	
    // (ꏄ) YI SYLLABLE SHYRX	[43B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C4, 0x0062 };
    uint32_t const ces[9] = { 0x43B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_244)
{
    // A3C5 0021;	
    // (ꏅ) YI SYLLABLE SHYR	[43B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C5, 0x0021 };
    uint32_t const ces[9] = { 0x43B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_245)
{
    // A3C5 003F;	
    // (ꏅ) YI SYLLABLE SHYR	[43B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C5, 0x003F };
    uint32_t const ces[9] = { 0x43B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_246)
{
    // A3C5 0061;	
    // (ꏅ) YI SYLLABLE SHYR	[43B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C5, 0x0061 };
    uint32_t const ces[9] = { 0x43B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_247)
{
    // A3C5 0041;	
    // (ꏅ) YI SYLLABLE SHYR	[43B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3C5, 0x0041 };
    uint32_t const ces[9] = { 0x43B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_248)
{
    // A3C5 0062;	
    // (ꏅ) YI SYLLABLE SHYR	[43B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C5, 0x0062 };
    uint32_t const ces[9] = { 0x43B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_249)
{
    // A3C6 0021;	
    // (ꏆ) YI SYLLABLE RAT	[43B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C6, 0x0021 };
    uint32_t const ces[9] = { 0x43B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_250)
{
    // A3C6 003F;	
    // (ꏆ) YI SYLLABLE RAT	[43B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C6, 0x003F };
    uint32_t const ces[9] = { 0x43B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_251)
{
    // A3C6 0061;	
    // (ꏆ) YI SYLLABLE RAT	[43B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C6, 0x0061 };
    uint32_t const ces[9] = { 0x43B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_252)
{
    // A3C6 0041;	
    // (ꏆ) YI SYLLABLE RAT	[43B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3C6, 0x0041 };
    uint32_t const ces[9] = { 0x43B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_253)
{
    // A3C6 0062;	
    // (ꏆ) YI SYLLABLE RAT	[43B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C6, 0x0062 };
    uint32_t const ces[9] = { 0x43B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_254)
{
    // A3C7 0021;	
    // (ꏇ) YI SYLLABLE RAX	[43BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C7, 0x0021 };
    uint32_t const ces[9] = { 0x43BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_255)
{
    // A3C7 003F;	
    // (ꏇ) YI SYLLABLE RAX	[43BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C7, 0x003F };
    uint32_t const ces[9] = { 0x43BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_256)
{
    // A3C7 0061;	
    // (ꏇ) YI SYLLABLE RAX	[43BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C7, 0x0061 };
    uint32_t const ces[9] = { 0x43BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_257)
{
    // A3C7 0041;	
    // (ꏇ) YI SYLLABLE RAX	[43BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3C7, 0x0041 };
    uint32_t const ces[9] = { 0x43BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_258)
{
    // A3C7 0062;	
    // (ꏇ) YI SYLLABLE RAX	[43BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C7, 0x0062 };
    uint32_t const ces[9] = { 0x43BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_259)
{
    // A3C8 0021;	
    // (ꏈ) YI SYLLABLE RA	[43BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C8, 0x0021 };
    uint32_t const ces[9] = { 0x43BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_260)
{
    // A3C8 003F;	
    // (ꏈ) YI SYLLABLE RA	[43BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C8, 0x003F };
    uint32_t const ces[9] = { 0x43BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_261)
{
    // A3C8 0061;	
    // (ꏈ) YI SYLLABLE RA	[43BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C8, 0x0061 };
    uint32_t const ces[9] = { 0x43BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_262)
{
    // A3C8 0041;	
    // (ꏈ) YI SYLLABLE RA	[43BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3C8, 0x0041 };
    uint32_t const ces[9] = { 0x43BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_263)
{
    // A3C8 0062;	
    // (ꏈ) YI SYLLABLE RA	[43BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C8, 0x0062 };
    uint32_t const ces[9] = { 0x43BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_264)
{
    // A3C9 0021;	
    // (ꏉ) YI SYLLABLE RAP	[43BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C9, 0x0021 };
    uint32_t const ces[9] = { 0x43BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_265)
{
    // A3C9 003F;	
    // (ꏉ) YI SYLLABLE RAP	[43BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C9, 0x003F };
    uint32_t const ces[9] = { 0x43BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_266)
{
    // A3C9 0061;	
    // (ꏉ) YI SYLLABLE RAP	[43BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C9, 0x0061 };
    uint32_t const ces[9] = { 0x43BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_267)
{
    // A3C9 0041;	
    // (ꏉ) YI SYLLABLE RAP	[43BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3C9, 0x0041 };
    uint32_t const ces[9] = { 0x43BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_268)
{
    // A3C9 0062;	
    // (ꏉ) YI SYLLABLE RAP	[43BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3C9, 0x0062 };
    uint32_t const ces[9] = { 0x43BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_269)
{
    // A3CA 0021;	
    // (ꏊ) YI SYLLABLE RUOX	[43BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3CA, 0x0021 };
    uint32_t const ces[9] = { 0x43BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_270)
{
    // A3CA 003F;	
    // (ꏊ) YI SYLLABLE RUOX	[43BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3CA, 0x003F };
    uint32_t const ces[9] = { 0x43BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_271)
{
    // A3CA 0061;	
    // (ꏊ) YI SYLLABLE RUOX	[43BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3CA, 0x0061 };
    uint32_t const ces[9] = { 0x43BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_272)
{
    // A3CA 0041;	
    // (ꏊ) YI SYLLABLE RUOX	[43BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3CA, 0x0041 };
    uint32_t const ces[9] = { 0x43BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_273)
{
    // A3CA 0062;	
    // (ꏊ) YI SYLLABLE RUOX	[43BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3CA, 0x0062 };
    uint32_t const ces[9] = { 0x43BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_274)
{
    // A3CB 0021;	
    // (ꏋ) YI SYLLABLE RUO	[43BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3CB, 0x0021 };
    uint32_t const ces[9] = { 0x43BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_275)
{
    // A3CB 003F;	
    // (ꏋ) YI SYLLABLE RUO	[43BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3CB, 0x003F };
    uint32_t const ces[9] = { 0x43BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_276)
{
    // A3CB 0061;	
    // (ꏋ) YI SYLLABLE RUO	[43BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3CB, 0x0061 };
    uint32_t const ces[9] = { 0x43BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_277)
{
    // A3CB 0041;	
    // (ꏋ) YI SYLLABLE RUO	[43BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3CB, 0x0041 };
    uint32_t const ces[9] = { 0x43BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_278)
{
    // A3CB 0062;	
    // (ꏋ) YI SYLLABLE RUO	[43BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3CB, 0x0062 };
    uint32_t const ces[9] = { 0x43BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_279)
{
    // A3CC 0021;	
    // (ꏌ) YI SYLLABLE RUOP	[43BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3CC, 0x0021 };
    uint32_t const ces[9] = { 0x43BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_280)
{
    // A3CC 003F;	
    // (ꏌ) YI SYLLABLE RUOP	[43BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3CC, 0x003F };
    uint32_t const ces[9] = { 0x43BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_281)
{
    // A3CC 0061;	
    // (ꏌ) YI SYLLABLE RUOP	[43BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3CC, 0x0061 };
    uint32_t const ces[9] = { 0x43BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_282)
{
    // A3CC 0041;	
    // (ꏌ) YI SYLLABLE RUOP	[43BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3CC, 0x0041 };
    uint32_t const ces[9] = { 0x43BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_283)
{
    // A3CC 0062;	
    // (ꏌ) YI SYLLABLE RUOP	[43BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3CC, 0x0062 };
    uint32_t const ces[9] = { 0x43BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_284)
{
    // A3CD 0021;	
    // (ꏍ) YI SYLLABLE ROT	[43C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3CD, 0x0021 };
    uint32_t const ces[9] = { 0x43C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_285)
{
    // A3CD 003F;	
    // (ꏍ) YI SYLLABLE ROT	[43C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3CD, 0x003F };
    uint32_t const ces[9] = { 0x43C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_286)
{
    // A3CD 0061;	
    // (ꏍ) YI SYLLABLE ROT	[43C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3CD, 0x0061 };
    uint32_t const ces[9] = { 0x43C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_287)
{
    // A3CD 0041;	
    // (ꏍ) YI SYLLABLE ROT	[43C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3CD, 0x0041 };
    uint32_t const ces[9] = { 0x43C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_288)
{
    // A3CD 0062;	
    // (ꏍ) YI SYLLABLE ROT	[43C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3CD, 0x0062 };
    uint32_t const ces[9] = { 0x43C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_289)
{
    // A3CE 0021;	
    // (ꏎ) YI SYLLABLE ROX	[43C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3CE, 0x0021 };
    uint32_t const ces[9] = { 0x43C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_290)
{
    // A3CE 003F;	
    // (ꏎ) YI SYLLABLE ROX	[43C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3CE, 0x003F };
    uint32_t const ces[9] = { 0x43C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_291)
{
    // A3CE 0061;	
    // (ꏎ) YI SYLLABLE ROX	[43C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3CE, 0x0061 };
    uint32_t const ces[9] = { 0x43C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_292)
{
    // A3CE 0041;	
    // (ꏎ) YI SYLLABLE ROX	[43C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3CE, 0x0041 };
    uint32_t const ces[9] = { 0x43C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_293)
{
    // A3CE 0062;	
    // (ꏎ) YI SYLLABLE ROX	[43C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3CE, 0x0062 };
    uint32_t const ces[9] = { 0x43C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_294)
{
    // A3CF 0021;	
    // (ꏏ) YI SYLLABLE RO	[43C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3CF, 0x0021 };
    uint32_t const ces[9] = { 0x43C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_295)
{
    // A3CF 003F;	
    // (ꏏ) YI SYLLABLE RO	[43C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3CF, 0x003F };
    uint32_t const ces[9] = { 0x43C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_296)
{
    // A3CF 0061;	
    // (ꏏ) YI SYLLABLE RO	[43C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3CF, 0x0061 };
    uint32_t const ces[9] = { 0x43C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_297)
{
    // A3CF 0041;	
    // (ꏏ) YI SYLLABLE RO	[43C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3CF, 0x0041 };
    uint32_t const ces[9] = { 0x43C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_298)
{
    // A3CF 0062;	
    // (ꏏ) YI SYLLABLE RO	[43C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3CF, 0x0062 };
    uint32_t const ces[9] = { 0x43C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_299)
{
    // A3D0 0021;	
    // (ꏐ) YI SYLLABLE ROP	[43C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D0, 0x0021 };
    uint32_t const ces[9] = { 0x43C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_300)
{
    // A3D0 003F;	
    // (ꏐ) YI SYLLABLE ROP	[43C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D0, 0x003F };
    uint32_t const ces[9] = { 0x43C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_301)
{
    // A3D0 0061;	
    // (ꏐ) YI SYLLABLE ROP	[43C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D0, 0x0061 };
    uint32_t const ces[9] = { 0x43C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_302)
{
    // A3D0 0041;	
    // (ꏐ) YI SYLLABLE ROP	[43C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3D0, 0x0041 };
    uint32_t const ces[9] = { 0x43C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_303)
{
    // A3D0 0062;	
    // (ꏐ) YI SYLLABLE ROP	[43C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D0, 0x0062 };
    uint32_t const ces[9] = { 0x43C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_304)
{
    // A3D1 0021;	
    // (ꏑ) YI SYLLABLE REX	[43C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D1, 0x0021 };
    uint32_t const ces[9] = { 0x43C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_305)
{
    // A3D1 003F;	
    // (ꏑ) YI SYLLABLE REX	[43C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D1, 0x003F };
    uint32_t const ces[9] = { 0x43C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_306)
{
    // A3D1 0061;	
    // (ꏑ) YI SYLLABLE REX	[43C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D1, 0x0061 };
    uint32_t const ces[9] = { 0x43C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_307)
{
    // A3D1 0041;	
    // (ꏑ) YI SYLLABLE REX	[43C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3D1, 0x0041 };
    uint32_t const ces[9] = { 0x43C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_308)
{
    // A3D1 0062;	
    // (ꏑ) YI SYLLABLE REX	[43C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D1, 0x0062 };
    uint32_t const ces[9] = { 0x43C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_309)
{
    // A3D2 0021;	
    // (ꏒ) YI SYLLABLE RE	[43C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D2, 0x0021 };
    uint32_t const ces[9] = { 0x43C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_310)
{
    // A3D2 003F;	
    // (ꏒ) YI SYLLABLE RE	[43C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D2, 0x003F };
    uint32_t const ces[9] = { 0x43C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_311)
{
    // A3D2 0061;	
    // (ꏒ) YI SYLLABLE RE	[43C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D2, 0x0061 };
    uint32_t const ces[9] = { 0x43C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_312)
{
    // A3D2 0041;	
    // (ꏒ) YI SYLLABLE RE	[43C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3D2, 0x0041 };
    uint32_t const ces[9] = { 0x43C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_313)
{
    // A3D2 0062;	
    // (ꏒ) YI SYLLABLE RE	[43C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D2, 0x0062 };
    uint32_t const ces[9] = { 0x43C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_314)
{
    // A3D3 0021;	
    // (ꏓ) YI SYLLABLE REP	[43C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D3, 0x0021 };
    uint32_t const ces[9] = { 0x43C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_315)
{
    // A3D3 003F;	
    // (ꏓ) YI SYLLABLE REP	[43C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D3, 0x003F };
    uint32_t const ces[9] = { 0x43C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_316)
{
    // A3D3 0061;	
    // (ꏓ) YI SYLLABLE REP	[43C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D3, 0x0061 };
    uint32_t const ces[9] = { 0x43C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_317)
{
    // A3D3 0041;	
    // (ꏓ) YI SYLLABLE REP	[43C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3D3, 0x0041 };
    uint32_t const ces[9] = { 0x43C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_318)
{
    // A3D3 0062;	
    // (ꏓ) YI SYLLABLE REP	[43C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D3, 0x0062 };
    uint32_t const ces[9] = { 0x43C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_319)
{
    // A3D4 0021;	
    // (ꏔ) YI SYLLABLE RUT	[43C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D4, 0x0021 };
    uint32_t const ces[9] = { 0x43C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_320)
{
    // A3D4 003F;	
    // (ꏔ) YI SYLLABLE RUT	[43C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D4, 0x003F };
    uint32_t const ces[9] = { 0x43C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_321)
{
    // A3D4 0061;	
    // (ꏔ) YI SYLLABLE RUT	[43C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D4, 0x0061 };
    uint32_t const ces[9] = { 0x43C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_322)
{
    // A3D4 0041;	
    // (ꏔ) YI SYLLABLE RUT	[43C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3D4, 0x0041 };
    uint32_t const ces[9] = { 0x43C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_323)
{
    // A3D4 0062;	
    // (ꏔ) YI SYLLABLE RUT	[43C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D4, 0x0062 };
    uint32_t const ces[9] = { 0x43C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_324)
{
    // A3D5 0021;	
    // (ꏕ) YI SYLLABLE RUX	[43C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D5, 0x0021 };
    uint32_t const ces[9] = { 0x43C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_325)
{
    // A3D5 003F;	
    // (ꏕ) YI SYLLABLE RUX	[43C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D5, 0x003F };
    uint32_t const ces[9] = { 0x43C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_326)
{
    // A3D5 0061;	
    // (ꏕ) YI SYLLABLE RUX	[43C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D5, 0x0061 };
    uint32_t const ces[9] = { 0x43C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_327)
{
    // A3D5 0041;	
    // (ꏕ) YI SYLLABLE RUX	[43C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3D5, 0x0041 };
    uint32_t const ces[9] = { 0x43C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_328)
{
    // A3D5 0062;	
    // (ꏕ) YI SYLLABLE RUX	[43C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D5, 0x0062 };
    uint32_t const ces[9] = { 0x43C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_329)
{
    // A3D6 0021;	
    // (ꏖ) YI SYLLABLE RU	[43C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D6, 0x0021 };
    uint32_t const ces[9] = { 0x43C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_330)
{
    // A3D6 003F;	
    // (ꏖ) YI SYLLABLE RU	[43C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D6, 0x003F };
    uint32_t const ces[9] = { 0x43C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_331)
{
    // A3D6 0061;	
    // (ꏖ) YI SYLLABLE RU	[43C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D6, 0x0061 };
    uint32_t const ces[9] = { 0x43C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_332)
{
    // A3D6 0041;	
    // (ꏖ) YI SYLLABLE RU	[43C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3D6, 0x0041 };
    uint32_t const ces[9] = { 0x43C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_333)
{
    // A3D6 0062;	
    // (ꏖ) YI SYLLABLE RU	[43C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D6, 0x0062 };
    uint32_t const ces[9] = { 0x43C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_334)
{
    // A3D7 0021;	
    // (ꏗ) YI SYLLABLE RUP	[43CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D7, 0x0021 };
    uint32_t const ces[9] = { 0x43CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_335)
{
    // A3D7 003F;	
    // (ꏗ) YI SYLLABLE RUP	[43CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D7, 0x003F };
    uint32_t const ces[9] = { 0x43CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_336)
{
    // A3D7 0061;	
    // (ꏗ) YI SYLLABLE RUP	[43CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D7, 0x0061 };
    uint32_t const ces[9] = { 0x43CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_337)
{
    // A3D7 0041;	
    // (ꏗ) YI SYLLABLE RUP	[43CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3D7, 0x0041 };
    uint32_t const ces[9] = { 0x43CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_338)
{
    // A3D7 0062;	
    // (ꏗ) YI SYLLABLE RUP	[43CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D7, 0x0062 };
    uint32_t const ces[9] = { 0x43CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_339)
{
    // A3D8 0021;	
    // (ꏘ) YI SYLLABLE RURX	[43CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D8, 0x0021 };
    uint32_t const ces[9] = { 0x43CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_340)
{
    // A3D8 003F;	
    // (ꏘ) YI SYLLABLE RURX	[43CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D8, 0x003F };
    uint32_t const ces[9] = { 0x43CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_341)
{
    // A3D8 0061;	
    // (ꏘ) YI SYLLABLE RURX	[43CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D8, 0x0061 };
    uint32_t const ces[9] = { 0x43CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_342)
{
    // A3D8 0041;	
    // (ꏘ) YI SYLLABLE RURX	[43CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3D8, 0x0041 };
    uint32_t const ces[9] = { 0x43CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_343)
{
    // A3D8 0062;	
    // (ꏘ) YI SYLLABLE RURX	[43CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D8, 0x0062 };
    uint32_t const ces[9] = { 0x43CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_344)
{
    // A3D9 0021;	
    // (ꏙ) YI SYLLABLE RUR	[43CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D9, 0x0021 };
    uint32_t const ces[9] = { 0x43CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_345)
{
    // A3D9 003F;	
    // (ꏙ) YI SYLLABLE RUR	[43CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D9, 0x003F };
    uint32_t const ces[9] = { 0x43CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_346)
{
    // A3D9 0061;	
    // (ꏙ) YI SYLLABLE RUR	[43CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D9, 0x0061 };
    uint32_t const ces[9] = { 0x43CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_347)
{
    // A3D9 0041;	
    // (ꏙ) YI SYLLABLE RUR	[43CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3D9, 0x0041 };
    uint32_t const ces[9] = { 0x43CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_348)
{
    // A3D9 0062;	
    // (ꏙ) YI SYLLABLE RUR	[43CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3D9, 0x0062 };
    uint32_t const ces[9] = { 0x43CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_349)
{
    // A3DA 0021;	
    // (ꏚ) YI SYLLABLE RYT	[43CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3DA, 0x0021 };
    uint32_t const ces[9] = { 0x43CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_350)
{
    // A3DA 003F;	
    // (ꏚ) YI SYLLABLE RYT	[43CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3DA, 0x003F };
    uint32_t const ces[9] = { 0x43CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_351)
{
    // A3DA 0061;	
    // (ꏚ) YI SYLLABLE RYT	[43CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3DA, 0x0061 };
    uint32_t const ces[9] = { 0x43CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_352)
{
    // A3DA 0041;	
    // (ꏚ) YI SYLLABLE RYT	[43CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3DA, 0x0041 };
    uint32_t const ces[9] = { 0x43CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_353)
{
    // A3DA 0062;	
    // (ꏚ) YI SYLLABLE RYT	[43CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3DA, 0x0062 };
    uint32_t const ces[9] = { 0x43CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_354)
{
    // A3DB 0021;	
    // (ꏛ) YI SYLLABLE RYX	[43CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3DB, 0x0021 };
    uint32_t const ces[9] = { 0x43CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_355)
{
    // A3DB 003F;	
    // (ꏛ) YI SYLLABLE RYX	[43CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3DB, 0x003F };
    uint32_t const ces[9] = { 0x43CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_356)
{
    // A3DB 0061;	
    // (ꏛ) YI SYLLABLE RYX	[43CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3DB, 0x0061 };
    uint32_t const ces[9] = { 0x43CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_357)
{
    // A3DB 0041;	
    // (ꏛ) YI SYLLABLE RYX	[43CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3DB, 0x0041 };
    uint32_t const ces[9] = { 0x43CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_358)
{
    // A3DB 0062;	
    // (ꏛ) YI SYLLABLE RYX	[43CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3DB, 0x0062 };
    uint32_t const ces[9] = { 0x43CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_359)
{
    // A3DC 0021;	
    // (ꏜ) YI SYLLABLE RY	[43CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3DC, 0x0021 };
    uint32_t const ces[9] = { 0x43CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_360)
{
    // A3DC 003F;	
    // (ꏜ) YI SYLLABLE RY	[43CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3DC, 0x003F };
    uint32_t const ces[9] = { 0x43CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_361)
{
    // A3DC 0061;	
    // (ꏜ) YI SYLLABLE RY	[43CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3DC, 0x0061 };
    uint32_t const ces[9] = { 0x43CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_362)
{
    // A3DC 0041;	
    // (ꏜ) YI SYLLABLE RY	[43CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3DC, 0x0041 };
    uint32_t const ces[9] = { 0x43CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_363)
{
    // A3DC 0062;	
    // (ꏜ) YI SYLLABLE RY	[43CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3DC, 0x0062 };
    uint32_t const ces[9] = { 0x43CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_364)
{
    // A3DD 0021;	
    // (ꏝ) YI SYLLABLE RYP	[43D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3DD, 0x0021 };
    uint32_t const ces[9] = { 0x43D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_365)
{
    // A3DD 003F;	
    // (ꏝ) YI SYLLABLE RYP	[43D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3DD, 0x003F };
    uint32_t const ces[9] = { 0x43D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_366)
{
    // A3DD 0061;	
    // (ꏝ) YI SYLLABLE RYP	[43D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3DD, 0x0061 };
    uint32_t const ces[9] = { 0x43D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_367)
{
    // A3DD 0041;	
    // (ꏝ) YI SYLLABLE RYP	[43D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3DD, 0x0041 };
    uint32_t const ces[9] = { 0x43D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_368)
{
    // A3DD 0062;	
    // (ꏝ) YI SYLLABLE RYP	[43D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3DD, 0x0062 };
    uint32_t const ces[9] = { 0x43D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_369)
{
    // A3DE 0021;	
    // (ꏞ) YI SYLLABLE RYRX	[43D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3DE, 0x0021 };
    uint32_t const ces[9] = { 0x43D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_370)
{
    // A3DE 003F;	
    // (ꏞ) YI SYLLABLE RYRX	[43D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3DE, 0x003F };
    uint32_t const ces[9] = { 0x43D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_371)
{
    // A3DE 0061;	
    // (ꏞ) YI SYLLABLE RYRX	[43D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3DE, 0x0061 };
    uint32_t const ces[9] = { 0x43D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_372)
{
    // A3DE 0041;	
    // (ꏞ) YI SYLLABLE RYRX	[43D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3DE, 0x0041 };
    uint32_t const ces[9] = { 0x43D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_373)
{
    // A3DE 0062;	
    // (ꏞ) YI SYLLABLE RYRX	[43D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3DE, 0x0062 };
    uint32_t const ces[9] = { 0x43D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_374)
{
    // A3DF 0021;	
    // (ꏟ) YI SYLLABLE RYR	[43D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3DF, 0x0021 };
    uint32_t const ces[9] = { 0x43D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_375)
{
    // A3DF 003F;	
    // (ꏟ) YI SYLLABLE RYR	[43D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3DF, 0x003F };
    uint32_t const ces[9] = { 0x43D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_376)
{
    // A3DF 0061;	
    // (ꏟ) YI SYLLABLE RYR	[43D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3DF, 0x0061 };
    uint32_t const ces[9] = { 0x43D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_377)
{
    // A3DF 0041;	
    // (ꏟ) YI SYLLABLE RYR	[43D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3DF, 0x0041 };
    uint32_t const ces[9] = { 0x43D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_378)
{
    // A3DF 0062;	
    // (ꏟ) YI SYLLABLE RYR	[43D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3DF, 0x0062 };
    uint32_t const ces[9] = { 0x43D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_379)
{
    // A3E0 0021;	
    // (ꏠ) YI SYLLABLE JIT	[43D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E0, 0x0021 };
    uint32_t const ces[9] = { 0x43D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_380)
{
    // A3E0 003F;	
    // (ꏠ) YI SYLLABLE JIT	[43D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E0, 0x003F };
    uint32_t const ces[9] = { 0x43D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_381)
{
    // A3E0 0061;	
    // (ꏠ) YI SYLLABLE JIT	[43D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E0, 0x0061 };
    uint32_t const ces[9] = { 0x43D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_382)
{
    // A3E0 0041;	
    // (ꏠ) YI SYLLABLE JIT	[43D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3E0, 0x0041 };
    uint32_t const ces[9] = { 0x43D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_383)
{
    // A3E0 0062;	
    // (ꏠ) YI SYLLABLE JIT	[43D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E0, 0x0062 };
    uint32_t const ces[9] = { 0x43D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_384)
{
    // A3E1 0021;	
    // (ꏡ) YI SYLLABLE JIX	[43D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E1, 0x0021 };
    uint32_t const ces[9] = { 0x43D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_385)
{
    // A3E1 003F;	
    // (ꏡ) YI SYLLABLE JIX	[43D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E1, 0x003F };
    uint32_t const ces[9] = { 0x43D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_386)
{
    // A3E1 0061;	
    // (ꏡ) YI SYLLABLE JIX	[43D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E1, 0x0061 };
    uint32_t const ces[9] = { 0x43D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_387)
{
    // A3E1 0041;	
    // (ꏡ) YI SYLLABLE JIX	[43D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3E1, 0x0041 };
    uint32_t const ces[9] = { 0x43D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_388)
{
    // A3E1 0062;	
    // (ꏡ) YI SYLLABLE JIX	[43D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E1, 0x0062 };
    uint32_t const ces[9] = { 0x43D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_389)
{
    // A3E2 0021;	
    // (ꏢ) YI SYLLABLE JI	[43D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E2, 0x0021 };
    uint32_t const ces[9] = { 0x43D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_390)
{
    // A3E2 003F;	
    // (ꏢ) YI SYLLABLE JI	[43D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E2, 0x003F };
    uint32_t const ces[9] = { 0x43D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_391)
{
    // A3E2 0061;	
    // (ꏢ) YI SYLLABLE JI	[43D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E2, 0x0061 };
    uint32_t const ces[9] = { 0x43D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_392)
{
    // A3E2 0041;	
    // (ꏢ) YI SYLLABLE JI	[43D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3E2, 0x0041 };
    uint32_t const ces[9] = { 0x43D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_393)
{
    // A3E2 0062;	
    // (ꏢ) YI SYLLABLE JI	[43D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E2, 0x0062 };
    uint32_t const ces[9] = { 0x43D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_394)
{
    // A3E3 0021;	
    // (ꏣ) YI SYLLABLE JIP	[43D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E3, 0x0021 };
    uint32_t const ces[9] = { 0x43D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_395)
{
    // A3E3 003F;	
    // (ꏣ) YI SYLLABLE JIP	[43D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E3, 0x003F };
    uint32_t const ces[9] = { 0x43D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_396)
{
    // A3E3 0061;	
    // (ꏣ) YI SYLLABLE JIP	[43D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E3, 0x0061 };
    uint32_t const ces[9] = { 0x43D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_397)
{
    // A3E3 0041;	
    // (ꏣ) YI SYLLABLE JIP	[43D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3E3, 0x0041 };
    uint32_t const ces[9] = { 0x43D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_398)
{
    // A3E3 0062;	
    // (ꏣ) YI SYLLABLE JIP	[43D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E3, 0x0062 };
    uint32_t const ces[9] = { 0x43D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_399)
{
    // A3E4 0021;	
    // (ꏤ) YI SYLLABLE JIET	[43D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E4, 0x0021 };
    uint32_t const ces[9] = { 0x43D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_400)
{
    // A3E4 003F;	
    // (ꏤ) YI SYLLABLE JIET	[43D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E4, 0x003F };
    uint32_t const ces[9] = { 0x43D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_401)
{
    // A3E4 0061;	
    // (ꏤ) YI SYLLABLE JIET	[43D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E4, 0x0061 };
    uint32_t const ces[9] = { 0x43D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_402)
{
    // A3E4 0041;	
    // (ꏤ) YI SYLLABLE JIET	[43D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3E4, 0x0041 };
    uint32_t const ces[9] = { 0x43D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_403)
{
    // A3E4 0062;	
    // (ꏤ) YI SYLLABLE JIET	[43D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E4, 0x0062 };
    uint32_t const ces[9] = { 0x43D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_404)
{
    // A3E5 0021;	
    // (ꏥ) YI SYLLABLE JIEX	[43D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E5, 0x0021 };
    uint32_t const ces[9] = { 0x43D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_405)
{
    // A3E5 003F;	
    // (ꏥ) YI SYLLABLE JIEX	[43D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E5, 0x003F };
    uint32_t const ces[9] = { 0x43D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_406)
{
    // A3E5 0061;	
    // (ꏥ) YI SYLLABLE JIEX	[43D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E5, 0x0061 };
    uint32_t const ces[9] = { 0x43D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_407)
{
    // A3E5 0041;	
    // (ꏥ) YI SYLLABLE JIEX	[43D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3E5, 0x0041 };
    uint32_t const ces[9] = { 0x43D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_408)
{
    // A3E5 0062;	
    // (ꏥ) YI SYLLABLE JIEX	[43D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E5, 0x0062 };
    uint32_t const ces[9] = { 0x43D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_409)
{
    // A3E6 0021;	
    // (ꏦ) YI SYLLABLE JIE	[43D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E6, 0x0021 };
    uint32_t const ces[9] = { 0x43D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_410)
{
    // A3E6 003F;	
    // (ꏦ) YI SYLLABLE JIE	[43D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E6, 0x003F };
    uint32_t const ces[9] = { 0x43D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_411)
{
    // A3E6 0061;	
    // (ꏦ) YI SYLLABLE JIE	[43D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E6, 0x0061 };
    uint32_t const ces[9] = { 0x43D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_412)
{
    // A3E6 0041;	
    // (ꏦ) YI SYLLABLE JIE	[43D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3E6, 0x0041 };
    uint32_t const ces[9] = { 0x43D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_413)
{
    // A3E6 0062;	
    // (ꏦ) YI SYLLABLE JIE	[43D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E6, 0x0062 };
    uint32_t const ces[9] = { 0x43D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_414)
{
    // A3E7 0021;	
    // (ꏧ) YI SYLLABLE JIEP	[43DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E7, 0x0021 };
    uint32_t const ces[9] = { 0x43DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_415)
{
    // A3E7 003F;	
    // (ꏧ) YI SYLLABLE JIEP	[43DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E7, 0x003F };
    uint32_t const ces[9] = { 0x43DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_416)
{
    // A3E7 0061;	
    // (ꏧ) YI SYLLABLE JIEP	[43DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E7, 0x0061 };
    uint32_t const ces[9] = { 0x43DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_417)
{
    // A3E7 0041;	
    // (ꏧ) YI SYLLABLE JIEP	[43DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3E7, 0x0041 };
    uint32_t const ces[9] = { 0x43DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_418)
{
    // A3E7 0062;	
    // (ꏧ) YI SYLLABLE JIEP	[43DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E7, 0x0062 };
    uint32_t const ces[9] = { 0x43DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_419)
{
    // A3E8 0021;	
    // (ꏨ) YI SYLLABLE JUOT	[43DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E8, 0x0021 };
    uint32_t const ces[9] = { 0x43DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_420)
{
    // A3E8 003F;	
    // (ꏨ) YI SYLLABLE JUOT	[43DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E8, 0x003F };
    uint32_t const ces[9] = { 0x43DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_421)
{
    // A3E8 0061;	
    // (ꏨ) YI SYLLABLE JUOT	[43DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E8, 0x0061 };
    uint32_t const ces[9] = { 0x43DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_422)
{
    // A3E8 0041;	
    // (ꏨ) YI SYLLABLE JUOT	[43DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3E8, 0x0041 };
    uint32_t const ces[9] = { 0x43DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_423)
{
    // A3E8 0062;	
    // (ꏨ) YI SYLLABLE JUOT	[43DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E8, 0x0062 };
    uint32_t const ces[9] = { 0x43DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_424)
{
    // A3E9 0021;	
    // (ꏩ) YI SYLLABLE JUOX	[43DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E9, 0x0021 };
    uint32_t const ces[9] = { 0x43DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_425)
{
    // A3E9 003F;	
    // (ꏩ) YI SYLLABLE JUOX	[43DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E9, 0x003F };
    uint32_t const ces[9] = { 0x43DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_426)
{
    // A3E9 0061;	
    // (ꏩ) YI SYLLABLE JUOX	[43DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E9, 0x0061 };
    uint32_t const ces[9] = { 0x43DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_427)
{
    // A3E9 0041;	
    // (ꏩ) YI SYLLABLE JUOX	[43DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3E9, 0x0041 };
    uint32_t const ces[9] = { 0x43DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_428)
{
    // A3E9 0062;	
    // (ꏩ) YI SYLLABLE JUOX	[43DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3E9, 0x0062 };
    uint32_t const ces[9] = { 0x43DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_429)
{
    // A3EA 0021;	
    // (ꏪ) YI SYLLABLE JUO	[43DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3EA, 0x0021 };
    uint32_t const ces[9] = { 0x43DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_430)
{
    // A3EA 003F;	
    // (ꏪ) YI SYLLABLE JUO	[43DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3EA, 0x003F };
    uint32_t const ces[9] = { 0x43DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_431)
{
    // A3EA 0061;	
    // (ꏪ) YI SYLLABLE JUO	[43DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3EA, 0x0061 };
    uint32_t const ces[9] = { 0x43DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_432)
{
    // A3EA 0041;	
    // (ꏪ) YI SYLLABLE JUO	[43DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3EA, 0x0041 };
    uint32_t const ces[9] = { 0x43DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_433)
{
    // A3EA 0062;	
    // (ꏪ) YI SYLLABLE JUO	[43DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3EA, 0x0062 };
    uint32_t const ces[9] = { 0x43DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_434)
{
    // A3EB 0021;	
    // (ꏫ) YI SYLLABLE JUOP	[43DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3EB, 0x0021 };
    uint32_t const ces[9] = { 0x43DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_435)
{
    // A3EB 003F;	
    // (ꏫ) YI SYLLABLE JUOP	[43DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3EB, 0x003F };
    uint32_t const ces[9] = { 0x43DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_436)
{
    // A3EB 0061;	
    // (ꏫ) YI SYLLABLE JUOP	[43DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3EB, 0x0061 };
    uint32_t const ces[9] = { 0x43DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_437)
{
    // A3EB 0041;	
    // (ꏫ) YI SYLLABLE JUOP	[43DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3EB, 0x0041 };
    uint32_t const ces[9] = { 0x43DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_438)
{
    // A3EB 0062;	
    // (ꏫ) YI SYLLABLE JUOP	[43DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3EB, 0x0062 };
    uint32_t const ces[9] = { 0x43DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_439)
{
    // A3EC 0021;	
    // (ꏬ) YI SYLLABLE JOT	[43DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3EC, 0x0021 };
    uint32_t const ces[9] = { 0x43DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_440)
{
    // A3EC 003F;	
    // (ꏬ) YI SYLLABLE JOT	[43DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3EC, 0x003F };
    uint32_t const ces[9] = { 0x43DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_441)
{
    // A3EC 0061;	
    // (ꏬ) YI SYLLABLE JOT	[43DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3EC, 0x0061 };
    uint32_t const ces[9] = { 0x43DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_442)
{
    // A3EC 0041;	
    // (ꏬ) YI SYLLABLE JOT	[43DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3EC, 0x0041 };
    uint32_t const ces[9] = { 0x43DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_443)
{
    // A3EC 0062;	
    // (ꏬ) YI SYLLABLE JOT	[43DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3EC, 0x0062 };
    uint32_t const ces[9] = { 0x43DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_444)
{
    // A3ED 0021;	
    // (ꏭ) YI SYLLABLE JOX	[43E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3ED, 0x0021 };
    uint32_t const ces[9] = { 0x43E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_445)
{
    // A3ED 003F;	
    // (ꏭ) YI SYLLABLE JOX	[43E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3ED, 0x003F };
    uint32_t const ces[9] = { 0x43E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_446)
{
    // A3ED 0061;	
    // (ꏭ) YI SYLLABLE JOX	[43E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3ED, 0x0061 };
    uint32_t const ces[9] = { 0x43E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_447)
{
    // A3ED 0041;	
    // (ꏭ) YI SYLLABLE JOX	[43E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3ED, 0x0041 };
    uint32_t const ces[9] = { 0x43E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_448)
{
    // A3ED 0062;	
    // (ꏭ) YI SYLLABLE JOX	[43E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3ED, 0x0062 };
    uint32_t const ces[9] = { 0x43E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_449)
{
    // A3EE 0021;	
    // (ꏮ) YI SYLLABLE JO	[43E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3EE, 0x0021 };
    uint32_t const ces[9] = { 0x43E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_450)
{
    // A3EE 003F;	
    // (ꏮ) YI SYLLABLE JO	[43E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3EE, 0x003F };
    uint32_t const ces[9] = { 0x43E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_451)
{
    // A3EE 0061;	
    // (ꏮ) YI SYLLABLE JO	[43E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3EE, 0x0061 };
    uint32_t const ces[9] = { 0x43E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_452)
{
    // A3EE 0041;	
    // (ꏮ) YI SYLLABLE JO	[43E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3EE, 0x0041 };
    uint32_t const ces[9] = { 0x43E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_453)
{
    // A3EE 0062;	
    // (ꏮ) YI SYLLABLE JO	[43E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3EE, 0x0062 };
    uint32_t const ces[9] = { 0x43E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_454)
{
    // A3EF 0021;	
    // (ꏯ) YI SYLLABLE JOP	[43E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3EF, 0x0021 };
    uint32_t const ces[9] = { 0x43E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_455)
{
    // A3EF 003F;	
    // (ꏯ) YI SYLLABLE JOP	[43E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3EF, 0x003F };
    uint32_t const ces[9] = { 0x43E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_456)
{
    // A3EF 0061;	
    // (ꏯ) YI SYLLABLE JOP	[43E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3EF, 0x0061 };
    uint32_t const ces[9] = { 0x43E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_457)
{
    // A3EF 0041;	
    // (ꏯ) YI SYLLABLE JOP	[43E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3EF, 0x0041 };
    uint32_t const ces[9] = { 0x43E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_458)
{
    // A3EF 0062;	
    // (ꏯ) YI SYLLABLE JOP	[43E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3EF, 0x0062 };
    uint32_t const ces[9] = { 0x43E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_459)
{
    // A3F0 0021;	
    // (ꏰ) YI SYLLABLE JUT	[43E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F0, 0x0021 };
    uint32_t const ces[9] = { 0x43E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_460)
{
    // A3F0 003F;	
    // (ꏰ) YI SYLLABLE JUT	[43E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F0, 0x003F };
    uint32_t const ces[9] = { 0x43E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_461)
{
    // A3F0 0061;	
    // (ꏰ) YI SYLLABLE JUT	[43E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F0, 0x0061 };
    uint32_t const ces[9] = { 0x43E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_462)
{
    // A3F0 0041;	
    // (ꏰ) YI SYLLABLE JUT	[43E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3F0, 0x0041 };
    uint32_t const ces[9] = { 0x43E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_463)
{
    // A3F0 0062;	
    // (ꏰ) YI SYLLABLE JUT	[43E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F0, 0x0062 };
    uint32_t const ces[9] = { 0x43E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_464)
{
    // A3F1 0021;	
    // (ꏱ) YI SYLLABLE JUX	[43E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F1, 0x0021 };
    uint32_t const ces[9] = { 0x43E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_465)
{
    // A3F1 003F;	
    // (ꏱ) YI SYLLABLE JUX	[43E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F1, 0x003F };
    uint32_t const ces[9] = { 0x43E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_466)
{
    // A3F1 0061;	
    // (ꏱ) YI SYLLABLE JUX	[43E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F1, 0x0061 };
    uint32_t const ces[9] = { 0x43E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_467)
{
    // A3F1 0041;	
    // (ꏱ) YI SYLLABLE JUX	[43E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3F1, 0x0041 };
    uint32_t const ces[9] = { 0x43E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_468)
{
    // A3F1 0062;	
    // (ꏱ) YI SYLLABLE JUX	[43E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F1, 0x0062 };
    uint32_t const ces[9] = { 0x43E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_469)
{
    // A3F2 0021;	
    // (ꏲ) YI SYLLABLE JU	[43E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F2, 0x0021 };
    uint32_t const ces[9] = { 0x43E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_470)
{
    // A3F2 003F;	
    // (ꏲ) YI SYLLABLE JU	[43E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F2, 0x003F };
    uint32_t const ces[9] = { 0x43E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_471)
{
    // A3F2 0061;	
    // (ꏲ) YI SYLLABLE JU	[43E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F2, 0x0061 };
    uint32_t const ces[9] = { 0x43E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_472)
{
    // A3F2 0041;	
    // (ꏲ) YI SYLLABLE JU	[43E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3F2, 0x0041 };
    uint32_t const ces[9] = { 0x43E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_473)
{
    // A3F2 0062;	
    // (ꏲ) YI SYLLABLE JU	[43E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F2, 0x0062 };
    uint32_t const ces[9] = { 0x43E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_474)
{
    // A3F3 0021;	
    // (ꏳ) YI SYLLABLE JUP	[43E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F3, 0x0021 };
    uint32_t const ces[9] = { 0x43E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_475)
{
    // A3F3 003F;	
    // (ꏳ) YI SYLLABLE JUP	[43E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F3, 0x003F };
    uint32_t const ces[9] = { 0x43E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_476)
{
    // A3F3 0061;	
    // (ꏳ) YI SYLLABLE JUP	[43E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F3, 0x0061 };
    uint32_t const ces[9] = { 0x43E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_477)
{
    // A3F3 0041;	
    // (ꏳ) YI SYLLABLE JUP	[43E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3F3, 0x0041 };
    uint32_t const ces[9] = { 0x43E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_478)
{
    // A3F3 0062;	
    // (ꏳ) YI SYLLABLE JUP	[43E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F3, 0x0062 };
    uint32_t const ces[9] = { 0x43E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_479)
{
    // A3F4 0021;	
    // (ꏴ) YI SYLLABLE JURX	[43E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F4, 0x0021 };
    uint32_t const ces[9] = { 0x43E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_480)
{
    // A3F4 003F;	
    // (ꏴ) YI SYLLABLE JURX	[43E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F4, 0x003F };
    uint32_t const ces[9] = { 0x43E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_481)
{
    // A3F4 0061;	
    // (ꏴ) YI SYLLABLE JURX	[43E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F4, 0x0061 };
    uint32_t const ces[9] = { 0x43E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_482)
{
    // A3F4 0041;	
    // (ꏴ) YI SYLLABLE JURX	[43E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3F4, 0x0041 };
    uint32_t const ces[9] = { 0x43E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_483)
{
    // A3F4 0062;	
    // (ꏴ) YI SYLLABLE JURX	[43E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F4, 0x0062 };
    uint32_t const ces[9] = { 0x43E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_484)
{
    // A3F5 0021;	
    // (ꏵ) YI SYLLABLE JUR	[43E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F5, 0x0021 };
    uint32_t const ces[9] = { 0x43E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_485)
{
    // A3F5 003F;	
    // (ꏵ) YI SYLLABLE JUR	[43E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F5, 0x003F };
    uint32_t const ces[9] = { 0x43E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_486)
{
    // A3F5 0061;	
    // (ꏵ) YI SYLLABLE JUR	[43E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F5, 0x0061 };
    uint32_t const ces[9] = { 0x43E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_487)
{
    // A3F5 0041;	
    // (ꏵ) YI SYLLABLE JUR	[43E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3F5, 0x0041 };
    uint32_t const ces[9] = { 0x43E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_488)
{
    // A3F5 0062;	
    // (ꏵ) YI SYLLABLE JUR	[43E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F5, 0x0062 };
    uint32_t const ces[9] = { 0x43E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_489)
{
    // A3F6 0021;	
    // (ꏶ) YI SYLLABLE JYT	[43E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F6, 0x0021 };
    uint32_t const ces[9] = { 0x43E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_490)
{
    // A3F6 003F;	
    // (ꏶ) YI SYLLABLE JYT	[43E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F6, 0x003F };
    uint32_t const ces[9] = { 0x43E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_491)
{
    // A3F6 0061;	
    // (ꏶ) YI SYLLABLE JYT	[43E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F6, 0x0061 };
    uint32_t const ces[9] = { 0x43E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_492)
{
    // A3F6 0041;	
    // (ꏶ) YI SYLLABLE JYT	[43E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3F6, 0x0041 };
    uint32_t const ces[9] = { 0x43E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_493)
{
    // A3F6 0062;	
    // (ꏶ) YI SYLLABLE JYT	[43E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F6, 0x0062 };
    uint32_t const ces[9] = { 0x43E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_494)
{
    // A3F7 0021;	
    // (ꏷ) YI SYLLABLE JYX	[43EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F7, 0x0021 };
    uint32_t const ces[9] = { 0x43EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_495)
{
    // A3F7 003F;	
    // (ꏷ) YI SYLLABLE JYX	[43EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F7, 0x003F };
    uint32_t const ces[9] = { 0x43EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_496)
{
    // A3F7 0061;	
    // (ꏷ) YI SYLLABLE JYX	[43EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F7, 0x0061 };
    uint32_t const ces[9] = { 0x43EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_497)
{
    // A3F7 0041;	
    // (ꏷ) YI SYLLABLE JYX	[43EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3F7, 0x0041 };
    uint32_t const ces[9] = { 0x43EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_498)
{
    // A3F7 0062;	
    // (ꏷ) YI SYLLABLE JYX	[43EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F7, 0x0062 };
    uint32_t const ces[9] = { 0x43EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_263_499)
{
    // A3F8 0021;	
    // (ꏸ) YI SYLLABLE JY	[43EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F8, 0x0021 };
    uint32_t const ces[9] = { 0x43EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

