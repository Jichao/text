// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_013_000)
{
    // 07CE  ; [.24B2.0020.0002] 
    // NKO LETTER U

    uint32_t const cps[1] = { 0x7ce };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24b2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_001)
{
    // 07CF  ; [.24B3.0020.0002] 
    // NKO LETTER OO

    uint32_t const cps[1] = { 0x7cf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24b3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_002)
{
    // 07D0  ; [.24B4.0020.0002] 
    // NKO LETTER O

    uint32_t const cps[1] = { 0x7d0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24b4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_003)
{
    // 07D1  ; [.24B5.0020.0002] 
    // NKO LETTER DAGBASINNA

    uint32_t const cps[1] = { 0x7d1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24b5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_004)
{
    // 07D2  ; [.24B6.0020.0002] 
    // NKO LETTER N

    uint32_t const cps[1] = { 0x7d2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24b6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_005)
{
    // 07D3  ; [.24B7.0020.0002] 
    // NKO LETTER BA

    uint32_t const cps[1] = { 0x7d3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24b7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_006)
{
    // 07D4  ; [.24B8.0020.0002] 
    // NKO LETTER PA

    uint32_t const cps[1] = { 0x7d4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24b8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_007)
{
    // 07D5  ; [.24B9.0020.0002] 
    // NKO LETTER TA

    uint32_t const cps[1] = { 0x7d5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24b9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_008)
{
    // 07D6  ; [.24BA.0020.0002] 
    // NKO LETTER JA

    uint32_t const cps[1] = { 0x7d6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24ba), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_009)
{
    // 07D7  ; [.24BB.0020.0002] 
    // NKO LETTER CHA

    uint32_t const cps[1] = { 0x7d7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24bb), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_010)
{
    // 07D8  ; [.24BC.0020.0002] 
    // NKO LETTER DA

    uint32_t const cps[1] = { 0x7d8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24bc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_011)
{
    // 07D9  ; [.24BD.0020.0002] 
    // NKO LETTER RA

    uint32_t const cps[1] = { 0x7d9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24bd), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_012)
{
    // 07DA  ; [.24BE.0020.0002] 
    // NKO LETTER RRA

    uint32_t const cps[1] = { 0x7da };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24be), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_013)
{
    // 07DB  ; [.24BF.0020.0002] 
    // NKO LETTER SA

    uint32_t const cps[1] = { 0x7db };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24bf), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_014)
{
    // 07DC  ; [.24C0.0020.0002] 
    // NKO LETTER GBA

    uint32_t const cps[1] = { 0x7dc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24c0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_015)
{
    // 07DD  ; [.24C1.0020.0002] 
    // NKO LETTER FA

    uint32_t const cps[1] = { 0x7dd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24c1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_016)
{
    // 07DE  ; [.24C2.0020.0002] 
    // NKO LETTER KA

    uint32_t const cps[1] = { 0x7de };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24c2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_017)
{
    // 07DF  ; [.24C3.0020.0002] 
    // NKO LETTER LA

    uint32_t const cps[1] = { 0x7df };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24c3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_018)
{
    // 07E0  ; [.24C4.0020.0002] 
    // NKO LETTER NA WOLOSO

    uint32_t const cps[1] = { 0x7e0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24c4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_019)
{
    // 07E1  ; [.24C5.0020.0002] 
    // NKO LETTER MA

    uint32_t const cps[1] = { 0x7e1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24c5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_020)
{
    // 07E2  ; [.24C6.0020.0002] 
    // NKO LETTER NYA

    uint32_t const cps[1] = { 0x7e2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24c6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_021)
{
    // 07E3  ; [.24C7.0020.0002] 
    // NKO LETTER NA

    uint32_t const cps[1] = { 0x7e3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_022)
{
    // 07E4  ; [.24C8.0020.0002] 
    // NKO LETTER HA

    uint32_t const cps[1] = { 0x7e4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_023)
{
    // 07E5  ; [.24C9.0020.0002] 
    // NKO LETTER WA

    uint32_t const cps[1] = { 0x7e5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_024)
{
    // 07E6  ; [.24CA.0020.0002] 
    // NKO LETTER YA

    uint32_t const cps[1] = { 0x7e6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24ca), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_025)
{
    // 07E7  ; [.24CB.0020.0002] 
    // NKO LETTER NYA WOLOSO

    uint32_t const cps[1] = { 0x7e7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24cb), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_026)
{
    // 07E8  ; [.24BA.0020.0004][.0000.0111.0004] 
    // NKO LETTER JONA JA

    uint32_t const cps[1] = { 0x7e8 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x24ba), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_013_027)
{
    // 07E9  ; [.24BB.0020.0004][.0000.0111.0004] 
    // NKO LETTER JONA CHA

    uint32_t const cps[1] = { 0x7e9 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x24bb), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_013_028)
{
    // 07EA  ; [.24BD.0020.0004][.0000.0111.0004] 
    // NKO LETTER JONA RA

    uint32_t const cps[1] = { 0x7ea };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x24bd), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_013_029)
{
    // 07EB  ; [.0000.00AA.0002] 
    // NKO COMBINING SHORT HIGH TONE

    uint32_t const cps[1] = { 0x7eb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x8a), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_030)
{
    // 07EC  ; [.0000.00AB.0002] 
    // NKO COMBINING SHORT LOW TONE

    uint32_t const cps[1] = { 0x7ec };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x8b), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_031)
{
    // 07ED  ; [.0000.00AC.0002] 
    // NKO COMBINING SHORT RISING TONE

    uint32_t const cps[1] = { 0x7ed };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x8c), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_032)
{
    // 07EE  ; [.0000.00AD.0002] 
    // NKO COMBINING LONG DESCENDING TONE

    uint32_t const cps[1] = { 0x7ee };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x8d), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_033)
{
    // 07EF  ; [.0000.00AE.0002] 
    // NKO COMBINING LONG HIGH TONE

    uint32_t const cps[1] = { 0x7ef };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x8e), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_034)
{
    // 07F0  ; [.0000.00AF.0002] 
    // NKO COMBINING LONG LOW TONE

    uint32_t const cps[1] = { 0x7f0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x8f), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_035)
{
    // 07F1  ; [.0000.00B0.0002] 
    // NKO COMBINING LONG RISING TONE

    uint32_t const cps[1] = { 0x7f1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x90), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_036)
{
    // 07F2  ; [.0000.00B1.0002] 
    // NKO COMBINING NASALIZATION MARK

    uint32_t const cps[1] = { 0x7f2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x91), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_037)
{
    // 07F3  ; [.0000.00B2.0002] 
    // NKO COMBINING DOUBLE DOT ABOVE

    uint32_t const cps[1] = { 0x7f3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x92), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_038)
{
    // 07F4  ; [.24CC.0020.0002] 
    // NKO HIGH TONE APOSTROPHE

    uint32_t const cps[1] = { 0x7f4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_039)
{
    // 07F5  ; [.24CD.0020.0002] 
    // NKO LOW TONE APOSTROPHE

    uint32_t const cps[1] = { 0x7f5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24cd), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_040)
{
    // 07F6  ; [*0528.0020.0002] 
    // NKO SYMBOL OO DENNEN

    uint32_t const cps[1] = { 0x7f6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x528), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_041)
{
    // 07F7  ; [*02C6.0020.0002] 
    // NKO SYMBOL GBAKURUNEN

    uint32_t const cps[1] = { 0x7f7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_042)
{
    // 07F8  ; [*022B.0020.0002] 
    // NKO COMMA

    uint32_t const cps[1] = { 0x7f8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x22b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_043)
{
    // 07F9  ; [*0264.0020.0002] 
    // NKO EXCLAMATION MARK

    uint32_t const cps[1] = { 0x7f9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x264), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_044)
{
    // 07FA  ; [.0000.0000.0000] 
    // NKO LAJANYALAN

    uint32_t const cps[1] = { 0x7fa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_045)
{
    // 0800  ; [.2349.0020.0002] 
    // SAMARITAN LETTER ALAF

    uint32_t const cps[1] = { 0x800 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2349), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_046)
{
    // 0801  ; [.234A.0020.0002] 
    // SAMARITAN LETTER BIT

    uint32_t const cps[1] = { 0x801 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x234a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_047)
{
    // 0802  ; [.234B.0020.0002] 
    // SAMARITAN LETTER GAMAN

    uint32_t const cps[1] = { 0x802 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x234b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_048)
{
    // 0803  ; [.234C.0020.0002] 
    // SAMARITAN LETTER DALAT

    uint32_t const cps[1] = { 0x803 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x234c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_049)
{
    // 0804  ; [.234D.0020.0002] 
    // SAMARITAN LETTER IY

    uint32_t const cps[1] = { 0x804 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x234d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_050)
{
    // 0805  ; [.234E.0020.0002] 
    // SAMARITAN LETTER BAA

    uint32_t const cps[1] = { 0x805 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x234e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_051)
{
    // 0806  ; [.234F.0020.0002] 
    // SAMARITAN LETTER ZEN

    uint32_t const cps[1] = { 0x806 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x234f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_052)
{
    // 0807  ; [.2350.0020.0002] 
    // SAMARITAN LETTER IT

    uint32_t const cps[1] = { 0x807 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2350), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_053)
{
    // 0808  ; [.2351.0020.0002] 
    // SAMARITAN LETTER TIT

    uint32_t const cps[1] = { 0x808 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2351), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_054)
{
    // 0809  ; [.2352.0020.0002] 
    // SAMARITAN LETTER YUT

    uint32_t const cps[1] = { 0x809 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2352), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_055)
{
    // 080A  ; [.2353.0020.0002] 
    // SAMARITAN LETTER KAAF

    uint32_t const cps[1] = { 0x80a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2353), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_056)
{
    // 080B  ; [.2354.0020.0002] 
    // SAMARITAN LETTER LABAT

    uint32_t const cps[1] = { 0x80b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2354), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_057)
{
    // 080C  ; [.2355.0020.0002] 
    // SAMARITAN LETTER MIM

    uint32_t const cps[1] = { 0x80c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2355), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_058)
{
    // 080D  ; [.2356.0020.0002] 
    // SAMARITAN LETTER NUN

    uint32_t const cps[1] = { 0x80d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2356), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_059)
{
    // 080E  ; [.2357.0020.0002] 
    // SAMARITAN LETTER SINGAAT

    uint32_t const cps[1] = { 0x80e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2357), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_060)
{
    // 080F  ; [.2358.0020.0002] 
    // SAMARITAN LETTER IN

    uint32_t const cps[1] = { 0x80f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2358), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_061)
{
    // 0810  ; [.2359.0020.0002] 
    // SAMARITAN LETTER FI

    uint32_t const cps[1] = { 0x810 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2359), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_062)
{
    // 0811  ; [.235A.0020.0002] 
    // SAMARITAN LETTER TSAADIY

    uint32_t const cps[1] = { 0x811 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x235a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_063)
{
    // 0812  ; [.235B.0020.0002] 
    // SAMARITAN LETTER QUF

    uint32_t const cps[1] = { 0x812 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x235b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_064)
{
    // 0813  ; [.235C.0020.0002] 
    // SAMARITAN LETTER RISH

    uint32_t const cps[1] = { 0x813 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x235c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_065)
{
    // 0814  ; [.235D.0020.0002] 
    // SAMARITAN LETTER SHAN

    uint32_t const cps[1] = { 0x814 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x235d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_066)
{
    // 0815  ; [.235E.0020.0002] 
    // SAMARITAN LETTER TAAF

    uint32_t const cps[1] = { 0x815 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x235e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_067)
{
    // 0816  ; [.235F.0020.0002] 
    // SAMARITAN MARK IN

    uint32_t const cps[1] = { 0x816 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x235f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_068)
{
    // 0817  ; [.2360.0020.0002] 
    // SAMARITAN MARK IN-ALAF

    uint32_t const cps[1] = { 0x817 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2360), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_069)
{
    // 0818  ; [.0000.006A.0002] 
    // SAMARITAN MARK OCCLUSION

    uint32_t const cps[1] = { 0x818 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x4a), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_070)
{
    // 0819  ; [.0000.006B.0002] 
    // SAMARITAN MARK DAGESH

    uint32_t const cps[1] = { 0x819 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x4b), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_071)
{
    // 081A  ; [.2361.0020.0002] 
    // SAMARITAN MODIFIER LETTER EPENTHETIC YUT

    uint32_t const cps[1] = { 0x81a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2361), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_072)
{
    // 081B  ; [.2362.0020.0002] 
    // SAMARITAN MARK EPENTHETIC YUT

    uint32_t const cps[1] = { 0x81b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2362), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_073)
{
    // 081C  ; [.0000.0062.0002] 
    // SAMARITAN VOWEL SIGN LONG E

    uint32_t const cps[1] = { 0x81c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x42), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_074)
{
    // 081D  ; [.0000.0062.0002] 
    // SAMARITAN VOWEL SIGN E

    uint32_t const cps[1] = { 0x81d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x42), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_075)
{
    // 081E  ; [.0000.0063.0002] 
    // SAMARITAN VOWEL SIGN OVERLONG AA

    uint32_t const cps[1] = { 0x81e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x43), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_076)
{
    // 081F  ; [.0000.0063.0002] 
    // SAMARITAN VOWEL SIGN LONG AA

    uint32_t const cps[1] = { 0x81f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x43), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_077)
{
    // 0820  ; [.0000.0063.0002] 
    // SAMARITAN VOWEL SIGN AA

    uint32_t const cps[1] = { 0x820 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x43), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_078)
{
    // 0821  ; [.0000.0064.0002] 
    // SAMARITAN VOWEL SIGN OVERLONG A

    uint32_t const cps[1] = { 0x821 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x44), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_079)
{
    // 0822  ; [.0000.0064.0002] 
    // SAMARITAN VOWEL SIGN LONG A

    uint32_t const cps[1] = { 0x822 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x44), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_080)
{
    // 0823  ; [.0000.0064.0002] 
    // SAMARITAN VOWEL SIGN A

    uint32_t const cps[1] = { 0x823 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x44), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_081)
{
    // 0824  ; [.0000.0065.0002] 
    // SAMARITAN MODIFIER LETTER SHORT A

    uint32_t const cps[1] = { 0x824 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x45), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_082)
{
    // 0825  ; [.0000.0065.0002] 
    // SAMARITAN VOWEL SIGN SHORT A

    uint32_t const cps[1] = { 0x825 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x45), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_083)
{
    // 0826  ; [.0000.0066.0002] 
    // SAMARITAN VOWEL SIGN LONG U

    uint32_t const cps[1] = { 0x826 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x46), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_084)
{
    // 0827  ; [.0000.0066.0002] 
    // SAMARITAN VOWEL SIGN U

    uint32_t const cps[1] = { 0x827 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x46), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_085)
{
    // 0828  ; [.0000.0067.0002] 
    // SAMARITAN MODIFIER LETTER I

    uint32_t const cps[1] = { 0x828 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x47), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_086)
{
    // 0829  ; [.0000.0067.0002] 
    // SAMARITAN VOWEL SIGN LONG I

    uint32_t const cps[1] = { 0x829 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x47), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_087)
{
    // 082A  ; [.0000.0067.0002] 
    // SAMARITAN VOWEL SIGN I

    uint32_t const cps[1] = { 0x82a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x47), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_088)
{
    // 082B  ; [.0000.0068.0002] 
    // SAMARITAN VOWEL SIGN O

    uint32_t const cps[1] = { 0x82b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x48), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_089)
{
    // 082C  ; [.0000.0069.0002] 
    // SAMARITAN VOWEL SIGN SUKUN

    uint32_t const cps[1] = { 0x82c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x49), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_090)
{
    // 082D  ; [.0000.006C.0002] 
    // SAMARITAN MARK NEQUDAA

    uint32_t const cps[1] = { 0x82d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x4c), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_091)
{
    // 0830  ; [*0243.0020.0002] 
    // SAMARITAN PUNCTUATION NEQUDAA

    uint32_t const cps[1] = { 0x830 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x243), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_092)
{
    // 0831  ; [*0244.0020.0002] 
    // SAMARITAN PUNCTUATION AFSAAQ

    uint32_t const cps[1] = { 0x831 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x244), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_093)
{
    // 0832  ; [*0245.0020.0002] 
    // SAMARITAN PUNCTUATION ANGED

    uint32_t const cps[1] = { 0x832 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x245), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_094)
{
    // 0833  ; [*0246.0020.0002] 
    // SAMARITAN PUNCTUATION BAU

    uint32_t const cps[1] = { 0x833 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x246), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_095)
{
    // 0834  ; [*0247.0020.0002] 
    // SAMARITAN PUNCTUATION ATMAAU

    uint32_t const cps[1] = { 0x834 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x247), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_096)
{
    // 0835  ; [*0248.0020.0002] 
    // SAMARITAN PUNCTUATION SHIYYAALAA

    uint32_t const cps[1] = { 0x835 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x248), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_097)
{
    // 0836  ; [*0249.0020.0002] 
    // SAMARITAN ABBREVIATION MARK

    uint32_t const cps[1] = { 0x836 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x249), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_098)
{
    // 0837  ; [*024A.0020.0002] 
    // SAMARITAN PUNCTUATION MELODIC QITSA

    uint32_t const cps[1] = { 0x837 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_099)
{
    // 0838  ; [*024B.0020.0002] 
    // SAMARITAN PUNCTUATION ZIQAA

    uint32_t const cps[1] = { 0x838 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_100)
{
    // 0839  ; [*024C.0020.0002] 
    // SAMARITAN PUNCTUATION QITSA

    uint32_t const cps[1] = { 0x839 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_101)
{
    // 083A  ; [*024D.0020.0002] 
    // SAMARITAN PUNCTUATION ZAEF

    uint32_t const cps[1] = { 0x83a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_102)
{
    // 083B  ; [*024E.0020.0002] 
    // SAMARITAN PUNCTUATION TURU

    uint32_t const cps[1] = { 0x83b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_103)
{
    // 083C  ; [*024F.0020.0002] 
    // SAMARITAN PUNCTUATION ARKAANU

    uint32_t const cps[1] = { 0x83c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_104)
{
    // 083D  ; [*0250.0020.0002] 
    // SAMARITAN PUNCTUATION SOF MASHFAAT

    uint32_t const cps[1] = { 0x83d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x250), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_105)
{
    // 083E  ; [*0251.0020.0002] 
    // SAMARITAN PUNCTUATION ANNAAU

    uint32_t const cps[1] = { 0x83e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x251), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_106)
{
    // 0840  ; [.2463.0020.0002] 
    // MANDAIC LETTER HALQA

    uint32_t const cps[1] = { 0x840 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2463), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_107)
{
    // 0841  ; [.2464.0020.0002] 
    // MANDAIC LETTER AB

    uint32_t const cps[1] = { 0x841 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2464), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_108)
{
    // 0842  ; [.2465.0020.0002] 
    // MANDAIC LETTER AG

    uint32_t const cps[1] = { 0x842 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2465), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_109)
{
    // 0843  ; [.2466.0020.0002] 
    // MANDAIC LETTER AD

    uint32_t const cps[1] = { 0x843 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2466), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_110)
{
    // 0844  ; [.2467.0020.0002] 
    // MANDAIC LETTER AH

    uint32_t const cps[1] = { 0x844 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2467), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_111)
{
    // 0845  ; [.2468.0020.0002] 
    // MANDAIC LETTER USHENNA

    uint32_t const cps[1] = { 0x845 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2468), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_112)
{
    // 0846  ; [.2469.0020.0002] 
    // MANDAIC LETTER AZ

    uint32_t const cps[1] = { 0x846 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2469), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_113)
{
    // 0847  ; [.246A.0020.0002] 
    // MANDAIC LETTER IT

    uint32_t const cps[1] = { 0x847 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x246a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_114)
{
    // 0848  ; [.246B.0020.0002] 
    // MANDAIC LETTER ATT

    uint32_t const cps[1] = { 0x848 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x246b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_115)
{
    // 0849  ; [.246C.0020.0002] 
    // MANDAIC LETTER AKSA

    uint32_t const cps[1] = { 0x849 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x246c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_116)
{
    // 084A  ; [.246D.0020.0002] 
    // MANDAIC LETTER AK

    uint32_t const cps[1] = { 0x84a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x246d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_117)
{
    // 084B  ; [.246E.0020.0002] 
    // MANDAIC LETTER AL

    uint32_t const cps[1] = { 0x84b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x246e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_118)
{
    // 084C  ; [.246F.0020.0002] 
    // MANDAIC LETTER AM

    uint32_t const cps[1] = { 0x84c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x246f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_119)
{
    // 084D  ; [.2470.0020.0002] 
    // MANDAIC LETTER AN

    uint32_t const cps[1] = { 0x84d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2470), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_120)
{
    // 084E  ; [.2471.0020.0002] 
    // MANDAIC LETTER AS

    uint32_t const cps[1] = { 0x84e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2471), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_121)
{
    // 084F  ; [.2472.0020.0002] 
    // MANDAIC LETTER IN

    uint32_t const cps[1] = { 0x84f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2472), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_122)
{
    // 0850  ; [.2473.0020.0002] 
    // MANDAIC LETTER AP

    uint32_t const cps[1] = { 0x850 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2473), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_123)
{
    // 0851  ; [.2474.0020.0002] 
    // MANDAIC LETTER ASZ

    uint32_t const cps[1] = { 0x851 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2474), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_124)
{
    // 0852  ; [.2475.0020.0002] 
    // MANDAIC LETTER AQ

    uint32_t const cps[1] = { 0x852 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2475), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_125)
{
    // 0853  ; [.2476.0020.0002] 
    // MANDAIC LETTER AR

    uint32_t const cps[1] = { 0x853 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2476), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_126)
{
    // 0854  ; [.2477.0020.0002] 
    // MANDAIC LETTER ASH

    uint32_t const cps[1] = { 0x854 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2477), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_127)
{
    // 0855  ; [.2478.0020.0002] 
    // MANDAIC LETTER AT

    uint32_t const cps[1] = { 0x855 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2478), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_128)
{
    // 0856  ; [.2479.0020.0002] 
    // MANDAIC LETTER DUSHENNA

    uint32_t const cps[1] = { 0x856 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2479), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_129)
{
    // 0857  ; [.247A.0020.0002] 
    // MANDAIC LETTER KAD

    uint32_t const cps[1] = { 0x857 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x247a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_130)
{
    // 0858  ; [.247B.0020.0002] 
    // MANDAIC LETTER AIN

    uint32_t const cps[1] = { 0x858 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x247b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_131)
{
    // 0859  ; [.0000.0034.0002] 
    // MANDAIC AFFRICATION MARK

    uint32_t const cps[1] = { 0x859 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_132)
{
    // 085A  ; [.0000.0034.0002] 
    // MANDAIC VOCALIZATION MARK

    uint32_t const cps[1] = { 0x85a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_133)
{
    // 085B  ; [.0000.0034.0002] 
    // MANDAIC GEMINATION MARK

    uint32_t const cps[1] = { 0x85b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_134)
{
    // 085E  ; [*03DD.0020.0002] 
    // MANDAIC PUNCTUATION

    uint32_t const cps[1] = { 0x85e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3dd), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_135)
{
    // 0860  ; [.2458.0020.0002] 
    // SYRIAC LETTER MALAYALAM NGA

    uint32_t const cps[1] = { 0x860 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2458), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_136)
{
    // 0861  ; [.2459.0020.0002] 
    // SYRIAC LETTER MALAYALAM JA

    uint32_t const cps[1] = { 0x861 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2459), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_137)
{
    // 0862  ; [.245A.0020.0002] 
    // SYRIAC LETTER MALAYALAM NYA

    uint32_t const cps[1] = { 0x862 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x245a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_138)
{
    // 0863  ; [.245B.0020.0002] 
    // SYRIAC LETTER MALAYALAM TTA

    uint32_t const cps[1] = { 0x863 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x245b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_139)
{
    // 0864  ; [.245C.0020.0002] 
    // SYRIAC LETTER MALAYALAM NNA

    uint32_t const cps[1] = { 0x864 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x245c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_140)
{
    // 0865  ; [.245D.0020.0002] 
    // SYRIAC LETTER MALAYALAM NNNA

    uint32_t const cps[1] = { 0x865 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x245d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_141)
{
    // 0866  ; [.245E.0020.0002] 
    // SYRIAC LETTER MALAYALAM BHA

    uint32_t const cps[1] = { 0x866 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x245e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_142)
{
    // 0867  ; [.245F.0020.0002] 
    // SYRIAC LETTER MALAYALAM RA

    uint32_t const cps[1] = { 0x867 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x245f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_143)
{
    // 0868  ; [.2460.0020.0002] 
    // SYRIAC LETTER MALAYALAM LLA

    uint32_t const cps[1] = { 0x868 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2460), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_144)
{
    // 0869  ; [.2461.0020.0002] 
    // SYRIAC LETTER MALAYALAM LLLA

    uint32_t const cps[1] = { 0x869 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2461), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_145)
{
    // 086A  ; [.2462.0020.0002] 
    // SYRIAC LETTER MALAYALAM SSA

    uint32_t const cps[1] = { 0x86a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2462), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_146)
{
    // 08A0  ; [.237D.0020.0002] 
    // ARABIC LETTER BEH WITH SMALL V BELOW

    uint32_t const cps[1] = { 0x8a0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x237d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_147)
{
    // 08A1  ; [.237F.0020.0002] 
    // ARABIC LETTER BEH WITH HAMZA ABOVE

    uint32_t const cps[1] = { 0x8a1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x237f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_148)
{
    // 08A2  ; [.2391.0020.0002] 
    // ARABIC LETTER JEEM WITH TWO DOTS ABOVE

    uint32_t const cps[1] = { 0x8a2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2391), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_013_149)
{
    // 08A3  ; [.23D3.0020.0002] 
    // ARABIC LETTER TAH WITH TWO DOTS ABOVE

    uint32_t const cps[1] = { 0x8a3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23d3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

