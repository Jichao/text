// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_326_000)
{
    // 2EE5 003F;	
    // (⻥) CJK RADICAL C-SIMPLIFIED FISH	[FB41 9C7C 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EE5, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9C7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_001)
{
    // 2EE5 0061;	
    // (⻥) CJK RADICAL C-SIMPLIFIED FISH	[FB41 9C7C 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EE5, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9C7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_002)
{
    // 2EE5 0041;	
    // (⻥) CJK RADICAL C-SIMPLIFIED FISH	[FB41 9C7C 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EE5, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9C7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_003)
{
    // 2EE5 0062;	
    // (⻥) CJK RADICAL C-SIMPLIFIED FISH	[FB41 9C7C 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EE5, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9C7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_004)
{
    // 2FC3 0021;	
    // (⿃) KANGXI RADICAL BIRD	[FB41 9CE5 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC3, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9CE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_005)
{
    // 2FC3 003F;	
    // (⿃) KANGXI RADICAL BIRD	[FB41 9CE5 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC3, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9CE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_006)
{
    // 2FC3 0061;	
    // (⿃) KANGXI RADICAL BIRD	[FB41 9CE5 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC3, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9CE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_007)
{
    // 2FC3 0041;	
    // (⿃) KANGXI RADICAL BIRD	[FB41 9CE5 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2FC3, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9CE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_008)
{
    // 2FC3 0062;	
    // (⿃) KANGXI RADICAL BIRD	[FB41 9CE5 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC3, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9CE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_009)
{
    // 2FA0C 0021;	
    // (鳽) CJK COMPATIBILITY IDEOGRAPH-2FA0C	[FB41 9CFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA0C, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9CFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_010)
{
    // 2FA0C 003F;	
    // (鳽) CJK COMPATIBILITY IDEOGRAPH-2FA0C	[FB41 9CFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA0C, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9CFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_011)
{
    // 2FA0C 0061;	
    // (鳽) CJK COMPATIBILITY IDEOGRAPH-2FA0C	[FB41 9CFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA0C, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9CFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_012)
{
    // 2FA0C 0041;	
    // (鳽) CJK COMPATIBILITY IDEOGRAPH-2FA0C	[FB41 9CFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FA0C, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9CFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_013)
{
    // 2FA0C 0062;	
    // (鳽) CJK COMPATIBILITY IDEOGRAPH-2FA0C	[FB41 9CFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA0C, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9CFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_014)
{
    // 2FA0F 0021;	
    // (鵧) CJK COMPATIBILITY IDEOGRAPH-2FA0F	[FB41 9D67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA0F, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9D67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_015)
{
    // 2FA0F 003F;	
    // (鵧) CJK COMPATIBILITY IDEOGRAPH-2FA0F	[FB41 9D67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA0F, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9D67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_016)
{
    // 2FA0F 0061;	
    // (鵧) CJK COMPATIBILITY IDEOGRAPH-2FA0F	[FB41 9D67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA0F, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9D67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_017)
{
    // 2FA0F 0041;	
    // (鵧) CJK COMPATIBILITY IDEOGRAPH-2FA0F	[FB41 9D67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FA0F, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9D67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_018)
{
    // 2FA0F 0062;	
    // (鵧) CJK COMPATIBILITY IDEOGRAPH-2FA0F	[FB41 9D67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA0F, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9D67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_019)
{
    // FA2D 0021;	
    // (鶴) CJK COMPATIBILITY IDEOGRAPH-FA2D	[FB41 9DB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA2D, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9DB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_020)
{
    // FA2D 003F;	
    // (鶴) CJK COMPATIBILITY IDEOGRAPH-FA2D	[FB41 9DB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA2D, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9DB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_021)
{
    // FA2D 0061;	
    // (鶴) CJK COMPATIBILITY IDEOGRAPH-FA2D	[FB41 9DB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA2D, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9DB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_022)
{
    // FA2D 0041;	
    // (鶴) CJK COMPATIBILITY IDEOGRAPH-FA2D	[FB41 9DB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA2D, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9DB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_023)
{
    // FA2D 0062;	
    // (鶴) CJK COMPATIBILITY IDEOGRAPH-FA2D	[FB41 9DB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA2D, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9DB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_024)
{
    // F93A 0021;	
    // (鷺) CJK COMPATIBILITY IDEOGRAPH-F93A	[FB41 9DFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF93A, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9DFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_025)
{
    // F93A 003F;	
    // (鷺) CJK COMPATIBILITY IDEOGRAPH-F93A	[FB41 9DFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF93A, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9DFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_026)
{
    // F93A 0061;	
    // (鷺) CJK COMPATIBILITY IDEOGRAPH-F93A	[FB41 9DFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF93A, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9DFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_027)
{
    // F93A 0041;	
    // (鷺) CJK COMPATIBILITY IDEOGRAPH-F93A	[FB41 9DFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF93A, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9DFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_028)
{
    // F93A 0062;	
    // (鷺) CJK COMPATIBILITY IDEOGRAPH-F93A	[FB41 9DFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF93A, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9DFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_029)
{
    // F920 0021;	
    // (鸞) CJK COMPATIBILITY IDEOGRAPH-F920	[FB41 9E1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF920, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9E1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_030)
{
    // F920 003F;	
    // (鸞) CJK COMPATIBILITY IDEOGRAPH-F920	[FB41 9E1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF920, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9E1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_031)
{
    // F920 0061;	
    // (鸞) CJK COMPATIBILITY IDEOGRAPH-F920	[FB41 9E1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF920, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9E1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_032)
{
    // F920 0041;	
    // (鸞) CJK COMPATIBILITY IDEOGRAPH-F920	[FB41 9E1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF920, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9E1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_033)
{
    // F920 0062;	
    // (鸞) CJK COMPATIBILITY IDEOGRAPH-F920	[FB41 9E1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF920, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9E1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_034)
{
    // 2EE6 0021;	
    // (⻦) CJK RADICAL C-SIMPLIFIED BIRD	[FB41 9E1F 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EE6, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_035)
{
    // 2EE6 003F;	
    // (⻦) CJK RADICAL C-SIMPLIFIED BIRD	[FB41 9E1F 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EE6, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9E1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_036)
{
    // 2EE6 0061;	
    // (⻦) CJK RADICAL C-SIMPLIFIED BIRD	[FB41 9E1F 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EE6, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9E1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_037)
{
    // 2EE6 0041;	
    // (⻦) CJK RADICAL C-SIMPLIFIED BIRD	[FB41 9E1F 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EE6, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9E1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_038)
{
    // 2EE6 0062;	
    // (⻦) CJK RADICAL C-SIMPLIFIED BIRD	[FB41 9E1F 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EE6, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9E1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_039)
{
    // 2FC4 0021;	
    // (⿄) KANGXI RADICAL SALT	[FB41 9E75 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC4, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9E75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_040)
{
    // 2EE7 0021;	
    // (⻧) CJK RADICAL C-SIMPLIFIED SALT	[FB41 9E75 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EE7, 0x0021 };
    uint32_t const ces[12] = { 0xFB41, 0x9E75, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_041)
{
    // 2FC4 003F;	
    // (⿄) KANGXI RADICAL SALT	[FB41 9E75 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC4, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9E75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_042)
{
    // 2EE7 003F;	
    // (⻧) CJK RADICAL C-SIMPLIFIED SALT	[FB41 9E75 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EE7, 0x003F };
    uint32_t const ces[12] = { 0xFB41, 0x9E75, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_043)
{
    // 2FC4 0061;	
    // (⿄) KANGXI RADICAL SALT	[FB41 9E75 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC4, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_044)
{
    // 2FC4 0041;	
    // (⿄) KANGXI RADICAL SALT	[FB41 9E75 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2FC4, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_045)
{
    // 2EE7 0061;	
    // (⻧) CJK RADICAL C-SIMPLIFIED SALT	[FB41 9E75 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EE7, 0x0061 };
    uint32_t const ces[12] = { 0xFB41, 0x9E75, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_046)
{
    // 2EE7 0041;	
    // (⻧) CJK RADICAL C-SIMPLIFIED SALT	[FB41 9E75 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2EE7, 0x0041 };
    uint32_t const ces[12] = { 0xFB41, 0x9E75, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_047)
{
    // 2FC4 0062;	
    // (⿄) KANGXI RADICAL SALT	[FB41 9E75 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC4, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9E75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_048)
{
    // 2EE7 0062;	
    // (⻧) CJK RADICAL C-SIMPLIFIED SALT	[FB41 9E75 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EE7, 0x0062 };
    uint32_t const ces[12] = { 0xFB41, 0x9E75, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_049)
{
    // F940 0021;	
    // (鹿) CJK COMPATIBILITY IDEOGRAPH-F940	[FB41 9E7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF940, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9E7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_050)
{
    // 2FC5 0021;	
    // (⿅) KANGXI RADICAL DEER	[FB41 9E7F 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC5, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9E7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_051)
{
    // F940 003F;	
    // (鹿) CJK COMPATIBILITY IDEOGRAPH-F940	[FB41 9E7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF940, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9E7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_052)
{
    // 2FC5 003F;	
    // (⿅) KANGXI RADICAL DEER	[FB41 9E7F 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC5, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9E7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_053)
{
    // F940 0061;	
    // (鹿) CJK COMPATIBILITY IDEOGRAPH-F940	[FB41 9E7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF940, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9E7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_054)
{
    // F940 0041;	
    // (鹿) CJK COMPATIBILITY IDEOGRAPH-F940	[FB41 9E7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF940, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9E7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_055)
{
    // 2FC5 0061;	
    // (⿅) KANGXI RADICAL DEER	[FB41 9E7F 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC5, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9E7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_056)
{
    // 2FC5 0041;	
    // (⿅) KANGXI RADICAL DEER	[FB41 9E7F 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2FC5, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9E7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_057)
{
    // F940 0062;	
    // (鹿) CJK COMPATIBILITY IDEOGRAPH-F940	[FB41 9E7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF940, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9E7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_058)
{
    // 2FC5 0062;	
    // (⿅) KANGXI RADICAL DEER	[FB41 9E7F 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC5, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9E7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_059)
{
    // F988 0021;	
    // (麗) CJK COMPATIBILITY IDEOGRAPH-F988	[FB41 9E97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF988, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9E97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_060)
{
    // F988 003F;	
    // (麗) CJK COMPATIBILITY IDEOGRAPH-F988	[FB41 9E97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF988, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9E97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_061)
{
    // F988 0061;	
    // (麗) CJK COMPATIBILITY IDEOGRAPH-F988	[FB41 9E97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF988, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_062)
{
    // F988 0041;	
    // (麗) CJK COMPATIBILITY IDEOGRAPH-F988	[FB41 9E97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF988, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_063)
{
    // F988 0062;	
    // (麗) CJK COMPATIBILITY IDEOGRAPH-F988	[FB41 9E97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF988, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9E97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_064)
{
    // F9F3 0021;	
    // (麟) CJK COMPATIBILITY IDEOGRAPH-F9F3	[FB41 9E9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9F3, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9E9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_065)
{
    // F9F3 003F;	
    // (麟) CJK COMPATIBILITY IDEOGRAPH-F9F3	[FB41 9E9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9F3, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9E9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_066)
{
    // F9F3 0061;	
    // (麟) CJK COMPATIBILITY IDEOGRAPH-F9F3	[FB41 9E9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9F3, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_067)
{
    // F9F3 0041;	
    // (麟) CJK COMPATIBILITY IDEOGRAPH-F9F3	[FB41 9E9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9F3, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_068)
{
    // F9F3 0062;	
    // (麟) CJK COMPATIBILITY IDEOGRAPH-F9F3	[FB41 9E9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9F3, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9E9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_069)
{
    // 2FC6 0021;	
    // (⿆) KANGXI RADICAL WHEAT	[FB41 9EA5 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC6, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9EA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_070)
{
    // 2FC6 003F;	
    // (⿆) KANGXI RADICAL WHEAT	[FB41 9EA5 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC6, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9EA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_071)
{
    // 2FC6 0061;	
    // (⿆) KANGXI RADICAL WHEAT	[FB41 9EA5 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC6, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_072)
{
    // 2FC6 0041;	
    // (⿆) KANGXI RADICAL WHEAT	[FB41 9EA5 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2FC6, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_073)
{
    // 2FC6 0062;	
    // (⿆) KANGXI RADICAL WHEAT	[FB41 9EA5 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC6, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9EA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_074)
{
    // 2EE8 0021;	
    // (⻨) CJK RADICAL SIMPLIFIED WHEAT	[FB41 9EA6 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EE8, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9EA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_075)
{
    // 2EE8 003F;	
    // (⻨) CJK RADICAL SIMPLIFIED WHEAT	[FB41 9EA6 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EE8, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9EA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_076)
{
    // 2EE8 0061;	
    // (⻨) CJK RADICAL SIMPLIFIED WHEAT	[FB41 9EA6 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EE8, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_077)
{
    // 2EE8 0041;	
    // (⻨) CJK RADICAL SIMPLIFIED WHEAT	[FB41 9EA6 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EE8, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_078)
{
    // 2EE8 0062;	
    // (⻨) CJK RADICAL SIMPLIFIED WHEAT	[FB41 9EA6 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EE8, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9EA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_079)
{
    // 2FA15 0021;	
    // (麻) CJK COMPATIBILITY IDEOGRAPH-2FA15	[FB41 9EBB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA15, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9EBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_080)
{
    // 2FC7 0021;	
    // (⿇) KANGXI RADICAL HEMP	[FB41 9EBB 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC7, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9EBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_081)
{
    // 2FA15 003F;	
    // (麻) CJK COMPATIBILITY IDEOGRAPH-2FA15	[FB41 9EBB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA15, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9EBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_082)
{
    // 2FC7 003F;	
    // (⿇) KANGXI RADICAL HEMP	[FB41 9EBB 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC7, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9EBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_083)
{
    // 2FA15 0061;	
    // (麻) CJK COMPATIBILITY IDEOGRAPH-2FA15	[FB41 9EBB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA15, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_084)
{
    // 2FA15 0041;	
    // (麻) CJK COMPATIBILITY IDEOGRAPH-2FA15	[FB41 9EBB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FA15, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_085)
{
    // 2FC7 0061;	
    // (⿇) KANGXI RADICAL HEMP	[FB41 9EBB 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC7, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_086)
{
    // 2FC7 0041;	
    // (⿇) KANGXI RADICAL HEMP	[FB41 9EBB 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2FC7, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_087)
{
    // 2FA15 0062;	
    // (麻) CJK COMPATIBILITY IDEOGRAPH-2FA15	[FB41 9EBB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA15, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9EBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_088)
{
    // 2FC7 0062;	
    // (⿇) KANGXI RADICAL HEMP	[FB41 9EBB 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC7, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9EBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_089)
{
    // 2FC8 0021;	
    // (⿈) KANGXI RADICAL YELLOW	[FB41 9EC3 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC8, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9EC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_090)
{
    // 2FC8 003F;	
    // (⿈) KANGXI RADICAL YELLOW	[FB41 9EC3 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC8, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9EC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_091)
{
    // 2FC8 0061;	
    // (⿈) KANGXI RADICAL YELLOW	[FB41 9EC3 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC8, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9EC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_092)
{
    // 2FC8 0041;	
    // (⿈) KANGXI RADICAL YELLOW	[FB41 9EC3 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2FC8, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9EC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_093)
{
    // 2FC8 0062;	
    // (⿈) KANGXI RADICAL YELLOW	[FB41 9EC3 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC8, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9EC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_094)
{
    // 2EE9 0021;	
    // (⻩) CJK RADICAL SIMPLIFIED YELLOW	[FB41 9EC4 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EE9, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9EC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_095)
{
    // 2EE9 003F;	
    // (⻩) CJK RADICAL SIMPLIFIED YELLOW	[FB41 9EC4 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EE9, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9EC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_096)
{
    // 2EE9 0061;	
    // (⻩) CJK RADICAL SIMPLIFIED YELLOW	[FB41 9EC4 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EE9, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9EC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_097)
{
    // 2EE9 0041;	
    // (⻩) CJK RADICAL SIMPLIFIED YELLOW	[FB41 9EC4 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EE9, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9EC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_098)
{
    // 2EE9 0062;	
    // (⻩) CJK RADICAL SIMPLIFIED YELLOW	[FB41 9EC4 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EE9, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9EC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_099)
{
    // 2FC9 0021;	
    // (⿉) KANGXI RADICAL MILLET	[FB41 9ECD 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC9, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9ECD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_100)
{
    // 2FC9 003F;	
    // (⿉) KANGXI RADICAL MILLET	[FB41 9ECD 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC9, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9ECD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_101)
{
    // 2FC9 0061;	
    // (⿉) KANGXI RADICAL MILLET	[FB41 9ECD 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC9, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9ECD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_102)
{
    // 2FC9 0041;	
    // (⿉) KANGXI RADICAL MILLET	[FB41 9ECD 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2FC9, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9ECD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_103)
{
    // 2FC9 0062;	
    // (⿉) KANGXI RADICAL MILLET	[FB41 9ECD 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FC9, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9ECD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_104)
{
    // F989 0021;	
    // (黎) CJK COMPATIBILITY IDEOGRAPH-F989	[FB41 9ECE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF989, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9ECE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_105)
{
    // F989 003F;	
    // (黎) CJK COMPATIBILITY IDEOGRAPH-F989	[FB41 9ECE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF989, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9ECE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_106)
{
    // F989 0061;	
    // (黎) CJK COMPATIBILITY IDEOGRAPH-F989	[FB41 9ECE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF989, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9ECE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_107)
{
    // F989 0041;	
    // (黎) CJK COMPATIBILITY IDEOGRAPH-F989	[FB41 9ECE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF989, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9ECE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_108)
{
    // F989 0062;	
    // (黎) CJK COMPATIBILITY IDEOGRAPH-F989	[FB41 9ECE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF989, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9ECE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_109)
{
    // 2FCA 0021;	
    // (⿊) KANGXI RADICAL BLACK	[FB41 9ED1 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FCA, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9ED1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_110)
{
    // 2FCA 003F;	
    // (⿊) KANGXI RADICAL BLACK	[FB41 9ED1 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FCA, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9ED1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_111)
{
    // 2FCA 0061;	
    // (⿊) KANGXI RADICAL BLACK	[FB41 9ED1 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FCA, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9ED1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_112)
{
    // 2FCA 0041;	
    // (⿊) KANGXI RADICAL BLACK	[FB41 9ED1 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2FCA, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9ED1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_113)
{
    // 2FCA 0062;	
    // (⿊) KANGXI RADICAL BLACK	[FB41 9ED1 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FCA, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9ED1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_114)
{
    // 2FA17 0021;	
    // (黹) CJK COMPATIBILITY IDEOGRAPH-2FA17	[FB41 9EF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA17, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9EF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_115)
{
    // 2FCB 0021;	
    // (⿋) KANGXI RADICAL EMBROIDERY	[FB41 9EF9 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FCB, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9EF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_116)
{
    // 2FA17 003F;	
    // (黹) CJK COMPATIBILITY IDEOGRAPH-2FA17	[FB41 9EF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA17, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9EF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_117)
{
    // 2FCB 003F;	
    // (⿋) KANGXI RADICAL EMBROIDERY	[FB41 9EF9 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FCB, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9EF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_118)
{
    // 2FA17 0061;	
    // (黹) CJK COMPATIBILITY IDEOGRAPH-2FA17	[FB41 9EF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA17, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9EF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_119)
{
    // 2FA17 0041;	
    // (黹) CJK COMPATIBILITY IDEOGRAPH-2FA17	[FB41 9EF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FA17, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9EF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_120)
{
    // 2FCB 0061;	
    // (⿋) KANGXI RADICAL EMBROIDERY	[FB41 9EF9 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FCB, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9EF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_121)
{
    // 2FCB 0041;	
    // (⿋) KANGXI RADICAL EMBROIDERY	[FB41 9EF9 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2FCB, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9EF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_122)
{
    // 2FA17 0062;	
    // (黹) CJK COMPATIBILITY IDEOGRAPH-2FA17	[FB41 9EF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA17, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9EF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_123)
{
    // 2FCB 0062;	
    // (⿋) KANGXI RADICAL EMBROIDERY	[FB41 9EF9 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FCB, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9EF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_124)
{
    // 2FCC 0021;	
    // (⿌) KANGXI RADICAL FROG	[FB41 9EFD 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FCC, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9EFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_125)
{
    // 2FCC 003F;	
    // (⿌) KANGXI RADICAL FROG	[FB41 9EFD 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FCC, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9EFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_126)
{
    // 2FCC 0061;	
    // (⿌) KANGXI RADICAL FROG	[FB41 9EFD 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FCC, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9EFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_127)
{
    // 2FCC 0041;	
    // (⿌) KANGXI RADICAL FROG	[FB41 9EFD 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2FCC, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9EFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_128)
{
    // 2FCC 0062;	
    // (⿌) KANGXI RADICAL FROG	[FB41 9EFD 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FCC, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9EFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_129)
{
    // 2FA18 0021;	
    // (黾) CJK COMPATIBILITY IDEOGRAPH-2FA18	[FB41 9EFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA18, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9EFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_130)
{
    // 2EEA 0021;	
    // (⻪) CJK RADICAL C-SIMPLIFIED FROG	[FB41 9EFE 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EEA, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9EFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_131)
{
    // 2FA18 003F;	
    // (黾) CJK COMPATIBILITY IDEOGRAPH-2FA18	[FB41 9EFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA18, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9EFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_132)
{
    // 2EEA 003F;	
    // (⻪) CJK RADICAL C-SIMPLIFIED FROG	[FB41 9EFE 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EEA, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9EFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_133)
{
    // 2FA18 0061;	
    // (黾) CJK COMPATIBILITY IDEOGRAPH-2FA18	[FB41 9EFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA18, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9EFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_134)
{
    // 2FA18 0041;	
    // (黾) CJK COMPATIBILITY IDEOGRAPH-2FA18	[FB41 9EFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FA18, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9EFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_135)
{
    // 2EEA 0061;	
    // (⻪) CJK RADICAL C-SIMPLIFIED FROG	[FB41 9EFE 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EEA, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9EFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_136)
{
    // 2EEA 0041;	
    // (⻪) CJK RADICAL C-SIMPLIFIED FROG	[FB41 9EFE 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EEA, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9EFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_137)
{
    // 2FA18 0062;	
    // (黾) CJK COMPATIBILITY IDEOGRAPH-2FA18	[FB41 9EFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA18, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9EFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_138)
{
    // 2EEA 0062;	
    // (⻪) CJK RADICAL C-SIMPLIFIED FROG	[FB41 9EFE 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EEA, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9EFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_139)
{
    // 2FA19 0021;	
    // (鼅) CJK COMPATIBILITY IDEOGRAPH-2FA19	[FB41 9F05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA19, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9F05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_140)
{
    // 2FA19 003F;	
    // (鼅) CJK COMPATIBILITY IDEOGRAPH-2FA19	[FB41 9F05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA19, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9F05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_141)
{
    // 2FA19 0061;	
    // (鼅) CJK COMPATIBILITY IDEOGRAPH-2FA19	[FB41 9F05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA19, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9F05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_142)
{
    // 2FA19 0041;	
    // (鼅) CJK COMPATIBILITY IDEOGRAPH-2FA19	[FB41 9F05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FA19, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9F05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_143)
{
    // 2FA19 0062;	
    // (鼅) CJK COMPATIBILITY IDEOGRAPH-2FA19	[FB41 9F05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA19, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9F05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_144)
{
    // 2FCD 0021;	
    // (⿍) KANGXI RADICAL TRIPOD	[FB41 9F0E 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FCD, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9F0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_145)
{
    // 2FCD 003F;	
    // (⿍) KANGXI RADICAL TRIPOD	[FB41 9F0E 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FCD, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9F0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_146)
{
    // 2FCD 0061;	
    // (⿍) KANGXI RADICAL TRIPOD	[FB41 9F0E 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FCD, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9F0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_147)
{
    // 2FCD 0041;	
    // (⿍) KANGXI RADICAL TRIPOD	[FB41 9F0E 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2FCD, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9F0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_148)
{
    // 2FCD 0062;	
    // (⿍) KANGXI RADICAL TRIPOD	[FB41 9F0E 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FCD, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9F0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_149)
{
    // 2FA1A 0021;	
    // (鼏) CJK COMPATIBILITY IDEOGRAPH-2FA1A	[FB41 9F0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA1A, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9F0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_150)
{
    // 2FA1A 003F;	
    // (鼏) CJK COMPATIBILITY IDEOGRAPH-2FA1A	[FB41 9F0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA1A, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9F0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_151)
{
    // 2FA1A 0061;	
    // (鼏) CJK COMPATIBILITY IDEOGRAPH-2FA1A	[FB41 9F0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA1A, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9F0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_152)
{
    // 2FA1A 0041;	
    // (鼏) CJK COMPATIBILITY IDEOGRAPH-2FA1A	[FB41 9F0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FA1A, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9F0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_153)
{
    // 2FA1A 0062;	
    // (鼏) CJK COMPATIBILITY IDEOGRAPH-2FA1A	[FB41 9F0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA1A, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9F0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_154)
{
    // 2FCE 0021;	
    // (⿎) KANGXI RADICAL DRUM	[FB41 9F13 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FCE, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9F13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_155)
{
    // 2FCE 003F;	
    // (⿎) KANGXI RADICAL DRUM	[FB41 9F13 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FCE, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9F13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_156)
{
    // 2FCE 0061;	
    // (⿎) KANGXI RADICAL DRUM	[FB41 9F13 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FCE, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9F13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_157)
{
    // 2FCE 0041;	
    // (⿎) KANGXI RADICAL DRUM	[FB41 9F13 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2FCE, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9F13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_158)
{
    // 2FCE 0062;	
    // (⿎) KANGXI RADICAL DRUM	[FB41 9F13 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FCE, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9F13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_159)
{
    // 2FA1B 0021;	
    // (鼖) CJK COMPATIBILITY IDEOGRAPH-2FA1B	[FB41 9F16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA1B, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9F16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_160)
{
    // 2FA1B 003F;	
    // (鼖) CJK COMPATIBILITY IDEOGRAPH-2FA1B	[FB41 9F16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA1B, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9F16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_161)
{
    // 2FA1B 0061;	
    // (鼖) CJK COMPATIBILITY IDEOGRAPH-2FA1B	[FB41 9F16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA1B, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9F16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_162)
{
    // 2FA1B 0041;	
    // (鼖) CJK COMPATIBILITY IDEOGRAPH-2FA1B	[FB41 9F16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FA1B, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9F16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_163)
{
    // 2FA1B 0062;	
    // (鼖) CJK COMPATIBILITY IDEOGRAPH-2FA1B	[FB41 9F16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA1B, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9F16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_164)
{
    // 2FCF 0021;	
    // (⿏) KANGXI RADICAL RAT	[FB41 9F20 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FCF, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9F20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_165)
{
    // 2FCF 003F;	
    // (⿏) KANGXI RADICAL RAT	[FB41 9F20 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FCF, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9F20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_166)
{
    // 2FCF 0061;	
    // (⿏) KANGXI RADICAL RAT	[FB41 9F20 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FCF, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9F20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_167)
{
    // 2FCF 0041;	
    // (⿏) KANGXI RADICAL RAT	[FB41 9F20 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2FCF, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9F20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_168)
{
    // 2FCF 0062;	
    // (⿏) KANGXI RADICAL RAT	[FB41 9F20 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FCF, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9F20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_169)
{
    // 2FA1C 0021;	
    // (鼻) CJK COMPATIBILITY IDEOGRAPH-2FA1C	[FB41 9F3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA1C, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9F3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_170)
{
    // 2FD0 0021;	
    // (⿐) KANGXI RADICAL NOSE	[FB41 9F3B 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FD0, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9F3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_171)
{
    // 2FA1C 003F;	
    // (鼻) CJK COMPATIBILITY IDEOGRAPH-2FA1C	[FB41 9F3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA1C, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9F3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_172)
{
    // 2FD0 003F;	
    // (⿐) KANGXI RADICAL NOSE	[FB41 9F3B 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FD0, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9F3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_173)
{
    // 2FA1C 0061;	
    // (鼻) CJK COMPATIBILITY IDEOGRAPH-2FA1C	[FB41 9F3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA1C, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9F3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_174)
{
    // 2FA1C 0041;	
    // (鼻) CJK COMPATIBILITY IDEOGRAPH-2FA1C	[FB41 9F3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FA1C, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9F3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_175)
{
    // 2FD0 0061;	
    // (⿐) KANGXI RADICAL NOSE	[FB41 9F3B 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FD0, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9F3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_176)
{
    // 2FD0 0041;	
    // (⿐) KANGXI RADICAL NOSE	[FB41 9F3B 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2FD0, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9F3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_177)
{
    // 2FA1C 0062;	
    // (鼻) CJK COMPATIBILITY IDEOGRAPH-2FA1C	[FB41 9F3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA1C, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9F3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_178)
{
    // 2FD0 0062;	
    // (⿐) KANGXI RADICAL NOSE	[FB41 9F3B 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FD0, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9F3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_179)
{
    // FAD8 0021;	
    // (齃) CJK COMPATIBILITY IDEOGRAPH-FAD8	[FB41 9F43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD8, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9F43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_180)
{
    // FAD8 003F;	
    // (齃) CJK COMPATIBILITY IDEOGRAPH-FAD8	[FB41 9F43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD8, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9F43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_181)
{
    // FAD8 0061;	
    // (齃) CJK COMPATIBILITY IDEOGRAPH-FAD8	[FB41 9F43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD8, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9F43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_182)
{
    // FAD8 0041;	
    // (齃) CJK COMPATIBILITY IDEOGRAPH-FAD8	[FB41 9F43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFAD8, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9F43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_183)
{
    // FAD8 0062;	
    // (齃) CJK COMPATIBILITY IDEOGRAPH-FAD8	[FB41 9F43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD8, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9F43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_184)
{
    // 2FD1 0021;	
    // (⿑) KANGXI RADICAL EVEN	[FB41 9F4A 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FD1, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9F4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_185)
{
    // 2EEB 0021;	
    // (⻫) CJK RADICAL J-SIMPLIFIED EVEN	[FB41 9F4A 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EEB, 0x0021 };
    uint32_t const ces[12] = { 0xFB41, 0x9F4A, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_186)
{
    // 2FD1 003F;	
    // (⿑) KANGXI RADICAL EVEN	[FB41 9F4A 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FD1, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9F4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_187)
{
    // 2EEB 003F;	
    // (⻫) CJK RADICAL J-SIMPLIFIED EVEN	[FB41 9F4A 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EEB, 0x003F };
    uint32_t const ces[12] = { 0xFB41, 0x9F4A, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_188)
{
    // 2FD1 0061;	
    // (⿑) KANGXI RADICAL EVEN	[FB41 9F4A 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FD1, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9F4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_189)
{
    // 2FD1 0041;	
    // (⿑) KANGXI RADICAL EVEN	[FB41 9F4A 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2FD1, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9F4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_190)
{
    // 2EEB 0061;	
    // (⻫) CJK RADICAL J-SIMPLIFIED EVEN	[FB41 9F4A 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EEB, 0x0061 };
    uint32_t const ces[12] = { 0xFB41, 0x9F4A, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_191)
{
    // 2EEB 0041;	
    // (⻫) CJK RADICAL J-SIMPLIFIED EVEN	[FB41 9F4A 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2EEB, 0x0041 };
    uint32_t const ces[12] = { 0xFB41, 0x9F4A, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_192)
{
    // 2FD1 0062;	
    // (⿑) KANGXI RADICAL EVEN	[FB41 9F4A 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FD1, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9F4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_193)
{
    // 2EEB 0062;	
    // (⻫) CJK RADICAL J-SIMPLIFIED EVEN	[FB41 9F4A 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EEB, 0x0062 };
    uint32_t const ces[12] = { 0xFB41, 0x9F4A, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_194)
{
    // 2EEC 0021;	
    // (⻬) CJK RADICAL C-SIMPLIFIED EVEN	[FB41 9F50 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EEC, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9F50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_195)
{
    // 2EEC 003F;	
    // (⻬) CJK RADICAL C-SIMPLIFIED EVEN	[FB41 9F50 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EEC, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9F50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_196)
{
    // 2EEC 0061;	
    // (⻬) CJK RADICAL C-SIMPLIFIED EVEN	[FB41 9F50 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EEC, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9F50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_197)
{
    // 2EEC 0041;	
    // (⻬) CJK RADICAL C-SIMPLIFIED EVEN	[FB41 9F50 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EEC, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9F50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_198)
{
    // 2EEC 0062;	
    // (⻬) CJK RADICAL C-SIMPLIFIED EVEN	[FB41 9F50 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EEC, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9F50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_199)
{
    // 2FD2 0021;	
    // (⿒) KANGXI RADICAL TOOTH	[FB41 9F52 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FD2, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9F52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_200)
{
    // 2EED 0021;	
    // (⻭) CJK RADICAL J-SIMPLIFIED TOOTH	[FB41 9F52 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EED, 0x0021 };
    uint32_t const ces[12] = { 0xFB41, 0x9F52, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_201)
{
    // 2FD2 003F;	
    // (⿒) KANGXI RADICAL TOOTH	[FB41 9F52 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FD2, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9F52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_202)
{
    // 2EED 003F;	
    // (⻭) CJK RADICAL J-SIMPLIFIED TOOTH	[FB41 9F52 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EED, 0x003F };
    uint32_t const ces[12] = { 0xFB41, 0x9F52, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_203)
{
    // 2FD2 0061;	
    // (⿒) KANGXI RADICAL TOOTH	[FB41 9F52 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FD2, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9F52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_204)
{
    // 2FD2 0041;	
    // (⿒) KANGXI RADICAL TOOTH	[FB41 9F52 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2FD2, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9F52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_205)
{
    // 2EED 0061;	
    // (⻭) CJK RADICAL J-SIMPLIFIED TOOTH	[FB41 9F52 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EED, 0x0061 };
    uint32_t const ces[12] = { 0xFB41, 0x9F52, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_206)
{
    // 2EED 0041;	
    // (⻭) CJK RADICAL J-SIMPLIFIED TOOTH	[FB41 9F52 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2EED, 0x0041 };
    uint32_t const ces[12] = { 0xFB41, 0x9F52, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_207)
{
    // 2FD2 0062;	
    // (⿒) KANGXI RADICAL TOOTH	[FB41 9F52 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FD2, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9F52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_208)
{
    // 2EED 0062;	
    // (⻭) CJK RADICAL J-SIMPLIFIED TOOTH	[FB41 9F52 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EED, 0x0062 };
    uint32_t const ces[12] = { 0xFB41, 0x9F52, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_209)
{
    // 2EEE 0021;	
    // (⻮) CJK RADICAL C-SIMPLIFIED TOOTH	[FB41 9F7F 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EEE, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9F7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_210)
{
    // 2EEE 003F;	
    // (⻮) CJK RADICAL C-SIMPLIFIED TOOTH	[FB41 9F7F 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EEE, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9F7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_211)
{
    // 2EEE 0061;	
    // (⻮) CJK RADICAL C-SIMPLIFIED TOOTH	[FB41 9F7F 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EEE, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9F7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_212)
{
    // 2EEE 0041;	
    // (⻮) CJK RADICAL C-SIMPLIFIED TOOTH	[FB41 9F7F 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EEE, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9F7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_213)
{
    // 2EEE 0062;	
    // (⻮) CJK RADICAL C-SIMPLIFIED TOOTH	[FB41 9F7F 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EEE, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9F7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_214)
{
    // F9C4 0021;	
    // (龍) CJK COMPATIBILITY IDEOGRAPH-F9C4	[FB41 9F8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C4, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9F8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_215)
{
    // 2FD3 0021;	
    // (⿓) KANGXI RADICAL DRAGON	[FB41 9F8D 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FD3, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9F8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_216)
{
    // 2EEF 0021;	
    // (⻯) CJK RADICAL J-SIMPLIFIED DRAGON	[FB41 9F8D 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EEF, 0x0021 };
    uint32_t const ces[12] = { 0xFB41, 0x9F8D, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_217)
{
    // F9C4 003F;	
    // (龍) CJK COMPATIBILITY IDEOGRAPH-F9C4	[FB41 9F8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C4, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9F8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_218)
{
    // 2FD3 003F;	
    // (⿓) KANGXI RADICAL DRAGON	[FB41 9F8D 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FD3, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9F8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_219)
{
    // 2EEF 003F;	
    // (⻯) CJK RADICAL J-SIMPLIFIED DRAGON	[FB41 9F8D 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EEF, 0x003F };
    uint32_t const ces[12] = { 0xFB41, 0x9F8D, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_220)
{
    // F9C4 0061;	
    // (龍) CJK COMPATIBILITY IDEOGRAPH-F9C4	[FB41 9F8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C4, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9F8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_221)
{
    // F9C4 0041;	
    // (龍) CJK COMPATIBILITY IDEOGRAPH-F9C4	[FB41 9F8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9C4, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9F8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_222)
{
    // 2FD3 0061;	
    // (⿓) KANGXI RADICAL DRAGON	[FB41 9F8D 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FD3, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9F8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_223)
{
    // 2FD3 0041;	
    // (⿓) KANGXI RADICAL DRAGON	[FB41 9F8D 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2FD3, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9F8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_224)
{
    // 2EEF 0061;	
    // (⻯) CJK RADICAL J-SIMPLIFIED DRAGON	[FB41 9F8D 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EEF, 0x0061 };
    uint32_t const ces[12] = { 0xFB41, 0x9F8D, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_225)
{
    // 2EEF 0041;	
    // (⻯) CJK RADICAL J-SIMPLIFIED DRAGON	[FB41 9F8D 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2EEF, 0x0041 };
    uint32_t const ces[12] = { 0xFB41, 0x9F8D, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_226)
{
    // F9C4 0062;	
    // (龍) CJK COMPATIBILITY IDEOGRAPH-F9C4	[FB41 9F8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C4, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9F8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_227)
{
    // 2FD3 0062;	
    // (⿓) KANGXI RADICAL DRAGON	[FB41 9F8D 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FD3, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9F8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_228)
{
    // 2EEF 0062;	
    // (⻯) CJK RADICAL J-SIMPLIFIED DRAGON	[FB41 9F8D 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EEF, 0x0062 };
    uint32_t const ces[12] = { 0xFB41, 0x9F8D, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_229)
{
    // FAD9 0021;	
    // (龎) CJK COMPATIBILITY IDEOGRAPH-FAD9	[FB41 9F8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD9, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9F8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_230)
{
    // FAD9 003F;	
    // (龎) CJK COMPATIBILITY IDEOGRAPH-FAD9	[FB41 9F8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD9, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9F8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_231)
{
    // FAD9 0061;	
    // (龎) CJK COMPATIBILITY IDEOGRAPH-FAD9	[FB41 9F8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD9, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9F8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_232)
{
    // FAD9 0041;	
    // (龎) CJK COMPATIBILITY IDEOGRAPH-FAD9	[FB41 9F8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFAD9, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9F8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_233)
{
    // FAD9 0062;	
    // (龎) CJK COMPATIBILITY IDEOGRAPH-FAD9	[FB41 9F8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD9, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9F8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_234)
{
    // 2EF0 0021;	
    // (⻰) CJK RADICAL C-SIMPLIFIED DRAGON	[FB41 9F99 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EF0, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9F99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_235)
{
    // 2EF0 003F;	
    // (⻰) CJK RADICAL C-SIMPLIFIED DRAGON	[FB41 9F99 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EF0, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9F99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_236)
{
    // 2EF0 0061;	
    // (⻰) CJK RADICAL C-SIMPLIFIED DRAGON	[FB41 9F99 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EF0, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9F99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_237)
{
    // 2EF0 0041;	
    // (⻰) CJK RADICAL C-SIMPLIFIED DRAGON	[FB41 9F99 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EF0, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9F99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_238)
{
    // 2EF0 0062;	
    // (⻰) CJK RADICAL C-SIMPLIFIED DRAGON	[FB41 9F99 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EF0, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9F99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_239)
{
    // F907 0021;	
    // (龜) CJK COMPATIBILITY IDEOGRAPH-F907	[FB41 9F9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF907, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9F9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_240)
{
    // F908 0021;	
    // (龜) CJK COMPATIBILITY IDEOGRAPH-F908	[FB41 9F9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF908, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9F9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_241)
{
    // FACE 0021;	
    // (龜) CJK COMPATIBILITY IDEOGRAPH-FACE	[FB41 9F9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFACE, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9F9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_242)
{
    // 2FD4 0021;	
    // (⿔) KANGXI RADICAL TURTLE	[FB41 9F9C 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FD4, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9F9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_243)
{
    // 2EF1 0021;	
    // (⻱) CJK RADICAL TURTLE	[FB41 9F9C 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EF1, 0x0021 };
    uint32_t const ces[12] = { 0xFB41, 0x9F9C, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_244)
{
    // 2EF2 0021;	
    // (⻲) CJK RADICAL J-SIMPLIFIED TURTLE	[FB41 9F9C 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EF2, 0x0021 };
    uint32_t const ces[12] = { 0xFB41, 0x9F9C, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_245)
{
    // F907 003F;	
    // (龜) CJK COMPATIBILITY IDEOGRAPH-F907	[FB41 9F9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF907, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9F9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_246)
{
    // F908 003F;	
    // (龜) CJK COMPATIBILITY IDEOGRAPH-F908	[FB41 9F9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF908, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9F9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_247)
{
    // FACE 003F;	
    // (龜) CJK COMPATIBILITY IDEOGRAPH-FACE	[FB41 9F9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFACE, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9F9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_248)
{
    // 2FD4 003F;	
    // (⿔) KANGXI RADICAL TURTLE	[FB41 9F9C 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FD4, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9F9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_249)
{
    // 2EF1 003F;	
    // (⻱) CJK RADICAL TURTLE	[FB41 9F9C 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EF1, 0x003F };
    uint32_t const ces[12] = { 0xFB41, 0x9F9C, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_250)
{
    // 2EF2 003F;	
    // (⻲) CJK RADICAL J-SIMPLIFIED TURTLE	[FB41 9F9C 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EF2, 0x003F };
    uint32_t const ces[12] = { 0xFB41, 0x9F9C, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_251)
{
    // F907 0061;	
    // (龜) CJK COMPATIBILITY IDEOGRAPH-F907	[FB41 9F9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF907, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9F9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_252)
{
    // F908 0061;	
    // (龜) CJK COMPATIBILITY IDEOGRAPH-F908	[FB41 9F9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF908, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9F9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_253)
{
    // FACE 0061;	
    // (龜) CJK COMPATIBILITY IDEOGRAPH-FACE	[FB41 9F9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFACE, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9F9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_254)
{
    // F907 0041;	
    // (龜) CJK COMPATIBILITY IDEOGRAPH-F907	[FB41 9F9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF907, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9F9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_255)
{
    // F908 0041;	
    // (龜) CJK COMPATIBILITY IDEOGRAPH-F908	[FB41 9F9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF908, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9F9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_256)
{
    // FACE 0041;	
    // (龜) CJK COMPATIBILITY IDEOGRAPH-FACE	[FB41 9F9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFACE, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9F9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_257)
{
    // 2FD4 0061;	
    // (⿔) KANGXI RADICAL TURTLE	[FB41 9F9C 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FD4, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9F9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_258)
{
    // 2FD4 0041;	
    // (⿔) KANGXI RADICAL TURTLE	[FB41 9F9C 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2FD4, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9F9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_259)
{
    // 2EF1 0061;	
    // (⻱) CJK RADICAL TURTLE	[FB41 9F9C 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EF1, 0x0061 };
    uint32_t const ces[12] = { 0xFB41, 0x9F9C, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_260)
{
    // 2EF1 0041;	
    // (⻱) CJK RADICAL TURTLE	[FB41 9F9C 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2EF1, 0x0041 };
    uint32_t const ces[12] = { 0xFB41, 0x9F9C, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_261)
{
    // 2EF2 0061;	
    // (⻲) CJK RADICAL J-SIMPLIFIED TURTLE	[FB41 9F9C 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EF2, 0x0061 };
    uint32_t const ces[12] = { 0xFB41, 0x9F9C, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_262)
{
    // 2EF2 0041;	
    // (⻲) CJK RADICAL J-SIMPLIFIED TURTLE	[FB41 9F9C 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2EF2, 0x0041 };
    uint32_t const ces[12] = { 0xFB41, 0x9F9C, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_263)
{
    // F907 0062;	
    // (龜) CJK COMPATIBILITY IDEOGRAPH-F907	[FB41 9F9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF907, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9F9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_264)
{
    // F908 0062;	
    // (龜) CJK COMPATIBILITY IDEOGRAPH-F908	[FB41 9F9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF908, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9F9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_265)
{
    // FACE 0062;	
    // (龜) CJK COMPATIBILITY IDEOGRAPH-FACE	[FB41 9F9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFACE, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9F9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_266)
{
    // 2FD4 0062;	
    // (⿔) KANGXI RADICAL TURTLE	[FB41 9F9C 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FD4, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9F9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_267)
{
    // 2EF1 0062;	
    // (⻱) CJK RADICAL TURTLE	[FB41 9F9C 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EF1, 0x0062 };
    uint32_t const ces[12] = { 0xFB41, 0x9F9C, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_268)
{
    // 2EF2 0062;	
    // (⻲) CJK RADICAL J-SIMPLIFIED TURTLE	[FB41 9F9C 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EF2, 0x0062 };
    uint32_t const ces[12] = { 0xFB41, 0x9F9C, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_269)
{
    // 2EF3 0021;	
    // (⻳) CJK RADICAL C-SIMPLIFIED TURTLE	[FB41 9F9F 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EF3, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9F9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_270)
{
    // 2EF3 003F;	
    // (⻳) CJK RADICAL C-SIMPLIFIED TURTLE	[FB41 9F9F 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EF3, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9F9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_271)
{
    // 2EF3 0061;	
    // (⻳) CJK RADICAL C-SIMPLIFIED TURTLE	[FB41 9F9F 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EF3, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9F9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_272)
{
    // 2EF3 0041;	
    // (⻳) CJK RADICAL C-SIMPLIFIED TURTLE	[FB41 9F9F 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EF3, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9F9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_273)
{
    // 2EF3 0062;	
    // (⻳) CJK RADICAL C-SIMPLIFIED TURTLE	[FB41 9F9F 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EF3, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9F9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_274)
{
    // 2FD5 0021;	
    // (⿕) KANGXI RADICAL FLUTE	[FB41 9FA0 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FD5, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9FA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_275)
{
    // 2FD5 003F;	
    // (⿕) KANGXI RADICAL FLUTE	[FB41 9FA0 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FD5, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9FA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_276)
{
    // 2FD5 0061;	
    // (⿕) KANGXI RADICAL FLUTE	[FB41 9FA0 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FD5, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9FA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_277)
{
    // 2FD5 0041;	
    // (⿕) KANGXI RADICAL FLUTE	[FB41 9FA0 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2FD5, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9FA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_278)
{
    // 2FD5 0062;	
    // (⿕) KANGXI RADICAL FLUTE	[FB41 9FA0 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2FD5, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9FA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_279)
{
    // 9FE6 0021;	
    // (鿦) CJK UNIFIED IDEOGRAPH-9FE6	[FB41 9FE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FE6, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9FE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_280)
{
    // 9FE6 003F;	
    // (鿦) CJK UNIFIED IDEOGRAPH-9FE6	[FB41 9FE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FE6, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9FE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_281)
{
    // 9FE6 0061;	
    // (鿦) CJK UNIFIED IDEOGRAPH-9FE6	[FB41 9FE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FE6, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9FE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_282)
{
    // 9FE6 0041;	
    // (鿦) CJK UNIFIED IDEOGRAPH-9FE6	[FB41 9FE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x9FE6, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9FE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_283)
{
    // 9FE6 0062;	
    // (鿦) CJK UNIFIED IDEOGRAPH-9FE6	[FB41 9FE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FE6, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9FE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_284)
{
    // 9FE7 0021;	
    // (鿧) CJK UNIFIED IDEOGRAPH-9FE7	[FB41 9FE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FE7, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9FE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_285)
{
    // 9FE7 003F;	
    // (鿧) CJK UNIFIED IDEOGRAPH-9FE7	[FB41 9FE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FE7, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9FE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_286)
{
    // 9FE7 0061;	
    // (鿧) CJK UNIFIED IDEOGRAPH-9FE7	[FB41 9FE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FE7, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9FE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_287)
{
    // 9FE7 0041;	
    // (鿧) CJK UNIFIED IDEOGRAPH-9FE7	[FB41 9FE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x9FE7, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9FE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_288)
{
    // 9FE7 0062;	
    // (鿧) CJK UNIFIED IDEOGRAPH-9FE7	[FB41 9FE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FE7, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9FE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_289)
{
    // 9FE8 0021;	
    // (鿨) CJK UNIFIED IDEOGRAPH-9FE8	[FB41 9FE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FE8, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9FE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_290)
{
    // 9FE8 003F;	
    // (鿨) CJK UNIFIED IDEOGRAPH-9FE8	[FB41 9FE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FE8, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9FE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_291)
{
    // 9FE8 0061;	
    // (鿨) CJK UNIFIED IDEOGRAPH-9FE8	[FB41 9FE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FE8, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9FE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_292)
{
    // 9FE8 0041;	
    // (鿨) CJK UNIFIED IDEOGRAPH-9FE8	[FB41 9FE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x9FE8, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9FE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_293)
{
    // 9FE8 0062;	
    // (鿨) CJK UNIFIED IDEOGRAPH-9FE8	[FB41 9FE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FE8, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9FE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_294)
{
    // 9FE9 0021;	
    // (鿩) CJK UNIFIED IDEOGRAPH-9FE9	[FB41 9FE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FE9, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9FE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_295)
{
    // 9FE9 003F;	
    // (鿩) CJK UNIFIED IDEOGRAPH-9FE9	[FB41 9FE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FE9, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9FE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_296)
{
    // 9FE9 0061;	
    // (鿩) CJK UNIFIED IDEOGRAPH-9FE9	[FB41 9FE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FE9, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9FE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_297)
{
    // 9FE9 0041;	
    // (鿩) CJK UNIFIED IDEOGRAPH-9FE9	[FB41 9FE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x9FE9, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9FE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_298)
{
    // 9FE9 0062;	
    // (鿩) CJK UNIFIED IDEOGRAPH-9FE9	[FB41 9FE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FE9, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9FE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_299)
{
    // 9FEA 0021;	
    // (鿪) CJK UNIFIED IDEOGRAPH-9FEA	[FB41 9FEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FEA, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x9FEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_300)
{
    // 9FEA 003F;	
    // (鿪) CJK UNIFIED IDEOGRAPH-9FEA	[FB41 9FEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FEA, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x9FEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_301)
{
    // 9FEA 0061;	
    // (鿪) CJK UNIFIED IDEOGRAPH-9FEA	[FB41 9FEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FEA, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x9FEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_302)
{
    // 9FEA 0041;	
    // (鿪) CJK UNIFIED IDEOGRAPH-9FEA	[FB41 9FEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x9FEA, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x9FEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_303)
{
    // 9FEA 0062;	
    // (鿪) CJK UNIFIED IDEOGRAPH-9FEA	[FB41 9FEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FEA, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x9FEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_304)
{
    // FA0E 0021;	
    // (﨎) CJK COMPATIBILITY IDEOGRAPH-FA0E	[FB41 FA0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA0E, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0xFA0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_305)
{
    // FA0E 003F;	
    // (﨎) CJK COMPATIBILITY IDEOGRAPH-FA0E	[FB41 FA0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA0E, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0xFA0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_306)
{
    // FA0E 0061;	
    // (﨎) CJK COMPATIBILITY IDEOGRAPH-FA0E	[FB41 FA0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA0E, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0xFA0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_307)
{
    // FA0E 0041;	
    // (﨎) CJK COMPATIBILITY IDEOGRAPH-FA0E	[FB41 FA0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA0E, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0xFA0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_308)
{
    // FA0E 0062;	
    // (﨎) CJK COMPATIBILITY IDEOGRAPH-FA0E	[FB41 FA0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA0E, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0xFA0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_309)
{
    // FA0F 0021;	
    // (﨏) CJK COMPATIBILITY IDEOGRAPH-FA0F	[FB41 FA0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA0F, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0xFA0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_310)
{
    // FA0F 003F;	
    // (﨏) CJK COMPATIBILITY IDEOGRAPH-FA0F	[FB41 FA0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA0F, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0xFA0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_311)
{
    // FA0F 0061;	
    // (﨏) CJK COMPATIBILITY IDEOGRAPH-FA0F	[FB41 FA0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA0F, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0xFA0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_312)
{
    // FA0F 0041;	
    // (﨏) CJK COMPATIBILITY IDEOGRAPH-FA0F	[FB41 FA0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA0F, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0xFA0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_313)
{
    // FA0F 0062;	
    // (﨏) CJK COMPATIBILITY IDEOGRAPH-FA0F	[FB41 FA0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA0F, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0xFA0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_314)
{
    // FA11 0021;	
    // (﨑) CJK COMPATIBILITY IDEOGRAPH-FA11	[FB41 FA11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA11, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0xFA11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_315)
{
    // FA11 003F;	
    // (﨑) CJK COMPATIBILITY IDEOGRAPH-FA11	[FB41 FA11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA11, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0xFA11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_316)
{
    // FA11 0061;	
    // (﨑) CJK COMPATIBILITY IDEOGRAPH-FA11	[FB41 FA11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA11, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0xFA11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_317)
{
    // FA11 0041;	
    // (﨑) CJK COMPATIBILITY IDEOGRAPH-FA11	[FB41 FA11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA11, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0xFA11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_318)
{
    // FA11 0062;	
    // (﨑) CJK COMPATIBILITY IDEOGRAPH-FA11	[FB41 FA11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA11, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0xFA11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_319)
{
    // FA13 0021;	
    // (﨓) CJK COMPATIBILITY IDEOGRAPH-FA13	[FB41 FA13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA13, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0xFA13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_320)
{
    // FA13 003F;	
    // (﨓) CJK COMPATIBILITY IDEOGRAPH-FA13	[FB41 FA13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA13, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0xFA13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_321)
{
    // FA13 0061;	
    // (﨓) CJK COMPATIBILITY IDEOGRAPH-FA13	[FB41 FA13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA13, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0xFA13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_322)
{
    // FA13 0041;	
    // (﨓) CJK COMPATIBILITY IDEOGRAPH-FA13	[FB41 FA13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA13, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0xFA13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_323)
{
    // FA13 0062;	
    // (﨓) CJK COMPATIBILITY IDEOGRAPH-FA13	[FB41 FA13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA13, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0xFA13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_324)
{
    // FA14 0021;	
    // (﨔) CJK COMPATIBILITY IDEOGRAPH-FA14	[FB41 FA14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA14, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0xFA14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_325)
{
    // FA14 003F;	
    // (﨔) CJK COMPATIBILITY IDEOGRAPH-FA14	[FB41 FA14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA14, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0xFA14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_326)
{
    // FA14 0061;	
    // (﨔) CJK COMPATIBILITY IDEOGRAPH-FA14	[FB41 FA14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA14, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0xFA14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_327)
{
    // FA14 0041;	
    // (﨔) CJK COMPATIBILITY IDEOGRAPH-FA14	[FB41 FA14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA14, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0xFA14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_328)
{
    // FA14 0062;	
    // (﨔) CJK COMPATIBILITY IDEOGRAPH-FA14	[FB41 FA14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA14, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0xFA14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_329)
{
    // FA1F 0021;	
    // (﨟) CJK COMPATIBILITY IDEOGRAPH-FA1F	[FB41 FA1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA1F, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0xFA1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_330)
{
    // FA1F 003F;	
    // (﨟) CJK COMPATIBILITY IDEOGRAPH-FA1F	[FB41 FA1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA1F, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0xFA1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_331)
{
    // FA1F 0061;	
    // (﨟) CJK COMPATIBILITY IDEOGRAPH-FA1F	[FB41 FA1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA1F, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0xFA1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_332)
{
    // FA1F 0041;	
    // (﨟) CJK COMPATIBILITY IDEOGRAPH-FA1F	[FB41 FA1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA1F, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0xFA1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_333)
{
    // FA1F 0062;	
    // (﨟) CJK COMPATIBILITY IDEOGRAPH-FA1F	[FB41 FA1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA1F, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0xFA1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_334)
{
    // FA21 0021;	
    // (﨡) CJK COMPATIBILITY IDEOGRAPH-FA21	[FB41 FA21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA21, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0xFA21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_335)
{
    // FA21 003F;	
    // (﨡) CJK COMPATIBILITY IDEOGRAPH-FA21	[FB41 FA21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA21, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0xFA21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_336)
{
    // FA21 0061;	
    // (﨡) CJK COMPATIBILITY IDEOGRAPH-FA21	[FB41 FA21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA21, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0xFA21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_337)
{
    // FA21 0041;	
    // (﨡) CJK COMPATIBILITY IDEOGRAPH-FA21	[FB41 FA21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA21, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0xFA21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_338)
{
    // FA21 0062;	
    // (﨡) CJK COMPATIBILITY IDEOGRAPH-FA21	[FB41 FA21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA21, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0xFA21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_339)
{
    // FA23 0021;	
    // (﨣) CJK COMPATIBILITY IDEOGRAPH-FA23	[FB41 FA23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA23, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0xFA23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_340)
{
    // FA23 003F;	
    // (﨣) CJK COMPATIBILITY IDEOGRAPH-FA23	[FB41 FA23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA23, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0xFA23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_341)
{
    // FA23 0061;	
    // (﨣) CJK COMPATIBILITY IDEOGRAPH-FA23	[FB41 FA23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA23, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0xFA23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_342)
{
    // FA23 0041;	
    // (﨣) CJK COMPATIBILITY IDEOGRAPH-FA23	[FB41 FA23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA23, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0xFA23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_343)
{
    // FA23 0062;	
    // (﨣) CJK COMPATIBILITY IDEOGRAPH-FA23	[FB41 FA23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA23, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0xFA23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_344)
{
    // FA24 0021;	
    // (﨤) CJK COMPATIBILITY IDEOGRAPH-FA24	[FB41 FA24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA24, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0xFA24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_345)
{
    // FA24 003F;	
    // (﨤) CJK COMPATIBILITY IDEOGRAPH-FA24	[FB41 FA24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA24, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0xFA24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_346)
{
    // FA24 0061;	
    // (﨤) CJK COMPATIBILITY IDEOGRAPH-FA24	[FB41 FA24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA24, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0xFA24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_347)
{
    // FA24 0041;	
    // (﨤) CJK COMPATIBILITY IDEOGRAPH-FA24	[FB41 FA24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA24, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0xFA24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_348)
{
    // FA24 0062;	
    // (﨤) CJK COMPATIBILITY IDEOGRAPH-FA24	[FB41 FA24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA24, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0xFA24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_349)
{
    // FA27 0021;	
    // (﨧) CJK COMPATIBILITY IDEOGRAPH-FA27	[FB41 FA27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA27, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0xFA27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_350)
{
    // FA27 003F;	
    // (﨧) CJK COMPATIBILITY IDEOGRAPH-FA27	[FB41 FA27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA27, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0xFA27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_351)
{
    // FA27 0061;	
    // (﨧) CJK COMPATIBILITY IDEOGRAPH-FA27	[FB41 FA27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA27, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0xFA27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_352)
{
    // FA27 0041;	
    // (﨧) CJK COMPATIBILITY IDEOGRAPH-FA27	[FB41 FA27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA27, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0xFA27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_353)
{
    // FA27 0062;	
    // (﨧) CJK COMPATIBILITY IDEOGRAPH-FA27	[FB41 FA27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA27, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0xFA27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_354)
{
    // FA28 0021;	
    // (﨨) CJK COMPATIBILITY IDEOGRAPH-FA28	[FB41 FA28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA28, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0xFA28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_355)
{
    // FA28 003F;	
    // (﨨) CJK COMPATIBILITY IDEOGRAPH-FA28	[FB41 FA28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA28, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0xFA28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_356)
{
    // FA28 0061;	
    // (﨨) CJK COMPATIBILITY IDEOGRAPH-FA28	[FB41 FA28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA28, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0xFA28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_357)
{
    // FA28 0041;	
    // (﨨) CJK COMPATIBILITY IDEOGRAPH-FA28	[FB41 FA28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA28, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0xFA28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_358)
{
    // FA28 0062;	
    // (﨨) CJK COMPATIBILITY IDEOGRAPH-FA28	[FB41 FA28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA28, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0xFA28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_359)
{
    // FA29 0021;	
    // (﨩) CJK COMPATIBILITY IDEOGRAPH-FA29	[FB41 FA29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA29, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0xFA29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_360)
{
    // FA29 003F;	
    // (﨩) CJK COMPATIBILITY IDEOGRAPH-FA29	[FB41 FA29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA29, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0xFA29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_361)
{
    // FA29 0061;	
    // (﨩) CJK COMPATIBILITY IDEOGRAPH-FA29	[FB41 FA29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA29, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0xFA29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_362)
{
    // FA29 0041;	
    // (﨩) CJK COMPATIBILITY IDEOGRAPH-FA29	[FB41 FA29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA29, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0xFA29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_363)
{
    // FA29 0062;	
    // (﨩) CJK COMPATIBILITY IDEOGRAPH-FA29	[FB41 FA29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA29, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0xFA29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_364)
{
    // 3400 0021;	
    // (㐀) CJK UNIFIED IDEOGRAPH-3400	[FB80 B400 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3400, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB400, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_365)
{
    // 3400 003F;	
    // (㐀) CJK UNIFIED IDEOGRAPH-3400	[FB80 B400 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3400, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB400, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_366)
{
    // 3400 0061;	
    // (㐀) CJK UNIFIED IDEOGRAPH-3400	[FB80 B400 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3400, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB400, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_367)
{
    // 3400 0041;	
    // (㐀) CJK UNIFIED IDEOGRAPH-3400	[FB80 B400 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3400, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB400, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_368)
{
    // 3400 0062;	
    // (㐀) CJK UNIFIED IDEOGRAPH-3400	[FB80 B400 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3400, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB400, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_369)
{
    // 3401 0021;	
    // (㐁) CJK UNIFIED IDEOGRAPH-3401	[FB80 B401 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3401, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB401, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_370)
{
    // 3401 003F;	
    // (㐁) CJK UNIFIED IDEOGRAPH-3401	[FB80 B401 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3401, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB401, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_371)
{
    // 3401 0061;	
    // (㐁) CJK UNIFIED IDEOGRAPH-3401	[FB80 B401 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3401, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB401, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_372)
{
    // 3401 0041;	
    // (㐁) CJK UNIFIED IDEOGRAPH-3401	[FB80 B401 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3401, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB401, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_373)
{
    // 3401 0062;	
    // (㐁) CJK UNIFIED IDEOGRAPH-3401	[FB80 B401 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3401, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB401, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_374)
{
    // 3402 0021;	
    // (㐂) CJK UNIFIED IDEOGRAPH-3402	[FB80 B402 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3402, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB402, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_375)
{
    // 3402 003F;	
    // (㐂) CJK UNIFIED IDEOGRAPH-3402	[FB80 B402 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3402, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB402, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_376)
{
    // 3402 0061;	
    // (㐂) CJK UNIFIED IDEOGRAPH-3402	[FB80 B402 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3402, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_377)
{
    // 3402 0041;	
    // (㐂) CJK UNIFIED IDEOGRAPH-3402	[FB80 B402 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3402, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_378)
{
    // 3402 0062;	
    // (㐂) CJK UNIFIED IDEOGRAPH-3402	[FB80 B402 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3402, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB402, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_379)
{
    // 3403 0021;	
    // (㐃) CJK UNIFIED IDEOGRAPH-3403	[FB80 B403 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3403, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB403, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_380)
{
    // 3403 003F;	
    // (㐃) CJK UNIFIED IDEOGRAPH-3403	[FB80 B403 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3403, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB403, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_381)
{
    // 3403 0061;	
    // (㐃) CJK UNIFIED IDEOGRAPH-3403	[FB80 B403 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3403, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB403, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_382)
{
    // 3403 0041;	
    // (㐃) CJK UNIFIED IDEOGRAPH-3403	[FB80 B403 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3403, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB403, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_383)
{
    // 3403 0062;	
    // (㐃) CJK UNIFIED IDEOGRAPH-3403	[FB80 B403 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3403, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB403, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_384)
{
    // 3404 0021;	
    // (㐄) CJK UNIFIED IDEOGRAPH-3404	[FB80 B404 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3404, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB404, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_385)
{
    // 3404 003F;	
    // (㐄) CJK UNIFIED IDEOGRAPH-3404	[FB80 B404 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3404, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB404, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_386)
{
    // 3404 0061;	
    // (㐄) CJK UNIFIED IDEOGRAPH-3404	[FB80 B404 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3404, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB404, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_387)
{
    // 3404 0041;	
    // (㐄) CJK UNIFIED IDEOGRAPH-3404	[FB80 B404 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3404, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB404, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_388)
{
    // 3404 0062;	
    // (㐄) CJK UNIFIED IDEOGRAPH-3404	[FB80 B404 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3404, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB404, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_389)
{
    // 3405 0021;	
    // (㐅) CJK UNIFIED IDEOGRAPH-3405	[FB80 B405 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3405, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB405, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_390)
{
    // 3405 003F;	
    // (㐅) CJK UNIFIED IDEOGRAPH-3405	[FB80 B405 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3405, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB405, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_391)
{
    // 3405 0061;	
    // (㐅) CJK UNIFIED IDEOGRAPH-3405	[FB80 B405 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3405, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB405, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_392)
{
    // 3405 0041;	
    // (㐅) CJK UNIFIED IDEOGRAPH-3405	[FB80 B405 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3405, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB405, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_393)
{
    // 3405 0062;	
    // (㐅) CJK UNIFIED IDEOGRAPH-3405	[FB80 B405 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3405, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB405, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_394)
{
    // 3406 0021;	
    // (㐆) CJK UNIFIED IDEOGRAPH-3406	[FB80 B406 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3406, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB406, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_395)
{
    // 3406 003F;	
    // (㐆) CJK UNIFIED IDEOGRAPH-3406	[FB80 B406 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3406, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB406, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_396)
{
    // 3406 0061;	
    // (㐆) CJK UNIFIED IDEOGRAPH-3406	[FB80 B406 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3406, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB406, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_397)
{
    // 3406 0041;	
    // (㐆) CJK UNIFIED IDEOGRAPH-3406	[FB80 B406 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3406, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB406, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_398)
{
    // 3406 0062;	
    // (㐆) CJK UNIFIED IDEOGRAPH-3406	[FB80 B406 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3406, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB406, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_399)
{
    // 3407 0021;	
    // (㐇) CJK UNIFIED IDEOGRAPH-3407	[FB80 B407 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3407, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB407, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_400)
{
    // 3407 003F;	
    // (㐇) CJK UNIFIED IDEOGRAPH-3407	[FB80 B407 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3407, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB407, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_401)
{
    // 3407 0061;	
    // (㐇) CJK UNIFIED IDEOGRAPH-3407	[FB80 B407 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3407, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB407, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_402)
{
    // 3407 0041;	
    // (㐇) CJK UNIFIED IDEOGRAPH-3407	[FB80 B407 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3407, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB407, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_403)
{
    // 3407 0062;	
    // (㐇) CJK UNIFIED IDEOGRAPH-3407	[FB80 B407 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3407, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB407, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_404)
{
    // 3408 0021;	
    // (㐈) CJK UNIFIED IDEOGRAPH-3408	[FB80 B408 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3408, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB408, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_405)
{
    // 3408 003F;	
    // (㐈) CJK UNIFIED IDEOGRAPH-3408	[FB80 B408 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3408, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB408, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_406)
{
    // 3408 0061;	
    // (㐈) CJK UNIFIED IDEOGRAPH-3408	[FB80 B408 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3408, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB408, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_407)
{
    // 3408 0041;	
    // (㐈) CJK UNIFIED IDEOGRAPH-3408	[FB80 B408 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3408, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB408, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_408)
{
    // 3408 0062;	
    // (㐈) CJK UNIFIED IDEOGRAPH-3408	[FB80 B408 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3408, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB408, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_409)
{
    // 3409 0021;	
    // (㐉) CJK UNIFIED IDEOGRAPH-3409	[FB80 B409 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3409, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_410)
{
    // 3409 003F;	
    // (㐉) CJK UNIFIED IDEOGRAPH-3409	[FB80 B409 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3409, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_411)
{
    // 3409 0061;	
    // (㐉) CJK UNIFIED IDEOGRAPH-3409	[FB80 B409 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3409, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_412)
{
    // 3409 0041;	
    // (㐉) CJK UNIFIED IDEOGRAPH-3409	[FB80 B409 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3409, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_413)
{
    // 3409 0062;	
    // (㐉) CJK UNIFIED IDEOGRAPH-3409	[FB80 B409 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3409, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_414)
{
    // 340A 0021;	
    // (㐊) CJK UNIFIED IDEOGRAPH-340A	[FB80 B40A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x340A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB40A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_415)
{
    // 340A 003F;	
    // (㐊) CJK UNIFIED IDEOGRAPH-340A	[FB80 B40A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x340A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB40A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_416)
{
    // 340A 0061;	
    // (㐊) CJK UNIFIED IDEOGRAPH-340A	[FB80 B40A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x340A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB40A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_417)
{
    // 340A 0041;	
    // (㐊) CJK UNIFIED IDEOGRAPH-340A	[FB80 B40A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x340A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB40A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_418)
{
    // 340A 0062;	
    // (㐊) CJK UNIFIED IDEOGRAPH-340A	[FB80 B40A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x340A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB40A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_419)
{
    // 340B 0021;	
    // (㐋) CJK UNIFIED IDEOGRAPH-340B	[FB80 B40B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x340B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB40B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_420)
{
    // 340B 003F;	
    // (㐋) CJK UNIFIED IDEOGRAPH-340B	[FB80 B40B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x340B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB40B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_421)
{
    // 340B 0061;	
    // (㐋) CJK UNIFIED IDEOGRAPH-340B	[FB80 B40B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x340B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB40B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_422)
{
    // 340B 0041;	
    // (㐋) CJK UNIFIED IDEOGRAPH-340B	[FB80 B40B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x340B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB40B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_423)
{
    // 340B 0062;	
    // (㐋) CJK UNIFIED IDEOGRAPH-340B	[FB80 B40B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x340B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB40B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_424)
{
    // 340C 0021;	
    // (㐌) CJK UNIFIED IDEOGRAPH-340C	[FB80 B40C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x340C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB40C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_425)
{
    // 340C 003F;	
    // (㐌) CJK UNIFIED IDEOGRAPH-340C	[FB80 B40C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x340C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB40C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_426)
{
    // 340C 0061;	
    // (㐌) CJK UNIFIED IDEOGRAPH-340C	[FB80 B40C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x340C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB40C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_427)
{
    // 340C 0041;	
    // (㐌) CJK UNIFIED IDEOGRAPH-340C	[FB80 B40C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x340C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB40C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_428)
{
    // 340C 0062;	
    // (㐌) CJK UNIFIED IDEOGRAPH-340C	[FB80 B40C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x340C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB40C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_429)
{
    // 340D 0021;	
    // (㐍) CJK UNIFIED IDEOGRAPH-340D	[FB80 B40D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x340D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB40D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_430)
{
    // 340D 003F;	
    // (㐍) CJK UNIFIED IDEOGRAPH-340D	[FB80 B40D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x340D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB40D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_431)
{
    // 340D 0061;	
    // (㐍) CJK UNIFIED IDEOGRAPH-340D	[FB80 B40D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x340D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB40D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_432)
{
    // 340D 0041;	
    // (㐍) CJK UNIFIED IDEOGRAPH-340D	[FB80 B40D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x340D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB40D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_433)
{
    // 340D 0062;	
    // (㐍) CJK UNIFIED IDEOGRAPH-340D	[FB80 B40D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x340D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB40D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_434)
{
    // 340E 0021;	
    // (㐎) CJK UNIFIED IDEOGRAPH-340E	[FB80 B40E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x340E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB40E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_435)
{
    // 340E 003F;	
    // (㐎) CJK UNIFIED IDEOGRAPH-340E	[FB80 B40E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x340E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB40E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_436)
{
    // 340E 0061;	
    // (㐎) CJK UNIFIED IDEOGRAPH-340E	[FB80 B40E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x340E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB40E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_437)
{
    // 340E 0041;	
    // (㐎) CJK UNIFIED IDEOGRAPH-340E	[FB80 B40E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x340E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB40E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_438)
{
    // 340E 0062;	
    // (㐎) CJK UNIFIED IDEOGRAPH-340E	[FB80 B40E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x340E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB40E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_439)
{
    // 340F 0021;	
    // (㐏) CJK UNIFIED IDEOGRAPH-340F	[FB80 B40F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x340F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB40F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_440)
{
    // 340F 003F;	
    // (㐏) CJK UNIFIED IDEOGRAPH-340F	[FB80 B40F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x340F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB40F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_441)
{
    // 340F 0061;	
    // (㐏) CJK UNIFIED IDEOGRAPH-340F	[FB80 B40F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x340F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB40F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_442)
{
    // 340F 0041;	
    // (㐏) CJK UNIFIED IDEOGRAPH-340F	[FB80 B40F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x340F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB40F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_443)
{
    // 340F 0062;	
    // (㐏) CJK UNIFIED IDEOGRAPH-340F	[FB80 B40F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x340F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB40F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_444)
{
    // 3410 0021;	
    // (㐐) CJK UNIFIED IDEOGRAPH-3410	[FB80 B410 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3410, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB410, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_445)
{
    // 3410 003F;	
    // (㐐) CJK UNIFIED IDEOGRAPH-3410	[FB80 B410 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3410, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB410, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_446)
{
    // 3410 0061;	
    // (㐐) CJK UNIFIED IDEOGRAPH-3410	[FB80 B410 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3410, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB410, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_447)
{
    // 3410 0041;	
    // (㐐) CJK UNIFIED IDEOGRAPH-3410	[FB80 B410 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3410, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB410, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_448)
{
    // 3410 0062;	
    // (㐐) CJK UNIFIED IDEOGRAPH-3410	[FB80 B410 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3410, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB410, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_449)
{
    // 3411 0021;	
    // (㐑) CJK UNIFIED IDEOGRAPH-3411	[FB80 B411 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3411, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB411, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_450)
{
    // 3411 003F;	
    // (㐑) CJK UNIFIED IDEOGRAPH-3411	[FB80 B411 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3411, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB411, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_451)
{
    // 3411 0061;	
    // (㐑) CJK UNIFIED IDEOGRAPH-3411	[FB80 B411 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3411, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB411, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_452)
{
    // 3411 0041;	
    // (㐑) CJK UNIFIED IDEOGRAPH-3411	[FB80 B411 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3411, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB411, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_453)
{
    // 3411 0062;	
    // (㐑) CJK UNIFIED IDEOGRAPH-3411	[FB80 B411 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3411, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB411, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_454)
{
    // 3412 0021;	
    // (㐒) CJK UNIFIED IDEOGRAPH-3412	[FB80 B412 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3412, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB412, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_455)
{
    // 3412 003F;	
    // (㐒) CJK UNIFIED IDEOGRAPH-3412	[FB80 B412 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3412, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB412, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_456)
{
    // 3412 0061;	
    // (㐒) CJK UNIFIED IDEOGRAPH-3412	[FB80 B412 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3412, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB412, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_457)
{
    // 3412 0041;	
    // (㐒) CJK UNIFIED IDEOGRAPH-3412	[FB80 B412 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3412, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB412, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_458)
{
    // 3412 0062;	
    // (㐒) CJK UNIFIED IDEOGRAPH-3412	[FB80 B412 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3412, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB412, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_459)
{
    // 3413 0021;	
    // (㐓) CJK UNIFIED IDEOGRAPH-3413	[FB80 B413 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3413, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB413, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_460)
{
    // 3413 003F;	
    // (㐓) CJK UNIFIED IDEOGRAPH-3413	[FB80 B413 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3413, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB413, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_461)
{
    // 3413 0061;	
    // (㐓) CJK UNIFIED IDEOGRAPH-3413	[FB80 B413 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3413, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB413, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_462)
{
    // 3413 0041;	
    // (㐓) CJK UNIFIED IDEOGRAPH-3413	[FB80 B413 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3413, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB413, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_463)
{
    // 3413 0062;	
    // (㐓) CJK UNIFIED IDEOGRAPH-3413	[FB80 B413 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3413, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB413, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_464)
{
    // 3414 0021;	
    // (㐔) CJK UNIFIED IDEOGRAPH-3414	[FB80 B414 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3414, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB414, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_465)
{
    // 3414 003F;	
    // (㐔) CJK UNIFIED IDEOGRAPH-3414	[FB80 B414 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3414, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB414, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_466)
{
    // 3414 0061;	
    // (㐔) CJK UNIFIED IDEOGRAPH-3414	[FB80 B414 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3414, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB414, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_467)
{
    // 3414 0041;	
    // (㐔) CJK UNIFIED IDEOGRAPH-3414	[FB80 B414 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3414, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB414, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_468)
{
    // 3414 0062;	
    // (㐔) CJK UNIFIED IDEOGRAPH-3414	[FB80 B414 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3414, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB414, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_469)
{
    // 3415 0021;	
    // (㐕) CJK UNIFIED IDEOGRAPH-3415	[FB80 B415 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3415, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB415, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_470)
{
    // 3415 003F;	
    // (㐕) CJK UNIFIED IDEOGRAPH-3415	[FB80 B415 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3415, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB415, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_471)
{
    // 3415 0061;	
    // (㐕) CJK UNIFIED IDEOGRAPH-3415	[FB80 B415 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3415, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB415, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_472)
{
    // 3415 0041;	
    // (㐕) CJK UNIFIED IDEOGRAPH-3415	[FB80 B415 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3415, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB415, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_473)
{
    // 3415 0062;	
    // (㐕) CJK UNIFIED IDEOGRAPH-3415	[FB80 B415 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3415, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB415, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_474)
{
    // 3416 0021;	
    // (㐖) CJK UNIFIED IDEOGRAPH-3416	[FB80 B416 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3416, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB416, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_475)
{
    // 3416 003F;	
    // (㐖) CJK UNIFIED IDEOGRAPH-3416	[FB80 B416 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3416, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB416, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_476)
{
    // 3416 0061;	
    // (㐖) CJK UNIFIED IDEOGRAPH-3416	[FB80 B416 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3416, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB416, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_477)
{
    // 3416 0041;	
    // (㐖) CJK UNIFIED IDEOGRAPH-3416	[FB80 B416 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3416, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB416, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_478)
{
    // 3416 0062;	
    // (㐖) CJK UNIFIED IDEOGRAPH-3416	[FB80 B416 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3416, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB416, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_479)
{
    // 3417 0021;	
    // (㐗) CJK UNIFIED IDEOGRAPH-3417	[FB80 B417 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3417, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_480)
{
    // 3417 003F;	
    // (㐗) CJK UNIFIED IDEOGRAPH-3417	[FB80 B417 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3417, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_481)
{
    // 3417 0061;	
    // (㐗) CJK UNIFIED IDEOGRAPH-3417	[FB80 B417 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3417, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_482)
{
    // 3417 0041;	
    // (㐗) CJK UNIFIED IDEOGRAPH-3417	[FB80 B417 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3417, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_483)
{
    // 3417 0062;	
    // (㐗) CJK UNIFIED IDEOGRAPH-3417	[FB80 B417 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3417, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_484)
{
    // 3418 0021;	
    // (㐘) CJK UNIFIED IDEOGRAPH-3418	[FB80 B418 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3418, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB418, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_485)
{
    // 3418 003F;	
    // (㐘) CJK UNIFIED IDEOGRAPH-3418	[FB80 B418 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3418, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB418, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_486)
{
    // 3418 0061;	
    // (㐘) CJK UNIFIED IDEOGRAPH-3418	[FB80 B418 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3418, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB418, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_487)
{
    // 3418 0041;	
    // (㐘) CJK UNIFIED IDEOGRAPH-3418	[FB80 B418 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3418, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB418, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_488)
{
    // 3418 0062;	
    // (㐘) CJK UNIFIED IDEOGRAPH-3418	[FB80 B418 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3418, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB418, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_489)
{
    // 3419 0021;	
    // (㐙) CJK UNIFIED IDEOGRAPH-3419	[FB80 B419 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3419, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB419, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_490)
{
    // 3419 003F;	
    // (㐙) CJK UNIFIED IDEOGRAPH-3419	[FB80 B419 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3419, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB419, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_491)
{
    // 3419 0061;	
    // (㐙) CJK UNIFIED IDEOGRAPH-3419	[FB80 B419 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3419, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB419, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_492)
{
    // 3419 0041;	
    // (㐙) CJK UNIFIED IDEOGRAPH-3419	[FB80 B419 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3419, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB419, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_493)
{
    // 3419 0062;	
    // (㐙) CJK UNIFIED IDEOGRAPH-3419	[FB80 B419 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3419, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB419, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_494)
{
    // 341A 0021;	
    // (㐚) CJK UNIFIED IDEOGRAPH-341A	[FB80 B41A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x341A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB41A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_495)
{
    // 341A 003F;	
    // (㐚) CJK UNIFIED IDEOGRAPH-341A	[FB80 B41A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x341A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB41A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_496)
{
    // 341A 0061;	
    // (㐚) CJK UNIFIED IDEOGRAPH-341A	[FB80 B41A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x341A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB41A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_497)
{
    // 341A 0041;	
    // (㐚) CJK UNIFIED IDEOGRAPH-341A	[FB80 B41A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x341A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB41A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_498)
{
    // 341A 0062;	
    // (㐚) CJK UNIFIED IDEOGRAPH-341A	[FB80 B41A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x341A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB41A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_326_499)
{
    // 341B 0021;	
    // (㐛) CJK UNIFIED IDEOGRAPH-341B	[FB80 B41B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x341B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB41B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

