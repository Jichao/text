// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_302_000)
{
    // 13221 003F;	
    // (𓈡) EGYPTIAN HIEROGLYPH NL002	[526B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13221, 0x003F };
    uint32_t const ces[9] = { 0x526B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_001)
{
    // 13221 0061;	
    // (𓈡) EGYPTIAN HIEROGLYPH NL002	[526B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13221, 0x0061 };
    uint32_t const ces[9] = { 0x526B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_002)
{
    // 13221 0041;	
    // (𓈡) EGYPTIAN HIEROGLYPH NL002	[526B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13221, 0x0041 };
    uint32_t const ces[9] = { 0x526B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_003)
{
    // 13221 0062;	
    // (𓈡) EGYPTIAN HIEROGLYPH NL002	[526B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13221, 0x0062 };
    uint32_t const ces[9] = { 0x526B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_004)
{
    // 13222 0021;	
    // (𓈢) EGYPTIAN HIEROGLYPH NL003	[526C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13222, 0x0021 };
    uint32_t const ces[9] = { 0x526C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_005)
{
    // 13222 003F;	
    // (𓈢) EGYPTIAN HIEROGLYPH NL003	[526C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13222, 0x003F };
    uint32_t const ces[9] = { 0x526C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_006)
{
    // 13222 0061;	
    // (𓈢) EGYPTIAN HIEROGLYPH NL003	[526C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13222, 0x0061 };
    uint32_t const ces[9] = { 0x526C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_007)
{
    // 13222 0041;	
    // (𓈢) EGYPTIAN HIEROGLYPH NL003	[526C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13222, 0x0041 };
    uint32_t const ces[9] = { 0x526C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_008)
{
    // 13222 0062;	
    // (𓈢) EGYPTIAN HIEROGLYPH NL003	[526C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13222, 0x0062 };
    uint32_t const ces[9] = { 0x526C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_009)
{
    // 13223 0021;	
    // (𓈣) EGYPTIAN HIEROGLYPH NL004	[526D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13223, 0x0021 };
    uint32_t const ces[9] = { 0x526D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_010)
{
    // 13223 003F;	
    // (𓈣) EGYPTIAN HIEROGLYPH NL004	[526D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13223, 0x003F };
    uint32_t const ces[9] = { 0x526D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_011)
{
    // 13223 0061;	
    // (𓈣) EGYPTIAN HIEROGLYPH NL004	[526D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13223, 0x0061 };
    uint32_t const ces[9] = { 0x526D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_012)
{
    // 13223 0041;	
    // (𓈣) EGYPTIAN HIEROGLYPH NL004	[526D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13223, 0x0041 };
    uint32_t const ces[9] = { 0x526D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_013)
{
    // 13223 0062;	
    // (𓈣) EGYPTIAN HIEROGLYPH NL004	[526D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13223, 0x0062 };
    uint32_t const ces[9] = { 0x526D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_014)
{
    // 13224 0021;	
    // (𓈤) EGYPTIAN HIEROGLYPH NL005	[526E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13224, 0x0021 };
    uint32_t const ces[9] = { 0x526E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_015)
{
    // 13224 003F;	
    // (𓈤) EGYPTIAN HIEROGLYPH NL005	[526E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13224, 0x003F };
    uint32_t const ces[9] = { 0x526E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_016)
{
    // 13224 0061;	
    // (𓈤) EGYPTIAN HIEROGLYPH NL005	[526E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13224, 0x0061 };
    uint32_t const ces[9] = { 0x526E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_017)
{
    // 13224 0041;	
    // (𓈤) EGYPTIAN HIEROGLYPH NL005	[526E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13224, 0x0041 };
    uint32_t const ces[9] = { 0x526E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_018)
{
    // 13224 0062;	
    // (𓈤) EGYPTIAN HIEROGLYPH NL005	[526E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13224, 0x0062 };
    uint32_t const ces[9] = { 0x526E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_019)
{
    // 13225 0021;	
    // (𓈥) EGYPTIAN HIEROGLYPH NL005A	[526F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13225, 0x0021 };
    uint32_t const ces[9] = { 0x526F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_020)
{
    // 13225 003F;	
    // (𓈥) EGYPTIAN HIEROGLYPH NL005A	[526F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13225, 0x003F };
    uint32_t const ces[9] = { 0x526F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_021)
{
    // 13225 0061;	
    // (𓈥) EGYPTIAN HIEROGLYPH NL005A	[526F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13225, 0x0061 };
    uint32_t const ces[9] = { 0x526F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_022)
{
    // 13225 0041;	
    // (𓈥) EGYPTIAN HIEROGLYPH NL005A	[526F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13225, 0x0041 };
    uint32_t const ces[9] = { 0x526F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_023)
{
    // 13225 0062;	
    // (𓈥) EGYPTIAN HIEROGLYPH NL005A	[526F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13225, 0x0062 };
    uint32_t const ces[9] = { 0x526F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_024)
{
    // 13226 0021;	
    // (𓈦) EGYPTIAN HIEROGLYPH NL006	[5270 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13226, 0x0021 };
    uint32_t const ces[9] = { 0x5270, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_025)
{
    // 13226 003F;	
    // (𓈦) EGYPTIAN HIEROGLYPH NL006	[5270 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13226, 0x003F };
    uint32_t const ces[9] = { 0x5270, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_026)
{
    // 13226 0061;	
    // (𓈦) EGYPTIAN HIEROGLYPH NL006	[5270 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13226, 0x0061 };
    uint32_t const ces[9] = { 0x5270, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_027)
{
    // 13226 0041;	
    // (𓈦) EGYPTIAN HIEROGLYPH NL006	[5270 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13226, 0x0041 };
    uint32_t const ces[9] = { 0x5270, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_028)
{
    // 13226 0062;	
    // (𓈦) EGYPTIAN HIEROGLYPH NL006	[5270 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13226, 0x0062 };
    uint32_t const ces[9] = { 0x5270, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_029)
{
    // 13227 0021;	
    // (𓈧) EGYPTIAN HIEROGLYPH NL007	[5271 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13227, 0x0021 };
    uint32_t const ces[9] = { 0x5271, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_030)
{
    // 13227 003F;	
    // (𓈧) EGYPTIAN HIEROGLYPH NL007	[5271 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13227, 0x003F };
    uint32_t const ces[9] = { 0x5271, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_031)
{
    // 13227 0061;	
    // (𓈧) EGYPTIAN HIEROGLYPH NL007	[5271 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13227, 0x0061 };
    uint32_t const ces[9] = { 0x5271, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_032)
{
    // 13227 0041;	
    // (𓈧) EGYPTIAN HIEROGLYPH NL007	[5271 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13227, 0x0041 };
    uint32_t const ces[9] = { 0x5271, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_033)
{
    // 13227 0062;	
    // (𓈧) EGYPTIAN HIEROGLYPH NL007	[5271 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13227, 0x0062 };
    uint32_t const ces[9] = { 0x5271, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_034)
{
    // 13228 0021;	
    // (𓈨) EGYPTIAN HIEROGLYPH NL008	[5272 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13228, 0x0021 };
    uint32_t const ces[9] = { 0x5272, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_035)
{
    // 13228 003F;	
    // (𓈨) EGYPTIAN HIEROGLYPH NL008	[5272 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13228, 0x003F };
    uint32_t const ces[9] = { 0x5272, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_036)
{
    // 13228 0061;	
    // (𓈨) EGYPTIAN HIEROGLYPH NL008	[5272 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13228, 0x0061 };
    uint32_t const ces[9] = { 0x5272, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_037)
{
    // 13228 0041;	
    // (𓈨) EGYPTIAN HIEROGLYPH NL008	[5272 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13228, 0x0041 };
    uint32_t const ces[9] = { 0x5272, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_038)
{
    // 13228 0062;	
    // (𓈨) EGYPTIAN HIEROGLYPH NL008	[5272 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13228, 0x0062 };
    uint32_t const ces[9] = { 0x5272, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_039)
{
    // 13229 0021;	
    // (𓈩) EGYPTIAN HIEROGLYPH NL009	[5273 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13229, 0x0021 };
    uint32_t const ces[9] = { 0x5273, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_040)
{
    // 13229 003F;	
    // (𓈩) EGYPTIAN HIEROGLYPH NL009	[5273 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13229, 0x003F };
    uint32_t const ces[9] = { 0x5273, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_041)
{
    // 13229 0061;	
    // (𓈩) EGYPTIAN HIEROGLYPH NL009	[5273 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13229, 0x0061 };
    uint32_t const ces[9] = { 0x5273, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_042)
{
    // 13229 0041;	
    // (𓈩) EGYPTIAN HIEROGLYPH NL009	[5273 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13229, 0x0041 };
    uint32_t const ces[9] = { 0x5273, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_043)
{
    // 13229 0062;	
    // (𓈩) EGYPTIAN HIEROGLYPH NL009	[5273 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13229, 0x0062 };
    uint32_t const ces[9] = { 0x5273, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_044)
{
    // 1322A 0021;	
    // (𓈪) EGYPTIAN HIEROGLYPH NL010	[5274 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322A, 0x0021 };
    uint32_t const ces[9] = { 0x5274, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_045)
{
    // 1322A 003F;	
    // (𓈪) EGYPTIAN HIEROGLYPH NL010	[5274 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322A, 0x003F };
    uint32_t const ces[9] = { 0x5274, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_046)
{
    // 1322A 0061;	
    // (𓈪) EGYPTIAN HIEROGLYPH NL010	[5274 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322A, 0x0061 };
    uint32_t const ces[9] = { 0x5274, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_047)
{
    // 1322A 0041;	
    // (𓈪) EGYPTIAN HIEROGLYPH NL010	[5274 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1322A, 0x0041 };
    uint32_t const ces[9] = { 0x5274, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_048)
{
    // 1322A 0062;	
    // (𓈪) EGYPTIAN HIEROGLYPH NL010	[5274 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322A, 0x0062 };
    uint32_t const ces[9] = { 0x5274, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_049)
{
    // 1322B 0021;	
    // (𓈫) EGYPTIAN HIEROGLYPH NL011	[5275 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322B, 0x0021 };
    uint32_t const ces[9] = { 0x5275, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_050)
{
    // 1322B 003F;	
    // (𓈫) EGYPTIAN HIEROGLYPH NL011	[5275 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322B, 0x003F };
    uint32_t const ces[9] = { 0x5275, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_051)
{
    // 1322B 0061;	
    // (𓈫) EGYPTIAN HIEROGLYPH NL011	[5275 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322B, 0x0061 };
    uint32_t const ces[9] = { 0x5275, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_052)
{
    // 1322B 0041;	
    // (𓈫) EGYPTIAN HIEROGLYPH NL011	[5275 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1322B, 0x0041 };
    uint32_t const ces[9] = { 0x5275, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_053)
{
    // 1322B 0062;	
    // (𓈫) EGYPTIAN HIEROGLYPH NL011	[5275 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322B, 0x0062 };
    uint32_t const ces[9] = { 0x5275, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_054)
{
    // 1322C 0021;	
    // (𓈬) EGYPTIAN HIEROGLYPH NL012	[5276 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322C, 0x0021 };
    uint32_t const ces[9] = { 0x5276, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_055)
{
    // 1322C 003F;	
    // (𓈬) EGYPTIAN HIEROGLYPH NL012	[5276 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322C, 0x003F };
    uint32_t const ces[9] = { 0x5276, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_056)
{
    // 1322C 0061;	
    // (𓈬) EGYPTIAN HIEROGLYPH NL012	[5276 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322C, 0x0061 };
    uint32_t const ces[9] = { 0x5276, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_057)
{
    // 1322C 0041;	
    // (𓈬) EGYPTIAN HIEROGLYPH NL012	[5276 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1322C, 0x0041 };
    uint32_t const ces[9] = { 0x5276, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_058)
{
    // 1322C 0062;	
    // (𓈬) EGYPTIAN HIEROGLYPH NL012	[5276 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322C, 0x0062 };
    uint32_t const ces[9] = { 0x5276, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_059)
{
    // 1322D 0021;	
    // (𓈭) EGYPTIAN HIEROGLYPH NL013	[5277 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322D, 0x0021 };
    uint32_t const ces[9] = { 0x5277, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_060)
{
    // 1322D 003F;	
    // (𓈭) EGYPTIAN HIEROGLYPH NL013	[5277 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322D, 0x003F };
    uint32_t const ces[9] = { 0x5277, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_061)
{
    // 1322D 0061;	
    // (𓈭) EGYPTIAN HIEROGLYPH NL013	[5277 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322D, 0x0061 };
    uint32_t const ces[9] = { 0x5277, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_062)
{
    // 1322D 0041;	
    // (𓈭) EGYPTIAN HIEROGLYPH NL013	[5277 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1322D, 0x0041 };
    uint32_t const ces[9] = { 0x5277, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_063)
{
    // 1322D 0062;	
    // (𓈭) EGYPTIAN HIEROGLYPH NL013	[5277 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322D, 0x0062 };
    uint32_t const ces[9] = { 0x5277, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_064)
{
    // 1322E 0021;	
    // (𓈮) EGYPTIAN HIEROGLYPH NL014	[5278 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322E, 0x0021 };
    uint32_t const ces[9] = { 0x5278, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_065)
{
    // 1322E 003F;	
    // (𓈮) EGYPTIAN HIEROGLYPH NL014	[5278 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322E, 0x003F };
    uint32_t const ces[9] = { 0x5278, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_066)
{
    // 1322E 0061;	
    // (𓈮) EGYPTIAN HIEROGLYPH NL014	[5278 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322E, 0x0061 };
    uint32_t const ces[9] = { 0x5278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_067)
{
    // 1322E 0041;	
    // (𓈮) EGYPTIAN HIEROGLYPH NL014	[5278 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1322E, 0x0041 };
    uint32_t const ces[9] = { 0x5278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_068)
{
    // 1322E 0062;	
    // (𓈮) EGYPTIAN HIEROGLYPH NL014	[5278 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322E, 0x0062 };
    uint32_t const ces[9] = { 0x5278, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_069)
{
    // 1322F 0021;	
    // (𓈯) EGYPTIAN HIEROGLYPH NL015	[5279 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322F, 0x0021 };
    uint32_t const ces[9] = { 0x5279, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_070)
{
    // 1322F 003F;	
    // (𓈯) EGYPTIAN HIEROGLYPH NL015	[5279 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322F, 0x003F };
    uint32_t const ces[9] = { 0x5279, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_071)
{
    // 1322F 0061;	
    // (𓈯) EGYPTIAN HIEROGLYPH NL015	[5279 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322F, 0x0061 };
    uint32_t const ces[9] = { 0x5279, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_072)
{
    // 1322F 0041;	
    // (𓈯) EGYPTIAN HIEROGLYPH NL015	[5279 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1322F, 0x0041 };
    uint32_t const ces[9] = { 0x5279, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_073)
{
    // 1322F 0062;	
    // (𓈯) EGYPTIAN HIEROGLYPH NL015	[5279 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322F, 0x0062 };
    uint32_t const ces[9] = { 0x5279, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_074)
{
    // 13230 0021;	
    // (𓈰) EGYPTIAN HIEROGLYPH NL016	[527A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13230, 0x0021 };
    uint32_t const ces[9] = { 0x527A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_075)
{
    // 13230 003F;	
    // (𓈰) EGYPTIAN HIEROGLYPH NL016	[527A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13230, 0x003F };
    uint32_t const ces[9] = { 0x527A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_076)
{
    // 13230 0061;	
    // (𓈰) EGYPTIAN HIEROGLYPH NL016	[527A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13230, 0x0061 };
    uint32_t const ces[9] = { 0x527A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_077)
{
    // 13230 0041;	
    // (𓈰) EGYPTIAN HIEROGLYPH NL016	[527A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13230, 0x0041 };
    uint32_t const ces[9] = { 0x527A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_078)
{
    // 13230 0062;	
    // (𓈰) EGYPTIAN HIEROGLYPH NL016	[527A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13230, 0x0062 };
    uint32_t const ces[9] = { 0x527A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_079)
{
    // 13231 0021;	
    // (𓈱) EGYPTIAN HIEROGLYPH NL017	[527B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13231, 0x0021 };
    uint32_t const ces[9] = { 0x527B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_080)
{
    // 13231 003F;	
    // (𓈱) EGYPTIAN HIEROGLYPH NL017	[527B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13231, 0x003F };
    uint32_t const ces[9] = { 0x527B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_081)
{
    // 13231 0061;	
    // (𓈱) EGYPTIAN HIEROGLYPH NL017	[527B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13231, 0x0061 };
    uint32_t const ces[9] = { 0x527B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_082)
{
    // 13231 0041;	
    // (𓈱) EGYPTIAN HIEROGLYPH NL017	[527B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13231, 0x0041 };
    uint32_t const ces[9] = { 0x527B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_083)
{
    // 13231 0062;	
    // (𓈱) EGYPTIAN HIEROGLYPH NL017	[527B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13231, 0x0062 };
    uint32_t const ces[9] = { 0x527B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_084)
{
    // 13232 0021;	
    // (𓈲) EGYPTIAN HIEROGLYPH NL017A	[527C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13232, 0x0021 };
    uint32_t const ces[9] = { 0x527C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_085)
{
    // 13232 003F;	
    // (𓈲) EGYPTIAN HIEROGLYPH NL017A	[527C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13232, 0x003F };
    uint32_t const ces[9] = { 0x527C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_086)
{
    // 13232 0061;	
    // (𓈲) EGYPTIAN HIEROGLYPH NL017A	[527C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13232, 0x0061 };
    uint32_t const ces[9] = { 0x527C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_087)
{
    // 13232 0041;	
    // (𓈲) EGYPTIAN HIEROGLYPH NL017A	[527C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13232, 0x0041 };
    uint32_t const ces[9] = { 0x527C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_088)
{
    // 13232 0062;	
    // (𓈲) EGYPTIAN HIEROGLYPH NL017A	[527C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13232, 0x0062 };
    uint32_t const ces[9] = { 0x527C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_089)
{
    // 13233 0021;	
    // (𓈳) EGYPTIAN HIEROGLYPH NL018	[527D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13233, 0x0021 };
    uint32_t const ces[9] = { 0x527D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_090)
{
    // 13233 003F;	
    // (𓈳) EGYPTIAN HIEROGLYPH NL018	[527D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13233, 0x003F };
    uint32_t const ces[9] = { 0x527D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_091)
{
    // 13233 0061;	
    // (𓈳) EGYPTIAN HIEROGLYPH NL018	[527D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13233, 0x0061 };
    uint32_t const ces[9] = { 0x527D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_092)
{
    // 13233 0041;	
    // (𓈳) EGYPTIAN HIEROGLYPH NL018	[527D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13233, 0x0041 };
    uint32_t const ces[9] = { 0x527D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_093)
{
    // 13233 0062;	
    // (𓈳) EGYPTIAN HIEROGLYPH NL018	[527D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13233, 0x0062 };
    uint32_t const ces[9] = { 0x527D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_094)
{
    // 13234 0021;	
    // (𓈴) EGYPTIAN HIEROGLYPH NL019	[527E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13234, 0x0021 };
    uint32_t const ces[9] = { 0x527E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_095)
{
    // 13234 003F;	
    // (𓈴) EGYPTIAN HIEROGLYPH NL019	[527E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13234, 0x003F };
    uint32_t const ces[9] = { 0x527E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_096)
{
    // 13234 0061;	
    // (𓈴) EGYPTIAN HIEROGLYPH NL019	[527E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13234, 0x0061 };
    uint32_t const ces[9] = { 0x527E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_097)
{
    // 13234 0041;	
    // (𓈴) EGYPTIAN HIEROGLYPH NL019	[527E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13234, 0x0041 };
    uint32_t const ces[9] = { 0x527E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_098)
{
    // 13234 0062;	
    // (𓈴) EGYPTIAN HIEROGLYPH NL019	[527E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13234, 0x0062 };
    uint32_t const ces[9] = { 0x527E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_099)
{
    // 13235 0021;	
    // (𓈵) EGYPTIAN HIEROGLYPH NL020	[527F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13235, 0x0021 };
    uint32_t const ces[9] = { 0x527F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_100)
{
    // 13235 003F;	
    // (𓈵) EGYPTIAN HIEROGLYPH NL020	[527F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13235, 0x003F };
    uint32_t const ces[9] = { 0x527F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_101)
{
    // 13235 0061;	
    // (𓈵) EGYPTIAN HIEROGLYPH NL020	[527F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13235, 0x0061 };
    uint32_t const ces[9] = { 0x527F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_102)
{
    // 13235 0041;	
    // (𓈵) EGYPTIAN HIEROGLYPH NL020	[527F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13235, 0x0041 };
    uint32_t const ces[9] = { 0x527F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_103)
{
    // 13235 0062;	
    // (𓈵) EGYPTIAN HIEROGLYPH NL020	[527F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13235, 0x0062 };
    uint32_t const ces[9] = { 0x527F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_104)
{
    // 13236 0021;	
    // (𓈶) EGYPTIAN HIEROGLYPH NU001	[5280 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13236, 0x0021 };
    uint32_t const ces[9] = { 0x5280, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_105)
{
    // 13236 003F;	
    // (𓈶) EGYPTIAN HIEROGLYPH NU001	[5280 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13236, 0x003F };
    uint32_t const ces[9] = { 0x5280, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_106)
{
    // 13236 0061;	
    // (𓈶) EGYPTIAN HIEROGLYPH NU001	[5280 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13236, 0x0061 };
    uint32_t const ces[9] = { 0x5280, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_107)
{
    // 13236 0041;	
    // (𓈶) EGYPTIAN HIEROGLYPH NU001	[5280 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13236, 0x0041 };
    uint32_t const ces[9] = { 0x5280, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_108)
{
    // 13236 0062;	
    // (𓈶) EGYPTIAN HIEROGLYPH NU001	[5280 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13236, 0x0062 };
    uint32_t const ces[9] = { 0x5280, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_109)
{
    // 13237 0021;	
    // (𓈷) EGYPTIAN HIEROGLYPH NU002	[5281 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13237, 0x0021 };
    uint32_t const ces[9] = { 0x5281, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_110)
{
    // 13237 003F;	
    // (𓈷) EGYPTIAN HIEROGLYPH NU002	[5281 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13237, 0x003F };
    uint32_t const ces[9] = { 0x5281, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_111)
{
    // 13237 0061;	
    // (𓈷) EGYPTIAN HIEROGLYPH NU002	[5281 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13237, 0x0061 };
    uint32_t const ces[9] = { 0x5281, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_112)
{
    // 13237 0041;	
    // (𓈷) EGYPTIAN HIEROGLYPH NU002	[5281 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13237, 0x0041 };
    uint32_t const ces[9] = { 0x5281, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_113)
{
    // 13237 0062;	
    // (𓈷) EGYPTIAN HIEROGLYPH NU002	[5281 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13237, 0x0062 };
    uint32_t const ces[9] = { 0x5281, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_114)
{
    // 13238 0021;	
    // (𓈸) EGYPTIAN HIEROGLYPH NU003	[5282 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13238, 0x0021 };
    uint32_t const ces[9] = { 0x5282, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_115)
{
    // 13238 003F;	
    // (𓈸) EGYPTIAN HIEROGLYPH NU003	[5282 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13238, 0x003F };
    uint32_t const ces[9] = { 0x5282, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_116)
{
    // 13238 0061;	
    // (𓈸) EGYPTIAN HIEROGLYPH NU003	[5282 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13238, 0x0061 };
    uint32_t const ces[9] = { 0x5282, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_117)
{
    // 13238 0041;	
    // (𓈸) EGYPTIAN HIEROGLYPH NU003	[5282 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13238, 0x0041 };
    uint32_t const ces[9] = { 0x5282, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_118)
{
    // 13238 0062;	
    // (𓈸) EGYPTIAN HIEROGLYPH NU003	[5282 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13238, 0x0062 };
    uint32_t const ces[9] = { 0x5282, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_119)
{
    // 13239 0021;	
    // (𓈹) EGYPTIAN HIEROGLYPH NU004	[5283 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13239, 0x0021 };
    uint32_t const ces[9] = { 0x5283, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_120)
{
    // 13239 003F;	
    // (𓈹) EGYPTIAN HIEROGLYPH NU004	[5283 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13239, 0x003F };
    uint32_t const ces[9] = { 0x5283, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_121)
{
    // 13239 0061;	
    // (𓈹) EGYPTIAN HIEROGLYPH NU004	[5283 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13239, 0x0061 };
    uint32_t const ces[9] = { 0x5283, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_122)
{
    // 13239 0041;	
    // (𓈹) EGYPTIAN HIEROGLYPH NU004	[5283 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13239, 0x0041 };
    uint32_t const ces[9] = { 0x5283, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_123)
{
    // 13239 0062;	
    // (𓈹) EGYPTIAN HIEROGLYPH NU004	[5283 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13239, 0x0062 };
    uint32_t const ces[9] = { 0x5283, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_124)
{
    // 1323A 0021;	
    // (𓈺) EGYPTIAN HIEROGLYPH NU005	[5284 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323A, 0x0021 };
    uint32_t const ces[9] = { 0x5284, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_125)
{
    // 1323A 003F;	
    // (𓈺) EGYPTIAN HIEROGLYPH NU005	[5284 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323A, 0x003F };
    uint32_t const ces[9] = { 0x5284, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_126)
{
    // 1323A 0061;	
    // (𓈺) EGYPTIAN HIEROGLYPH NU005	[5284 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323A, 0x0061 };
    uint32_t const ces[9] = { 0x5284, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_127)
{
    // 1323A 0041;	
    // (𓈺) EGYPTIAN HIEROGLYPH NU005	[5284 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1323A, 0x0041 };
    uint32_t const ces[9] = { 0x5284, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_128)
{
    // 1323A 0062;	
    // (𓈺) EGYPTIAN HIEROGLYPH NU005	[5284 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323A, 0x0062 };
    uint32_t const ces[9] = { 0x5284, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_129)
{
    // 1323B 0021;	
    // (𓈻) EGYPTIAN HIEROGLYPH NU006	[5285 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323B, 0x0021 };
    uint32_t const ces[9] = { 0x5285, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_130)
{
    // 1323B 003F;	
    // (𓈻) EGYPTIAN HIEROGLYPH NU006	[5285 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323B, 0x003F };
    uint32_t const ces[9] = { 0x5285, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_131)
{
    // 1323B 0061;	
    // (𓈻) EGYPTIAN HIEROGLYPH NU006	[5285 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323B, 0x0061 };
    uint32_t const ces[9] = { 0x5285, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_132)
{
    // 1323B 0041;	
    // (𓈻) EGYPTIAN HIEROGLYPH NU006	[5285 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1323B, 0x0041 };
    uint32_t const ces[9] = { 0x5285, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_133)
{
    // 1323B 0062;	
    // (𓈻) EGYPTIAN HIEROGLYPH NU006	[5285 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323B, 0x0062 };
    uint32_t const ces[9] = { 0x5285, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_134)
{
    // 1323C 0021;	
    // (𓈼) EGYPTIAN HIEROGLYPH NU007	[5286 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323C, 0x0021 };
    uint32_t const ces[9] = { 0x5286, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_135)
{
    // 1323C 003F;	
    // (𓈼) EGYPTIAN HIEROGLYPH NU007	[5286 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323C, 0x003F };
    uint32_t const ces[9] = { 0x5286, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_136)
{
    // 1323C 0061;	
    // (𓈼) EGYPTIAN HIEROGLYPH NU007	[5286 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323C, 0x0061 };
    uint32_t const ces[9] = { 0x5286, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_137)
{
    // 1323C 0041;	
    // (𓈼) EGYPTIAN HIEROGLYPH NU007	[5286 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1323C, 0x0041 };
    uint32_t const ces[9] = { 0x5286, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_138)
{
    // 1323C 0062;	
    // (𓈼) EGYPTIAN HIEROGLYPH NU007	[5286 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323C, 0x0062 };
    uint32_t const ces[9] = { 0x5286, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_139)
{
    // 1323D 0021;	
    // (𓈽) EGYPTIAN HIEROGLYPH NU008	[5287 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323D, 0x0021 };
    uint32_t const ces[9] = { 0x5287, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_140)
{
    // 1323D 003F;	
    // (𓈽) EGYPTIAN HIEROGLYPH NU008	[5287 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323D, 0x003F };
    uint32_t const ces[9] = { 0x5287, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_141)
{
    // 1323D 0061;	
    // (𓈽) EGYPTIAN HIEROGLYPH NU008	[5287 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323D, 0x0061 };
    uint32_t const ces[9] = { 0x5287, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_142)
{
    // 1323D 0041;	
    // (𓈽) EGYPTIAN HIEROGLYPH NU008	[5287 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1323D, 0x0041 };
    uint32_t const ces[9] = { 0x5287, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_143)
{
    // 1323D 0062;	
    // (𓈽) EGYPTIAN HIEROGLYPH NU008	[5287 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323D, 0x0062 };
    uint32_t const ces[9] = { 0x5287, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_144)
{
    // 1323E 0021;	
    // (𓈾) EGYPTIAN HIEROGLYPH NU009	[5288 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323E, 0x0021 };
    uint32_t const ces[9] = { 0x5288, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_145)
{
    // 1323E 003F;	
    // (𓈾) EGYPTIAN HIEROGLYPH NU009	[5288 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323E, 0x003F };
    uint32_t const ces[9] = { 0x5288, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_146)
{
    // 1323E 0061;	
    // (𓈾) EGYPTIAN HIEROGLYPH NU009	[5288 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323E, 0x0061 };
    uint32_t const ces[9] = { 0x5288, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_147)
{
    // 1323E 0041;	
    // (𓈾) EGYPTIAN HIEROGLYPH NU009	[5288 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1323E, 0x0041 };
    uint32_t const ces[9] = { 0x5288, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_148)
{
    // 1323E 0062;	
    // (𓈾) EGYPTIAN HIEROGLYPH NU009	[5288 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323E, 0x0062 };
    uint32_t const ces[9] = { 0x5288, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_149)
{
    // 1323F 0021;	
    // (𓈿) EGYPTIAN HIEROGLYPH NU010	[5289 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323F, 0x0021 };
    uint32_t const ces[9] = { 0x5289, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_150)
{
    // 1323F 003F;	
    // (𓈿) EGYPTIAN HIEROGLYPH NU010	[5289 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323F, 0x003F };
    uint32_t const ces[9] = { 0x5289, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_151)
{
    // 1323F 0061;	
    // (𓈿) EGYPTIAN HIEROGLYPH NU010	[5289 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323F, 0x0061 };
    uint32_t const ces[9] = { 0x5289, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_152)
{
    // 1323F 0041;	
    // (𓈿) EGYPTIAN HIEROGLYPH NU010	[5289 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1323F, 0x0041 };
    uint32_t const ces[9] = { 0x5289, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_153)
{
    // 1323F 0062;	
    // (𓈿) EGYPTIAN HIEROGLYPH NU010	[5289 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323F, 0x0062 };
    uint32_t const ces[9] = { 0x5289, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_154)
{
    // 13240 0021;	
    // (𓉀) EGYPTIAN HIEROGLYPH NU010A	[528A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13240, 0x0021 };
    uint32_t const ces[9] = { 0x528A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_155)
{
    // 13240 003F;	
    // (𓉀) EGYPTIAN HIEROGLYPH NU010A	[528A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13240, 0x003F };
    uint32_t const ces[9] = { 0x528A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_156)
{
    // 13240 0061;	
    // (𓉀) EGYPTIAN HIEROGLYPH NU010A	[528A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13240, 0x0061 };
    uint32_t const ces[9] = { 0x528A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_157)
{
    // 13240 0041;	
    // (𓉀) EGYPTIAN HIEROGLYPH NU010A	[528A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13240, 0x0041 };
    uint32_t const ces[9] = { 0x528A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_158)
{
    // 13240 0062;	
    // (𓉀) EGYPTIAN HIEROGLYPH NU010A	[528A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13240, 0x0062 };
    uint32_t const ces[9] = { 0x528A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_159)
{
    // 13241 0021;	
    // (𓉁) EGYPTIAN HIEROGLYPH NU011	[528B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13241, 0x0021 };
    uint32_t const ces[9] = { 0x528B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_160)
{
    // 13241 003F;	
    // (𓉁) EGYPTIAN HIEROGLYPH NU011	[528B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13241, 0x003F };
    uint32_t const ces[9] = { 0x528B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_161)
{
    // 13241 0061;	
    // (𓉁) EGYPTIAN HIEROGLYPH NU011	[528B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13241, 0x0061 };
    uint32_t const ces[9] = { 0x528B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_162)
{
    // 13241 0041;	
    // (𓉁) EGYPTIAN HIEROGLYPH NU011	[528B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13241, 0x0041 };
    uint32_t const ces[9] = { 0x528B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_163)
{
    // 13241 0062;	
    // (𓉁) EGYPTIAN HIEROGLYPH NU011	[528B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13241, 0x0062 };
    uint32_t const ces[9] = { 0x528B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_164)
{
    // 13242 0021;	
    // (𓉂) EGYPTIAN HIEROGLYPH NU011A	[528C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13242, 0x0021 };
    uint32_t const ces[9] = { 0x528C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_165)
{
    // 13242 003F;	
    // (𓉂) EGYPTIAN HIEROGLYPH NU011A	[528C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13242, 0x003F };
    uint32_t const ces[9] = { 0x528C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_166)
{
    // 13242 0061;	
    // (𓉂) EGYPTIAN HIEROGLYPH NU011A	[528C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13242, 0x0061 };
    uint32_t const ces[9] = { 0x528C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_167)
{
    // 13242 0041;	
    // (𓉂) EGYPTIAN HIEROGLYPH NU011A	[528C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13242, 0x0041 };
    uint32_t const ces[9] = { 0x528C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_168)
{
    // 13242 0062;	
    // (𓉂) EGYPTIAN HIEROGLYPH NU011A	[528C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13242, 0x0062 };
    uint32_t const ces[9] = { 0x528C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_169)
{
    // 13243 0021;	
    // (𓉃) EGYPTIAN HIEROGLYPH NU012	[528D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13243, 0x0021 };
    uint32_t const ces[9] = { 0x528D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_170)
{
    // 13243 003F;	
    // (𓉃) EGYPTIAN HIEROGLYPH NU012	[528D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13243, 0x003F };
    uint32_t const ces[9] = { 0x528D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_171)
{
    // 13243 0061;	
    // (𓉃) EGYPTIAN HIEROGLYPH NU012	[528D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13243, 0x0061 };
    uint32_t const ces[9] = { 0x528D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_172)
{
    // 13243 0041;	
    // (𓉃) EGYPTIAN HIEROGLYPH NU012	[528D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13243, 0x0041 };
    uint32_t const ces[9] = { 0x528D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_173)
{
    // 13243 0062;	
    // (𓉃) EGYPTIAN HIEROGLYPH NU012	[528D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13243, 0x0062 };
    uint32_t const ces[9] = { 0x528D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_174)
{
    // 13244 0021;	
    // (𓉄) EGYPTIAN HIEROGLYPH NU013	[528E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13244, 0x0021 };
    uint32_t const ces[9] = { 0x528E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_175)
{
    // 13244 003F;	
    // (𓉄) EGYPTIAN HIEROGLYPH NU013	[528E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13244, 0x003F };
    uint32_t const ces[9] = { 0x528E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_176)
{
    // 13244 0061;	
    // (𓉄) EGYPTIAN HIEROGLYPH NU013	[528E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13244, 0x0061 };
    uint32_t const ces[9] = { 0x528E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_177)
{
    // 13244 0041;	
    // (𓉄) EGYPTIAN HIEROGLYPH NU013	[528E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13244, 0x0041 };
    uint32_t const ces[9] = { 0x528E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_178)
{
    // 13244 0062;	
    // (𓉄) EGYPTIAN HIEROGLYPH NU013	[528E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13244, 0x0062 };
    uint32_t const ces[9] = { 0x528E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_179)
{
    // 13245 0021;	
    // (𓉅) EGYPTIAN HIEROGLYPH NU014	[528F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13245, 0x0021 };
    uint32_t const ces[9] = { 0x528F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_180)
{
    // 13245 003F;	
    // (𓉅) EGYPTIAN HIEROGLYPH NU014	[528F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13245, 0x003F };
    uint32_t const ces[9] = { 0x528F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_181)
{
    // 13245 0061;	
    // (𓉅) EGYPTIAN HIEROGLYPH NU014	[528F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13245, 0x0061 };
    uint32_t const ces[9] = { 0x528F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_182)
{
    // 13245 0041;	
    // (𓉅) EGYPTIAN HIEROGLYPH NU014	[528F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13245, 0x0041 };
    uint32_t const ces[9] = { 0x528F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_183)
{
    // 13245 0062;	
    // (𓉅) EGYPTIAN HIEROGLYPH NU014	[528F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13245, 0x0062 };
    uint32_t const ces[9] = { 0x528F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_184)
{
    // 13246 0021;	
    // (𓉆) EGYPTIAN HIEROGLYPH NU015	[5290 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13246, 0x0021 };
    uint32_t const ces[9] = { 0x5290, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_185)
{
    // 13246 003F;	
    // (𓉆) EGYPTIAN HIEROGLYPH NU015	[5290 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13246, 0x003F };
    uint32_t const ces[9] = { 0x5290, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_186)
{
    // 13246 0061;	
    // (𓉆) EGYPTIAN HIEROGLYPH NU015	[5290 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13246, 0x0061 };
    uint32_t const ces[9] = { 0x5290, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_187)
{
    // 13246 0041;	
    // (𓉆) EGYPTIAN HIEROGLYPH NU015	[5290 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13246, 0x0041 };
    uint32_t const ces[9] = { 0x5290, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_188)
{
    // 13246 0062;	
    // (𓉆) EGYPTIAN HIEROGLYPH NU015	[5290 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13246, 0x0062 };
    uint32_t const ces[9] = { 0x5290, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_189)
{
    // 13247 0021;	
    // (𓉇) EGYPTIAN HIEROGLYPH NU016	[5291 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13247, 0x0021 };
    uint32_t const ces[9] = { 0x5291, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_190)
{
    // 13247 003F;	
    // (𓉇) EGYPTIAN HIEROGLYPH NU016	[5291 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13247, 0x003F };
    uint32_t const ces[9] = { 0x5291, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_191)
{
    // 13247 0061;	
    // (𓉇) EGYPTIAN HIEROGLYPH NU016	[5291 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13247, 0x0061 };
    uint32_t const ces[9] = { 0x5291, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_192)
{
    // 13247 0041;	
    // (𓉇) EGYPTIAN HIEROGLYPH NU016	[5291 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13247, 0x0041 };
    uint32_t const ces[9] = { 0x5291, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_193)
{
    // 13247 0062;	
    // (𓉇) EGYPTIAN HIEROGLYPH NU016	[5291 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13247, 0x0062 };
    uint32_t const ces[9] = { 0x5291, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_194)
{
    // 13248 0021;	
    // (𓉈) EGYPTIAN HIEROGLYPH NU017	[5292 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13248, 0x0021 };
    uint32_t const ces[9] = { 0x5292, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_195)
{
    // 13248 003F;	
    // (𓉈) EGYPTIAN HIEROGLYPH NU017	[5292 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13248, 0x003F };
    uint32_t const ces[9] = { 0x5292, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_196)
{
    // 13248 0061;	
    // (𓉈) EGYPTIAN HIEROGLYPH NU017	[5292 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13248, 0x0061 };
    uint32_t const ces[9] = { 0x5292, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_197)
{
    // 13248 0041;	
    // (𓉈) EGYPTIAN HIEROGLYPH NU017	[5292 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13248, 0x0041 };
    uint32_t const ces[9] = { 0x5292, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_198)
{
    // 13248 0062;	
    // (𓉈) EGYPTIAN HIEROGLYPH NU017	[5292 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13248, 0x0062 };
    uint32_t const ces[9] = { 0x5292, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_199)
{
    // 13249 0021;	
    // (𓉉) EGYPTIAN HIEROGLYPH NU018	[5293 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13249, 0x0021 };
    uint32_t const ces[9] = { 0x5293, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_200)
{
    // 13249 003F;	
    // (𓉉) EGYPTIAN HIEROGLYPH NU018	[5293 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13249, 0x003F };
    uint32_t const ces[9] = { 0x5293, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_201)
{
    // 13249 0061;	
    // (𓉉) EGYPTIAN HIEROGLYPH NU018	[5293 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13249, 0x0061 };
    uint32_t const ces[9] = { 0x5293, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_202)
{
    // 13249 0041;	
    // (𓉉) EGYPTIAN HIEROGLYPH NU018	[5293 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13249, 0x0041 };
    uint32_t const ces[9] = { 0x5293, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_203)
{
    // 13249 0062;	
    // (𓉉) EGYPTIAN HIEROGLYPH NU018	[5293 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13249, 0x0062 };
    uint32_t const ces[9] = { 0x5293, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_204)
{
    // 1324A 0021;	
    // (𓉊) EGYPTIAN HIEROGLYPH NU018A	[5294 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324A, 0x0021 };
    uint32_t const ces[9] = { 0x5294, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_205)
{
    // 1324A 003F;	
    // (𓉊) EGYPTIAN HIEROGLYPH NU018A	[5294 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324A, 0x003F };
    uint32_t const ces[9] = { 0x5294, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_206)
{
    // 1324A 0061;	
    // (𓉊) EGYPTIAN HIEROGLYPH NU018A	[5294 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324A, 0x0061 };
    uint32_t const ces[9] = { 0x5294, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_207)
{
    // 1324A 0041;	
    // (𓉊) EGYPTIAN HIEROGLYPH NU018A	[5294 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1324A, 0x0041 };
    uint32_t const ces[9] = { 0x5294, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_208)
{
    // 1324A 0062;	
    // (𓉊) EGYPTIAN HIEROGLYPH NU018A	[5294 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324A, 0x0062 };
    uint32_t const ces[9] = { 0x5294, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_209)
{
    // 1324B 0021;	
    // (𓉋) EGYPTIAN HIEROGLYPH NU019	[5295 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324B, 0x0021 };
    uint32_t const ces[9] = { 0x5295, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_210)
{
    // 1324B 003F;	
    // (𓉋) EGYPTIAN HIEROGLYPH NU019	[5295 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324B, 0x003F };
    uint32_t const ces[9] = { 0x5295, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_211)
{
    // 1324B 0061;	
    // (𓉋) EGYPTIAN HIEROGLYPH NU019	[5295 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324B, 0x0061 };
    uint32_t const ces[9] = { 0x5295, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_212)
{
    // 1324B 0041;	
    // (𓉋) EGYPTIAN HIEROGLYPH NU019	[5295 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1324B, 0x0041 };
    uint32_t const ces[9] = { 0x5295, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_213)
{
    // 1324B 0062;	
    // (𓉋) EGYPTIAN HIEROGLYPH NU019	[5295 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324B, 0x0062 };
    uint32_t const ces[9] = { 0x5295, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_214)
{
    // 1324C 0021;	
    // (𓉌) EGYPTIAN HIEROGLYPH NU020	[5296 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324C, 0x0021 };
    uint32_t const ces[9] = { 0x5296, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_215)
{
    // 1324C 003F;	
    // (𓉌) EGYPTIAN HIEROGLYPH NU020	[5296 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324C, 0x003F };
    uint32_t const ces[9] = { 0x5296, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_216)
{
    // 1324C 0061;	
    // (𓉌) EGYPTIAN HIEROGLYPH NU020	[5296 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324C, 0x0061 };
    uint32_t const ces[9] = { 0x5296, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_217)
{
    // 1324C 0041;	
    // (𓉌) EGYPTIAN HIEROGLYPH NU020	[5296 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1324C, 0x0041 };
    uint32_t const ces[9] = { 0x5296, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_218)
{
    // 1324C 0062;	
    // (𓉌) EGYPTIAN HIEROGLYPH NU020	[5296 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324C, 0x0062 };
    uint32_t const ces[9] = { 0x5296, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_219)
{
    // 1324D 0021;	
    // (𓉍) EGYPTIAN HIEROGLYPH NU021	[5297 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324D, 0x0021 };
    uint32_t const ces[9] = { 0x5297, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_220)
{
    // 1324D 003F;	
    // (𓉍) EGYPTIAN HIEROGLYPH NU021	[5297 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324D, 0x003F };
    uint32_t const ces[9] = { 0x5297, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_221)
{
    // 1324D 0061;	
    // (𓉍) EGYPTIAN HIEROGLYPH NU021	[5297 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324D, 0x0061 };
    uint32_t const ces[9] = { 0x5297, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_222)
{
    // 1324D 0041;	
    // (𓉍) EGYPTIAN HIEROGLYPH NU021	[5297 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1324D, 0x0041 };
    uint32_t const ces[9] = { 0x5297, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_223)
{
    // 1324D 0062;	
    // (𓉍) EGYPTIAN HIEROGLYPH NU021	[5297 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324D, 0x0062 };
    uint32_t const ces[9] = { 0x5297, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_224)
{
    // 1324E 0021;	
    // (𓉎) EGYPTIAN HIEROGLYPH NU022	[5298 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324E, 0x0021 };
    uint32_t const ces[9] = { 0x5298, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_225)
{
    // 1324E 003F;	
    // (𓉎) EGYPTIAN HIEROGLYPH NU022	[5298 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324E, 0x003F };
    uint32_t const ces[9] = { 0x5298, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_226)
{
    // 1324E 0061;	
    // (𓉎) EGYPTIAN HIEROGLYPH NU022	[5298 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324E, 0x0061 };
    uint32_t const ces[9] = { 0x5298, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_227)
{
    // 1324E 0041;	
    // (𓉎) EGYPTIAN HIEROGLYPH NU022	[5298 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1324E, 0x0041 };
    uint32_t const ces[9] = { 0x5298, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_228)
{
    // 1324E 0062;	
    // (𓉎) EGYPTIAN HIEROGLYPH NU022	[5298 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324E, 0x0062 };
    uint32_t const ces[9] = { 0x5298, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_229)
{
    // 1324F 0021;	
    // (𓉏) EGYPTIAN HIEROGLYPH NU022A	[5299 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324F, 0x0021 };
    uint32_t const ces[9] = { 0x5299, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_230)
{
    // 1324F 003F;	
    // (𓉏) EGYPTIAN HIEROGLYPH NU022A	[5299 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324F, 0x003F };
    uint32_t const ces[9] = { 0x5299, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_231)
{
    // 1324F 0061;	
    // (𓉏) EGYPTIAN HIEROGLYPH NU022A	[5299 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324F, 0x0061 };
    uint32_t const ces[9] = { 0x5299, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_232)
{
    // 1324F 0041;	
    // (𓉏) EGYPTIAN HIEROGLYPH NU022A	[5299 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1324F, 0x0041 };
    uint32_t const ces[9] = { 0x5299, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_233)
{
    // 1324F 0062;	
    // (𓉏) EGYPTIAN HIEROGLYPH NU022A	[5299 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324F, 0x0062 };
    uint32_t const ces[9] = { 0x5299, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_234)
{
    // 13250 0021;	
    // (𓉐) EGYPTIAN HIEROGLYPH O001	[529A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13250, 0x0021 };
    uint32_t const ces[9] = { 0x529A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_235)
{
    // 13250 003F;	
    // (𓉐) EGYPTIAN HIEROGLYPH O001	[529A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13250, 0x003F };
    uint32_t const ces[9] = { 0x529A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_236)
{
    // 13250 0061;	
    // (𓉐) EGYPTIAN HIEROGLYPH O001	[529A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13250, 0x0061 };
    uint32_t const ces[9] = { 0x529A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_237)
{
    // 13250 0041;	
    // (𓉐) EGYPTIAN HIEROGLYPH O001	[529A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13250, 0x0041 };
    uint32_t const ces[9] = { 0x529A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_238)
{
    // 13250 0062;	
    // (𓉐) EGYPTIAN HIEROGLYPH O001	[529A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13250, 0x0062 };
    uint32_t const ces[9] = { 0x529A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_239)
{
    // 13251 0021;	
    // (𓉑) EGYPTIAN HIEROGLYPH O001A	[529B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13251, 0x0021 };
    uint32_t const ces[9] = { 0x529B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_240)
{
    // 13251 003F;	
    // (𓉑) EGYPTIAN HIEROGLYPH O001A	[529B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13251, 0x003F };
    uint32_t const ces[9] = { 0x529B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_241)
{
    // 13251 0061;	
    // (𓉑) EGYPTIAN HIEROGLYPH O001A	[529B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13251, 0x0061 };
    uint32_t const ces[9] = { 0x529B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_242)
{
    // 13251 0041;	
    // (𓉑) EGYPTIAN HIEROGLYPH O001A	[529B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13251, 0x0041 };
    uint32_t const ces[9] = { 0x529B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_243)
{
    // 13251 0062;	
    // (𓉑) EGYPTIAN HIEROGLYPH O001A	[529B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13251, 0x0062 };
    uint32_t const ces[9] = { 0x529B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_244)
{
    // 13252 0021;	
    // (𓉒) EGYPTIAN HIEROGLYPH O002	[529C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13252, 0x0021 };
    uint32_t const ces[9] = { 0x529C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_245)
{
    // 13252 003F;	
    // (𓉒) EGYPTIAN HIEROGLYPH O002	[529C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13252, 0x003F };
    uint32_t const ces[9] = { 0x529C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_246)
{
    // 13252 0061;	
    // (𓉒) EGYPTIAN HIEROGLYPH O002	[529C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13252, 0x0061 };
    uint32_t const ces[9] = { 0x529C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_247)
{
    // 13252 0041;	
    // (𓉒) EGYPTIAN HIEROGLYPH O002	[529C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13252, 0x0041 };
    uint32_t const ces[9] = { 0x529C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_248)
{
    // 13252 0062;	
    // (𓉒) EGYPTIAN HIEROGLYPH O002	[529C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13252, 0x0062 };
    uint32_t const ces[9] = { 0x529C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_249)
{
    // 13253 0021;	
    // (𓉓) EGYPTIAN HIEROGLYPH O003	[529D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13253, 0x0021 };
    uint32_t const ces[9] = { 0x529D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_250)
{
    // 13253 003F;	
    // (𓉓) EGYPTIAN HIEROGLYPH O003	[529D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13253, 0x003F };
    uint32_t const ces[9] = { 0x529D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_251)
{
    // 13253 0061;	
    // (𓉓) EGYPTIAN HIEROGLYPH O003	[529D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13253, 0x0061 };
    uint32_t const ces[9] = { 0x529D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_252)
{
    // 13253 0041;	
    // (𓉓) EGYPTIAN HIEROGLYPH O003	[529D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13253, 0x0041 };
    uint32_t const ces[9] = { 0x529D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_253)
{
    // 13253 0062;	
    // (𓉓) EGYPTIAN HIEROGLYPH O003	[529D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13253, 0x0062 };
    uint32_t const ces[9] = { 0x529D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_254)
{
    // 13254 0021;	
    // (𓉔) EGYPTIAN HIEROGLYPH O004	[529E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13254, 0x0021 };
    uint32_t const ces[9] = { 0x529E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_255)
{
    // 13254 003F;	
    // (𓉔) EGYPTIAN HIEROGLYPH O004	[529E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13254, 0x003F };
    uint32_t const ces[9] = { 0x529E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_256)
{
    // 13254 0061;	
    // (𓉔) EGYPTIAN HIEROGLYPH O004	[529E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13254, 0x0061 };
    uint32_t const ces[9] = { 0x529E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_257)
{
    // 13254 0041;	
    // (𓉔) EGYPTIAN HIEROGLYPH O004	[529E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13254, 0x0041 };
    uint32_t const ces[9] = { 0x529E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_258)
{
    // 13254 0062;	
    // (𓉔) EGYPTIAN HIEROGLYPH O004	[529E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13254, 0x0062 };
    uint32_t const ces[9] = { 0x529E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_259)
{
    // 13255 0021;	
    // (𓉕) EGYPTIAN HIEROGLYPH O005	[529F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13255, 0x0021 };
    uint32_t const ces[9] = { 0x529F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_260)
{
    // 13255 003F;	
    // (𓉕) EGYPTIAN HIEROGLYPH O005	[529F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13255, 0x003F };
    uint32_t const ces[9] = { 0x529F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_261)
{
    // 13255 0061;	
    // (𓉕) EGYPTIAN HIEROGLYPH O005	[529F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13255, 0x0061 };
    uint32_t const ces[9] = { 0x529F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_262)
{
    // 13255 0041;	
    // (𓉕) EGYPTIAN HIEROGLYPH O005	[529F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13255, 0x0041 };
    uint32_t const ces[9] = { 0x529F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_263)
{
    // 13255 0062;	
    // (𓉕) EGYPTIAN HIEROGLYPH O005	[529F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13255, 0x0062 };
    uint32_t const ces[9] = { 0x529F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_264)
{
    // 13256 0021;	
    // (𓉖) EGYPTIAN HIEROGLYPH O005A	[52A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13256, 0x0021 };
    uint32_t const ces[9] = { 0x52A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_265)
{
    // 13256 003F;	
    // (𓉖) EGYPTIAN HIEROGLYPH O005A	[52A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13256, 0x003F };
    uint32_t const ces[9] = { 0x52A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_266)
{
    // 13256 0061;	
    // (𓉖) EGYPTIAN HIEROGLYPH O005A	[52A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13256, 0x0061 };
    uint32_t const ces[9] = { 0x52A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_267)
{
    // 13256 0041;	
    // (𓉖) EGYPTIAN HIEROGLYPH O005A	[52A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13256, 0x0041 };
    uint32_t const ces[9] = { 0x52A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_268)
{
    // 13256 0062;	
    // (𓉖) EGYPTIAN HIEROGLYPH O005A	[52A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13256, 0x0062 };
    uint32_t const ces[9] = { 0x52A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_269)
{
    // 13257 0021;	
    // (𓉗) EGYPTIAN HIEROGLYPH O006	[52A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13257, 0x0021 };
    uint32_t const ces[9] = { 0x52A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_270)
{
    // 13257 003F;	
    // (𓉗) EGYPTIAN HIEROGLYPH O006	[52A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13257, 0x003F };
    uint32_t const ces[9] = { 0x52A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_271)
{
    // 13257 0061;	
    // (𓉗) EGYPTIAN HIEROGLYPH O006	[52A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13257, 0x0061 };
    uint32_t const ces[9] = { 0x52A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_272)
{
    // 13257 0041;	
    // (𓉗) EGYPTIAN HIEROGLYPH O006	[52A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13257, 0x0041 };
    uint32_t const ces[9] = { 0x52A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_273)
{
    // 13257 0062;	
    // (𓉗) EGYPTIAN HIEROGLYPH O006	[52A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13257, 0x0062 };
    uint32_t const ces[9] = { 0x52A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_274)
{
    // 13258 0021;	
    // (𓉘) EGYPTIAN HIEROGLYPH O006A	[52A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13258, 0x0021 };
    uint32_t const ces[9] = { 0x52A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_275)
{
    // 13258 003F;	
    // (𓉘) EGYPTIAN HIEROGLYPH O006A	[52A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13258, 0x003F };
    uint32_t const ces[9] = { 0x52A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_276)
{
    // 13258 0061;	
    // (𓉘) EGYPTIAN HIEROGLYPH O006A	[52A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13258, 0x0061 };
    uint32_t const ces[9] = { 0x52A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_277)
{
    // 13258 0041;	
    // (𓉘) EGYPTIAN HIEROGLYPH O006A	[52A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13258, 0x0041 };
    uint32_t const ces[9] = { 0x52A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_278)
{
    // 13258 0062;	
    // (𓉘) EGYPTIAN HIEROGLYPH O006A	[52A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13258, 0x0062 };
    uint32_t const ces[9] = { 0x52A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_279)
{
    // 13259 0021;	
    // (𓉙) EGYPTIAN HIEROGLYPH O006B	[52A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13259, 0x0021 };
    uint32_t const ces[9] = { 0x52A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_280)
{
    // 13259 003F;	
    // (𓉙) EGYPTIAN HIEROGLYPH O006B	[52A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13259, 0x003F };
    uint32_t const ces[9] = { 0x52A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_281)
{
    // 13259 0061;	
    // (𓉙) EGYPTIAN HIEROGLYPH O006B	[52A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13259, 0x0061 };
    uint32_t const ces[9] = { 0x52A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_282)
{
    // 13259 0041;	
    // (𓉙) EGYPTIAN HIEROGLYPH O006B	[52A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13259, 0x0041 };
    uint32_t const ces[9] = { 0x52A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_283)
{
    // 13259 0062;	
    // (𓉙) EGYPTIAN HIEROGLYPH O006B	[52A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13259, 0x0062 };
    uint32_t const ces[9] = { 0x52A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_284)
{
    // 1325A 0021;	
    // (𓉚) EGYPTIAN HIEROGLYPH O006C	[52A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325A, 0x0021 };
    uint32_t const ces[9] = { 0x52A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_285)
{
    // 1325A 003F;	
    // (𓉚) EGYPTIAN HIEROGLYPH O006C	[52A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325A, 0x003F };
    uint32_t const ces[9] = { 0x52A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_286)
{
    // 1325A 0061;	
    // (𓉚) EGYPTIAN HIEROGLYPH O006C	[52A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325A, 0x0061 };
    uint32_t const ces[9] = { 0x52A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_287)
{
    // 1325A 0041;	
    // (𓉚) EGYPTIAN HIEROGLYPH O006C	[52A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1325A, 0x0041 };
    uint32_t const ces[9] = { 0x52A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_288)
{
    // 1325A 0062;	
    // (𓉚) EGYPTIAN HIEROGLYPH O006C	[52A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325A, 0x0062 };
    uint32_t const ces[9] = { 0x52A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_289)
{
    // 1325B 0021;	
    // (𓉛) EGYPTIAN HIEROGLYPH O006D	[52A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325B, 0x0021 };
    uint32_t const ces[9] = { 0x52A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_290)
{
    // 1325B 003F;	
    // (𓉛) EGYPTIAN HIEROGLYPH O006D	[52A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325B, 0x003F };
    uint32_t const ces[9] = { 0x52A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_291)
{
    // 1325B 0061;	
    // (𓉛) EGYPTIAN HIEROGLYPH O006D	[52A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325B, 0x0061 };
    uint32_t const ces[9] = { 0x52A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_292)
{
    // 1325B 0041;	
    // (𓉛) EGYPTIAN HIEROGLYPH O006D	[52A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1325B, 0x0041 };
    uint32_t const ces[9] = { 0x52A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_293)
{
    // 1325B 0062;	
    // (𓉛) EGYPTIAN HIEROGLYPH O006D	[52A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325B, 0x0062 };
    uint32_t const ces[9] = { 0x52A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_294)
{
    // 1325C 0021;	
    // (𓉜) EGYPTIAN HIEROGLYPH O006E	[52A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325C, 0x0021 };
    uint32_t const ces[9] = { 0x52A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_295)
{
    // 1325C 003F;	
    // (𓉜) EGYPTIAN HIEROGLYPH O006E	[52A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325C, 0x003F };
    uint32_t const ces[9] = { 0x52A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_296)
{
    // 1325C 0061;	
    // (𓉜) EGYPTIAN HIEROGLYPH O006E	[52A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325C, 0x0061 };
    uint32_t const ces[9] = { 0x52A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_297)
{
    // 1325C 0041;	
    // (𓉜) EGYPTIAN HIEROGLYPH O006E	[52A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1325C, 0x0041 };
    uint32_t const ces[9] = { 0x52A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_298)
{
    // 1325C 0062;	
    // (𓉜) EGYPTIAN HIEROGLYPH O006E	[52A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325C, 0x0062 };
    uint32_t const ces[9] = { 0x52A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_299)
{
    // 1325D 0021;	
    // (𓉝) EGYPTIAN HIEROGLYPH O006F	[52A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325D, 0x0021 };
    uint32_t const ces[9] = { 0x52A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_300)
{
    // 1325D 003F;	
    // (𓉝) EGYPTIAN HIEROGLYPH O006F	[52A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325D, 0x003F };
    uint32_t const ces[9] = { 0x52A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_301)
{
    // 1325D 0061;	
    // (𓉝) EGYPTIAN HIEROGLYPH O006F	[52A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325D, 0x0061 };
    uint32_t const ces[9] = { 0x52A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_302)
{
    // 1325D 0041;	
    // (𓉝) EGYPTIAN HIEROGLYPH O006F	[52A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1325D, 0x0041 };
    uint32_t const ces[9] = { 0x52A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_303)
{
    // 1325D 0062;	
    // (𓉝) EGYPTIAN HIEROGLYPH O006F	[52A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325D, 0x0062 };
    uint32_t const ces[9] = { 0x52A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_304)
{
    // 1325E 0021;	
    // (𓉞) EGYPTIAN HIEROGLYPH O007	[52A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325E, 0x0021 };
    uint32_t const ces[9] = { 0x52A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_305)
{
    // 1325E 003F;	
    // (𓉞) EGYPTIAN HIEROGLYPH O007	[52A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325E, 0x003F };
    uint32_t const ces[9] = { 0x52A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_306)
{
    // 1325E 0061;	
    // (𓉞) EGYPTIAN HIEROGLYPH O007	[52A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325E, 0x0061 };
    uint32_t const ces[9] = { 0x52A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_307)
{
    // 1325E 0041;	
    // (𓉞) EGYPTIAN HIEROGLYPH O007	[52A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1325E, 0x0041 };
    uint32_t const ces[9] = { 0x52A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_308)
{
    // 1325E 0062;	
    // (𓉞) EGYPTIAN HIEROGLYPH O007	[52A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325E, 0x0062 };
    uint32_t const ces[9] = { 0x52A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_309)
{
    // 1325F 0021;	
    // (𓉟) EGYPTIAN HIEROGLYPH O008	[52A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325F, 0x0021 };
    uint32_t const ces[9] = { 0x52A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_310)
{
    // 1325F 003F;	
    // (𓉟) EGYPTIAN HIEROGLYPH O008	[52A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325F, 0x003F };
    uint32_t const ces[9] = { 0x52A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_311)
{
    // 1325F 0061;	
    // (𓉟) EGYPTIAN HIEROGLYPH O008	[52A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325F, 0x0061 };
    uint32_t const ces[9] = { 0x52A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_312)
{
    // 1325F 0041;	
    // (𓉟) EGYPTIAN HIEROGLYPH O008	[52A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1325F, 0x0041 };
    uint32_t const ces[9] = { 0x52A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_313)
{
    // 1325F 0062;	
    // (𓉟) EGYPTIAN HIEROGLYPH O008	[52A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325F, 0x0062 };
    uint32_t const ces[9] = { 0x52A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_314)
{
    // 13260 0021;	
    // (𓉠) EGYPTIAN HIEROGLYPH O009	[52AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13260, 0x0021 };
    uint32_t const ces[9] = { 0x52AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_315)
{
    // 13260 003F;	
    // (𓉠) EGYPTIAN HIEROGLYPH O009	[52AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13260, 0x003F };
    uint32_t const ces[9] = { 0x52AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_316)
{
    // 13260 0061;	
    // (𓉠) EGYPTIAN HIEROGLYPH O009	[52AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13260, 0x0061 };
    uint32_t const ces[9] = { 0x52AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_317)
{
    // 13260 0041;	
    // (𓉠) EGYPTIAN HIEROGLYPH O009	[52AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13260, 0x0041 };
    uint32_t const ces[9] = { 0x52AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_318)
{
    // 13260 0062;	
    // (𓉠) EGYPTIAN HIEROGLYPH O009	[52AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13260, 0x0062 };
    uint32_t const ces[9] = { 0x52AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_319)
{
    // 13261 0021;	
    // (𓉡) EGYPTIAN HIEROGLYPH O010	[52AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13261, 0x0021 };
    uint32_t const ces[9] = { 0x52AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_320)
{
    // 13261 003F;	
    // (𓉡) EGYPTIAN HIEROGLYPH O010	[52AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13261, 0x003F };
    uint32_t const ces[9] = { 0x52AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_321)
{
    // 13261 0061;	
    // (𓉡) EGYPTIAN HIEROGLYPH O010	[52AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13261, 0x0061 };
    uint32_t const ces[9] = { 0x52AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_322)
{
    // 13261 0041;	
    // (𓉡) EGYPTIAN HIEROGLYPH O010	[52AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13261, 0x0041 };
    uint32_t const ces[9] = { 0x52AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_323)
{
    // 13261 0062;	
    // (𓉡) EGYPTIAN HIEROGLYPH O010	[52AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13261, 0x0062 };
    uint32_t const ces[9] = { 0x52AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_324)
{
    // 13262 0021;	
    // (𓉢) EGYPTIAN HIEROGLYPH O010A	[52AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13262, 0x0021 };
    uint32_t const ces[9] = { 0x52AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_325)
{
    // 13262 003F;	
    // (𓉢) EGYPTIAN HIEROGLYPH O010A	[52AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13262, 0x003F };
    uint32_t const ces[9] = { 0x52AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_326)
{
    // 13262 0061;	
    // (𓉢) EGYPTIAN HIEROGLYPH O010A	[52AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13262, 0x0061 };
    uint32_t const ces[9] = { 0x52AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_327)
{
    // 13262 0041;	
    // (𓉢) EGYPTIAN HIEROGLYPH O010A	[52AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13262, 0x0041 };
    uint32_t const ces[9] = { 0x52AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_328)
{
    // 13262 0062;	
    // (𓉢) EGYPTIAN HIEROGLYPH O010A	[52AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13262, 0x0062 };
    uint32_t const ces[9] = { 0x52AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_329)
{
    // 13263 0021;	
    // (𓉣) EGYPTIAN HIEROGLYPH O010B	[52AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13263, 0x0021 };
    uint32_t const ces[9] = { 0x52AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_330)
{
    // 13263 003F;	
    // (𓉣) EGYPTIAN HIEROGLYPH O010B	[52AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13263, 0x003F };
    uint32_t const ces[9] = { 0x52AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_331)
{
    // 13263 0061;	
    // (𓉣) EGYPTIAN HIEROGLYPH O010B	[52AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13263, 0x0061 };
    uint32_t const ces[9] = { 0x52AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_332)
{
    // 13263 0041;	
    // (𓉣) EGYPTIAN HIEROGLYPH O010B	[52AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13263, 0x0041 };
    uint32_t const ces[9] = { 0x52AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_333)
{
    // 13263 0062;	
    // (𓉣) EGYPTIAN HIEROGLYPH O010B	[52AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13263, 0x0062 };
    uint32_t const ces[9] = { 0x52AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_334)
{
    // 13264 0021;	
    // (𓉤) EGYPTIAN HIEROGLYPH O010C	[52AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13264, 0x0021 };
    uint32_t const ces[9] = { 0x52AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_335)
{
    // 13264 003F;	
    // (𓉤) EGYPTIAN HIEROGLYPH O010C	[52AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13264, 0x003F };
    uint32_t const ces[9] = { 0x52AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_336)
{
    // 13264 0061;	
    // (𓉤) EGYPTIAN HIEROGLYPH O010C	[52AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13264, 0x0061 };
    uint32_t const ces[9] = { 0x52AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_337)
{
    // 13264 0041;	
    // (𓉤) EGYPTIAN HIEROGLYPH O010C	[52AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13264, 0x0041 };
    uint32_t const ces[9] = { 0x52AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_338)
{
    // 13264 0062;	
    // (𓉤) EGYPTIAN HIEROGLYPH O010C	[52AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13264, 0x0062 };
    uint32_t const ces[9] = { 0x52AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_339)
{
    // 13265 0021;	
    // (𓉥) EGYPTIAN HIEROGLYPH O011	[52AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13265, 0x0021 };
    uint32_t const ces[9] = { 0x52AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_340)
{
    // 13265 003F;	
    // (𓉥) EGYPTIAN HIEROGLYPH O011	[52AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13265, 0x003F };
    uint32_t const ces[9] = { 0x52AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_341)
{
    // 13265 0061;	
    // (𓉥) EGYPTIAN HIEROGLYPH O011	[52AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13265, 0x0061 };
    uint32_t const ces[9] = { 0x52AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_342)
{
    // 13265 0041;	
    // (𓉥) EGYPTIAN HIEROGLYPH O011	[52AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13265, 0x0041 };
    uint32_t const ces[9] = { 0x52AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_343)
{
    // 13265 0062;	
    // (𓉥) EGYPTIAN HIEROGLYPH O011	[52AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13265, 0x0062 };
    uint32_t const ces[9] = { 0x52AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_344)
{
    // 13266 0021;	
    // (𓉦) EGYPTIAN HIEROGLYPH O012	[52B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13266, 0x0021 };
    uint32_t const ces[9] = { 0x52B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_345)
{
    // 13266 003F;	
    // (𓉦) EGYPTIAN HIEROGLYPH O012	[52B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13266, 0x003F };
    uint32_t const ces[9] = { 0x52B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_346)
{
    // 13266 0061;	
    // (𓉦) EGYPTIAN HIEROGLYPH O012	[52B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13266, 0x0061 };
    uint32_t const ces[9] = { 0x52B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_347)
{
    // 13266 0041;	
    // (𓉦) EGYPTIAN HIEROGLYPH O012	[52B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13266, 0x0041 };
    uint32_t const ces[9] = { 0x52B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_348)
{
    // 13266 0062;	
    // (𓉦) EGYPTIAN HIEROGLYPH O012	[52B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13266, 0x0062 };
    uint32_t const ces[9] = { 0x52B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_349)
{
    // 13267 0021;	
    // (𓉧) EGYPTIAN HIEROGLYPH O013	[52B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13267, 0x0021 };
    uint32_t const ces[9] = { 0x52B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_350)
{
    // 13267 003F;	
    // (𓉧) EGYPTIAN HIEROGLYPH O013	[52B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13267, 0x003F };
    uint32_t const ces[9] = { 0x52B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_351)
{
    // 13267 0061;	
    // (𓉧) EGYPTIAN HIEROGLYPH O013	[52B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13267, 0x0061 };
    uint32_t const ces[9] = { 0x52B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_352)
{
    // 13267 0041;	
    // (𓉧) EGYPTIAN HIEROGLYPH O013	[52B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13267, 0x0041 };
    uint32_t const ces[9] = { 0x52B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_353)
{
    // 13267 0062;	
    // (𓉧) EGYPTIAN HIEROGLYPH O013	[52B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13267, 0x0062 };
    uint32_t const ces[9] = { 0x52B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_354)
{
    // 13268 0021;	
    // (𓉨) EGYPTIAN HIEROGLYPH O014	[52B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13268, 0x0021 };
    uint32_t const ces[9] = { 0x52B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_355)
{
    // 13268 003F;	
    // (𓉨) EGYPTIAN HIEROGLYPH O014	[52B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13268, 0x003F };
    uint32_t const ces[9] = { 0x52B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_356)
{
    // 13268 0061;	
    // (𓉨) EGYPTIAN HIEROGLYPH O014	[52B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13268, 0x0061 };
    uint32_t const ces[9] = { 0x52B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_357)
{
    // 13268 0041;	
    // (𓉨) EGYPTIAN HIEROGLYPH O014	[52B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13268, 0x0041 };
    uint32_t const ces[9] = { 0x52B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_358)
{
    // 13268 0062;	
    // (𓉨) EGYPTIAN HIEROGLYPH O014	[52B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13268, 0x0062 };
    uint32_t const ces[9] = { 0x52B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_359)
{
    // 13269 0021;	
    // (𓉩) EGYPTIAN HIEROGLYPH O015	[52B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13269, 0x0021 };
    uint32_t const ces[9] = { 0x52B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_360)
{
    // 13269 003F;	
    // (𓉩) EGYPTIAN HIEROGLYPH O015	[52B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13269, 0x003F };
    uint32_t const ces[9] = { 0x52B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_361)
{
    // 13269 0061;	
    // (𓉩) EGYPTIAN HIEROGLYPH O015	[52B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13269, 0x0061 };
    uint32_t const ces[9] = { 0x52B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_362)
{
    // 13269 0041;	
    // (𓉩) EGYPTIAN HIEROGLYPH O015	[52B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13269, 0x0041 };
    uint32_t const ces[9] = { 0x52B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_363)
{
    // 13269 0062;	
    // (𓉩) EGYPTIAN HIEROGLYPH O015	[52B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13269, 0x0062 };
    uint32_t const ces[9] = { 0x52B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_364)
{
    // 1326A 0021;	
    // (𓉪) EGYPTIAN HIEROGLYPH O016	[52B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326A, 0x0021 };
    uint32_t const ces[9] = { 0x52B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_365)
{
    // 1326A 003F;	
    // (𓉪) EGYPTIAN HIEROGLYPH O016	[52B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326A, 0x003F };
    uint32_t const ces[9] = { 0x52B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_366)
{
    // 1326A 0061;	
    // (𓉪) EGYPTIAN HIEROGLYPH O016	[52B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326A, 0x0061 };
    uint32_t const ces[9] = { 0x52B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_367)
{
    // 1326A 0041;	
    // (𓉪) EGYPTIAN HIEROGLYPH O016	[52B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1326A, 0x0041 };
    uint32_t const ces[9] = { 0x52B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_368)
{
    // 1326A 0062;	
    // (𓉪) EGYPTIAN HIEROGLYPH O016	[52B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326A, 0x0062 };
    uint32_t const ces[9] = { 0x52B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_369)
{
    // 1326B 0021;	
    // (𓉫) EGYPTIAN HIEROGLYPH O017	[52B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326B, 0x0021 };
    uint32_t const ces[9] = { 0x52B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_370)
{
    // 1326B 003F;	
    // (𓉫) EGYPTIAN HIEROGLYPH O017	[52B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326B, 0x003F };
    uint32_t const ces[9] = { 0x52B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_371)
{
    // 1326B 0061;	
    // (𓉫) EGYPTIAN HIEROGLYPH O017	[52B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326B, 0x0061 };
    uint32_t const ces[9] = { 0x52B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_372)
{
    // 1326B 0041;	
    // (𓉫) EGYPTIAN HIEROGLYPH O017	[52B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1326B, 0x0041 };
    uint32_t const ces[9] = { 0x52B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_373)
{
    // 1326B 0062;	
    // (𓉫) EGYPTIAN HIEROGLYPH O017	[52B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326B, 0x0062 };
    uint32_t const ces[9] = { 0x52B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_374)
{
    // 1326C 0021;	
    // (𓉬) EGYPTIAN HIEROGLYPH O018	[52B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326C, 0x0021 };
    uint32_t const ces[9] = { 0x52B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_375)
{
    // 1326C 003F;	
    // (𓉬) EGYPTIAN HIEROGLYPH O018	[52B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326C, 0x003F };
    uint32_t const ces[9] = { 0x52B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_376)
{
    // 1326C 0061;	
    // (𓉬) EGYPTIAN HIEROGLYPH O018	[52B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326C, 0x0061 };
    uint32_t const ces[9] = { 0x52B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_377)
{
    // 1326C 0041;	
    // (𓉬) EGYPTIAN HIEROGLYPH O018	[52B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1326C, 0x0041 };
    uint32_t const ces[9] = { 0x52B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_378)
{
    // 1326C 0062;	
    // (𓉬) EGYPTIAN HIEROGLYPH O018	[52B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326C, 0x0062 };
    uint32_t const ces[9] = { 0x52B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_379)
{
    // 1326D 0021;	
    // (𓉭) EGYPTIAN HIEROGLYPH O019	[52B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326D, 0x0021 };
    uint32_t const ces[9] = { 0x52B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_380)
{
    // 1326D 003F;	
    // (𓉭) EGYPTIAN HIEROGLYPH O019	[52B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326D, 0x003F };
    uint32_t const ces[9] = { 0x52B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_381)
{
    // 1326D 0061;	
    // (𓉭) EGYPTIAN HIEROGLYPH O019	[52B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326D, 0x0061 };
    uint32_t const ces[9] = { 0x52B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_382)
{
    // 1326D 0041;	
    // (𓉭) EGYPTIAN HIEROGLYPH O019	[52B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1326D, 0x0041 };
    uint32_t const ces[9] = { 0x52B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_383)
{
    // 1326D 0062;	
    // (𓉭) EGYPTIAN HIEROGLYPH O019	[52B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326D, 0x0062 };
    uint32_t const ces[9] = { 0x52B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_384)
{
    // 1326E 0021;	
    // (𓉮) EGYPTIAN HIEROGLYPH O019A	[52B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326E, 0x0021 };
    uint32_t const ces[9] = { 0x52B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_385)
{
    // 1326E 003F;	
    // (𓉮) EGYPTIAN HIEROGLYPH O019A	[52B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326E, 0x003F };
    uint32_t const ces[9] = { 0x52B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_386)
{
    // 1326E 0061;	
    // (𓉮) EGYPTIAN HIEROGLYPH O019A	[52B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326E, 0x0061 };
    uint32_t const ces[9] = { 0x52B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_387)
{
    // 1326E 0041;	
    // (𓉮) EGYPTIAN HIEROGLYPH O019A	[52B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1326E, 0x0041 };
    uint32_t const ces[9] = { 0x52B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_388)
{
    // 1326E 0062;	
    // (𓉮) EGYPTIAN HIEROGLYPH O019A	[52B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326E, 0x0062 };
    uint32_t const ces[9] = { 0x52B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_389)
{
    // 1326F 0021;	
    // (𓉯) EGYPTIAN HIEROGLYPH O020	[52B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326F, 0x0021 };
    uint32_t const ces[9] = { 0x52B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_390)
{
    // 1326F 003F;	
    // (𓉯) EGYPTIAN HIEROGLYPH O020	[52B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326F, 0x003F };
    uint32_t const ces[9] = { 0x52B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_391)
{
    // 1326F 0061;	
    // (𓉯) EGYPTIAN HIEROGLYPH O020	[52B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326F, 0x0061 };
    uint32_t const ces[9] = { 0x52B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_392)
{
    // 1326F 0041;	
    // (𓉯) EGYPTIAN HIEROGLYPH O020	[52B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1326F, 0x0041 };
    uint32_t const ces[9] = { 0x52B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_393)
{
    // 1326F 0062;	
    // (𓉯) EGYPTIAN HIEROGLYPH O020	[52B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326F, 0x0062 };
    uint32_t const ces[9] = { 0x52B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_394)
{
    // 13270 0021;	
    // (𓉰) EGYPTIAN HIEROGLYPH O020A	[52BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13270, 0x0021 };
    uint32_t const ces[9] = { 0x52BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_395)
{
    // 13270 003F;	
    // (𓉰) EGYPTIAN HIEROGLYPH O020A	[52BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13270, 0x003F };
    uint32_t const ces[9] = { 0x52BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_396)
{
    // 13270 0061;	
    // (𓉰) EGYPTIAN HIEROGLYPH O020A	[52BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13270, 0x0061 };
    uint32_t const ces[9] = { 0x52BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_397)
{
    // 13270 0041;	
    // (𓉰) EGYPTIAN HIEROGLYPH O020A	[52BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13270, 0x0041 };
    uint32_t const ces[9] = { 0x52BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_398)
{
    // 13270 0062;	
    // (𓉰) EGYPTIAN HIEROGLYPH O020A	[52BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13270, 0x0062 };
    uint32_t const ces[9] = { 0x52BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_399)
{
    // 13271 0021;	
    // (𓉱) EGYPTIAN HIEROGLYPH O021	[52BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13271, 0x0021 };
    uint32_t const ces[9] = { 0x52BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_400)
{
    // 13271 003F;	
    // (𓉱) EGYPTIAN HIEROGLYPH O021	[52BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13271, 0x003F };
    uint32_t const ces[9] = { 0x52BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_401)
{
    // 13271 0061;	
    // (𓉱) EGYPTIAN HIEROGLYPH O021	[52BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13271, 0x0061 };
    uint32_t const ces[9] = { 0x52BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_402)
{
    // 13271 0041;	
    // (𓉱) EGYPTIAN HIEROGLYPH O021	[52BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13271, 0x0041 };
    uint32_t const ces[9] = { 0x52BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_403)
{
    // 13271 0062;	
    // (𓉱) EGYPTIAN HIEROGLYPH O021	[52BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13271, 0x0062 };
    uint32_t const ces[9] = { 0x52BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_404)
{
    // 13272 0021;	
    // (𓉲) EGYPTIAN HIEROGLYPH O022	[52BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13272, 0x0021 };
    uint32_t const ces[9] = { 0x52BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_405)
{
    // 13272 003F;	
    // (𓉲) EGYPTIAN HIEROGLYPH O022	[52BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13272, 0x003F };
    uint32_t const ces[9] = { 0x52BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_406)
{
    // 13272 0061;	
    // (𓉲) EGYPTIAN HIEROGLYPH O022	[52BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13272, 0x0061 };
    uint32_t const ces[9] = { 0x52BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_407)
{
    // 13272 0041;	
    // (𓉲) EGYPTIAN HIEROGLYPH O022	[52BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13272, 0x0041 };
    uint32_t const ces[9] = { 0x52BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_408)
{
    // 13272 0062;	
    // (𓉲) EGYPTIAN HIEROGLYPH O022	[52BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13272, 0x0062 };
    uint32_t const ces[9] = { 0x52BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_409)
{
    // 13273 0021;	
    // (𓉳) EGYPTIAN HIEROGLYPH O023	[52BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13273, 0x0021 };
    uint32_t const ces[9] = { 0x52BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_410)
{
    // 13273 003F;	
    // (𓉳) EGYPTIAN HIEROGLYPH O023	[52BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13273, 0x003F };
    uint32_t const ces[9] = { 0x52BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_411)
{
    // 13273 0061;	
    // (𓉳) EGYPTIAN HIEROGLYPH O023	[52BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13273, 0x0061 };
    uint32_t const ces[9] = { 0x52BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_412)
{
    // 13273 0041;	
    // (𓉳) EGYPTIAN HIEROGLYPH O023	[52BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13273, 0x0041 };
    uint32_t const ces[9] = { 0x52BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_413)
{
    // 13273 0062;	
    // (𓉳) EGYPTIAN HIEROGLYPH O023	[52BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13273, 0x0062 };
    uint32_t const ces[9] = { 0x52BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_414)
{
    // 13274 0021;	
    // (𓉴) EGYPTIAN HIEROGLYPH O024	[52BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13274, 0x0021 };
    uint32_t const ces[9] = { 0x52BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_415)
{
    // 13274 003F;	
    // (𓉴) EGYPTIAN HIEROGLYPH O024	[52BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13274, 0x003F };
    uint32_t const ces[9] = { 0x52BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_416)
{
    // 13274 0061;	
    // (𓉴) EGYPTIAN HIEROGLYPH O024	[52BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13274, 0x0061 };
    uint32_t const ces[9] = { 0x52BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_417)
{
    // 13274 0041;	
    // (𓉴) EGYPTIAN HIEROGLYPH O024	[52BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13274, 0x0041 };
    uint32_t const ces[9] = { 0x52BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_418)
{
    // 13274 0062;	
    // (𓉴) EGYPTIAN HIEROGLYPH O024	[52BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13274, 0x0062 };
    uint32_t const ces[9] = { 0x52BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_419)
{
    // 13275 0021;	
    // (𓉵) EGYPTIAN HIEROGLYPH O024A	[52BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13275, 0x0021 };
    uint32_t const ces[9] = { 0x52BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_420)
{
    // 13275 003F;	
    // (𓉵) EGYPTIAN HIEROGLYPH O024A	[52BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13275, 0x003F };
    uint32_t const ces[9] = { 0x52BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_421)
{
    // 13275 0061;	
    // (𓉵) EGYPTIAN HIEROGLYPH O024A	[52BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13275, 0x0061 };
    uint32_t const ces[9] = { 0x52BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_422)
{
    // 13275 0041;	
    // (𓉵) EGYPTIAN HIEROGLYPH O024A	[52BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13275, 0x0041 };
    uint32_t const ces[9] = { 0x52BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_423)
{
    // 13275 0062;	
    // (𓉵) EGYPTIAN HIEROGLYPH O024A	[52BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13275, 0x0062 };
    uint32_t const ces[9] = { 0x52BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_424)
{
    // 13276 0021;	
    // (𓉶) EGYPTIAN HIEROGLYPH O025	[52C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13276, 0x0021 };
    uint32_t const ces[9] = { 0x52C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_425)
{
    // 13276 003F;	
    // (𓉶) EGYPTIAN HIEROGLYPH O025	[52C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13276, 0x003F };
    uint32_t const ces[9] = { 0x52C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_426)
{
    // 13276 0061;	
    // (𓉶) EGYPTIAN HIEROGLYPH O025	[52C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13276, 0x0061 };
    uint32_t const ces[9] = { 0x52C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_427)
{
    // 13276 0041;	
    // (𓉶) EGYPTIAN HIEROGLYPH O025	[52C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13276, 0x0041 };
    uint32_t const ces[9] = { 0x52C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_428)
{
    // 13276 0062;	
    // (𓉶) EGYPTIAN HIEROGLYPH O025	[52C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13276, 0x0062 };
    uint32_t const ces[9] = { 0x52C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_429)
{
    // 13277 0021;	
    // (𓉷) EGYPTIAN HIEROGLYPH O025A	[52C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13277, 0x0021 };
    uint32_t const ces[9] = { 0x52C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_430)
{
    // 13277 003F;	
    // (𓉷) EGYPTIAN HIEROGLYPH O025A	[52C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13277, 0x003F };
    uint32_t const ces[9] = { 0x52C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_431)
{
    // 13277 0061;	
    // (𓉷) EGYPTIAN HIEROGLYPH O025A	[52C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13277, 0x0061 };
    uint32_t const ces[9] = { 0x52C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_432)
{
    // 13277 0041;	
    // (𓉷) EGYPTIAN HIEROGLYPH O025A	[52C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13277, 0x0041 };
    uint32_t const ces[9] = { 0x52C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_433)
{
    // 13277 0062;	
    // (𓉷) EGYPTIAN HIEROGLYPH O025A	[52C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13277, 0x0062 };
    uint32_t const ces[9] = { 0x52C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_434)
{
    // 13278 0021;	
    // (𓉸) EGYPTIAN HIEROGLYPH O026	[52C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13278, 0x0021 };
    uint32_t const ces[9] = { 0x52C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_435)
{
    // 13278 003F;	
    // (𓉸) EGYPTIAN HIEROGLYPH O026	[52C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13278, 0x003F };
    uint32_t const ces[9] = { 0x52C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_436)
{
    // 13278 0061;	
    // (𓉸) EGYPTIAN HIEROGLYPH O026	[52C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13278, 0x0061 };
    uint32_t const ces[9] = { 0x52C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_437)
{
    // 13278 0041;	
    // (𓉸) EGYPTIAN HIEROGLYPH O026	[52C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13278, 0x0041 };
    uint32_t const ces[9] = { 0x52C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_438)
{
    // 13278 0062;	
    // (𓉸) EGYPTIAN HIEROGLYPH O026	[52C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13278, 0x0062 };
    uint32_t const ces[9] = { 0x52C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_439)
{
    // 13279 0021;	
    // (𓉹) EGYPTIAN HIEROGLYPH O027	[52C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13279, 0x0021 };
    uint32_t const ces[9] = { 0x52C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_440)
{
    // 13279 003F;	
    // (𓉹) EGYPTIAN HIEROGLYPH O027	[52C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13279, 0x003F };
    uint32_t const ces[9] = { 0x52C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_441)
{
    // 13279 0061;	
    // (𓉹) EGYPTIAN HIEROGLYPH O027	[52C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13279, 0x0061 };
    uint32_t const ces[9] = { 0x52C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_442)
{
    // 13279 0041;	
    // (𓉹) EGYPTIAN HIEROGLYPH O027	[52C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13279, 0x0041 };
    uint32_t const ces[9] = { 0x52C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_443)
{
    // 13279 0062;	
    // (𓉹) EGYPTIAN HIEROGLYPH O027	[52C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13279, 0x0062 };
    uint32_t const ces[9] = { 0x52C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_444)
{
    // 1327A 0021;	
    // (𓉺) EGYPTIAN HIEROGLYPH O028	[52C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327A, 0x0021 };
    uint32_t const ces[9] = { 0x52C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_445)
{
    // 1327A 003F;	
    // (𓉺) EGYPTIAN HIEROGLYPH O028	[52C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327A, 0x003F };
    uint32_t const ces[9] = { 0x52C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_446)
{
    // 1327A 0061;	
    // (𓉺) EGYPTIAN HIEROGLYPH O028	[52C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327A, 0x0061 };
    uint32_t const ces[9] = { 0x52C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_447)
{
    // 1327A 0041;	
    // (𓉺) EGYPTIAN HIEROGLYPH O028	[52C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1327A, 0x0041 };
    uint32_t const ces[9] = { 0x52C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_448)
{
    // 1327A 0062;	
    // (𓉺) EGYPTIAN HIEROGLYPH O028	[52C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327A, 0x0062 };
    uint32_t const ces[9] = { 0x52C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_449)
{
    // 1327B 0021;	
    // (𓉻) EGYPTIAN HIEROGLYPH O029	[52C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327B, 0x0021 };
    uint32_t const ces[9] = { 0x52C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_450)
{
    // 1327B 003F;	
    // (𓉻) EGYPTIAN HIEROGLYPH O029	[52C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327B, 0x003F };
    uint32_t const ces[9] = { 0x52C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_451)
{
    // 1327B 0061;	
    // (𓉻) EGYPTIAN HIEROGLYPH O029	[52C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327B, 0x0061 };
    uint32_t const ces[9] = { 0x52C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_452)
{
    // 1327B 0041;	
    // (𓉻) EGYPTIAN HIEROGLYPH O029	[52C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1327B, 0x0041 };
    uint32_t const ces[9] = { 0x52C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_453)
{
    // 1327B 0062;	
    // (𓉻) EGYPTIAN HIEROGLYPH O029	[52C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327B, 0x0062 };
    uint32_t const ces[9] = { 0x52C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_454)
{
    // 1327C 0021;	
    // (𓉼) EGYPTIAN HIEROGLYPH O029A	[52C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327C, 0x0021 };
    uint32_t const ces[9] = { 0x52C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_455)
{
    // 1327C 003F;	
    // (𓉼) EGYPTIAN HIEROGLYPH O029A	[52C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327C, 0x003F };
    uint32_t const ces[9] = { 0x52C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_456)
{
    // 1327C 0061;	
    // (𓉼) EGYPTIAN HIEROGLYPH O029A	[52C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327C, 0x0061 };
    uint32_t const ces[9] = { 0x52C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_457)
{
    // 1327C 0041;	
    // (𓉼) EGYPTIAN HIEROGLYPH O029A	[52C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1327C, 0x0041 };
    uint32_t const ces[9] = { 0x52C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_458)
{
    // 1327C 0062;	
    // (𓉼) EGYPTIAN HIEROGLYPH O029A	[52C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327C, 0x0062 };
    uint32_t const ces[9] = { 0x52C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_459)
{
    // 1327D 0021;	
    // (𓉽) EGYPTIAN HIEROGLYPH O030	[52C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327D, 0x0021 };
    uint32_t const ces[9] = { 0x52C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_460)
{
    // 1327D 003F;	
    // (𓉽) EGYPTIAN HIEROGLYPH O030	[52C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327D, 0x003F };
    uint32_t const ces[9] = { 0x52C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_461)
{
    // 1327D 0061;	
    // (𓉽) EGYPTIAN HIEROGLYPH O030	[52C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327D, 0x0061 };
    uint32_t const ces[9] = { 0x52C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_462)
{
    // 1327D 0041;	
    // (𓉽) EGYPTIAN HIEROGLYPH O030	[52C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1327D, 0x0041 };
    uint32_t const ces[9] = { 0x52C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_463)
{
    // 1327D 0062;	
    // (𓉽) EGYPTIAN HIEROGLYPH O030	[52C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327D, 0x0062 };
    uint32_t const ces[9] = { 0x52C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_464)
{
    // 1327E 0021;	
    // (𓉾) EGYPTIAN HIEROGLYPH O030A	[52C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327E, 0x0021 };
    uint32_t const ces[9] = { 0x52C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_465)
{
    // 1327E 003F;	
    // (𓉾) EGYPTIAN HIEROGLYPH O030A	[52C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327E, 0x003F };
    uint32_t const ces[9] = { 0x52C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_466)
{
    // 1327E 0061;	
    // (𓉾) EGYPTIAN HIEROGLYPH O030A	[52C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327E, 0x0061 };
    uint32_t const ces[9] = { 0x52C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_467)
{
    // 1327E 0041;	
    // (𓉾) EGYPTIAN HIEROGLYPH O030A	[52C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1327E, 0x0041 };
    uint32_t const ces[9] = { 0x52C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_468)
{
    // 1327E 0062;	
    // (𓉾) EGYPTIAN HIEROGLYPH O030A	[52C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327E, 0x0062 };
    uint32_t const ces[9] = { 0x52C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_469)
{
    // 1327F 0021;	
    // (𓉿) EGYPTIAN HIEROGLYPH O031	[52C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327F, 0x0021 };
    uint32_t const ces[9] = { 0x52C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_470)
{
    // 1327F 003F;	
    // (𓉿) EGYPTIAN HIEROGLYPH O031	[52C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327F, 0x003F };
    uint32_t const ces[9] = { 0x52C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_471)
{
    // 1327F 0061;	
    // (𓉿) EGYPTIAN HIEROGLYPH O031	[52C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327F, 0x0061 };
    uint32_t const ces[9] = { 0x52C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_472)
{
    // 1327F 0041;	
    // (𓉿) EGYPTIAN HIEROGLYPH O031	[52C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1327F, 0x0041 };
    uint32_t const ces[9] = { 0x52C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_473)
{
    // 1327F 0062;	
    // (𓉿) EGYPTIAN HIEROGLYPH O031	[52C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327F, 0x0062 };
    uint32_t const ces[9] = { 0x52C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_474)
{
    // 13280 0021;	
    // (𓊀) EGYPTIAN HIEROGLYPH O032	[52CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13280, 0x0021 };
    uint32_t const ces[9] = { 0x52CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_475)
{
    // 13280 003F;	
    // (𓊀) EGYPTIAN HIEROGLYPH O032	[52CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13280, 0x003F };
    uint32_t const ces[9] = { 0x52CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_476)
{
    // 13280 0061;	
    // (𓊀) EGYPTIAN HIEROGLYPH O032	[52CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13280, 0x0061 };
    uint32_t const ces[9] = { 0x52CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_477)
{
    // 13280 0041;	
    // (𓊀) EGYPTIAN HIEROGLYPH O032	[52CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13280, 0x0041 };
    uint32_t const ces[9] = { 0x52CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_478)
{
    // 13280 0062;	
    // (𓊀) EGYPTIAN HIEROGLYPH O032	[52CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13280, 0x0062 };
    uint32_t const ces[9] = { 0x52CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_479)
{
    // 13281 0021;	
    // (𓊁) EGYPTIAN HIEROGLYPH O033	[52CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13281, 0x0021 };
    uint32_t const ces[9] = { 0x52CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_480)
{
    // 13281 003F;	
    // (𓊁) EGYPTIAN HIEROGLYPH O033	[52CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13281, 0x003F };
    uint32_t const ces[9] = { 0x52CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_481)
{
    // 13281 0061;	
    // (𓊁) EGYPTIAN HIEROGLYPH O033	[52CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13281, 0x0061 };
    uint32_t const ces[9] = { 0x52CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_482)
{
    // 13281 0041;	
    // (𓊁) EGYPTIAN HIEROGLYPH O033	[52CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13281, 0x0041 };
    uint32_t const ces[9] = { 0x52CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_483)
{
    // 13281 0062;	
    // (𓊁) EGYPTIAN HIEROGLYPH O033	[52CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13281, 0x0062 };
    uint32_t const ces[9] = { 0x52CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_484)
{
    // 13282 0021;	
    // (𓊂) EGYPTIAN HIEROGLYPH O033A	[52CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13282, 0x0021 };
    uint32_t const ces[9] = { 0x52CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_485)
{
    // 13282 003F;	
    // (𓊂) EGYPTIAN HIEROGLYPH O033A	[52CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13282, 0x003F };
    uint32_t const ces[9] = { 0x52CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_486)
{
    // 13282 0061;	
    // (𓊂) EGYPTIAN HIEROGLYPH O033A	[52CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13282, 0x0061 };
    uint32_t const ces[9] = { 0x52CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_487)
{
    // 13282 0041;	
    // (𓊂) EGYPTIAN HIEROGLYPH O033A	[52CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13282, 0x0041 };
    uint32_t const ces[9] = { 0x52CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_488)
{
    // 13282 0062;	
    // (𓊂) EGYPTIAN HIEROGLYPH O033A	[52CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13282, 0x0062 };
    uint32_t const ces[9] = { 0x52CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_489)
{
    // 13283 0021;	
    // (𓊃) EGYPTIAN HIEROGLYPH O034	[52CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13283, 0x0021 };
    uint32_t const ces[9] = { 0x52CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_490)
{
    // 13283 003F;	
    // (𓊃) EGYPTIAN HIEROGLYPH O034	[52CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13283, 0x003F };
    uint32_t const ces[9] = { 0x52CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_491)
{
    // 13283 0061;	
    // (𓊃) EGYPTIAN HIEROGLYPH O034	[52CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13283, 0x0061 };
    uint32_t const ces[9] = { 0x52CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_492)
{
    // 13283 0041;	
    // (𓊃) EGYPTIAN HIEROGLYPH O034	[52CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13283, 0x0041 };
    uint32_t const ces[9] = { 0x52CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_493)
{
    // 13283 0062;	
    // (𓊃) EGYPTIAN HIEROGLYPH O034	[52CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13283, 0x0062 };
    uint32_t const ces[9] = { 0x52CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_494)
{
    // 13284 0021;	
    // (𓊄) EGYPTIAN HIEROGLYPH O035	[52CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13284, 0x0021 };
    uint32_t const ces[9] = { 0x52CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_495)
{
    // 13284 003F;	
    // (𓊄) EGYPTIAN HIEROGLYPH O035	[52CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13284, 0x003F };
    uint32_t const ces[9] = { 0x52CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_496)
{
    // 13284 0061;	
    // (𓊄) EGYPTIAN HIEROGLYPH O035	[52CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13284, 0x0061 };
    uint32_t const ces[9] = { 0x52CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_497)
{
    // 13284 0041;	
    // (𓊄) EGYPTIAN HIEROGLYPH O035	[52CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13284, 0x0041 };
    uint32_t const ces[9] = { 0x52CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_498)
{
    // 13284 0062;	
    // (𓊄) EGYPTIAN HIEROGLYPH O035	[52CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13284, 0x0062 };
    uint32_t const ces[9] = { 0x52CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_302_499)
{
    // 13285 0021;	
    // (𓊅) EGYPTIAN HIEROGLYPH O036	[52CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13285, 0x0021 };
    uint32_t const ces[9] = { 0x52CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

