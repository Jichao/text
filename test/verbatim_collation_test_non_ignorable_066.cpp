// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_066_000)
{
    // 1F69F 0041;	
    // (🚟) SUSPENSION RAILWAY	[16FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F69F, 0x0041 };
    uint32_t const ces[9] = { 0x16FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_001)
{
    // 1F69F 0062;	
    // (🚟) SUSPENSION RAILWAY	[16FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F69F, 0x0062 };
    uint32_t const ces[9] = { 0x16FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_002)
{
    // 1F6A0 0021;	
    // (🚠) MOUNTAIN CABLEWAY	[16FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A0, 0x0021 };
    uint32_t const ces[9] = { 0x16FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_003)
{
    // 1F6A0 003F;	
    // (🚠) MOUNTAIN CABLEWAY	[16FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A0, 0x003F };
    uint32_t const ces[9] = { 0x16FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_004)
{
    // 1F6A0 0061;	
    // (🚠) MOUNTAIN CABLEWAY	[16FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A0, 0x0061 };
    uint32_t const ces[9] = { 0x16FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_005)
{
    // 1F6A0 0041;	
    // (🚠) MOUNTAIN CABLEWAY	[16FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6A0, 0x0041 };
    uint32_t const ces[9] = { 0x16FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_006)
{
    // 1F6A0 0062;	
    // (🚠) MOUNTAIN CABLEWAY	[16FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A0, 0x0062 };
    uint32_t const ces[9] = { 0x16FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_007)
{
    // 1F6A1 0021;	
    // (🚡) AERIAL TRAMWAY	[16FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A1, 0x0021 };
    uint32_t const ces[9] = { 0x16FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_008)
{
    // 1F6A1 003F;	
    // (🚡) AERIAL TRAMWAY	[16FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A1, 0x003F };
    uint32_t const ces[9] = { 0x16FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_009)
{
    // 1F6A1 0061;	
    // (🚡) AERIAL TRAMWAY	[16FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A1, 0x0061 };
    uint32_t const ces[9] = { 0x16FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_010)
{
    // 1F6A1 0041;	
    // (🚡) AERIAL TRAMWAY	[16FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6A1, 0x0041 };
    uint32_t const ces[9] = { 0x16FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_011)
{
    // 1F6A1 0062;	
    // (🚡) AERIAL TRAMWAY	[16FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A1, 0x0062 };
    uint32_t const ces[9] = { 0x16FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_012)
{
    // 1F6A2 0021;	
    // (🚢) SHIP	[16FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A2, 0x0021 };
    uint32_t const ces[9] = { 0x16FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_013)
{
    // 1F6A2 003F;	
    // (🚢) SHIP	[16FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A2, 0x003F };
    uint32_t const ces[9] = { 0x16FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_014)
{
    // 1F6A2 0061;	
    // (🚢) SHIP	[16FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A2, 0x0061 };
    uint32_t const ces[9] = { 0x16FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_015)
{
    // 1F6A2 0041;	
    // (🚢) SHIP	[16FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6A2, 0x0041 };
    uint32_t const ces[9] = { 0x16FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_016)
{
    // 1F6A2 0062;	
    // (🚢) SHIP	[16FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A2, 0x0062 };
    uint32_t const ces[9] = { 0x16FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_017)
{
    // 1F6A3 0021;	
    // (🚣) ROWBOAT	[16FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A3, 0x0021 };
    uint32_t const ces[9] = { 0x16FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_018)
{
    // 1F6A3 003F;	
    // (🚣) ROWBOAT	[16FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A3, 0x003F };
    uint32_t const ces[9] = { 0x16FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_019)
{
    // 1F6A3 0061;	
    // (🚣) ROWBOAT	[16FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A3, 0x0061 };
    uint32_t const ces[9] = { 0x16FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_020)
{
    // 1F6A3 0041;	
    // (🚣) ROWBOAT	[16FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6A3, 0x0041 };
    uint32_t const ces[9] = { 0x16FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_021)
{
    // 1F6A3 0062;	
    // (🚣) ROWBOAT	[16FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A3, 0x0062 };
    uint32_t const ces[9] = { 0x16FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_022)
{
    // 1F6A4 0021;	
    // (🚤) SPEEDBOAT	[16FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A4, 0x0021 };
    uint32_t const ces[9] = { 0x16FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_023)
{
    // 1F6A4 003F;	
    // (🚤) SPEEDBOAT	[16FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A4, 0x003F };
    uint32_t const ces[9] = { 0x16FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_024)
{
    // 1F6A4 0061;	
    // (🚤) SPEEDBOAT	[16FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A4, 0x0061 };
    uint32_t const ces[9] = { 0x16FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_025)
{
    // 1F6A4 0041;	
    // (🚤) SPEEDBOAT	[16FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6A4, 0x0041 };
    uint32_t const ces[9] = { 0x16FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_026)
{
    // 1F6A4 0062;	
    // (🚤) SPEEDBOAT	[16FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A4, 0x0062 };
    uint32_t const ces[9] = { 0x16FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_027)
{
    // 1F6A5 0021;	
    // (🚥) HORIZONTAL TRAFFIC LIGHT	[1700 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A5, 0x0021 };
    uint32_t const ces[9] = { 0x1700, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_028)
{
    // 1F6A5 003F;	
    // (🚥) HORIZONTAL TRAFFIC LIGHT	[1700 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A5, 0x003F };
    uint32_t const ces[9] = { 0x1700, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_029)
{
    // 1F6A5 0061;	
    // (🚥) HORIZONTAL TRAFFIC LIGHT	[1700 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A5, 0x0061 };
    uint32_t const ces[9] = { 0x1700, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_030)
{
    // 1F6A5 0041;	
    // (🚥) HORIZONTAL TRAFFIC LIGHT	[1700 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6A5, 0x0041 };
    uint32_t const ces[9] = { 0x1700, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_031)
{
    // 1F6A5 0062;	
    // (🚥) HORIZONTAL TRAFFIC LIGHT	[1700 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A5, 0x0062 };
    uint32_t const ces[9] = { 0x1700, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_032)
{
    // 1F6A6 0021;	
    // (🚦) VERTICAL TRAFFIC LIGHT	[1701 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A6, 0x0021 };
    uint32_t const ces[9] = { 0x1701, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_033)
{
    // 1F6A6 003F;	
    // (🚦) VERTICAL TRAFFIC LIGHT	[1701 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A6, 0x003F };
    uint32_t const ces[9] = { 0x1701, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_034)
{
    // 1F6A6 0061;	
    // (🚦) VERTICAL TRAFFIC LIGHT	[1701 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A6, 0x0061 };
    uint32_t const ces[9] = { 0x1701, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_035)
{
    // 1F6A6 0041;	
    // (🚦) VERTICAL TRAFFIC LIGHT	[1701 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6A6, 0x0041 };
    uint32_t const ces[9] = { 0x1701, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_036)
{
    // 1F6A6 0062;	
    // (🚦) VERTICAL TRAFFIC LIGHT	[1701 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A6, 0x0062 };
    uint32_t const ces[9] = { 0x1701, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_037)
{
    // 1F6A7 0021;	
    // (🚧) CONSTRUCTION SIGN	[1702 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A7, 0x0021 };
    uint32_t const ces[9] = { 0x1702, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_038)
{
    // 1F6A7 003F;	
    // (🚧) CONSTRUCTION SIGN	[1702 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A7, 0x003F };
    uint32_t const ces[9] = { 0x1702, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_039)
{
    // 1F6A7 0061;	
    // (🚧) CONSTRUCTION SIGN	[1702 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A7, 0x0061 };
    uint32_t const ces[9] = { 0x1702, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_040)
{
    // 1F6A7 0041;	
    // (🚧) CONSTRUCTION SIGN	[1702 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6A7, 0x0041 };
    uint32_t const ces[9] = { 0x1702, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_041)
{
    // 1F6A7 0062;	
    // (🚧) CONSTRUCTION SIGN	[1702 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A7, 0x0062 };
    uint32_t const ces[9] = { 0x1702, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_042)
{
    // 1F6A8 0021;	
    // (🚨) POLICE CARS REVOLVING LIGHT	[1703 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A8, 0x0021 };
    uint32_t const ces[9] = { 0x1703, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_043)
{
    // 1F6A8 003F;	
    // (🚨) POLICE CARS REVOLVING LIGHT	[1703 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A8, 0x003F };
    uint32_t const ces[9] = { 0x1703, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_044)
{
    // 1F6A8 0061;	
    // (🚨) POLICE CARS REVOLVING LIGHT	[1703 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A8, 0x0061 };
    uint32_t const ces[9] = { 0x1703, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_045)
{
    // 1F6A8 0041;	
    // (🚨) POLICE CARS REVOLVING LIGHT	[1703 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6A8, 0x0041 };
    uint32_t const ces[9] = { 0x1703, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_046)
{
    // 1F6A8 0062;	
    // (🚨) POLICE CARS REVOLVING LIGHT	[1703 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A8, 0x0062 };
    uint32_t const ces[9] = { 0x1703, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_047)
{
    // 1F6A9 0021;	
    // (🚩) TRIANGULAR FLAG ON POST	[1704 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A9, 0x0021 };
    uint32_t const ces[9] = { 0x1704, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_048)
{
    // 1F6A9 003F;	
    // (🚩) TRIANGULAR FLAG ON POST	[1704 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A9, 0x003F };
    uint32_t const ces[9] = { 0x1704, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_049)
{
    // 1F6A9 0061;	
    // (🚩) TRIANGULAR FLAG ON POST	[1704 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A9, 0x0061 };
    uint32_t const ces[9] = { 0x1704, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_050)
{
    // 1F6A9 0041;	
    // (🚩) TRIANGULAR FLAG ON POST	[1704 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6A9, 0x0041 };
    uint32_t const ces[9] = { 0x1704, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_051)
{
    // 1F6A9 0062;	
    // (🚩) TRIANGULAR FLAG ON POST	[1704 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A9, 0x0062 };
    uint32_t const ces[9] = { 0x1704, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_052)
{
    // 1F6AA 0021;	
    // (🚪) DOOR	[1705 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6AA, 0x0021 };
    uint32_t const ces[9] = { 0x1705, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_053)
{
    // 1F6AA 003F;	
    // (🚪) DOOR	[1705 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6AA, 0x003F };
    uint32_t const ces[9] = { 0x1705, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_054)
{
    // 1F6AA 0061;	
    // (🚪) DOOR	[1705 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6AA, 0x0061 };
    uint32_t const ces[9] = { 0x1705, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_055)
{
    // 1F6AA 0041;	
    // (🚪) DOOR	[1705 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6AA, 0x0041 };
    uint32_t const ces[9] = { 0x1705, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_056)
{
    // 1F6AA 0062;	
    // (🚪) DOOR	[1705 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6AA, 0x0062 };
    uint32_t const ces[9] = { 0x1705, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_057)
{
    // 1F6AB 0021;	
    // (🚫) NO ENTRY SIGN	[1706 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6AB, 0x0021 };
    uint32_t const ces[9] = { 0x1706, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_058)
{
    // 1F6AB 003F;	
    // (🚫) NO ENTRY SIGN	[1706 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6AB, 0x003F };
    uint32_t const ces[9] = { 0x1706, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_059)
{
    // 1F6AB 0061;	
    // (🚫) NO ENTRY SIGN	[1706 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6AB, 0x0061 };
    uint32_t const ces[9] = { 0x1706, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_060)
{
    // 1F6AB 0041;	
    // (🚫) NO ENTRY SIGN	[1706 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6AB, 0x0041 };
    uint32_t const ces[9] = { 0x1706, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_061)
{
    // 1F6AB 0062;	
    // (🚫) NO ENTRY SIGN	[1706 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6AB, 0x0062 };
    uint32_t const ces[9] = { 0x1706, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_062)
{
    // 1F6AC 0021;	
    // (🚬) SMOKING SYMBOL	[1707 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6AC, 0x0021 };
    uint32_t const ces[9] = { 0x1707, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_063)
{
    // 1F6AC 003F;	
    // (🚬) SMOKING SYMBOL	[1707 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6AC, 0x003F };
    uint32_t const ces[9] = { 0x1707, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_064)
{
    // 1F6AC 0061;	
    // (🚬) SMOKING SYMBOL	[1707 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6AC, 0x0061 };
    uint32_t const ces[9] = { 0x1707, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_065)
{
    // 1F6AC 0041;	
    // (🚬) SMOKING SYMBOL	[1707 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6AC, 0x0041 };
    uint32_t const ces[9] = { 0x1707, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_066)
{
    // 1F6AC 0062;	
    // (🚬) SMOKING SYMBOL	[1707 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6AC, 0x0062 };
    uint32_t const ces[9] = { 0x1707, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_067)
{
    // 1F6AD 0021;	
    // (🚭) NO SMOKING SYMBOL	[1708 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6AD, 0x0021 };
    uint32_t const ces[9] = { 0x1708, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_068)
{
    // 1F6AD 003F;	
    // (🚭) NO SMOKING SYMBOL	[1708 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6AD, 0x003F };
    uint32_t const ces[9] = { 0x1708, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_069)
{
    // 1F6AD 0061;	
    // (🚭) NO SMOKING SYMBOL	[1708 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6AD, 0x0061 };
    uint32_t const ces[9] = { 0x1708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_070)
{
    // 1F6AD 0041;	
    // (🚭) NO SMOKING SYMBOL	[1708 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6AD, 0x0041 };
    uint32_t const ces[9] = { 0x1708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_071)
{
    // 1F6AD 0062;	
    // (🚭) NO SMOKING SYMBOL	[1708 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6AD, 0x0062 };
    uint32_t const ces[9] = { 0x1708, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_072)
{
    // 1F6AE 0021;	
    // (🚮) PUT LITTER IN ITS PLACE SYMBOL	[1709 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6AE, 0x0021 };
    uint32_t const ces[9] = { 0x1709, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_073)
{
    // 1F6AE 003F;	
    // (🚮) PUT LITTER IN ITS PLACE SYMBOL	[1709 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6AE, 0x003F };
    uint32_t const ces[9] = { 0x1709, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_074)
{
    // 1F6AE 0061;	
    // (🚮) PUT LITTER IN ITS PLACE SYMBOL	[1709 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6AE, 0x0061 };
    uint32_t const ces[9] = { 0x1709, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_075)
{
    // 1F6AE 0041;	
    // (🚮) PUT LITTER IN ITS PLACE SYMBOL	[1709 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6AE, 0x0041 };
    uint32_t const ces[9] = { 0x1709, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_076)
{
    // 1F6AE 0062;	
    // (🚮) PUT LITTER IN ITS PLACE SYMBOL	[1709 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6AE, 0x0062 };
    uint32_t const ces[9] = { 0x1709, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_077)
{
    // 1F6AF 0021;	
    // (🚯) DO NOT LITTER SYMBOL	[170A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6AF, 0x0021 };
    uint32_t const ces[9] = { 0x170A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_078)
{
    // 1F6AF 003F;	
    // (🚯) DO NOT LITTER SYMBOL	[170A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6AF, 0x003F };
    uint32_t const ces[9] = { 0x170A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_079)
{
    // 1F6AF 0061;	
    // (🚯) DO NOT LITTER SYMBOL	[170A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6AF, 0x0061 };
    uint32_t const ces[9] = { 0x170A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_080)
{
    // 1F6AF 0041;	
    // (🚯) DO NOT LITTER SYMBOL	[170A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6AF, 0x0041 };
    uint32_t const ces[9] = { 0x170A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_081)
{
    // 1F6AF 0062;	
    // (🚯) DO NOT LITTER SYMBOL	[170A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6AF, 0x0062 };
    uint32_t const ces[9] = { 0x170A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_082)
{
    // 1F6B0 0021;	
    // (🚰) POTABLE WATER SYMBOL	[170B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B0, 0x0021 };
    uint32_t const ces[9] = { 0x170B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_083)
{
    // 1F6B0 003F;	
    // (🚰) POTABLE WATER SYMBOL	[170B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B0, 0x003F };
    uint32_t const ces[9] = { 0x170B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_084)
{
    // 1F6B0 0061;	
    // (🚰) POTABLE WATER SYMBOL	[170B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B0, 0x0061 };
    uint32_t const ces[9] = { 0x170B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_085)
{
    // 1F6B0 0041;	
    // (🚰) POTABLE WATER SYMBOL	[170B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6B0, 0x0041 };
    uint32_t const ces[9] = { 0x170B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_086)
{
    // 1F6B0 0062;	
    // (🚰) POTABLE WATER SYMBOL	[170B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B0, 0x0062 };
    uint32_t const ces[9] = { 0x170B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_087)
{
    // 1F6B1 0021;	
    // (🚱) NON-POTABLE WATER SYMBOL	[170C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B1, 0x0021 };
    uint32_t const ces[9] = { 0x170C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_088)
{
    // 1F6B1 003F;	
    // (🚱) NON-POTABLE WATER SYMBOL	[170C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B1, 0x003F };
    uint32_t const ces[9] = { 0x170C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_089)
{
    // 1F6B1 0061;	
    // (🚱) NON-POTABLE WATER SYMBOL	[170C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B1, 0x0061 };
    uint32_t const ces[9] = { 0x170C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_090)
{
    // 1F6B1 0041;	
    // (🚱) NON-POTABLE WATER SYMBOL	[170C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6B1, 0x0041 };
    uint32_t const ces[9] = { 0x170C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_091)
{
    // 1F6B1 0062;	
    // (🚱) NON-POTABLE WATER SYMBOL	[170C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B1, 0x0062 };
    uint32_t const ces[9] = { 0x170C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_092)
{
    // 1F6B2 0021;	
    // (🚲) BICYCLE	[170D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B2, 0x0021 };
    uint32_t const ces[9] = { 0x170D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_093)
{
    // 1F6B2 003F;	
    // (🚲) BICYCLE	[170D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B2, 0x003F };
    uint32_t const ces[9] = { 0x170D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_094)
{
    // 1F6B2 0061;	
    // (🚲) BICYCLE	[170D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B2, 0x0061 };
    uint32_t const ces[9] = { 0x170D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_095)
{
    // 1F6B2 0041;	
    // (🚲) BICYCLE	[170D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6B2, 0x0041 };
    uint32_t const ces[9] = { 0x170D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_096)
{
    // 1F6B2 0062;	
    // (🚲) BICYCLE	[170D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B2, 0x0062 };
    uint32_t const ces[9] = { 0x170D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_097)
{
    // 1F6B3 0021;	
    // (🚳) NO BICYCLES	[170E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B3, 0x0021 };
    uint32_t const ces[9] = { 0x170E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_098)
{
    // 1F6B3 003F;	
    // (🚳) NO BICYCLES	[170E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B3, 0x003F };
    uint32_t const ces[9] = { 0x170E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_099)
{
    // 1F6B3 0061;	
    // (🚳) NO BICYCLES	[170E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B3, 0x0061 };
    uint32_t const ces[9] = { 0x170E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_100)
{
    // 1F6B3 0041;	
    // (🚳) NO BICYCLES	[170E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6B3, 0x0041 };
    uint32_t const ces[9] = { 0x170E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_101)
{
    // 1F6B3 0062;	
    // (🚳) NO BICYCLES	[170E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B3, 0x0062 };
    uint32_t const ces[9] = { 0x170E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_102)
{
    // 1F6B4 0021;	
    // (🚴) BICYCLIST	[170F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B4, 0x0021 };
    uint32_t const ces[9] = { 0x170F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_103)
{
    // 1F6B4 003F;	
    // (🚴) BICYCLIST	[170F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B4, 0x003F };
    uint32_t const ces[9] = { 0x170F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_104)
{
    // 1F6B4 0061;	
    // (🚴) BICYCLIST	[170F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B4, 0x0061 };
    uint32_t const ces[9] = { 0x170F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_105)
{
    // 1F6B4 0041;	
    // (🚴) BICYCLIST	[170F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6B4, 0x0041 };
    uint32_t const ces[9] = { 0x170F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_106)
{
    // 1F6B4 0062;	
    // (🚴) BICYCLIST	[170F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B4, 0x0062 };
    uint32_t const ces[9] = { 0x170F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_107)
{
    // 1F6B5 0021;	
    // (🚵) MOUNTAIN BICYCLIST	[1710 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B5, 0x0021 };
    uint32_t const ces[9] = { 0x1710, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_108)
{
    // 1F6B5 003F;	
    // (🚵) MOUNTAIN BICYCLIST	[1710 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B5, 0x003F };
    uint32_t const ces[9] = { 0x1710, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_109)
{
    // 1F6B5 0061;	
    // (🚵) MOUNTAIN BICYCLIST	[1710 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B5, 0x0061 };
    uint32_t const ces[9] = { 0x1710, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_110)
{
    // 1F6B5 0041;	
    // (🚵) MOUNTAIN BICYCLIST	[1710 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6B5, 0x0041 };
    uint32_t const ces[9] = { 0x1710, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_111)
{
    // 1F6B5 0062;	
    // (🚵) MOUNTAIN BICYCLIST	[1710 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B5, 0x0062 };
    uint32_t const ces[9] = { 0x1710, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_112)
{
    // 1F6B6 0021;	
    // (🚶) PEDESTRIAN	[1711 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B6, 0x0021 };
    uint32_t const ces[9] = { 0x1711, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_113)
{
    // 1F6B6 003F;	
    // (🚶) PEDESTRIAN	[1711 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B6, 0x003F };
    uint32_t const ces[9] = { 0x1711, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_114)
{
    // 1F6B6 0061;	
    // (🚶) PEDESTRIAN	[1711 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B6, 0x0061 };
    uint32_t const ces[9] = { 0x1711, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_115)
{
    // 1F6B6 0041;	
    // (🚶) PEDESTRIAN	[1711 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6B6, 0x0041 };
    uint32_t const ces[9] = { 0x1711, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_116)
{
    // 1F6B6 0062;	
    // (🚶) PEDESTRIAN	[1711 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B6, 0x0062 };
    uint32_t const ces[9] = { 0x1711, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_117)
{
    // 1F6B7 0021;	
    // (🚷) NO PEDESTRIANS	[1712 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B7, 0x0021 };
    uint32_t const ces[9] = { 0x1712, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_118)
{
    // 1F6B7 003F;	
    // (🚷) NO PEDESTRIANS	[1712 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B7, 0x003F };
    uint32_t const ces[9] = { 0x1712, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_119)
{
    // 1F6B7 0061;	
    // (🚷) NO PEDESTRIANS	[1712 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B7, 0x0061 };
    uint32_t const ces[9] = { 0x1712, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_120)
{
    // 1F6B7 0041;	
    // (🚷) NO PEDESTRIANS	[1712 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6B7, 0x0041 };
    uint32_t const ces[9] = { 0x1712, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_121)
{
    // 1F6B7 0062;	
    // (🚷) NO PEDESTRIANS	[1712 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B7, 0x0062 };
    uint32_t const ces[9] = { 0x1712, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_122)
{
    // 1F6B8 0021;	
    // (🚸) CHILDREN CROSSING	[1713 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B8, 0x0021 };
    uint32_t const ces[9] = { 0x1713, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_123)
{
    // 1F6B8 003F;	
    // (🚸) CHILDREN CROSSING	[1713 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B8, 0x003F };
    uint32_t const ces[9] = { 0x1713, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_124)
{
    // 1F6B8 0061;	
    // (🚸) CHILDREN CROSSING	[1713 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B8, 0x0061 };
    uint32_t const ces[9] = { 0x1713, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_125)
{
    // 1F6B8 0041;	
    // (🚸) CHILDREN CROSSING	[1713 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6B8, 0x0041 };
    uint32_t const ces[9] = { 0x1713, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_126)
{
    // 1F6B8 0062;	
    // (🚸) CHILDREN CROSSING	[1713 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B8, 0x0062 };
    uint32_t const ces[9] = { 0x1713, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_127)
{
    // 1F6B9 0021;	
    // (🚹) MENS SYMBOL	[1714 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B9, 0x0021 };
    uint32_t const ces[9] = { 0x1714, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_128)
{
    // 1F6B9 003F;	
    // (🚹) MENS SYMBOL	[1714 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B9, 0x003F };
    uint32_t const ces[9] = { 0x1714, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_129)
{
    // 1F6B9 0061;	
    // (🚹) MENS SYMBOL	[1714 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B9, 0x0061 };
    uint32_t const ces[9] = { 0x1714, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_130)
{
    // 1F6B9 0041;	
    // (🚹) MENS SYMBOL	[1714 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6B9, 0x0041 };
    uint32_t const ces[9] = { 0x1714, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_131)
{
    // 1F6B9 0062;	
    // (🚹) MENS SYMBOL	[1714 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B9, 0x0062 };
    uint32_t const ces[9] = { 0x1714, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_132)
{
    // 1F6BA 0021;	
    // (🚺) WOMENS SYMBOL	[1715 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6BA, 0x0021 };
    uint32_t const ces[9] = { 0x1715, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_133)
{
    // 1F6BA 003F;	
    // (🚺) WOMENS SYMBOL	[1715 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6BA, 0x003F };
    uint32_t const ces[9] = { 0x1715, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_134)
{
    // 1F6BA 0061;	
    // (🚺) WOMENS SYMBOL	[1715 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6BA, 0x0061 };
    uint32_t const ces[9] = { 0x1715, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_135)
{
    // 1F6BA 0041;	
    // (🚺) WOMENS SYMBOL	[1715 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6BA, 0x0041 };
    uint32_t const ces[9] = { 0x1715, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_136)
{
    // 1F6BA 0062;	
    // (🚺) WOMENS SYMBOL	[1715 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6BA, 0x0062 };
    uint32_t const ces[9] = { 0x1715, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_137)
{
    // 1F6BB 0021;	
    // (🚻) RESTROOM	[1716 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6BB, 0x0021 };
    uint32_t const ces[9] = { 0x1716, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_138)
{
    // 1F6BB 003F;	
    // (🚻) RESTROOM	[1716 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6BB, 0x003F };
    uint32_t const ces[9] = { 0x1716, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_139)
{
    // 1F6BB 0061;	
    // (🚻) RESTROOM	[1716 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6BB, 0x0061 };
    uint32_t const ces[9] = { 0x1716, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_140)
{
    // 1F6BB 0041;	
    // (🚻) RESTROOM	[1716 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6BB, 0x0041 };
    uint32_t const ces[9] = { 0x1716, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_141)
{
    // 1F6BB 0062;	
    // (🚻) RESTROOM	[1716 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6BB, 0x0062 };
    uint32_t const ces[9] = { 0x1716, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_142)
{
    // 1F6BC 0021;	
    // (🚼) BABY SYMBOL	[1717 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6BC, 0x0021 };
    uint32_t const ces[9] = { 0x1717, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_143)
{
    // 1F6BC 003F;	
    // (🚼) BABY SYMBOL	[1717 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6BC, 0x003F };
    uint32_t const ces[9] = { 0x1717, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_144)
{
    // 1F6BC 0061;	
    // (🚼) BABY SYMBOL	[1717 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6BC, 0x0061 };
    uint32_t const ces[9] = { 0x1717, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_145)
{
    // 1F6BC 0041;	
    // (🚼) BABY SYMBOL	[1717 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6BC, 0x0041 };
    uint32_t const ces[9] = { 0x1717, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_146)
{
    // 1F6BC 0062;	
    // (🚼) BABY SYMBOL	[1717 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6BC, 0x0062 };
    uint32_t const ces[9] = { 0x1717, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_147)
{
    // 1F6BD 0021;	
    // (🚽) TOILET	[1718 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6BD, 0x0021 };
    uint32_t const ces[9] = { 0x1718, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_148)
{
    // 1F6BD 003F;	
    // (🚽) TOILET	[1718 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6BD, 0x003F };
    uint32_t const ces[9] = { 0x1718, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_149)
{
    // 1F6BD 0061;	
    // (🚽) TOILET	[1718 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6BD, 0x0061 };
    uint32_t const ces[9] = { 0x1718, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_150)
{
    // 1F6BD 0041;	
    // (🚽) TOILET	[1718 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6BD, 0x0041 };
    uint32_t const ces[9] = { 0x1718, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_151)
{
    // 1F6BD 0062;	
    // (🚽) TOILET	[1718 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6BD, 0x0062 };
    uint32_t const ces[9] = { 0x1718, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_152)
{
    // 1F6BE 0021;	
    // (🚾) WATER CLOSET	[1719 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6BE, 0x0021 };
    uint32_t const ces[9] = { 0x1719, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_153)
{
    // 1F6BE 003F;	
    // (🚾) WATER CLOSET	[1719 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6BE, 0x003F };
    uint32_t const ces[9] = { 0x1719, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_154)
{
    // 1F6BE 0061;	
    // (🚾) WATER CLOSET	[1719 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6BE, 0x0061 };
    uint32_t const ces[9] = { 0x1719, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_155)
{
    // 1F6BE 0041;	
    // (🚾) WATER CLOSET	[1719 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6BE, 0x0041 };
    uint32_t const ces[9] = { 0x1719, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_156)
{
    // 1F6BE 0062;	
    // (🚾) WATER CLOSET	[1719 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6BE, 0x0062 };
    uint32_t const ces[9] = { 0x1719, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_157)
{
    // 1F6BF 0021;	
    // (🚿) SHOWER	[171A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6BF, 0x0021 };
    uint32_t const ces[9] = { 0x171A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_158)
{
    // 1F6BF 003F;	
    // (🚿) SHOWER	[171A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6BF, 0x003F };
    uint32_t const ces[9] = { 0x171A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_159)
{
    // 1F6BF 0061;	
    // (🚿) SHOWER	[171A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6BF, 0x0061 };
    uint32_t const ces[9] = { 0x171A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_160)
{
    // 1F6BF 0041;	
    // (🚿) SHOWER	[171A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6BF, 0x0041 };
    uint32_t const ces[9] = { 0x171A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_161)
{
    // 1F6BF 0062;	
    // (🚿) SHOWER	[171A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6BF, 0x0062 };
    uint32_t const ces[9] = { 0x171A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_162)
{
    // 1F6C0 0021;	
    // (🛀) BATH	[171B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C0, 0x0021 };
    uint32_t const ces[9] = { 0x171B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_163)
{
    // 1F6C0 003F;	
    // (🛀) BATH	[171B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C0, 0x003F };
    uint32_t const ces[9] = { 0x171B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_164)
{
    // 1F6C0 0061;	
    // (🛀) BATH	[171B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C0, 0x0061 };
    uint32_t const ces[9] = { 0x171B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_165)
{
    // 1F6C0 0041;	
    // (🛀) BATH	[171B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6C0, 0x0041 };
    uint32_t const ces[9] = { 0x171B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_166)
{
    // 1F6C0 0062;	
    // (🛀) BATH	[171B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C0, 0x0062 };
    uint32_t const ces[9] = { 0x171B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_167)
{
    // 1F6C1 0021;	
    // (🛁) BATHTUB	[171C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C1, 0x0021 };
    uint32_t const ces[9] = { 0x171C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_168)
{
    // 1F6C1 003F;	
    // (🛁) BATHTUB	[171C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C1, 0x003F };
    uint32_t const ces[9] = { 0x171C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_169)
{
    // 1F6C1 0061;	
    // (🛁) BATHTUB	[171C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C1, 0x0061 };
    uint32_t const ces[9] = { 0x171C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_170)
{
    // 1F6C1 0041;	
    // (🛁) BATHTUB	[171C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6C1, 0x0041 };
    uint32_t const ces[9] = { 0x171C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_171)
{
    // 1F6C1 0062;	
    // (🛁) BATHTUB	[171C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C1, 0x0062 };
    uint32_t const ces[9] = { 0x171C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_172)
{
    // 1F6C2 0021;	
    // (🛂) PASSPORT CONTROL	[171D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C2, 0x0021 };
    uint32_t const ces[9] = { 0x171D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_173)
{
    // 1F6C2 003F;	
    // (🛂) PASSPORT CONTROL	[171D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C2, 0x003F };
    uint32_t const ces[9] = { 0x171D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_174)
{
    // 1F6C2 0061;	
    // (🛂) PASSPORT CONTROL	[171D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C2, 0x0061 };
    uint32_t const ces[9] = { 0x171D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_175)
{
    // 1F6C2 0041;	
    // (🛂) PASSPORT CONTROL	[171D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6C2, 0x0041 };
    uint32_t const ces[9] = { 0x171D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_176)
{
    // 1F6C2 0062;	
    // (🛂) PASSPORT CONTROL	[171D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C2, 0x0062 };
    uint32_t const ces[9] = { 0x171D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_177)
{
    // 1F6C3 0021;	
    // (🛃) CUSTOMS	[171E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C3, 0x0021 };
    uint32_t const ces[9] = { 0x171E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_178)
{
    // 1F6C3 003F;	
    // (🛃) CUSTOMS	[171E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C3, 0x003F };
    uint32_t const ces[9] = { 0x171E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_179)
{
    // 1F6C3 0061;	
    // (🛃) CUSTOMS	[171E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C3, 0x0061 };
    uint32_t const ces[9] = { 0x171E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_180)
{
    // 1F6C3 0041;	
    // (🛃) CUSTOMS	[171E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6C3, 0x0041 };
    uint32_t const ces[9] = { 0x171E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_181)
{
    // 1F6C3 0062;	
    // (🛃) CUSTOMS	[171E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C3, 0x0062 };
    uint32_t const ces[9] = { 0x171E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_182)
{
    // 1F6C4 0021;	
    // (🛄) BAGGAGE CLAIM	[171F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C4, 0x0021 };
    uint32_t const ces[9] = { 0x171F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_183)
{
    // 1F6C4 003F;	
    // (🛄) BAGGAGE CLAIM	[171F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C4, 0x003F };
    uint32_t const ces[9] = { 0x171F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_184)
{
    // 1F6C4 0061;	
    // (🛄) BAGGAGE CLAIM	[171F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C4, 0x0061 };
    uint32_t const ces[9] = { 0x171F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_185)
{
    // 1F6C4 0041;	
    // (🛄) BAGGAGE CLAIM	[171F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6C4, 0x0041 };
    uint32_t const ces[9] = { 0x171F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_186)
{
    // 1F6C4 0062;	
    // (🛄) BAGGAGE CLAIM	[171F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C4, 0x0062 };
    uint32_t const ces[9] = { 0x171F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_187)
{
    // 1F6C5 0021;	
    // (🛅) LEFT LUGGAGE	[1720 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C5, 0x0021 };
    uint32_t const ces[9] = { 0x1720, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_188)
{
    // 1F6C5 003F;	
    // (🛅) LEFT LUGGAGE	[1720 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C5, 0x003F };
    uint32_t const ces[9] = { 0x1720, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_189)
{
    // 1F6C5 0061;	
    // (🛅) LEFT LUGGAGE	[1720 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C5, 0x0061 };
    uint32_t const ces[9] = { 0x1720, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_190)
{
    // 1F6C5 0041;	
    // (🛅) LEFT LUGGAGE	[1720 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6C5, 0x0041 };
    uint32_t const ces[9] = { 0x1720, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_191)
{
    // 1F6C5 0062;	
    // (🛅) LEFT LUGGAGE	[1720 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C5, 0x0062 };
    uint32_t const ces[9] = { 0x1720, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_192)
{
    // 1F6C6 0021;	
    // (🛆) TRIANGLE WITH ROUNDED CORNERS	[1721 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C6, 0x0021 };
    uint32_t const ces[9] = { 0x1721, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_193)
{
    // 1F6C6 003F;	
    // (🛆) TRIANGLE WITH ROUNDED CORNERS	[1721 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C6, 0x003F };
    uint32_t const ces[9] = { 0x1721, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_194)
{
    // 1F6C6 0061;	
    // (🛆) TRIANGLE WITH ROUNDED CORNERS	[1721 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C6, 0x0061 };
    uint32_t const ces[9] = { 0x1721, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_195)
{
    // 1F6C6 0041;	
    // (🛆) TRIANGLE WITH ROUNDED CORNERS	[1721 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6C6, 0x0041 };
    uint32_t const ces[9] = { 0x1721, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_196)
{
    // 1F6C6 0062;	
    // (🛆) TRIANGLE WITH ROUNDED CORNERS	[1721 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C6, 0x0062 };
    uint32_t const ces[9] = { 0x1721, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_197)
{
    // 1F6C7 0021;	
    // (🛇) PROHIBITED SIGN	[1722 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C7, 0x0021 };
    uint32_t const ces[9] = { 0x1722, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_198)
{
    // 1F6C7 003F;	
    // (🛇) PROHIBITED SIGN	[1722 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C7, 0x003F };
    uint32_t const ces[9] = { 0x1722, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_199)
{
    // 1F6C7 0061;	
    // (🛇) PROHIBITED SIGN	[1722 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C7, 0x0061 };
    uint32_t const ces[9] = { 0x1722, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_200)
{
    // 1F6C7 0041;	
    // (🛇) PROHIBITED SIGN	[1722 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6C7, 0x0041 };
    uint32_t const ces[9] = { 0x1722, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_201)
{
    // 1F6C7 0062;	
    // (🛇) PROHIBITED SIGN	[1722 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C7, 0x0062 };
    uint32_t const ces[9] = { 0x1722, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_202)
{
    // 1F6C8 0021;	
    // (🛈) CIRCLED INFORMATION SOURCE	[1723 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C8, 0x0021 };
    uint32_t const ces[9] = { 0x1723, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_203)
{
    // 1F6C8 003F;	
    // (🛈) CIRCLED INFORMATION SOURCE	[1723 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C8, 0x003F };
    uint32_t const ces[9] = { 0x1723, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_204)
{
    // 1F6C8 0061;	
    // (🛈) CIRCLED INFORMATION SOURCE	[1723 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C8, 0x0061 };
    uint32_t const ces[9] = { 0x1723, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_205)
{
    // 1F6C8 0041;	
    // (🛈) CIRCLED INFORMATION SOURCE	[1723 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6C8, 0x0041 };
    uint32_t const ces[9] = { 0x1723, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_206)
{
    // 1F6C8 0062;	
    // (🛈) CIRCLED INFORMATION SOURCE	[1723 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C8, 0x0062 };
    uint32_t const ces[9] = { 0x1723, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_207)
{
    // 1F6C9 0021;	
    // (🛉) BOYS SYMBOL	[1724 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C9, 0x0021 };
    uint32_t const ces[9] = { 0x1724, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_208)
{
    // 1F6C9 003F;	
    // (🛉) BOYS SYMBOL	[1724 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C9, 0x003F };
    uint32_t const ces[9] = { 0x1724, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_209)
{
    // 1F6C9 0061;	
    // (🛉) BOYS SYMBOL	[1724 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C9, 0x0061 };
    uint32_t const ces[9] = { 0x1724, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_210)
{
    // 1F6C9 0041;	
    // (🛉) BOYS SYMBOL	[1724 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6C9, 0x0041 };
    uint32_t const ces[9] = { 0x1724, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_211)
{
    // 1F6C9 0062;	
    // (🛉) BOYS SYMBOL	[1724 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C9, 0x0062 };
    uint32_t const ces[9] = { 0x1724, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_212)
{
    // 1F6CA 0021;	
    // (🛊) GIRLS SYMBOL	[1725 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6CA, 0x0021 };
    uint32_t const ces[9] = { 0x1725, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_213)
{
    // 1F6CA 003F;	
    // (🛊) GIRLS SYMBOL	[1725 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6CA, 0x003F };
    uint32_t const ces[9] = { 0x1725, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_214)
{
    // 1F6CA 0061;	
    // (🛊) GIRLS SYMBOL	[1725 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6CA, 0x0061 };
    uint32_t const ces[9] = { 0x1725, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_215)
{
    // 1F6CA 0041;	
    // (🛊) GIRLS SYMBOL	[1725 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6CA, 0x0041 };
    uint32_t const ces[9] = { 0x1725, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_216)
{
    // 1F6CA 0062;	
    // (🛊) GIRLS SYMBOL	[1725 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6CA, 0x0062 };
    uint32_t const ces[9] = { 0x1725, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_217)
{
    // 1F6CB 0021;	
    // (🛋) COUCH AND LAMP	[1726 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6CB, 0x0021 };
    uint32_t const ces[9] = { 0x1726, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_218)
{
    // 1F6CB 003F;	
    // (🛋) COUCH AND LAMP	[1726 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6CB, 0x003F };
    uint32_t const ces[9] = { 0x1726, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_219)
{
    // 1F6CB 0061;	
    // (🛋) COUCH AND LAMP	[1726 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6CB, 0x0061 };
    uint32_t const ces[9] = { 0x1726, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_220)
{
    // 1F6CB 0041;	
    // (🛋) COUCH AND LAMP	[1726 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6CB, 0x0041 };
    uint32_t const ces[9] = { 0x1726, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_221)
{
    // 1F6CB 0062;	
    // (🛋) COUCH AND LAMP	[1726 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6CB, 0x0062 };
    uint32_t const ces[9] = { 0x1726, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_222)
{
    // 1F6CC 0021;	
    // (🛌) SLEEPING ACCOMMODATION	[1727 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6CC, 0x0021 };
    uint32_t const ces[9] = { 0x1727, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_223)
{
    // 1F6CC 003F;	
    // (🛌) SLEEPING ACCOMMODATION	[1727 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6CC, 0x003F };
    uint32_t const ces[9] = { 0x1727, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_224)
{
    // 1F6CC 0061;	
    // (🛌) SLEEPING ACCOMMODATION	[1727 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6CC, 0x0061 };
    uint32_t const ces[9] = { 0x1727, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_225)
{
    // 1F6CC 0041;	
    // (🛌) SLEEPING ACCOMMODATION	[1727 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6CC, 0x0041 };
    uint32_t const ces[9] = { 0x1727, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_226)
{
    // 1F6CC 0062;	
    // (🛌) SLEEPING ACCOMMODATION	[1727 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6CC, 0x0062 };
    uint32_t const ces[9] = { 0x1727, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_227)
{
    // 1F6CD 0021;	
    // (🛍) SHOPPING BAGS	[1728 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6CD, 0x0021 };
    uint32_t const ces[9] = { 0x1728, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_228)
{
    // 1F6CD 003F;	
    // (🛍) SHOPPING BAGS	[1728 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6CD, 0x003F };
    uint32_t const ces[9] = { 0x1728, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_229)
{
    // 1F6CD 0061;	
    // (🛍) SHOPPING BAGS	[1728 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6CD, 0x0061 };
    uint32_t const ces[9] = { 0x1728, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_230)
{
    // 1F6CD 0041;	
    // (🛍) SHOPPING BAGS	[1728 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6CD, 0x0041 };
    uint32_t const ces[9] = { 0x1728, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_231)
{
    // 1F6CD 0062;	
    // (🛍) SHOPPING BAGS	[1728 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6CD, 0x0062 };
    uint32_t const ces[9] = { 0x1728, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_232)
{
    // 1F6CE 0021;	
    // (🛎) BELLHOP BELL	[1729 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6CE, 0x0021 };
    uint32_t const ces[9] = { 0x1729, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_233)
{
    // 1F6CE 003F;	
    // (🛎) BELLHOP BELL	[1729 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6CE, 0x003F };
    uint32_t const ces[9] = { 0x1729, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_234)
{
    // 1F6CE 0061;	
    // (🛎) BELLHOP BELL	[1729 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6CE, 0x0061 };
    uint32_t const ces[9] = { 0x1729, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_235)
{
    // 1F6CE 0041;	
    // (🛎) BELLHOP BELL	[1729 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6CE, 0x0041 };
    uint32_t const ces[9] = { 0x1729, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_236)
{
    // 1F6CE 0062;	
    // (🛎) BELLHOP BELL	[1729 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6CE, 0x0062 };
    uint32_t const ces[9] = { 0x1729, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_237)
{
    // 1F6CF 0021;	
    // (🛏) BED	[172A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6CF, 0x0021 };
    uint32_t const ces[9] = { 0x172A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_238)
{
    // 1F6CF 003F;	
    // (🛏) BED	[172A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6CF, 0x003F };
    uint32_t const ces[9] = { 0x172A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_239)
{
    // 1F6CF 0061;	
    // (🛏) BED	[172A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6CF, 0x0061 };
    uint32_t const ces[9] = { 0x172A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_240)
{
    // 1F6CF 0041;	
    // (🛏) BED	[172A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6CF, 0x0041 };
    uint32_t const ces[9] = { 0x172A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_241)
{
    // 1F6CF 0062;	
    // (🛏) BED	[172A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6CF, 0x0062 };
    uint32_t const ces[9] = { 0x172A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_242)
{
    // 1F6D0 0021;	
    // (🛐) PLACE OF WORSHIP	[172B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6D0, 0x0021 };
    uint32_t const ces[9] = { 0x172B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_243)
{
    // 1F6D0 003F;	
    // (🛐) PLACE OF WORSHIP	[172B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6D0, 0x003F };
    uint32_t const ces[9] = { 0x172B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_244)
{
    // 1F6D0 0061;	
    // (🛐) PLACE OF WORSHIP	[172B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6D0, 0x0061 };
    uint32_t const ces[9] = { 0x172B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_245)
{
    // 1F6D0 0041;	
    // (🛐) PLACE OF WORSHIP	[172B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6D0, 0x0041 };
    uint32_t const ces[9] = { 0x172B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_246)
{
    // 1F6D0 0062;	
    // (🛐) PLACE OF WORSHIP	[172B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6D0, 0x0062 };
    uint32_t const ces[9] = { 0x172B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_247)
{
    // 1F6D1 0021;	
    // (🛑) OCTAGONAL SIGN	[172C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6D1, 0x0021 };
    uint32_t const ces[9] = { 0x172C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_248)
{
    // 1F6D1 003F;	
    // (🛑) OCTAGONAL SIGN	[172C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6D1, 0x003F };
    uint32_t const ces[9] = { 0x172C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_249)
{
    // 1F6D1 0061;	
    // (🛑) OCTAGONAL SIGN	[172C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6D1, 0x0061 };
    uint32_t const ces[9] = { 0x172C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_250)
{
    // 1F6D1 0041;	
    // (🛑) OCTAGONAL SIGN	[172C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6D1, 0x0041 };
    uint32_t const ces[9] = { 0x172C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_251)
{
    // 1F6D1 0062;	
    // (🛑) OCTAGONAL SIGN	[172C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6D1, 0x0062 };
    uint32_t const ces[9] = { 0x172C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_252)
{
    // 1F6D2 0021;	
    // (🛒) SHOPPING TROLLEY	[172D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6D2, 0x0021 };
    uint32_t const ces[9] = { 0x172D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_253)
{
    // 1F6D2 003F;	
    // (🛒) SHOPPING TROLLEY	[172D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6D2, 0x003F };
    uint32_t const ces[9] = { 0x172D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_254)
{
    // 1F6D2 0061;	
    // (🛒) SHOPPING TROLLEY	[172D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6D2, 0x0061 };
    uint32_t const ces[9] = { 0x172D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_255)
{
    // 1F6D2 0041;	
    // (🛒) SHOPPING TROLLEY	[172D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6D2, 0x0041 };
    uint32_t const ces[9] = { 0x172D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_256)
{
    // 1F6D2 0062;	
    // (🛒) SHOPPING TROLLEY	[172D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6D2, 0x0062 };
    uint32_t const ces[9] = { 0x172D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_257)
{
    // 1F6D3 0021;	
    // (🛓) STUPA	[172E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6D3, 0x0021 };
    uint32_t const ces[9] = { 0x172E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_258)
{
    // 1F6D3 003F;	
    // (🛓) STUPA	[172E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6D3, 0x003F };
    uint32_t const ces[9] = { 0x172E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_259)
{
    // 1F6D3 0061;	
    // (🛓) STUPA	[172E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6D3, 0x0061 };
    uint32_t const ces[9] = { 0x172E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_260)
{
    // 1F6D3 0041;	
    // (🛓) STUPA	[172E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6D3, 0x0041 };
    uint32_t const ces[9] = { 0x172E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_261)
{
    // 1F6D3 0062;	
    // (🛓) STUPA	[172E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6D3, 0x0062 };
    uint32_t const ces[9] = { 0x172E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_262)
{
    // 1F6D4 0021;	
    // (🛔) PAGODA	[172F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6D4, 0x0021 };
    uint32_t const ces[9] = { 0x172F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_263)
{
    // 1F6D4 003F;	
    // (🛔) PAGODA	[172F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6D4, 0x003F };
    uint32_t const ces[9] = { 0x172F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_264)
{
    // 1F6D4 0061;	
    // (🛔) PAGODA	[172F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6D4, 0x0061 };
    uint32_t const ces[9] = { 0x172F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_265)
{
    // 1F6D4 0041;	
    // (🛔) PAGODA	[172F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6D4, 0x0041 };
    uint32_t const ces[9] = { 0x172F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_266)
{
    // 1F6D4 0062;	
    // (🛔) PAGODA	[172F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6D4, 0x0062 };
    uint32_t const ces[9] = { 0x172F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_267)
{
    // 1F6E0 0021;	
    // (🛠) HAMMER AND WRENCH	[1730 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E0, 0x0021 };
    uint32_t const ces[9] = { 0x1730, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_268)
{
    // 1F6E0 003F;	
    // (🛠) HAMMER AND WRENCH	[1730 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E0, 0x003F };
    uint32_t const ces[9] = { 0x1730, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_269)
{
    // 1F6E0 0061;	
    // (🛠) HAMMER AND WRENCH	[1730 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E0, 0x0061 };
    uint32_t const ces[9] = { 0x1730, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_270)
{
    // 1F6E0 0041;	
    // (🛠) HAMMER AND WRENCH	[1730 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6E0, 0x0041 };
    uint32_t const ces[9] = { 0x1730, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_271)
{
    // 1F6E0 0062;	
    // (🛠) HAMMER AND WRENCH	[1730 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E0, 0x0062 };
    uint32_t const ces[9] = { 0x1730, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_272)
{
    // 1F6E1 0021;	
    // (🛡) SHIELD	[1731 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E1, 0x0021 };
    uint32_t const ces[9] = { 0x1731, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_273)
{
    // 1F6E1 003F;	
    // (🛡) SHIELD	[1731 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E1, 0x003F };
    uint32_t const ces[9] = { 0x1731, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_274)
{
    // 1F6E1 0061;	
    // (🛡) SHIELD	[1731 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E1, 0x0061 };
    uint32_t const ces[9] = { 0x1731, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_275)
{
    // 1F6E1 0041;	
    // (🛡) SHIELD	[1731 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6E1, 0x0041 };
    uint32_t const ces[9] = { 0x1731, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_276)
{
    // 1F6E1 0062;	
    // (🛡) SHIELD	[1731 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E1, 0x0062 };
    uint32_t const ces[9] = { 0x1731, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_277)
{
    // 1F6E2 0021;	
    // (🛢) OIL DRUM	[1732 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E2, 0x0021 };
    uint32_t const ces[9] = { 0x1732, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_278)
{
    // 1F6E2 003F;	
    // (🛢) OIL DRUM	[1732 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E2, 0x003F };
    uint32_t const ces[9] = { 0x1732, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_279)
{
    // 1F6E2 0061;	
    // (🛢) OIL DRUM	[1732 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E2, 0x0061 };
    uint32_t const ces[9] = { 0x1732, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_280)
{
    // 1F6E2 0041;	
    // (🛢) OIL DRUM	[1732 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6E2, 0x0041 };
    uint32_t const ces[9] = { 0x1732, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_281)
{
    // 1F6E2 0062;	
    // (🛢) OIL DRUM	[1732 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E2, 0x0062 };
    uint32_t const ces[9] = { 0x1732, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_282)
{
    // 1F6E3 0021;	
    // (🛣) MOTORWAY	[1733 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E3, 0x0021 };
    uint32_t const ces[9] = { 0x1733, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_283)
{
    // 1F6E3 003F;	
    // (🛣) MOTORWAY	[1733 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E3, 0x003F };
    uint32_t const ces[9] = { 0x1733, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_284)
{
    // 1F6E3 0061;	
    // (🛣) MOTORWAY	[1733 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E3, 0x0061 };
    uint32_t const ces[9] = { 0x1733, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_285)
{
    // 1F6E3 0041;	
    // (🛣) MOTORWAY	[1733 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6E3, 0x0041 };
    uint32_t const ces[9] = { 0x1733, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_286)
{
    // 1F6E3 0062;	
    // (🛣) MOTORWAY	[1733 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E3, 0x0062 };
    uint32_t const ces[9] = { 0x1733, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_287)
{
    // 1F6E4 0021;	
    // (🛤) RAILWAY TRACK	[1734 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E4, 0x0021 };
    uint32_t const ces[9] = { 0x1734, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_288)
{
    // 1F6E4 003F;	
    // (🛤) RAILWAY TRACK	[1734 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E4, 0x003F };
    uint32_t const ces[9] = { 0x1734, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_289)
{
    // 1F6E4 0061;	
    // (🛤) RAILWAY TRACK	[1734 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E4, 0x0061 };
    uint32_t const ces[9] = { 0x1734, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_290)
{
    // 1F6E4 0041;	
    // (🛤) RAILWAY TRACK	[1734 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6E4, 0x0041 };
    uint32_t const ces[9] = { 0x1734, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_291)
{
    // 1F6E4 0062;	
    // (🛤) RAILWAY TRACK	[1734 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E4, 0x0062 };
    uint32_t const ces[9] = { 0x1734, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_292)
{
    // 1F6E5 0021;	
    // (🛥) MOTOR BOAT	[1735 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E5, 0x0021 };
    uint32_t const ces[9] = { 0x1735, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_293)
{
    // 1F6E5 003F;	
    // (🛥) MOTOR BOAT	[1735 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E5, 0x003F };
    uint32_t const ces[9] = { 0x1735, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_294)
{
    // 1F6E5 0061;	
    // (🛥) MOTOR BOAT	[1735 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E5, 0x0061 };
    uint32_t const ces[9] = { 0x1735, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_295)
{
    // 1F6E5 0041;	
    // (🛥) MOTOR BOAT	[1735 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6E5, 0x0041 };
    uint32_t const ces[9] = { 0x1735, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_296)
{
    // 1F6E5 0062;	
    // (🛥) MOTOR BOAT	[1735 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E5, 0x0062 };
    uint32_t const ces[9] = { 0x1735, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_297)
{
    // 1F6E6 0021;	
    // (🛦) UP-POINTING MILITARY AIRPLANE	[1736 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E6, 0x0021 };
    uint32_t const ces[9] = { 0x1736, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_298)
{
    // 1F6E6 003F;	
    // (🛦) UP-POINTING MILITARY AIRPLANE	[1736 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E6, 0x003F };
    uint32_t const ces[9] = { 0x1736, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_299)
{
    // 1F6E6 0061;	
    // (🛦) UP-POINTING MILITARY AIRPLANE	[1736 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E6, 0x0061 };
    uint32_t const ces[9] = { 0x1736, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_300)
{
    // 1F6E6 0041;	
    // (🛦) UP-POINTING MILITARY AIRPLANE	[1736 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6E6, 0x0041 };
    uint32_t const ces[9] = { 0x1736, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_301)
{
    // 1F6E6 0062;	
    // (🛦) UP-POINTING MILITARY AIRPLANE	[1736 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E6, 0x0062 };
    uint32_t const ces[9] = { 0x1736, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_302)
{
    // 1F6E7 0021;	
    // (🛧) UP-POINTING AIRPLANE	[1737 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E7, 0x0021 };
    uint32_t const ces[9] = { 0x1737, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_303)
{
    // 1F6E7 003F;	
    // (🛧) UP-POINTING AIRPLANE	[1737 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E7, 0x003F };
    uint32_t const ces[9] = { 0x1737, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_304)
{
    // 1F6E7 0061;	
    // (🛧) UP-POINTING AIRPLANE	[1737 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E7, 0x0061 };
    uint32_t const ces[9] = { 0x1737, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_305)
{
    // 1F6E7 0041;	
    // (🛧) UP-POINTING AIRPLANE	[1737 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6E7, 0x0041 };
    uint32_t const ces[9] = { 0x1737, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_306)
{
    // 1F6E7 0062;	
    // (🛧) UP-POINTING AIRPLANE	[1737 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E7, 0x0062 };
    uint32_t const ces[9] = { 0x1737, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_307)
{
    // 1F6E8 0021;	
    // (🛨) UP-POINTING SMALL AIRPLANE	[1738 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E8, 0x0021 };
    uint32_t const ces[9] = { 0x1738, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_308)
{
    // 1F6E8 003F;	
    // (🛨) UP-POINTING SMALL AIRPLANE	[1738 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E8, 0x003F };
    uint32_t const ces[9] = { 0x1738, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_309)
{
    // 1F6E8 0061;	
    // (🛨) UP-POINTING SMALL AIRPLANE	[1738 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E8, 0x0061 };
    uint32_t const ces[9] = { 0x1738, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_310)
{
    // 1F6E8 0041;	
    // (🛨) UP-POINTING SMALL AIRPLANE	[1738 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6E8, 0x0041 };
    uint32_t const ces[9] = { 0x1738, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_311)
{
    // 1F6E8 0062;	
    // (🛨) UP-POINTING SMALL AIRPLANE	[1738 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E8, 0x0062 };
    uint32_t const ces[9] = { 0x1738, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_312)
{
    // 1F6E9 0021;	
    // (🛩) SMALL AIRPLANE	[1739 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E9, 0x0021 };
    uint32_t const ces[9] = { 0x1739, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_313)
{
    // 1F6E9 003F;	
    // (🛩) SMALL AIRPLANE	[1739 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E9, 0x003F };
    uint32_t const ces[9] = { 0x1739, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_314)
{
    // 1F6E9 0061;	
    // (🛩) SMALL AIRPLANE	[1739 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E9, 0x0061 };
    uint32_t const ces[9] = { 0x1739, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_315)
{
    // 1F6E9 0041;	
    // (🛩) SMALL AIRPLANE	[1739 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6E9, 0x0041 };
    uint32_t const ces[9] = { 0x1739, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_316)
{
    // 1F6E9 0062;	
    // (🛩) SMALL AIRPLANE	[1739 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E9, 0x0062 };
    uint32_t const ces[9] = { 0x1739, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_317)
{
    // 1F6EA 0021;	
    // (🛪) NORTHEAST-POINTING AIRPLANE	[173A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6EA, 0x0021 };
    uint32_t const ces[9] = { 0x173A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_318)
{
    // 1F6EA 003F;	
    // (🛪) NORTHEAST-POINTING AIRPLANE	[173A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6EA, 0x003F };
    uint32_t const ces[9] = { 0x173A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_319)
{
    // 1F6EA 0061;	
    // (🛪) NORTHEAST-POINTING AIRPLANE	[173A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6EA, 0x0061 };
    uint32_t const ces[9] = { 0x173A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_320)
{
    // 1F6EA 0041;	
    // (🛪) NORTHEAST-POINTING AIRPLANE	[173A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6EA, 0x0041 };
    uint32_t const ces[9] = { 0x173A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_321)
{
    // 1F6EA 0062;	
    // (🛪) NORTHEAST-POINTING AIRPLANE	[173A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6EA, 0x0062 };
    uint32_t const ces[9] = { 0x173A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_322)
{
    // 1F6EB 0021;	
    // (🛫) AIRPLANE DEPARTURE	[173B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6EB, 0x0021 };
    uint32_t const ces[9] = { 0x173B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_323)
{
    // 1F6EB 003F;	
    // (🛫) AIRPLANE DEPARTURE	[173B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6EB, 0x003F };
    uint32_t const ces[9] = { 0x173B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_324)
{
    // 1F6EB 0061;	
    // (🛫) AIRPLANE DEPARTURE	[173B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6EB, 0x0061 };
    uint32_t const ces[9] = { 0x173B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_325)
{
    // 1F6EB 0041;	
    // (🛫) AIRPLANE DEPARTURE	[173B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6EB, 0x0041 };
    uint32_t const ces[9] = { 0x173B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_326)
{
    // 1F6EB 0062;	
    // (🛫) AIRPLANE DEPARTURE	[173B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6EB, 0x0062 };
    uint32_t const ces[9] = { 0x173B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_327)
{
    // 1F6EC 0021;	
    // (🛬) AIRPLANE ARRIVING	[173C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6EC, 0x0021 };
    uint32_t const ces[9] = { 0x173C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_328)
{
    // 1F6EC 003F;	
    // (🛬) AIRPLANE ARRIVING	[173C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6EC, 0x003F };
    uint32_t const ces[9] = { 0x173C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_329)
{
    // 1F6EC 0061;	
    // (🛬) AIRPLANE ARRIVING	[173C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6EC, 0x0061 };
    uint32_t const ces[9] = { 0x173C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_330)
{
    // 1F6EC 0041;	
    // (🛬) AIRPLANE ARRIVING	[173C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6EC, 0x0041 };
    uint32_t const ces[9] = { 0x173C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_331)
{
    // 1F6EC 0062;	
    // (🛬) AIRPLANE ARRIVING	[173C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6EC, 0x0062 };
    uint32_t const ces[9] = { 0x173C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_332)
{
    // 1F6F0 0021;	
    // (🛰) SATELLITE	[173D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F0, 0x0021 };
    uint32_t const ces[9] = { 0x173D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_333)
{
    // 1F6F0 003F;	
    // (🛰) SATELLITE	[173D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F0, 0x003F };
    uint32_t const ces[9] = { 0x173D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_334)
{
    // 1F6F0 0061;	
    // (🛰) SATELLITE	[173D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F0, 0x0061 };
    uint32_t const ces[9] = { 0x173D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_335)
{
    // 1F6F0 0041;	
    // (🛰) SATELLITE	[173D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6F0, 0x0041 };
    uint32_t const ces[9] = { 0x173D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_336)
{
    // 1F6F0 0062;	
    // (🛰) SATELLITE	[173D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F0, 0x0062 };
    uint32_t const ces[9] = { 0x173D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_337)
{
    // 1F6F1 0021;	
    // (🛱) ONCOMING FIRE ENGINE	[173E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F1, 0x0021 };
    uint32_t const ces[9] = { 0x173E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_338)
{
    // 1F6F1 003F;	
    // (🛱) ONCOMING FIRE ENGINE	[173E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F1, 0x003F };
    uint32_t const ces[9] = { 0x173E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_339)
{
    // 1F6F1 0061;	
    // (🛱) ONCOMING FIRE ENGINE	[173E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F1, 0x0061 };
    uint32_t const ces[9] = { 0x173E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_340)
{
    // 1F6F1 0041;	
    // (🛱) ONCOMING FIRE ENGINE	[173E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6F1, 0x0041 };
    uint32_t const ces[9] = { 0x173E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_341)
{
    // 1F6F1 0062;	
    // (🛱) ONCOMING FIRE ENGINE	[173E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F1, 0x0062 };
    uint32_t const ces[9] = { 0x173E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_342)
{
    // 1F6F2 0021;	
    // (🛲) DIESEL LOCOMOTIVE	[173F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F2, 0x0021 };
    uint32_t const ces[9] = { 0x173F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_343)
{
    // 1F6F2 003F;	
    // (🛲) DIESEL LOCOMOTIVE	[173F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F2, 0x003F };
    uint32_t const ces[9] = { 0x173F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_344)
{
    // 1F6F2 0061;	
    // (🛲) DIESEL LOCOMOTIVE	[173F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F2, 0x0061 };
    uint32_t const ces[9] = { 0x173F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_345)
{
    // 1F6F2 0041;	
    // (🛲) DIESEL LOCOMOTIVE	[173F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6F2, 0x0041 };
    uint32_t const ces[9] = { 0x173F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_346)
{
    // 1F6F2 0062;	
    // (🛲) DIESEL LOCOMOTIVE	[173F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F2, 0x0062 };
    uint32_t const ces[9] = { 0x173F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_347)
{
    // 1F6F3 0021;	
    // (🛳) PASSENGER SHIP	[1740 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F3, 0x0021 };
    uint32_t const ces[9] = { 0x1740, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_348)
{
    // 1F6F3 003F;	
    // (🛳) PASSENGER SHIP	[1740 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F3, 0x003F };
    uint32_t const ces[9] = { 0x1740, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_349)
{
    // 1F6F3 0061;	
    // (🛳) PASSENGER SHIP	[1740 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F3, 0x0061 };
    uint32_t const ces[9] = { 0x1740, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_350)
{
    // 1F6F3 0041;	
    // (🛳) PASSENGER SHIP	[1740 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6F3, 0x0041 };
    uint32_t const ces[9] = { 0x1740, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_351)
{
    // 1F6F3 0062;	
    // (🛳) PASSENGER SHIP	[1740 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F3, 0x0062 };
    uint32_t const ces[9] = { 0x1740, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_352)
{
    // 1F6F4 0021;	
    // (🛴) SCOOTER	[1741 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F4, 0x0021 };
    uint32_t const ces[9] = { 0x1741, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_353)
{
    // 1F6F4 003F;	
    // (🛴) SCOOTER	[1741 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F4, 0x003F };
    uint32_t const ces[9] = { 0x1741, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_354)
{
    // 1F6F4 0061;	
    // (🛴) SCOOTER	[1741 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F4, 0x0061 };
    uint32_t const ces[9] = { 0x1741, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_355)
{
    // 1F6F4 0041;	
    // (🛴) SCOOTER	[1741 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6F4, 0x0041 };
    uint32_t const ces[9] = { 0x1741, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_356)
{
    // 1F6F4 0062;	
    // (🛴) SCOOTER	[1741 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F4, 0x0062 };
    uint32_t const ces[9] = { 0x1741, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_357)
{
    // 1F6F5 0021;	
    // (🛵) MOTOR SCOOTER	[1742 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F5, 0x0021 };
    uint32_t const ces[9] = { 0x1742, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_358)
{
    // 1F6F5 003F;	
    // (🛵) MOTOR SCOOTER	[1742 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F5, 0x003F };
    uint32_t const ces[9] = { 0x1742, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_359)
{
    // 1F6F5 0061;	
    // (🛵) MOTOR SCOOTER	[1742 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F5, 0x0061 };
    uint32_t const ces[9] = { 0x1742, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_360)
{
    // 1F6F5 0041;	
    // (🛵) MOTOR SCOOTER	[1742 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6F5, 0x0041 };
    uint32_t const ces[9] = { 0x1742, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_361)
{
    // 1F6F5 0062;	
    // (🛵) MOTOR SCOOTER	[1742 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F5, 0x0062 };
    uint32_t const ces[9] = { 0x1742, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_362)
{
    // 1F6F6 0021;	
    // (🛶) CANOE	[1743 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F6, 0x0021 };
    uint32_t const ces[9] = { 0x1743, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_363)
{
    // 1F6F6 003F;	
    // (🛶) CANOE	[1743 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F6, 0x003F };
    uint32_t const ces[9] = { 0x1743, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_364)
{
    // 1F6F6 0061;	
    // (🛶) CANOE	[1743 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F6, 0x0061 };
    uint32_t const ces[9] = { 0x1743, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_365)
{
    // 1F6F6 0041;	
    // (🛶) CANOE	[1743 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6F6, 0x0041 };
    uint32_t const ces[9] = { 0x1743, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_366)
{
    // 1F6F6 0062;	
    // (🛶) CANOE	[1743 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F6, 0x0062 };
    uint32_t const ces[9] = { 0x1743, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_367)
{
    // 1F6F7 0021;	
    // (🛷) SLED	[1744 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F7, 0x0021 };
    uint32_t const ces[9] = { 0x1744, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_368)
{
    // 1F6F7 003F;	
    // (🛷) SLED	[1744 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F7, 0x003F };
    uint32_t const ces[9] = { 0x1744, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_369)
{
    // 1F6F7 0061;	
    // (🛷) SLED	[1744 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F7, 0x0061 };
    uint32_t const ces[9] = { 0x1744, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_370)
{
    // 1F6F7 0041;	
    // (🛷) SLED	[1744 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6F7, 0x0041 };
    uint32_t const ces[9] = { 0x1744, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_371)
{
    // 1F6F7 0062;	
    // (🛷) SLED	[1744 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F7, 0x0062 };
    uint32_t const ces[9] = { 0x1744, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_372)
{
    // 1F6F8 0021;	
    // (🛸) FLYING SAUCER	[1745 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F8, 0x0021 };
    uint32_t const ces[9] = { 0x1745, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_373)
{
    // 1F6F8 003F;	
    // (🛸) FLYING SAUCER	[1745 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F8, 0x003F };
    uint32_t const ces[9] = { 0x1745, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_374)
{
    // 1F6F8 0061;	
    // (🛸) FLYING SAUCER	[1745 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F8, 0x0061 };
    uint32_t const ces[9] = { 0x1745, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_375)
{
    // 1F6F8 0041;	
    // (🛸) FLYING SAUCER	[1745 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F6F8, 0x0041 };
    uint32_t const ces[9] = { 0x1745, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_376)
{
    // 1F6F8 0062;	
    // (🛸) FLYING SAUCER	[1745 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F8, 0x0062 };
    uint32_t const ces[9] = { 0x1745, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_377)
{
    // 1F700 0021;	
    // (🜀) ALCHEMICAL SYMBOL FOR QUINTESSENCE	[1746 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F700, 0x0021 };
    uint32_t const ces[9] = { 0x1746, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_378)
{
    // 1F700 003F;	
    // (🜀) ALCHEMICAL SYMBOL FOR QUINTESSENCE	[1746 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F700, 0x003F };
    uint32_t const ces[9] = { 0x1746, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_379)
{
    // 1F700 0061;	
    // (🜀) ALCHEMICAL SYMBOL FOR QUINTESSENCE	[1746 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F700, 0x0061 };
    uint32_t const ces[9] = { 0x1746, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_380)
{
    // 1F700 0041;	
    // (🜀) ALCHEMICAL SYMBOL FOR QUINTESSENCE	[1746 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F700, 0x0041 };
    uint32_t const ces[9] = { 0x1746, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_381)
{
    // 1F700 0062;	
    // (🜀) ALCHEMICAL SYMBOL FOR QUINTESSENCE	[1746 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F700, 0x0062 };
    uint32_t const ces[9] = { 0x1746, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_382)
{
    // 1F701 0021;	
    // (🜁) ALCHEMICAL SYMBOL FOR AIR	[1747 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F701, 0x0021 };
    uint32_t const ces[9] = { 0x1747, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_383)
{
    // 1F701 003F;	
    // (🜁) ALCHEMICAL SYMBOL FOR AIR	[1747 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F701, 0x003F };
    uint32_t const ces[9] = { 0x1747, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_384)
{
    // 1F701 0061;	
    // (🜁) ALCHEMICAL SYMBOL FOR AIR	[1747 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F701, 0x0061 };
    uint32_t const ces[9] = { 0x1747, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_385)
{
    // 1F701 0041;	
    // (🜁) ALCHEMICAL SYMBOL FOR AIR	[1747 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F701, 0x0041 };
    uint32_t const ces[9] = { 0x1747, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_386)
{
    // 1F701 0062;	
    // (🜁) ALCHEMICAL SYMBOL FOR AIR	[1747 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F701, 0x0062 };
    uint32_t const ces[9] = { 0x1747, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_387)
{
    // 1F702 0021;	
    // (🜂) ALCHEMICAL SYMBOL FOR FIRE	[1748 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F702, 0x0021 };
    uint32_t const ces[9] = { 0x1748, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_388)
{
    // 1F702 003F;	
    // (🜂) ALCHEMICAL SYMBOL FOR FIRE	[1748 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F702, 0x003F };
    uint32_t const ces[9] = { 0x1748, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_389)
{
    // 1F702 0061;	
    // (🜂) ALCHEMICAL SYMBOL FOR FIRE	[1748 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F702, 0x0061 };
    uint32_t const ces[9] = { 0x1748, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_390)
{
    // 1F702 0041;	
    // (🜂) ALCHEMICAL SYMBOL FOR FIRE	[1748 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F702, 0x0041 };
    uint32_t const ces[9] = { 0x1748, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_391)
{
    // 1F702 0062;	
    // (🜂) ALCHEMICAL SYMBOL FOR FIRE	[1748 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F702, 0x0062 };
    uint32_t const ces[9] = { 0x1748, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_392)
{
    // 1F703 0021;	
    // (🜃) ALCHEMICAL SYMBOL FOR EARTH	[1749 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F703, 0x0021 };
    uint32_t const ces[9] = { 0x1749, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_393)
{
    // 1F703 003F;	
    // (🜃) ALCHEMICAL SYMBOL FOR EARTH	[1749 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F703, 0x003F };
    uint32_t const ces[9] = { 0x1749, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_394)
{
    // 1F703 0061;	
    // (🜃) ALCHEMICAL SYMBOL FOR EARTH	[1749 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F703, 0x0061 };
    uint32_t const ces[9] = { 0x1749, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_395)
{
    // 1F703 0041;	
    // (🜃) ALCHEMICAL SYMBOL FOR EARTH	[1749 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F703, 0x0041 };
    uint32_t const ces[9] = { 0x1749, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_396)
{
    // 1F703 0062;	
    // (🜃) ALCHEMICAL SYMBOL FOR EARTH	[1749 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F703, 0x0062 };
    uint32_t const ces[9] = { 0x1749, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_397)
{
    // 1F704 0021;	
    // (🜄) ALCHEMICAL SYMBOL FOR WATER	[174A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F704, 0x0021 };
    uint32_t const ces[9] = { 0x174A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_398)
{
    // 1F704 003F;	
    // (🜄) ALCHEMICAL SYMBOL FOR WATER	[174A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F704, 0x003F };
    uint32_t const ces[9] = { 0x174A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_399)
{
    // 1F704 0061;	
    // (🜄) ALCHEMICAL SYMBOL FOR WATER	[174A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F704, 0x0061 };
    uint32_t const ces[9] = { 0x174A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_400)
{
    // 1F704 0041;	
    // (🜄) ALCHEMICAL SYMBOL FOR WATER	[174A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F704, 0x0041 };
    uint32_t const ces[9] = { 0x174A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_401)
{
    // 1F704 0062;	
    // (🜄) ALCHEMICAL SYMBOL FOR WATER	[174A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F704, 0x0062 };
    uint32_t const ces[9] = { 0x174A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_402)
{
    // 1F705 0021;	
    // (🜅) ALCHEMICAL SYMBOL FOR AQUAFORTIS	[174B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F705, 0x0021 };
    uint32_t const ces[9] = { 0x174B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_403)
{
    // 1F705 003F;	
    // (🜅) ALCHEMICAL SYMBOL FOR AQUAFORTIS	[174B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F705, 0x003F };
    uint32_t const ces[9] = { 0x174B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_404)
{
    // 1F705 0061;	
    // (🜅) ALCHEMICAL SYMBOL FOR AQUAFORTIS	[174B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F705, 0x0061 };
    uint32_t const ces[9] = { 0x174B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_405)
{
    // 1F705 0041;	
    // (🜅) ALCHEMICAL SYMBOL FOR AQUAFORTIS	[174B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F705, 0x0041 };
    uint32_t const ces[9] = { 0x174B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_406)
{
    // 1F705 0062;	
    // (🜅) ALCHEMICAL SYMBOL FOR AQUAFORTIS	[174B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F705, 0x0062 };
    uint32_t const ces[9] = { 0x174B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_407)
{
    // 1F706 0021;	
    // (🜆) ALCHEMICAL SYMBOL FOR AQUA REGIA	[174C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F706, 0x0021 };
    uint32_t const ces[9] = { 0x174C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_408)
{
    // 1F706 003F;	
    // (🜆) ALCHEMICAL SYMBOL FOR AQUA REGIA	[174C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F706, 0x003F };
    uint32_t const ces[9] = { 0x174C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_409)
{
    // 1F706 0061;	
    // (🜆) ALCHEMICAL SYMBOL FOR AQUA REGIA	[174C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F706, 0x0061 };
    uint32_t const ces[9] = { 0x174C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_410)
{
    // 1F706 0041;	
    // (🜆) ALCHEMICAL SYMBOL FOR AQUA REGIA	[174C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F706, 0x0041 };
    uint32_t const ces[9] = { 0x174C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_411)
{
    // 1F706 0062;	
    // (🜆) ALCHEMICAL SYMBOL FOR AQUA REGIA	[174C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F706, 0x0062 };
    uint32_t const ces[9] = { 0x174C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_412)
{
    // 1F707 0021;	
    // (🜇) ALCHEMICAL SYMBOL FOR AQUA REGIA-2	[174D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F707, 0x0021 };
    uint32_t const ces[9] = { 0x174D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_413)
{
    // 1F707 003F;	
    // (🜇) ALCHEMICAL SYMBOL FOR AQUA REGIA-2	[174D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F707, 0x003F };
    uint32_t const ces[9] = { 0x174D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_414)
{
    // 1F707 0061;	
    // (🜇) ALCHEMICAL SYMBOL FOR AQUA REGIA-2	[174D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F707, 0x0061 };
    uint32_t const ces[9] = { 0x174D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_415)
{
    // 1F707 0041;	
    // (🜇) ALCHEMICAL SYMBOL FOR AQUA REGIA-2	[174D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F707, 0x0041 };
    uint32_t const ces[9] = { 0x174D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_416)
{
    // 1F707 0062;	
    // (🜇) ALCHEMICAL SYMBOL FOR AQUA REGIA-2	[174D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F707, 0x0062 };
    uint32_t const ces[9] = { 0x174D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_417)
{
    // 1F708 0021;	
    // (🜈) ALCHEMICAL SYMBOL FOR AQUA VITAE	[174E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F708, 0x0021 };
    uint32_t const ces[9] = { 0x174E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_418)
{
    // 1F708 003F;	
    // (🜈) ALCHEMICAL SYMBOL FOR AQUA VITAE	[174E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F708, 0x003F };
    uint32_t const ces[9] = { 0x174E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_419)
{
    // 1F708 0061;	
    // (🜈) ALCHEMICAL SYMBOL FOR AQUA VITAE	[174E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F708, 0x0061 };
    uint32_t const ces[9] = { 0x174E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_420)
{
    // 1F708 0041;	
    // (🜈) ALCHEMICAL SYMBOL FOR AQUA VITAE	[174E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F708, 0x0041 };
    uint32_t const ces[9] = { 0x174E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_421)
{
    // 1F708 0062;	
    // (🜈) ALCHEMICAL SYMBOL FOR AQUA VITAE	[174E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F708, 0x0062 };
    uint32_t const ces[9] = { 0x174E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_422)
{
    // 1F709 0021;	
    // (🜉) ALCHEMICAL SYMBOL FOR AQUA VITAE-2	[174F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F709, 0x0021 };
    uint32_t const ces[9] = { 0x174F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_423)
{
    // 1F709 003F;	
    // (🜉) ALCHEMICAL SYMBOL FOR AQUA VITAE-2	[174F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F709, 0x003F };
    uint32_t const ces[9] = { 0x174F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_424)
{
    // 1F709 0061;	
    // (🜉) ALCHEMICAL SYMBOL FOR AQUA VITAE-2	[174F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F709, 0x0061 };
    uint32_t const ces[9] = { 0x174F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_425)
{
    // 1F709 0041;	
    // (🜉) ALCHEMICAL SYMBOL FOR AQUA VITAE-2	[174F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F709, 0x0041 };
    uint32_t const ces[9] = { 0x174F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_426)
{
    // 1F709 0062;	
    // (🜉) ALCHEMICAL SYMBOL FOR AQUA VITAE-2	[174F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F709, 0x0062 };
    uint32_t const ces[9] = { 0x174F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_427)
{
    // 1F70A 0021;	
    // (🜊) ALCHEMICAL SYMBOL FOR VINEGAR	[1750 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F70A, 0x0021 };
    uint32_t const ces[9] = { 0x1750, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_428)
{
    // 1F70A 003F;	
    // (🜊) ALCHEMICAL SYMBOL FOR VINEGAR	[1750 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F70A, 0x003F };
    uint32_t const ces[9] = { 0x1750, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_429)
{
    // 1F70A 0061;	
    // (🜊) ALCHEMICAL SYMBOL FOR VINEGAR	[1750 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F70A, 0x0061 };
    uint32_t const ces[9] = { 0x1750, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_430)
{
    // 1F70A 0041;	
    // (🜊) ALCHEMICAL SYMBOL FOR VINEGAR	[1750 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F70A, 0x0041 };
    uint32_t const ces[9] = { 0x1750, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_431)
{
    // 1F70A 0062;	
    // (🜊) ALCHEMICAL SYMBOL FOR VINEGAR	[1750 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F70A, 0x0062 };
    uint32_t const ces[9] = { 0x1750, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_432)
{
    // 1F70B 0021;	
    // (🜋) ALCHEMICAL SYMBOL FOR VINEGAR-2	[1751 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F70B, 0x0021 };
    uint32_t const ces[9] = { 0x1751, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_433)
{
    // 1F70B 003F;	
    // (🜋) ALCHEMICAL SYMBOL FOR VINEGAR-2	[1751 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F70B, 0x003F };
    uint32_t const ces[9] = { 0x1751, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_434)
{
    // 1F70B 0061;	
    // (🜋) ALCHEMICAL SYMBOL FOR VINEGAR-2	[1751 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F70B, 0x0061 };
    uint32_t const ces[9] = { 0x1751, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_435)
{
    // 1F70B 0041;	
    // (🜋) ALCHEMICAL SYMBOL FOR VINEGAR-2	[1751 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F70B, 0x0041 };
    uint32_t const ces[9] = { 0x1751, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_436)
{
    // 1F70B 0062;	
    // (🜋) ALCHEMICAL SYMBOL FOR VINEGAR-2	[1751 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F70B, 0x0062 };
    uint32_t const ces[9] = { 0x1751, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_437)
{
    // 1F70C 0021;	
    // (🜌) ALCHEMICAL SYMBOL FOR VINEGAR-3	[1752 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F70C, 0x0021 };
    uint32_t const ces[9] = { 0x1752, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_438)
{
    // 1F70C 003F;	
    // (🜌) ALCHEMICAL SYMBOL FOR VINEGAR-3	[1752 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F70C, 0x003F };
    uint32_t const ces[9] = { 0x1752, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_439)
{
    // 1F70C 0061;	
    // (🜌) ALCHEMICAL SYMBOL FOR VINEGAR-3	[1752 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F70C, 0x0061 };
    uint32_t const ces[9] = { 0x1752, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_440)
{
    // 1F70C 0041;	
    // (🜌) ALCHEMICAL SYMBOL FOR VINEGAR-3	[1752 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F70C, 0x0041 };
    uint32_t const ces[9] = { 0x1752, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_441)
{
    // 1F70C 0062;	
    // (🜌) ALCHEMICAL SYMBOL FOR VINEGAR-3	[1752 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F70C, 0x0062 };
    uint32_t const ces[9] = { 0x1752, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_442)
{
    // 1F70D 0021;	
    // (🜍) ALCHEMICAL SYMBOL FOR SULFUR	[1753 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F70D, 0x0021 };
    uint32_t const ces[9] = { 0x1753, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_443)
{
    // 1F70D 003F;	
    // (🜍) ALCHEMICAL SYMBOL FOR SULFUR	[1753 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F70D, 0x003F };
    uint32_t const ces[9] = { 0x1753, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_444)
{
    // 1F70D 0061;	
    // (🜍) ALCHEMICAL SYMBOL FOR SULFUR	[1753 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F70D, 0x0061 };
    uint32_t const ces[9] = { 0x1753, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_445)
{
    // 1F70D 0041;	
    // (🜍) ALCHEMICAL SYMBOL FOR SULFUR	[1753 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F70D, 0x0041 };
    uint32_t const ces[9] = { 0x1753, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_446)
{
    // 1F70D 0062;	
    // (🜍) ALCHEMICAL SYMBOL FOR SULFUR	[1753 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F70D, 0x0062 };
    uint32_t const ces[9] = { 0x1753, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_447)
{
    // 1F70E 0021;	
    // (🜎) ALCHEMICAL SYMBOL FOR PHILOSOPHERS SULFUR	[1754 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F70E, 0x0021 };
    uint32_t const ces[9] = { 0x1754, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_448)
{
    // 1F70E 003F;	
    // (🜎) ALCHEMICAL SYMBOL FOR PHILOSOPHERS SULFUR	[1754 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F70E, 0x003F };
    uint32_t const ces[9] = { 0x1754, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_449)
{
    // 1F70E 0061;	
    // (🜎) ALCHEMICAL SYMBOL FOR PHILOSOPHERS SULFUR	[1754 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F70E, 0x0061 };
    uint32_t const ces[9] = { 0x1754, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_450)
{
    // 1F70E 0041;	
    // (🜎) ALCHEMICAL SYMBOL FOR PHILOSOPHERS SULFUR	[1754 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F70E, 0x0041 };
    uint32_t const ces[9] = { 0x1754, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_451)
{
    // 1F70E 0062;	
    // (🜎) ALCHEMICAL SYMBOL FOR PHILOSOPHERS SULFUR	[1754 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F70E, 0x0062 };
    uint32_t const ces[9] = { 0x1754, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_452)
{
    // 1F70F 0021;	
    // (🜏) ALCHEMICAL SYMBOL FOR BLACK SULFUR	[1755 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F70F, 0x0021 };
    uint32_t const ces[9] = { 0x1755, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_453)
{
    // 1F70F 003F;	
    // (🜏) ALCHEMICAL SYMBOL FOR BLACK SULFUR	[1755 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F70F, 0x003F };
    uint32_t const ces[9] = { 0x1755, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_454)
{
    // 1F70F 0061;	
    // (🜏) ALCHEMICAL SYMBOL FOR BLACK SULFUR	[1755 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F70F, 0x0061 };
    uint32_t const ces[9] = { 0x1755, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_455)
{
    // 1F70F 0041;	
    // (🜏) ALCHEMICAL SYMBOL FOR BLACK SULFUR	[1755 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F70F, 0x0041 };
    uint32_t const ces[9] = { 0x1755, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_456)
{
    // 1F70F 0062;	
    // (🜏) ALCHEMICAL SYMBOL FOR BLACK SULFUR	[1755 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F70F, 0x0062 };
    uint32_t const ces[9] = { 0x1755, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_457)
{
    // 1F710 0021;	
    // (🜐) ALCHEMICAL SYMBOL FOR MERCURY SUBLIMATE	[1756 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F710, 0x0021 };
    uint32_t const ces[9] = { 0x1756, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_458)
{
    // 1F710 003F;	
    // (🜐) ALCHEMICAL SYMBOL FOR MERCURY SUBLIMATE	[1756 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F710, 0x003F };
    uint32_t const ces[9] = { 0x1756, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_459)
{
    // 1F710 0061;	
    // (🜐) ALCHEMICAL SYMBOL FOR MERCURY SUBLIMATE	[1756 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F710, 0x0061 };
    uint32_t const ces[9] = { 0x1756, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_460)
{
    // 1F710 0041;	
    // (🜐) ALCHEMICAL SYMBOL FOR MERCURY SUBLIMATE	[1756 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F710, 0x0041 };
    uint32_t const ces[9] = { 0x1756, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_461)
{
    // 1F710 0062;	
    // (🜐) ALCHEMICAL SYMBOL FOR MERCURY SUBLIMATE	[1756 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F710, 0x0062 };
    uint32_t const ces[9] = { 0x1756, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_462)
{
    // 1F711 0021;	
    // (🜑) ALCHEMICAL SYMBOL FOR MERCURY SUBLIMATE-2	[1757 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F711, 0x0021 };
    uint32_t const ces[9] = { 0x1757, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_463)
{
    // 1F711 003F;	
    // (🜑) ALCHEMICAL SYMBOL FOR MERCURY SUBLIMATE-2	[1757 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F711, 0x003F };
    uint32_t const ces[9] = { 0x1757, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_464)
{
    // 1F711 0061;	
    // (🜑) ALCHEMICAL SYMBOL FOR MERCURY SUBLIMATE-2	[1757 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F711, 0x0061 };
    uint32_t const ces[9] = { 0x1757, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_465)
{
    // 1F711 0041;	
    // (🜑) ALCHEMICAL SYMBOL FOR MERCURY SUBLIMATE-2	[1757 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F711, 0x0041 };
    uint32_t const ces[9] = { 0x1757, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_466)
{
    // 1F711 0062;	
    // (🜑) ALCHEMICAL SYMBOL FOR MERCURY SUBLIMATE-2	[1757 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F711, 0x0062 };
    uint32_t const ces[9] = { 0x1757, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_467)
{
    // 1F712 0021;	
    // (🜒) ALCHEMICAL SYMBOL FOR MERCURY SUBLIMATE-3	[1758 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F712, 0x0021 };
    uint32_t const ces[9] = { 0x1758, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_468)
{
    // 1F712 003F;	
    // (🜒) ALCHEMICAL SYMBOL FOR MERCURY SUBLIMATE-3	[1758 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F712, 0x003F };
    uint32_t const ces[9] = { 0x1758, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_469)
{
    // 1F712 0061;	
    // (🜒) ALCHEMICAL SYMBOL FOR MERCURY SUBLIMATE-3	[1758 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F712, 0x0061 };
    uint32_t const ces[9] = { 0x1758, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_470)
{
    // 1F712 0041;	
    // (🜒) ALCHEMICAL SYMBOL FOR MERCURY SUBLIMATE-3	[1758 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F712, 0x0041 };
    uint32_t const ces[9] = { 0x1758, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_471)
{
    // 1F712 0062;	
    // (🜒) ALCHEMICAL SYMBOL FOR MERCURY SUBLIMATE-3	[1758 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F712, 0x0062 };
    uint32_t const ces[9] = { 0x1758, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_472)
{
    // 1F713 0021;	
    // (🜓) ALCHEMICAL SYMBOL FOR CINNABAR	[1759 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F713, 0x0021 };
    uint32_t const ces[9] = { 0x1759, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_473)
{
    // 1F713 003F;	
    // (🜓) ALCHEMICAL SYMBOL FOR CINNABAR	[1759 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F713, 0x003F };
    uint32_t const ces[9] = { 0x1759, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_474)
{
    // 1F713 0061;	
    // (🜓) ALCHEMICAL SYMBOL FOR CINNABAR	[1759 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F713, 0x0061 };
    uint32_t const ces[9] = { 0x1759, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_475)
{
    // 1F713 0041;	
    // (🜓) ALCHEMICAL SYMBOL FOR CINNABAR	[1759 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F713, 0x0041 };
    uint32_t const ces[9] = { 0x1759, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_476)
{
    // 1F713 0062;	
    // (🜓) ALCHEMICAL SYMBOL FOR CINNABAR	[1759 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F713, 0x0062 };
    uint32_t const ces[9] = { 0x1759, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_477)
{
    // 1F714 0021;	
    // (🜔) ALCHEMICAL SYMBOL FOR SALT	[175A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F714, 0x0021 };
    uint32_t const ces[9] = { 0x175A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_478)
{
    // 1F714 003F;	
    // (🜔) ALCHEMICAL SYMBOL FOR SALT	[175A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F714, 0x003F };
    uint32_t const ces[9] = { 0x175A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_479)
{
    // 1F714 0061;	
    // (🜔) ALCHEMICAL SYMBOL FOR SALT	[175A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F714, 0x0061 };
    uint32_t const ces[9] = { 0x175A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_480)
{
    // 1F714 0041;	
    // (🜔) ALCHEMICAL SYMBOL FOR SALT	[175A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F714, 0x0041 };
    uint32_t const ces[9] = { 0x175A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_481)
{
    // 1F714 0062;	
    // (🜔) ALCHEMICAL SYMBOL FOR SALT	[175A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F714, 0x0062 };
    uint32_t const ces[9] = { 0x175A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_482)
{
    // 1F715 0021;	
    // (🜕) ALCHEMICAL SYMBOL FOR NITRE	[175B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F715, 0x0021 };
    uint32_t const ces[9] = { 0x175B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_483)
{
    // 1F715 003F;	
    // (🜕) ALCHEMICAL SYMBOL FOR NITRE	[175B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F715, 0x003F };
    uint32_t const ces[9] = { 0x175B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_484)
{
    // 1F715 0061;	
    // (🜕) ALCHEMICAL SYMBOL FOR NITRE	[175B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F715, 0x0061 };
    uint32_t const ces[9] = { 0x175B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_485)
{
    // 1F715 0041;	
    // (🜕) ALCHEMICAL SYMBOL FOR NITRE	[175B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F715, 0x0041 };
    uint32_t const ces[9] = { 0x175B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_486)
{
    // 1F715 0062;	
    // (🜕) ALCHEMICAL SYMBOL FOR NITRE	[175B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F715, 0x0062 };
    uint32_t const ces[9] = { 0x175B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_487)
{
    // 1F716 0021;	
    // (🜖) ALCHEMICAL SYMBOL FOR VITRIOL	[175C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F716, 0x0021 };
    uint32_t const ces[9] = { 0x175C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_488)
{
    // 1F716 003F;	
    // (🜖) ALCHEMICAL SYMBOL FOR VITRIOL	[175C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F716, 0x003F };
    uint32_t const ces[9] = { 0x175C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_489)
{
    // 1F716 0061;	
    // (🜖) ALCHEMICAL SYMBOL FOR VITRIOL	[175C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F716, 0x0061 };
    uint32_t const ces[9] = { 0x175C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_490)
{
    // 1F716 0041;	
    // (🜖) ALCHEMICAL SYMBOL FOR VITRIOL	[175C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F716, 0x0041 };
    uint32_t const ces[9] = { 0x175C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_491)
{
    // 1F716 0062;	
    // (🜖) ALCHEMICAL SYMBOL FOR VITRIOL	[175C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F716, 0x0062 };
    uint32_t const ces[9] = { 0x175C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_492)
{
    // 1F717 0021;	
    // (🜗) ALCHEMICAL SYMBOL FOR VITRIOL-2	[175D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F717, 0x0021 };
    uint32_t const ces[9] = { 0x175D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_493)
{
    // 1F717 003F;	
    // (🜗) ALCHEMICAL SYMBOL FOR VITRIOL-2	[175D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F717, 0x003F };
    uint32_t const ces[9] = { 0x175D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_494)
{
    // 1F717 0061;	
    // (🜗) ALCHEMICAL SYMBOL FOR VITRIOL-2	[175D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F717, 0x0061 };
    uint32_t const ces[9] = { 0x175D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_495)
{
    // 1F717 0041;	
    // (🜗) ALCHEMICAL SYMBOL FOR VITRIOL-2	[175D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F717, 0x0041 };
    uint32_t const ces[9] = { 0x175D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_496)
{
    // 1F717 0062;	
    // (🜗) ALCHEMICAL SYMBOL FOR VITRIOL-2	[175D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F717, 0x0062 };
    uint32_t const ces[9] = { 0x175D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_497)
{
    // 1F718 0021;	
    // (🜘) ALCHEMICAL SYMBOL FOR ROCK SALT	[175E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F718, 0x0021 };
    uint32_t const ces[9] = { 0x175E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_498)
{
    // 1F718 003F;	
    // (🜘) ALCHEMICAL SYMBOL FOR ROCK SALT	[175E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F718, 0x003F };
    uint32_t const ces[9] = { 0x175E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_066_499)
{
    // 1F718 0061;	
    // (🜘) ALCHEMICAL SYMBOL FOR ROCK SALT	[175E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F718, 0x0061 };
    uint32_t const ces[9] = { 0x175E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

