// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_225_000)
{
    // 18DA 0041;	
    // (ᣚ) CANADIAN SYLLABICS OJIBWAY S	[37B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18DA, 0x0041 };
    uint32_t const ces[9] = { 0x37B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_001)
{
    // 18DA 0062;	
    // (ᣚ) CANADIAN SYLLABICS OJIBWAY S	[37B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18DA, 0x0062 };
    uint32_t const ces[9] = { 0x37B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_002)
{
    // 18DB 0021;	
    // (ᣛ) CANADIAN SYLLABICS OJIBWAY SH	[37B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18DB, 0x0021 };
    uint32_t const ces[9] = { 0x37B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_003)
{
    // 18DB 003F;	
    // (ᣛ) CANADIAN SYLLABICS OJIBWAY SH	[37B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18DB, 0x003F };
    uint32_t const ces[9] = { 0x37B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_004)
{
    // 18DB 0061;	
    // (ᣛ) CANADIAN SYLLABICS OJIBWAY SH	[37B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18DB, 0x0061 };
    uint32_t const ces[9] = { 0x37B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_005)
{
    // 18DB 0041;	
    // (ᣛ) CANADIAN SYLLABICS OJIBWAY SH	[37B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18DB, 0x0041 };
    uint32_t const ces[9] = { 0x37B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_006)
{
    // 18DB 0062;	
    // (ᣛ) CANADIAN SYLLABICS OJIBWAY SH	[37B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18DB, 0x0062 };
    uint32_t const ces[9] = { 0x37B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_007)
{
    // 18DC 0021;	
    // (ᣜ) CANADIAN SYLLABICS EASTERN W	[37B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18DC, 0x0021 };
    uint32_t const ces[9] = { 0x37B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_008)
{
    // 18DC 003F;	
    // (ᣜ) CANADIAN SYLLABICS EASTERN W	[37B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18DC, 0x003F };
    uint32_t const ces[9] = { 0x37B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_009)
{
    // 18DC 0061;	
    // (ᣜ) CANADIAN SYLLABICS EASTERN W	[37B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18DC, 0x0061 };
    uint32_t const ces[9] = { 0x37B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_010)
{
    // 18DC 0041;	
    // (ᣜ) CANADIAN SYLLABICS EASTERN W	[37B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18DC, 0x0041 };
    uint32_t const ces[9] = { 0x37B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_011)
{
    // 18DC 0062;	
    // (ᣜ) CANADIAN SYLLABICS EASTERN W	[37B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18DC, 0x0062 };
    uint32_t const ces[9] = { 0x37B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_012)
{
    // 18DD 0021;	
    // (ᣝ) CANADIAN SYLLABICS WESTERN W	[37BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18DD, 0x0021 };
    uint32_t const ces[9] = { 0x37BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_013)
{
    // 18DD 003F;	
    // (ᣝ) CANADIAN SYLLABICS WESTERN W	[37BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18DD, 0x003F };
    uint32_t const ces[9] = { 0x37BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_014)
{
    // 18DD 0061;	
    // (ᣝ) CANADIAN SYLLABICS WESTERN W	[37BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18DD, 0x0061 };
    uint32_t const ces[9] = { 0x37BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_015)
{
    // 18DD 0041;	
    // (ᣝ) CANADIAN SYLLABICS WESTERN W	[37BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18DD, 0x0041 };
    uint32_t const ces[9] = { 0x37BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_016)
{
    // 18DD 0062;	
    // (ᣝ) CANADIAN SYLLABICS WESTERN W	[37BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18DD, 0x0062 };
    uint32_t const ces[9] = { 0x37BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_017)
{
    // 18DE 0021;	
    // (ᣞ) CANADIAN SYLLABICS FINAL SMALL RING	[37BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18DE, 0x0021 };
    uint32_t const ces[9] = { 0x37BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_018)
{
    // 18DE 003F;	
    // (ᣞ) CANADIAN SYLLABICS FINAL SMALL RING	[37BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18DE, 0x003F };
    uint32_t const ces[9] = { 0x37BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_019)
{
    // 18DE 0061;	
    // (ᣞ) CANADIAN SYLLABICS FINAL SMALL RING	[37BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18DE, 0x0061 };
    uint32_t const ces[9] = { 0x37BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_020)
{
    // 18DE 0041;	
    // (ᣞ) CANADIAN SYLLABICS FINAL SMALL RING	[37BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18DE, 0x0041 };
    uint32_t const ces[9] = { 0x37BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_021)
{
    // 18DE 0062;	
    // (ᣞ) CANADIAN SYLLABICS FINAL SMALL RING	[37BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18DE, 0x0062 };
    uint32_t const ces[9] = { 0x37BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_022)
{
    // 18DF 0021;	
    // (ᣟ) CANADIAN SYLLABICS FINAL RAISED DOT	[37BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18DF, 0x0021 };
    uint32_t const ces[9] = { 0x37BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_023)
{
    // 18DF 003F;	
    // (ᣟ) CANADIAN SYLLABICS FINAL RAISED DOT	[37BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18DF, 0x003F };
    uint32_t const ces[9] = { 0x37BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_024)
{
    // 18DF 0061;	
    // (ᣟ) CANADIAN SYLLABICS FINAL RAISED DOT	[37BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18DF, 0x0061 };
    uint32_t const ces[9] = { 0x37BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_025)
{
    // 18DF 0041;	
    // (ᣟ) CANADIAN SYLLABICS FINAL RAISED DOT	[37BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18DF, 0x0041 };
    uint32_t const ces[9] = { 0x37BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_026)
{
    // 18DF 0062;	
    // (ᣟ) CANADIAN SYLLABICS FINAL RAISED DOT	[37BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18DF, 0x0062 };
    uint32_t const ces[9] = { 0x37BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_027)
{
    // 18E0 0021;	
    // (ᣠ) CANADIAN SYLLABICS R-CREE RWE	[37BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E0, 0x0021 };
    uint32_t const ces[9] = { 0x37BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_028)
{
    // 18E0 003F;	
    // (ᣠ) CANADIAN SYLLABICS R-CREE RWE	[37BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E0, 0x003F };
    uint32_t const ces[9] = { 0x37BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_029)
{
    // 18E0 0061;	
    // (ᣠ) CANADIAN SYLLABICS R-CREE RWE	[37BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E0, 0x0061 };
    uint32_t const ces[9] = { 0x37BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_030)
{
    // 18E0 0041;	
    // (ᣠ) CANADIAN SYLLABICS R-CREE RWE	[37BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18E0, 0x0041 };
    uint32_t const ces[9] = { 0x37BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_031)
{
    // 18E0 0062;	
    // (ᣠ) CANADIAN SYLLABICS R-CREE RWE	[37BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E0, 0x0062 };
    uint32_t const ces[9] = { 0x37BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_032)
{
    // 18E1 0021;	
    // (ᣡ) CANADIAN SYLLABICS WEST-CREE LOO	[37BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E1, 0x0021 };
    uint32_t const ces[9] = { 0x37BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_033)
{
    // 18E1 003F;	
    // (ᣡ) CANADIAN SYLLABICS WEST-CREE LOO	[37BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E1, 0x003F };
    uint32_t const ces[9] = { 0x37BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_034)
{
    // 18E1 0061;	
    // (ᣡ) CANADIAN SYLLABICS WEST-CREE LOO	[37BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E1, 0x0061 };
    uint32_t const ces[9] = { 0x37BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_035)
{
    // 18E1 0041;	
    // (ᣡ) CANADIAN SYLLABICS WEST-CREE LOO	[37BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18E1, 0x0041 };
    uint32_t const ces[9] = { 0x37BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_036)
{
    // 18E1 0062;	
    // (ᣡ) CANADIAN SYLLABICS WEST-CREE LOO	[37BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E1, 0x0062 };
    uint32_t const ces[9] = { 0x37BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_037)
{
    // 18E2 0021;	
    // (ᣢ) CANADIAN SYLLABICS WEST-CREE LAA	[37BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E2, 0x0021 };
    uint32_t const ces[9] = { 0x37BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_038)
{
    // 18E2 003F;	
    // (ᣢ) CANADIAN SYLLABICS WEST-CREE LAA	[37BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E2, 0x003F };
    uint32_t const ces[9] = { 0x37BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_039)
{
    // 18E2 0061;	
    // (ᣢ) CANADIAN SYLLABICS WEST-CREE LAA	[37BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E2, 0x0061 };
    uint32_t const ces[9] = { 0x37BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_040)
{
    // 18E2 0041;	
    // (ᣢ) CANADIAN SYLLABICS WEST-CREE LAA	[37BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18E2, 0x0041 };
    uint32_t const ces[9] = { 0x37BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_041)
{
    // 18E2 0062;	
    // (ᣢ) CANADIAN SYLLABICS WEST-CREE LAA	[37BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E2, 0x0062 };
    uint32_t const ces[9] = { 0x37BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_042)
{
    // 18E3 0021;	
    // (ᣣ) CANADIAN SYLLABICS THWE	[37C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E3, 0x0021 };
    uint32_t const ces[9] = { 0x37C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_043)
{
    // 18E3 003F;	
    // (ᣣ) CANADIAN SYLLABICS THWE	[37C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E3, 0x003F };
    uint32_t const ces[9] = { 0x37C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_044)
{
    // 18E3 0061;	
    // (ᣣ) CANADIAN SYLLABICS THWE	[37C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E3, 0x0061 };
    uint32_t const ces[9] = { 0x37C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_045)
{
    // 18E3 0041;	
    // (ᣣ) CANADIAN SYLLABICS THWE	[37C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18E3, 0x0041 };
    uint32_t const ces[9] = { 0x37C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_046)
{
    // 18E3 0062;	
    // (ᣣ) CANADIAN SYLLABICS THWE	[37C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E3, 0x0062 };
    uint32_t const ces[9] = { 0x37C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_047)
{
    // 18E4 0021;	
    // (ᣤ) CANADIAN SYLLABICS THWA	[37C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E4, 0x0021 };
    uint32_t const ces[9] = { 0x37C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_048)
{
    // 18E4 003F;	
    // (ᣤ) CANADIAN SYLLABICS THWA	[37C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E4, 0x003F };
    uint32_t const ces[9] = { 0x37C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_049)
{
    // 18E4 0061;	
    // (ᣤ) CANADIAN SYLLABICS THWA	[37C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E4, 0x0061 };
    uint32_t const ces[9] = { 0x37C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_050)
{
    // 18E4 0041;	
    // (ᣤ) CANADIAN SYLLABICS THWA	[37C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18E4, 0x0041 };
    uint32_t const ces[9] = { 0x37C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_051)
{
    // 18E4 0062;	
    // (ᣤ) CANADIAN SYLLABICS THWA	[37C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E4, 0x0062 };
    uint32_t const ces[9] = { 0x37C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_052)
{
    // 18E5 0021;	
    // (ᣥ) CANADIAN SYLLABICS TTHWE	[37C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E5, 0x0021 };
    uint32_t const ces[9] = { 0x37C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_053)
{
    // 18E5 003F;	
    // (ᣥ) CANADIAN SYLLABICS TTHWE	[37C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E5, 0x003F };
    uint32_t const ces[9] = { 0x37C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_054)
{
    // 18E5 0061;	
    // (ᣥ) CANADIAN SYLLABICS TTHWE	[37C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E5, 0x0061 };
    uint32_t const ces[9] = { 0x37C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_055)
{
    // 18E5 0041;	
    // (ᣥ) CANADIAN SYLLABICS TTHWE	[37C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18E5, 0x0041 };
    uint32_t const ces[9] = { 0x37C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_056)
{
    // 18E5 0062;	
    // (ᣥ) CANADIAN SYLLABICS TTHWE	[37C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E5, 0x0062 };
    uint32_t const ces[9] = { 0x37C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_057)
{
    // 18E6 0021;	
    // (ᣦ) CANADIAN SYLLABICS TTHOO	[37C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E6, 0x0021 };
    uint32_t const ces[9] = { 0x37C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_058)
{
    // 18E6 003F;	
    // (ᣦ) CANADIAN SYLLABICS TTHOO	[37C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E6, 0x003F };
    uint32_t const ces[9] = { 0x37C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_059)
{
    // 18E6 0061;	
    // (ᣦ) CANADIAN SYLLABICS TTHOO	[37C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E6, 0x0061 };
    uint32_t const ces[9] = { 0x37C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_060)
{
    // 18E6 0041;	
    // (ᣦ) CANADIAN SYLLABICS TTHOO	[37C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18E6, 0x0041 };
    uint32_t const ces[9] = { 0x37C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_061)
{
    // 18E6 0062;	
    // (ᣦ) CANADIAN SYLLABICS TTHOO	[37C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E6, 0x0062 };
    uint32_t const ces[9] = { 0x37C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_062)
{
    // 18E7 0021;	
    // (ᣧ) CANADIAN SYLLABICS TTHAA	[37C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E7, 0x0021 };
    uint32_t const ces[9] = { 0x37C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_063)
{
    // 18E7 003F;	
    // (ᣧ) CANADIAN SYLLABICS TTHAA	[37C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E7, 0x003F };
    uint32_t const ces[9] = { 0x37C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_064)
{
    // 18E7 0061;	
    // (ᣧ) CANADIAN SYLLABICS TTHAA	[37C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E7, 0x0061 };
    uint32_t const ces[9] = { 0x37C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_065)
{
    // 18E7 0041;	
    // (ᣧ) CANADIAN SYLLABICS TTHAA	[37C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18E7, 0x0041 };
    uint32_t const ces[9] = { 0x37C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_066)
{
    // 18E7 0062;	
    // (ᣧ) CANADIAN SYLLABICS TTHAA	[37C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E7, 0x0062 };
    uint32_t const ces[9] = { 0x37C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_067)
{
    // 18E8 0021;	
    // (ᣨ) CANADIAN SYLLABICS TLHWE	[37C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E8, 0x0021 };
    uint32_t const ces[9] = { 0x37C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_068)
{
    // 18E8 003F;	
    // (ᣨ) CANADIAN SYLLABICS TLHWE	[37C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E8, 0x003F };
    uint32_t const ces[9] = { 0x37C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_069)
{
    // 18E8 0061;	
    // (ᣨ) CANADIAN SYLLABICS TLHWE	[37C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E8, 0x0061 };
    uint32_t const ces[9] = { 0x37C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_070)
{
    // 18E8 0041;	
    // (ᣨ) CANADIAN SYLLABICS TLHWE	[37C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18E8, 0x0041 };
    uint32_t const ces[9] = { 0x37C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_071)
{
    // 18E8 0062;	
    // (ᣨ) CANADIAN SYLLABICS TLHWE	[37C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E8, 0x0062 };
    uint32_t const ces[9] = { 0x37C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_072)
{
    // 18E9 0021;	
    // (ᣩ) CANADIAN SYLLABICS TLHOO	[37C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E9, 0x0021 };
    uint32_t const ces[9] = { 0x37C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_073)
{
    // 18E9 003F;	
    // (ᣩ) CANADIAN SYLLABICS TLHOO	[37C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E9, 0x003F };
    uint32_t const ces[9] = { 0x37C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_074)
{
    // 18E9 0061;	
    // (ᣩ) CANADIAN SYLLABICS TLHOO	[37C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E9, 0x0061 };
    uint32_t const ces[9] = { 0x37C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_075)
{
    // 18E9 0041;	
    // (ᣩ) CANADIAN SYLLABICS TLHOO	[37C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18E9, 0x0041 };
    uint32_t const ces[9] = { 0x37C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_076)
{
    // 18E9 0062;	
    // (ᣩ) CANADIAN SYLLABICS TLHOO	[37C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18E9, 0x0062 };
    uint32_t const ces[9] = { 0x37C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_077)
{
    // 18EA 0021;	
    // (ᣪ) CANADIAN SYLLABICS SAYISI SHWE	[37C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18EA, 0x0021 };
    uint32_t const ces[9] = { 0x37C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_078)
{
    // 18EA 003F;	
    // (ᣪ) CANADIAN SYLLABICS SAYISI SHWE	[37C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18EA, 0x003F };
    uint32_t const ces[9] = { 0x37C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_079)
{
    // 18EA 0061;	
    // (ᣪ) CANADIAN SYLLABICS SAYISI SHWE	[37C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18EA, 0x0061 };
    uint32_t const ces[9] = { 0x37C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_080)
{
    // 18EA 0041;	
    // (ᣪ) CANADIAN SYLLABICS SAYISI SHWE	[37C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18EA, 0x0041 };
    uint32_t const ces[9] = { 0x37C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_081)
{
    // 18EA 0062;	
    // (ᣪ) CANADIAN SYLLABICS SAYISI SHWE	[37C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18EA, 0x0062 };
    uint32_t const ces[9] = { 0x37C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_082)
{
    // 18EB 0021;	
    // (ᣫ) CANADIAN SYLLABICS SAYISI SHOO	[37C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18EB, 0x0021 };
    uint32_t const ces[9] = { 0x37C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_083)
{
    // 18EB 003F;	
    // (ᣫ) CANADIAN SYLLABICS SAYISI SHOO	[37C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18EB, 0x003F };
    uint32_t const ces[9] = { 0x37C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_084)
{
    // 18EB 0061;	
    // (ᣫ) CANADIAN SYLLABICS SAYISI SHOO	[37C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18EB, 0x0061 };
    uint32_t const ces[9] = { 0x37C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_085)
{
    // 18EB 0041;	
    // (ᣫ) CANADIAN SYLLABICS SAYISI SHOO	[37C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18EB, 0x0041 };
    uint32_t const ces[9] = { 0x37C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_086)
{
    // 18EB 0062;	
    // (ᣫ) CANADIAN SYLLABICS SAYISI SHOO	[37C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18EB, 0x0062 };
    uint32_t const ces[9] = { 0x37C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_087)
{
    // 18EC 0021;	
    // (ᣬ) CANADIAN SYLLABICS SAYISI HOO	[37C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18EC, 0x0021 };
    uint32_t const ces[9] = { 0x37C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_088)
{
    // 18EC 003F;	
    // (ᣬ) CANADIAN SYLLABICS SAYISI HOO	[37C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18EC, 0x003F };
    uint32_t const ces[9] = { 0x37C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_089)
{
    // 18EC 0061;	
    // (ᣬ) CANADIAN SYLLABICS SAYISI HOO	[37C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18EC, 0x0061 };
    uint32_t const ces[9] = { 0x37C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_090)
{
    // 18EC 0041;	
    // (ᣬ) CANADIAN SYLLABICS SAYISI HOO	[37C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18EC, 0x0041 };
    uint32_t const ces[9] = { 0x37C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_091)
{
    // 18EC 0062;	
    // (ᣬ) CANADIAN SYLLABICS SAYISI HOO	[37C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18EC, 0x0062 };
    uint32_t const ces[9] = { 0x37C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_092)
{
    // 18ED 0021;	
    // (ᣭ) CANADIAN SYLLABICS CARRIER GWU	[37CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18ED, 0x0021 };
    uint32_t const ces[9] = { 0x37CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_093)
{
    // 18ED 003F;	
    // (ᣭ) CANADIAN SYLLABICS CARRIER GWU	[37CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18ED, 0x003F };
    uint32_t const ces[9] = { 0x37CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_094)
{
    // 18ED 0061;	
    // (ᣭ) CANADIAN SYLLABICS CARRIER GWU	[37CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18ED, 0x0061 };
    uint32_t const ces[9] = { 0x37CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_095)
{
    // 18ED 0041;	
    // (ᣭ) CANADIAN SYLLABICS CARRIER GWU	[37CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18ED, 0x0041 };
    uint32_t const ces[9] = { 0x37CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_096)
{
    // 18ED 0062;	
    // (ᣭ) CANADIAN SYLLABICS CARRIER GWU	[37CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18ED, 0x0062 };
    uint32_t const ces[9] = { 0x37CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_097)
{
    // 18EE 0021;	
    // (ᣮ) CANADIAN SYLLABICS CARRIER DENE GEE	[37CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18EE, 0x0021 };
    uint32_t const ces[9] = { 0x37CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_098)
{
    // 18EE 003F;	
    // (ᣮ) CANADIAN SYLLABICS CARRIER DENE GEE	[37CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18EE, 0x003F };
    uint32_t const ces[9] = { 0x37CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_099)
{
    // 18EE 0061;	
    // (ᣮ) CANADIAN SYLLABICS CARRIER DENE GEE	[37CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18EE, 0x0061 };
    uint32_t const ces[9] = { 0x37CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_100)
{
    // 18EE 0041;	
    // (ᣮ) CANADIAN SYLLABICS CARRIER DENE GEE	[37CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18EE, 0x0041 };
    uint32_t const ces[9] = { 0x37CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_101)
{
    // 18EE 0062;	
    // (ᣮ) CANADIAN SYLLABICS CARRIER DENE GEE	[37CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18EE, 0x0062 };
    uint32_t const ces[9] = { 0x37CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_102)
{
    // 18EF 0021;	
    // (ᣯ) CANADIAN SYLLABICS CARRIER GAA	[37CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18EF, 0x0021 };
    uint32_t const ces[9] = { 0x37CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_103)
{
    // 18EF 003F;	
    // (ᣯ) CANADIAN SYLLABICS CARRIER GAA	[37CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18EF, 0x003F };
    uint32_t const ces[9] = { 0x37CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_104)
{
    // 18EF 0061;	
    // (ᣯ) CANADIAN SYLLABICS CARRIER GAA	[37CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18EF, 0x0061 };
    uint32_t const ces[9] = { 0x37CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_105)
{
    // 18EF 0041;	
    // (ᣯ) CANADIAN SYLLABICS CARRIER GAA	[37CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18EF, 0x0041 };
    uint32_t const ces[9] = { 0x37CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_106)
{
    // 18EF 0062;	
    // (ᣯ) CANADIAN SYLLABICS CARRIER GAA	[37CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18EF, 0x0062 };
    uint32_t const ces[9] = { 0x37CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_107)
{
    // 18F0 0021;	
    // (ᣰ) CANADIAN SYLLABICS CARRIER GWA	[37CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18F0, 0x0021 };
    uint32_t const ces[9] = { 0x37CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_108)
{
    // 18F0 003F;	
    // (ᣰ) CANADIAN SYLLABICS CARRIER GWA	[37CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18F0, 0x003F };
    uint32_t const ces[9] = { 0x37CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_109)
{
    // 18F0 0061;	
    // (ᣰ) CANADIAN SYLLABICS CARRIER GWA	[37CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18F0, 0x0061 };
    uint32_t const ces[9] = { 0x37CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_110)
{
    // 18F0 0041;	
    // (ᣰ) CANADIAN SYLLABICS CARRIER GWA	[37CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18F0, 0x0041 };
    uint32_t const ces[9] = { 0x37CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_111)
{
    // 18F0 0062;	
    // (ᣰ) CANADIAN SYLLABICS CARRIER GWA	[37CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18F0, 0x0062 };
    uint32_t const ces[9] = { 0x37CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_112)
{
    // 18F1 0021;	
    // (ᣱ) CANADIAN SYLLABICS SAYISI JUU	[37CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18F1, 0x0021 };
    uint32_t const ces[9] = { 0x37CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_113)
{
    // 18F1 003F;	
    // (ᣱ) CANADIAN SYLLABICS SAYISI JUU	[37CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18F1, 0x003F };
    uint32_t const ces[9] = { 0x37CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_114)
{
    // 18F1 0061;	
    // (ᣱ) CANADIAN SYLLABICS SAYISI JUU	[37CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18F1, 0x0061 };
    uint32_t const ces[9] = { 0x37CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_115)
{
    // 18F1 0041;	
    // (ᣱ) CANADIAN SYLLABICS SAYISI JUU	[37CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18F1, 0x0041 };
    uint32_t const ces[9] = { 0x37CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_116)
{
    // 18F1 0062;	
    // (ᣱ) CANADIAN SYLLABICS SAYISI JUU	[37CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18F1, 0x0062 };
    uint32_t const ces[9] = { 0x37CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_117)
{
    // 18F2 0021;	
    // (ᣲ) CANADIAN SYLLABICS CARRIER JWA	[37CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18F2, 0x0021 };
    uint32_t const ces[9] = { 0x37CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_118)
{
    // 18F2 003F;	
    // (ᣲ) CANADIAN SYLLABICS CARRIER JWA	[37CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18F2, 0x003F };
    uint32_t const ces[9] = { 0x37CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_119)
{
    // 18F2 0061;	
    // (ᣲ) CANADIAN SYLLABICS CARRIER JWA	[37CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18F2, 0x0061 };
    uint32_t const ces[9] = { 0x37CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_120)
{
    // 18F2 0041;	
    // (ᣲ) CANADIAN SYLLABICS CARRIER JWA	[37CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18F2, 0x0041 };
    uint32_t const ces[9] = { 0x37CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_121)
{
    // 18F2 0062;	
    // (ᣲ) CANADIAN SYLLABICS CARRIER JWA	[37CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18F2, 0x0062 };
    uint32_t const ces[9] = { 0x37CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_122)
{
    // 18F3 0021;	
    // (ᣳ) CANADIAN SYLLABICS BEAVER DENE L	[37D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18F3, 0x0021 };
    uint32_t const ces[9] = { 0x37D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_123)
{
    // 18F3 003F;	
    // (ᣳ) CANADIAN SYLLABICS BEAVER DENE L	[37D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18F3, 0x003F };
    uint32_t const ces[9] = { 0x37D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_124)
{
    // 18F3 0061;	
    // (ᣳ) CANADIAN SYLLABICS BEAVER DENE L	[37D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18F3, 0x0061 };
    uint32_t const ces[9] = { 0x37D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_125)
{
    // 18F3 0041;	
    // (ᣳ) CANADIAN SYLLABICS BEAVER DENE L	[37D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18F3, 0x0041 };
    uint32_t const ces[9] = { 0x37D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_126)
{
    // 18F3 0062;	
    // (ᣳ) CANADIAN SYLLABICS BEAVER DENE L	[37D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18F3, 0x0062 };
    uint32_t const ces[9] = { 0x37D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_127)
{
    // 18F4 0021;	
    // (ᣴ) CANADIAN SYLLABICS BEAVER DENE R	[37D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18F4, 0x0021 };
    uint32_t const ces[9] = { 0x37D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_128)
{
    // 18F4 003F;	
    // (ᣴ) CANADIAN SYLLABICS BEAVER DENE R	[37D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18F4, 0x003F };
    uint32_t const ces[9] = { 0x37D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_129)
{
    // 18F4 0061;	
    // (ᣴ) CANADIAN SYLLABICS BEAVER DENE R	[37D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18F4, 0x0061 };
    uint32_t const ces[9] = { 0x37D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_130)
{
    // 18F4 0041;	
    // (ᣴ) CANADIAN SYLLABICS BEAVER DENE R	[37D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18F4, 0x0041 };
    uint32_t const ces[9] = { 0x37D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_131)
{
    // 18F4 0062;	
    // (ᣴ) CANADIAN SYLLABICS BEAVER DENE R	[37D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18F4, 0x0062 };
    uint32_t const ces[9] = { 0x37D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_132)
{
    // 18F5 0021;	
    // (ᣵ) CANADIAN SYLLABICS CARRIER DENTAL S	[37D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18F5, 0x0021 };
    uint32_t const ces[9] = { 0x37D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_133)
{
    // 18F5 003F;	
    // (ᣵ) CANADIAN SYLLABICS CARRIER DENTAL S	[37D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18F5, 0x003F };
    uint32_t const ces[9] = { 0x37D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_134)
{
    // 18F5 0061;	
    // (ᣵ) CANADIAN SYLLABICS CARRIER DENTAL S	[37D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18F5, 0x0061 };
    uint32_t const ces[9] = { 0x37D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_135)
{
    // 18F5 0041;	
    // (ᣵ) CANADIAN SYLLABICS CARRIER DENTAL S	[37D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18F5, 0x0041 };
    uint32_t const ces[9] = { 0x37D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_136)
{
    // 18F5 0062;	
    // (ᣵ) CANADIAN SYLLABICS CARRIER DENTAL S	[37D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18F5, 0x0062 };
    uint32_t const ces[9] = { 0x37D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_137)
{
    // 1681 0021;	
    // (ᚁ) OGHAM LETTER BEITH	[37D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681, 0x0021 };
    uint32_t const ces[9] = { 0x37D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_138)
{
    // 1681 003F;	
    // (ᚁ) OGHAM LETTER BEITH	[37D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681, 0x003F };
    uint32_t const ces[9] = { 0x37D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_139)
{
    // 1681 0061;	
    // (ᚁ) OGHAM LETTER BEITH	[37D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681, 0x0061 };
    uint32_t const ces[9] = { 0x37D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_140)
{
    // 1681 0041;	
    // (ᚁ) OGHAM LETTER BEITH	[37D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1681, 0x0041 };
    uint32_t const ces[9] = { 0x37D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_141)
{
    // 1681 0062;	
    // (ᚁ) OGHAM LETTER BEITH	[37D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681, 0x0062 };
    uint32_t const ces[9] = { 0x37D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_142)
{
    // 1682 0021;	
    // (ᚂ) OGHAM LETTER LUIS	[37D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682, 0x0021 };
    uint32_t const ces[9] = { 0x37D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_143)
{
    // 1682 003F;	
    // (ᚂ) OGHAM LETTER LUIS	[37D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682, 0x003F };
    uint32_t const ces[9] = { 0x37D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_144)
{
    // 1682 0061;	
    // (ᚂ) OGHAM LETTER LUIS	[37D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682, 0x0061 };
    uint32_t const ces[9] = { 0x37D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_145)
{
    // 1682 0041;	
    // (ᚂ) OGHAM LETTER LUIS	[37D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1682, 0x0041 };
    uint32_t const ces[9] = { 0x37D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_146)
{
    // 1682 0062;	
    // (ᚂ) OGHAM LETTER LUIS	[37D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682, 0x0062 };
    uint32_t const ces[9] = { 0x37D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_147)
{
    // 1683 0021;	
    // (ᚃ) OGHAM LETTER FEARN	[37D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683, 0x0021 };
    uint32_t const ces[9] = { 0x37D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_148)
{
    // 1683 003F;	
    // (ᚃ) OGHAM LETTER FEARN	[37D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683, 0x003F };
    uint32_t const ces[9] = { 0x37D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_149)
{
    // 1683 0061;	
    // (ᚃ) OGHAM LETTER FEARN	[37D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683, 0x0061 };
    uint32_t const ces[9] = { 0x37D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_150)
{
    // 1683 0041;	
    // (ᚃ) OGHAM LETTER FEARN	[37D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1683, 0x0041 };
    uint32_t const ces[9] = { 0x37D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_151)
{
    // 1683 0062;	
    // (ᚃ) OGHAM LETTER FEARN	[37D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683, 0x0062 };
    uint32_t const ces[9] = { 0x37D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_152)
{
    // 1684 0021;	
    // (ᚄ) OGHAM LETTER SAIL	[37D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684, 0x0021 };
    uint32_t const ces[9] = { 0x37D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_153)
{
    // 1684 003F;	
    // (ᚄ) OGHAM LETTER SAIL	[37D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684, 0x003F };
    uint32_t const ces[9] = { 0x37D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_154)
{
    // 1684 0061;	
    // (ᚄ) OGHAM LETTER SAIL	[37D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684, 0x0061 };
    uint32_t const ces[9] = { 0x37D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_155)
{
    // 1684 0041;	
    // (ᚄ) OGHAM LETTER SAIL	[37D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1684, 0x0041 };
    uint32_t const ces[9] = { 0x37D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_156)
{
    // 1684 0062;	
    // (ᚄ) OGHAM LETTER SAIL	[37D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684, 0x0062 };
    uint32_t const ces[9] = { 0x37D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_157)
{
    // 1685 0021;	
    // (ᚅ) OGHAM LETTER NION	[37D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685, 0x0021 };
    uint32_t const ces[9] = { 0x37D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_158)
{
    // 1685 003F;	
    // (ᚅ) OGHAM LETTER NION	[37D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685, 0x003F };
    uint32_t const ces[9] = { 0x37D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_159)
{
    // 1685 0061;	
    // (ᚅ) OGHAM LETTER NION	[37D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685, 0x0061 };
    uint32_t const ces[9] = { 0x37D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_160)
{
    // 1685 0041;	
    // (ᚅ) OGHAM LETTER NION	[37D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1685, 0x0041 };
    uint32_t const ces[9] = { 0x37D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_161)
{
    // 1685 0062;	
    // (ᚅ) OGHAM LETTER NION	[37D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685, 0x0062 };
    uint32_t const ces[9] = { 0x37D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_162)
{
    // 1686 0021;	
    // (ᚆ) OGHAM LETTER UATH	[37D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686, 0x0021 };
    uint32_t const ces[9] = { 0x37D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_163)
{
    // 1686 003F;	
    // (ᚆ) OGHAM LETTER UATH	[37D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686, 0x003F };
    uint32_t const ces[9] = { 0x37D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_164)
{
    // 1686 0061;	
    // (ᚆ) OGHAM LETTER UATH	[37D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686, 0x0061 };
    uint32_t const ces[9] = { 0x37D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_165)
{
    // 1686 0041;	
    // (ᚆ) OGHAM LETTER UATH	[37D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1686, 0x0041 };
    uint32_t const ces[9] = { 0x37D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_166)
{
    // 1686 0062;	
    // (ᚆ) OGHAM LETTER UATH	[37D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686, 0x0062 };
    uint32_t const ces[9] = { 0x37D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_167)
{
    // 1687 0021;	
    // (ᚇ) OGHAM LETTER DAIR	[37D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687, 0x0021 };
    uint32_t const ces[9] = { 0x37D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_168)
{
    // 1687 003F;	
    // (ᚇ) OGHAM LETTER DAIR	[37D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687, 0x003F };
    uint32_t const ces[9] = { 0x37D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_169)
{
    // 1687 0061;	
    // (ᚇ) OGHAM LETTER DAIR	[37D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687, 0x0061 };
    uint32_t const ces[9] = { 0x37D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_170)
{
    // 1687 0041;	
    // (ᚇ) OGHAM LETTER DAIR	[37D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1687, 0x0041 };
    uint32_t const ces[9] = { 0x37D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_171)
{
    // 1687 0062;	
    // (ᚇ) OGHAM LETTER DAIR	[37D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687, 0x0062 };
    uint32_t const ces[9] = { 0x37D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_172)
{
    // 1688 0021;	
    // (ᚈ) OGHAM LETTER TINNE	[37DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688, 0x0021 };
    uint32_t const ces[9] = { 0x37DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_173)
{
    // 1688 003F;	
    // (ᚈ) OGHAM LETTER TINNE	[37DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688, 0x003F };
    uint32_t const ces[9] = { 0x37DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_174)
{
    // 1688 0061;	
    // (ᚈ) OGHAM LETTER TINNE	[37DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688, 0x0061 };
    uint32_t const ces[9] = { 0x37DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_175)
{
    // 1688 0041;	
    // (ᚈ) OGHAM LETTER TINNE	[37DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1688, 0x0041 };
    uint32_t const ces[9] = { 0x37DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_176)
{
    // 1688 0062;	
    // (ᚈ) OGHAM LETTER TINNE	[37DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688, 0x0062 };
    uint32_t const ces[9] = { 0x37DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_177)
{
    // 1689 0021;	
    // (ᚉ) OGHAM LETTER COLL	[37DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689, 0x0021 };
    uint32_t const ces[9] = { 0x37DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_178)
{
    // 1689 003F;	
    // (ᚉ) OGHAM LETTER COLL	[37DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689, 0x003F };
    uint32_t const ces[9] = { 0x37DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_179)
{
    // 1689 0061;	
    // (ᚉ) OGHAM LETTER COLL	[37DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689, 0x0061 };
    uint32_t const ces[9] = { 0x37DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_180)
{
    // 1689 0041;	
    // (ᚉ) OGHAM LETTER COLL	[37DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1689, 0x0041 };
    uint32_t const ces[9] = { 0x37DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_181)
{
    // 1689 0062;	
    // (ᚉ) OGHAM LETTER COLL	[37DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689, 0x0062 };
    uint32_t const ces[9] = { 0x37DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_182)
{
    // 168A 0021;	
    // (ᚊ) OGHAM LETTER CEIRT	[37DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A, 0x0021 };
    uint32_t const ces[9] = { 0x37DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_183)
{
    // 168A 003F;	
    // (ᚊ) OGHAM LETTER CEIRT	[37DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A, 0x003F };
    uint32_t const ces[9] = { 0x37DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_184)
{
    // 168A 0061;	
    // (ᚊ) OGHAM LETTER CEIRT	[37DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A, 0x0061 };
    uint32_t const ces[9] = { 0x37DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_185)
{
    // 168A 0041;	
    // (ᚊ) OGHAM LETTER CEIRT	[37DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168A, 0x0041 };
    uint32_t const ces[9] = { 0x37DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_186)
{
    // 168A 0062;	
    // (ᚊ) OGHAM LETTER CEIRT	[37DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A, 0x0062 };
    uint32_t const ces[9] = { 0x37DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_187)
{
    // 168B 0021;	
    // (ᚋ) OGHAM LETTER MUIN	[37DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B, 0x0021 };
    uint32_t const ces[9] = { 0x37DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_188)
{
    // 168B 003F;	
    // (ᚋ) OGHAM LETTER MUIN	[37DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B, 0x003F };
    uint32_t const ces[9] = { 0x37DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_189)
{
    // 168B 0061;	
    // (ᚋ) OGHAM LETTER MUIN	[37DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B, 0x0061 };
    uint32_t const ces[9] = { 0x37DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_190)
{
    // 168B 0041;	
    // (ᚋ) OGHAM LETTER MUIN	[37DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168B, 0x0041 };
    uint32_t const ces[9] = { 0x37DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_191)
{
    // 168B 0062;	
    // (ᚋ) OGHAM LETTER MUIN	[37DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B, 0x0062 };
    uint32_t const ces[9] = { 0x37DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_192)
{
    // 168C 0021;	
    // (ᚌ) OGHAM LETTER GORT	[37DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C, 0x0021 };
    uint32_t const ces[9] = { 0x37DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_193)
{
    // 168C 003F;	
    // (ᚌ) OGHAM LETTER GORT	[37DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C, 0x003F };
    uint32_t const ces[9] = { 0x37DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_194)
{
    // 168C 0061;	
    // (ᚌ) OGHAM LETTER GORT	[37DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C, 0x0061 };
    uint32_t const ces[9] = { 0x37DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_195)
{
    // 168C 0041;	
    // (ᚌ) OGHAM LETTER GORT	[37DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168C, 0x0041 };
    uint32_t const ces[9] = { 0x37DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_196)
{
    // 168C 0062;	
    // (ᚌ) OGHAM LETTER GORT	[37DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C, 0x0062 };
    uint32_t const ces[9] = { 0x37DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_197)
{
    // 168D 0021;	
    // (ᚍ) OGHAM LETTER NGEADAL	[37DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D, 0x0021 };
    uint32_t const ces[9] = { 0x37DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_198)
{
    // 168D 003F;	
    // (ᚍ) OGHAM LETTER NGEADAL	[37DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D, 0x003F };
    uint32_t const ces[9] = { 0x37DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_199)
{
    // 168D 0061;	
    // (ᚍ) OGHAM LETTER NGEADAL	[37DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D, 0x0061 };
    uint32_t const ces[9] = { 0x37DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_200)
{
    // 168D 0041;	
    // (ᚍ) OGHAM LETTER NGEADAL	[37DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168D, 0x0041 };
    uint32_t const ces[9] = { 0x37DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_201)
{
    // 168D 0062;	
    // (ᚍ) OGHAM LETTER NGEADAL	[37DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D, 0x0062 };
    uint32_t const ces[9] = { 0x37DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_202)
{
    // 168E 0021;	
    // (ᚎ) OGHAM LETTER STRAIF	[37E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168E, 0x0021 };
    uint32_t const ces[9] = { 0x37E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_203)
{
    // 168E 003F;	
    // (ᚎ) OGHAM LETTER STRAIF	[37E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168E, 0x003F };
    uint32_t const ces[9] = { 0x37E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_204)
{
    // 168E 0061;	
    // (ᚎ) OGHAM LETTER STRAIF	[37E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168E, 0x0061 };
    uint32_t const ces[9] = { 0x37E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_205)
{
    // 168E 0041;	
    // (ᚎ) OGHAM LETTER STRAIF	[37E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168E, 0x0041 };
    uint32_t const ces[9] = { 0x37E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_206)
{
    // 168E 0062;	
    // (ᚎ) OGHAM LETTER STRAIF	[37E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168E, 0x0062 };
    uint32_t const ces[9] = { 0x37E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_207)
{
    // 168F 0021;	
    // (ᚏ) OGHAM LETTER RUIS	[37E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168F, 0x0021 };
    uint32_t const ces[9] = { 0x37E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_208)
{
    // 168F 003F;	
    // (ᚏ) OGHAM LETTER RUIS	[37E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168F, 0x003F };
    uint32_t const ces[9] = { 0x37E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_209)
{
    // 168F 0061;	
    // (ᚏ) OGHAM LETTER RUIS	[37E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168F, 0x0061 };
    uint32_t const ces[9] = { 0x37E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_210)
{
    // 168F 0041;	
    // (ᚏ) OGHAM LETTER RUIS	[37E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168F, 0x0041 };
    uint32_t const ces[9] = { 0x37E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_211)
{
    // 168F 0062;	
    // (ᚏ) OGHAM LETTER RUIS	[37E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168F, 0x0062 };
    uint32_t const ces[9] = { 0x37E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_212)
{
    // 1690 0021;	
    // (ᚐ) OGHAM LETTER AILM	[37E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1690, 0x0021 };
    uint32_t const ces[9] = { 0x37E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_213)
{
    // 1690 003F;	
    // (ᚐ) OGHAM LETTER AILM	[37E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1690, 0x003F };
    uint32_t const ces[9] = { 0x37E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_214)
{
    // 1690 0061;	
    // (ᚐ) OGHAM LETTER AILM	[37E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1690, 0x0061 };
    uint32_t const ces[9] = { 0x37E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_215)
{
    // 1690 0041;	
    // (ᚐ) OGHAM LETTER AILM	[37E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1690, 0x0041 };
    uint32_t const ces[9] = { 0x37E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_216)
{
    // 1690 0062;	
    // (ᚐ) OGHAM LETTER AILM	[37E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1690, 0x0062 };
    uint32_t const ces[9] = { 0x37E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_217)
{
    // 1691 0021;	
    // (ᚑ) OGHAM LETTER ONN	[37E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1691, 0x0021 };
    uint32_t const ces[9] = { 0x37E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_218)
{
    // 1691 003F;	
    // (ᚑ) OGHAM LETTER ONN	[37E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1691, 0x003F };
    uint32_t const ces[9] = { 0x37E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_219)
{
    // 1691 0061;	
    // (ᚑ) OGHAM LETTER ONN	[37E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1691, 0x0061 };
    uint32_t const ces[9] = { 0x37E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_220)
{
    // 1691 0041;	
    // (ᚑ) OGHAM LETTER ONN	[37E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1691, 0x0041 };
    uint32_t const ces[9] = { 0x37E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_221)
{
    // 1691 0062;	
    // (ᚑ) OGHAM LETTER ONN	[37E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1691, 0x0062 };
    uint32_t const ces[9] = { 0x37E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_222)
{
    // 1692 0021;	
    // (ᚒ) OGHAM LETTER UR	[37E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1692, 0x0021 };
    uint32_t const ces[9] = { 0x37E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_223)
{
    // 1692 003F;	
    // (ᚒ) OGHAM LETTER UR	[37E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1692, 0x003F };
    uint32_t const ces[9] = { 0x37E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_224)
{
    // 1692 0061;	
    // (ᚒ) OGHAM LETTER UR	[37E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1692, 0x0061 };
    uint32_t const ces[9] = { 0x37E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_225)
{
    // 1692 0041;	
    // (ᚒ) OGHAM LETTER UR	[37E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1692, 0x0041 };
    uint32_t const ces[9] = { 0x37E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_226)
{
    // 1692 0062;	
    // (ᚒ) OGHAM LETTER UR	[37E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1692, 0x0062 };
    uint32_t const ces[9] = { 0x37E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_227)
{
    // 1693 0021;	
    // (ᚓ) OGHAM LETTER EADHADH	[37E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1693, 0x0021 };
    uint32_t const ces[9] = { 0x37E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_228)
{
    // 1693 003F;	
    // (ᚓ) OGHAM LETTER EADHADH	[37E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1693, 0x003F };
    uint32_t const ces[9] = { 0x37E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_229)
{
    // 1693 0061;	
    // (ᚓ) OGHAM LETTER EADHADH	[37E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1693, 0x0061 };
    uint32_t const ces[9] = { 0x37E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_230)
{
    // 1693 0041;	
    // (ᚓ) OGHAM LETTER EADHADH	[37E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1693, 0x0041 };
    uint32_t const ces[9] = { 0x37E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_231)
{
    // 1693 0062;	
    // (ᚓ) OGHAM LETTER EADHADH	[37E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1693, 0x0062 };
    uint32_t const ces[9] = { 0x37E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_232)
{
    // 1694 0021;	
    // (ᚔ) OGHAM LETTER IODHADH	[37E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1694, 0x0021 };
    uint32_t const ces[9] = { 0x37E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_233)
{
    // 1694 003F;	
    // (ᚔ) OGHAM LETTER IODHADH	[37E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1694, 0x003F };
    uint32_t const ces[9] = { 0x37E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_234)
{
    // 1694 0061;	
    // (ᚔ) OGHAM LETTER IODHADH	[37E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1694, 0x0061 };
    uint32_t const ces[9] = { 0x37E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_235)
{
    // 1694 0041;	
    // (ᚔ) OGHAM LETTER IODHADH	[37E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1694, 0x0041 };
    uint32_t const ces[9] = { 0x37E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_236)
{
    // 1694 0062;	
    // (ᚔ) OGHAM LETTER IODHADH	[37E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1694, 0x0062 };
    uint32_t const ces[9] = { 0x37E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_237)
{
    // 1695 0021;	
    // (ᚕ) OGHAM LETTER EABHADH	[37E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1695, 0x0021 };
    uint32_t const ces[9] = { 0x37E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_238)
{
    // 1695 003F;	
    // (ᚕ) OGHAM LETTER EABHADH	[37E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1695, 0x003F };
    uint32_t const ces[9] = { 0x37E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_239)
{
    // 1695 0061;	
    // (ᚕ) OGHAM LETTER EABHADH	[37E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1695, 0x0061 };
    uint32_t const ces[9] = { 0x37E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_240)
{
    // 1695 0041;	
    // (ᚕ) OGHAM LETTER EABHADH	[37E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1695, 0x0041 };
    uint32_t const ces[9] = { 0x37E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_241)
{
    // 1695 0062;	
    // (ᚕ) OGHAM LETTER EABHADH	[37E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1695, 0x0062 };
    uint32_t const ces[9] = { 0x37E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_242)
{
    // 1696 0021;	
    // (ᚖ) OGHAM LETTER OR	[37E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1696, 0x0021 };
    uint32_t const ces[9] = { 0x37E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_243)
{
    // 1696 003F;	
    // (ᚖ) OGHAM LETTER OR	[37E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1696, 0x003F };
    uint32_t const ces[9] = { 0x37E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_244)
{
    // 1696 0061;	
    // (ᚖ) OGHAM LETTER OR	[37E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1696, 0x0061 };
    uint32_t const ces[9] = { 0x37E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_245)
{
    // 1696 0041;	
    // (ᚖ) OGHAM LETTER OR	[37E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1696, 0x0041 };
    uint32_t const ces[9] = { 0x37E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_246)
{
    // 1696 0062;	
    // (ᚖ) OGHAM LETTER OR	[37E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1696, 0x0062 };
    uint32_t const ces[9] = { 0x37E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_247)
{
    // 1697 0021;	
    // (ᚗ) OGHAM LETTER UILLEANN	[37E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1697, 0x0021 };
    uint32_t const ces[9] = { 0x37E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_248)
{
    // 1697 003F;	
    // (ᚗ) OGHAM LETTER UILLEANN	[37E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1697, 0x003F };
    uint32_t const ces[9] = { 0x37E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_249)
{
    // 1697 0061;	
    // (ᚗ) OGHAM LETTER UILLEANN	[37E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1697, 0x0061 };
    uint32_t const ces[9] = { 0x37E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_250)
{
    // 1697 0041;	
    // (ᚗ) OGHAM LETTER UILLEANN	[37E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1697, 0x0041 };
    uint32_t const ces[9] = { 0x37E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_251)
{
    // 1697 0062;	
    // (ᚗ) OGHAM LETTER UILLEANN	[37E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1697, 0x0062 };
    uint32_t const ces[9] = { 0x37E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_252)
{
    // 1698 0021;	
    // (ᚘ) OGHAM LETTER IFIN	[37EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1698, 0x0021 };
    uint32_t const ces[9] = { 0x37EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_253)
{
    // 1698 003F;	
    // (ᚘ) OGHAM LETTER IFIN	[37EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1698, 0x003F };
    uint32_t const ces[9] = { 0x37EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_254)
{
    // 1698 0061;	
    // (ᚘ) OGHAM LETTER IFIN	[37EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1698, 0x0061 };
    uint32_t const ces[9] = { 0x37EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_255)
{
    // 1698 0041;	
    // (ᚘ) OGHAM LETTER IFIN	[37EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1698, 0x0041 };
    uint32_t const ces[9] = { 0x37EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_256)
{
    // 1698 0062;	
    // (ᚘ) OGHAM LETTER IFIN	[37EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1698, 0x0062 };
    uint32_t const ces[9] = { 0x37EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_257)
{
    // 1699 0021;	
    // (ᚙ) OGHAM LETTER EAMHANCHOLL	[37EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1699, 0x0021 };
    uint32_t const ces[9] = { 0x37EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_258)
{
    // 1699 003F;	
    // (ᚙ) OGHAM LETTER EAMHANCHOLL	[37EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1699, 0x003F };
    uint32_t const ces[9] = { 0x37EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_259)
{
    // 1699 0061;	
    // (ᚙ) OGHAM LETTER EAMHANCHOLL	[37EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1699, 0x0061 };
    uint32_t const ces[9] = { 0x37EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_260)
{
    // 1699 0041;	
    // (ᚙ) OGHAM LETTER EAMHANCHOLL	[37EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1699, 0x0041 };
    uint32_t const ces[9] = { 0x37EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_261)
{
    // 1699 0062;	
    // (ᚙ) OGHAM LETTER EAMHANCHOLL	[37EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1699, 0x0062 };
    uint32_t const ces[9] = { 0x37EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_262)
{
    // 169A 0021;	
    // (ᚚ) OGHAM LETTER PEITH	[37EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A, 0x0021 };
    uint32_t const ces[9] = { 0x37EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_263)
{
    // 169A 003F;	
    // (ᚚ) OGHAM LETTER PEITH	[37EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A, 0x003F };
    uint32_t const ces[9] = { 0x37EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_264)
{
    // 169A 0061;	
    // (ᚚ) OGHAM LETTER PEITH	[37EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A, 0x0061 };
    uint32_t const ces[9] = { 0x37EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_265)
{
    // 169A 0041;	
    // (ᚚ) OGHAM LETTER PEITH	[37EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169A, 0x0041 };
    uint32_t const ces[9] = { 0x37EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_266)
{
    // 169A 0062;	
    // (ᚚ) OGHAM LETTER PEITH	[37EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A, 0x0062 };
    uint32_t const ces[9] = { 0x37EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_267)
{
    // 16A0 0021;	
    // (ᚠ) RUNIC LETTER FEHU FEOH FE F	[37ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0, 0x0021 };
    uint32_t const ces[9] = { 0x37ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_268)
{
    // 16A1 0021;	
    // (ᚡ) RUNIC LETTER V	[37ED 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16A1, 0x0021 };
    uint32_t const ces[11] = { 0x37ED, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_269)
{
    // 16A0 003F;	
    // (ᚠ) RUNIC LETTER FEHU FEOH FE F	[37ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0, 0x003F };
    uint32_t const ces[9] = { 0x37ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_270)
{
    // 16A1 003F;	
    // (ᚡ) RUNIC LETTER V	[37ED 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16A1, 0x003F };
    uint32_t const ces[11] = { 0x37ED, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_271)
{
    // 16A0 0061;	
    // (ᚠ) RUNIC LETTER FEHU FEOH FE F	[37ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0, 0x0061 };
    uint32_t const ces[9] = { 0x37ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_272)
{
    // 16A0 0041;	
    // (ᚠ) RUNIC LETTER FEHU FEOH FE F	[37ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A0, 0x0041 };
    uint32_t const ces[9] = { 0x37ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_273)
{
    // 16A1 0061;	
    // (ᚡ) RUNIC LETTER V	[37ED 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16A1, 0x0061 };
    uint32_t const ces[11] = { 0x37ED, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_274)
{
    // 16A1 0041;	
    // (ᚡ) RUNIC LETTER V	[37ED 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x16A1, 0x0041 };
    uint32_t const ces[11] = { 0x37ED, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_275)
{
    // 16A0 0062;	
    // (ᚠ) RUNIC LETTER FEHU FEOH FE F	[37ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0, 0x0062 };
    uint32_t const ces[9] = { 0x37ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_276)
{
    // 16A1 0062;	
    // (ᚡ) RUNIC LETTER V	[37ED 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16A1, 0x0062 };
    uint32_t const ces[11] = { 0x37ED, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_277)
{
    // 16A2 0021;	
    // (ᚢ) RUNIC LETTER URUZ UR U	[37EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2, 0x0021 };
    uint32_t const ces[9] = { 0x37EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_278)
{
    // 16A4 0021;	
    // (ᚤ) RUNIC LETTER Y	[37EE 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16A4, 0x0021 };
    uint32_t const ces[11] = { 0x37EE, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_279)
{
    // 16A5 0021;	
    // (ᚥ) RUNIC LETTER W	[37EE 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16A5, 0x0021 };
    uint32_t const ces[11] = { 0x37EE, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_280)
{
    // 16A2 003F;	
    // (ᚢ) RUNIC LETTER URUZ UR U	[37EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2, 0x003F };
    uint32_t const ces[9] = { 0x37EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_281)
{
    // 16A4 003F;	
    // (ᚤ) RUNIC LETTER Y	[37EE 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16A4, 0x003F };
    uint32_t const ces[11] = { 0x37EE, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_282)
{
    // 16A5 003F;	
    // (ᚥ) RUNIC LETTER W	[37EE 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16A5, 0x003F };
    uint32_t const ces[11] = { 0x37EE, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_283)
{
    // 16A2 0061;	
    // (ᚢ) RUNIC LETTER URUZ UR U	[37EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2, 0x0061 };
    uint32_t const ces[9] = { 0x37EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_284)
{
    // 16A2 0041;	
    // (ᚢ) RUNIC LETTER URUZ UR U	[37EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A2, 0x0041 };
    uint32_t const ces[9] = { 0x37EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_285)
{
    // 16A4 0061;	
    // (ᚤ) RUNIC LETTER Y	[37EE 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16A4, 0x0061 };
    uint32_t const ces[11] = { 0x37EE, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_286)
{
    // 16A4 0041;	
    // (ᚤ) RUNIC LETTER Y	[37EE 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x16A4, 0x0041 };
    uint32_t const ces[11] = { 0x37EE, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_287)
{
    // 16A5 0061;	
    // (ᚥ) RUNIC LETTER W	[37EE 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16A5, 0x0061 };
    uint32_t const ces[11] = { 0x37EE, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_288)
{
    // 16A5 0041;	
    // (ᚥ) RUNIC LETTER W	[37EE 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x16A5, 0x0041 };
    uint32_t const ces[11] = { 0x37EE, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_289)
{
    // 16A2 0062;	
    // (ᚢ) RUNIC LETTER URUZ UR U	[37EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2, 0x0062 };
    uint32_t const ces[9] = { 0x37EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_290)
{
    // 16A4 0062;	
    // (ᚤ) RUNIC LETTER Y	[37EE 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16A4, 0x0062 };
    uint32_t const ces[11] = { 0x37EE, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_291)
{
    // 16A5 0062;	
    // (ᚥ) RUNIC LETTER W	[37EE 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16A5, 0x0062 };
    uint32_t const ces[11] = { 0x37EE, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_292)
{
    // 16A6 0021;	
    // (ᚦ) RUNIC LETTER THURISAZ THURS THORN	[37EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A6, 0x0021 };
    uint32_t const ces[9] = { 0x37EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_293)
{
    // 16A7 0021;	
    // (ᚧ) RUNIC LETTER ETH	[37EF 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16A7, 0x0021 };
    uint32_t const ces[11] = { 0x37EF, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_294)
{
    // 16A6 003F;	
    // (ᚦ) RUNIC LETTER THURISAZ THURS THORN	[37EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A6, 0x003F };
    uint32_t const ces[9] = { 0x37EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_295)
{
    // 16A7 003F;	
    // (ᚧ) RUNIC LETTER ETH	[37EF 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16A7, 0x003F };
    uint32_t const ces[11] = { 0x37EF, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_296)
{
    // 16A6 0061;	
    // (ᚦ) RUNIC LETTER THURISAZ THURS THORN	[37EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A6, 0x0061 };
    uint32_t const ces[9] = { 0x37EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_297)
{
    // 16A6 0041;	
    // (ᚦ) RUNIC LETTER THURISAZ THURS THORN	[37EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A6, 0x0041 };
    uint32_t const ces[9] = { 0x37EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_298)
{
    // 16A7 0061;	
    // (ᚧ) RUNIC LETTER ETH	[37EF 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16A7, 0x0061 };
    uint32_t const ces[11] = { 0x37EF, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_299)
{
    // 16A7 0041;	
    // (ᚧ) RUNIC LETTER ETH	[37EF 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x16A7, 0x0041 };
    uint32_t const ces[11] = { 0x37EF, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_300)
{
    // 16A6 0062;	
    // (ᚦ) RUNIC LETTER THURISAZ THURS THORN	[37EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A6, 0x0062 };
    uint32_t const ces[9] = { 0x37EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_301)
{
    // 16A7 0062;	
    // (ᚧ) RUNIC LETTER ETH	[37EF 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16A7, 0x0062 };
    uint32_t const ces[11] = { 0x37EF, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_302)
{
    // 16F0 0021;	
    // (ᛰ) RUNIC BELGTHOR SYMBOL	[37EF 37EF 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16F0, 0x0021 };
    uint32_t const ces[12] = { 0x37EF, 0x37EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_303)
{
    // 16F0 003F;	
    // (ᛰ) RUNIC BELGTHOR SYMBOL	[37EF 37EF 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16F0, 0x003F };
    uint32_t const ces[12] = { 0x37EF, 0x37EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_304)
{
    // 16F0 0061;	
    // (ᛰ) RUNIC BELGTHOR SYMBOL	[37EF 37EF 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16F0, 0x0061 };
    uint32_t const ces[12] = { 0x37EF, 0x37EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_305)
{
    // 16F0 0041;	
    // (ᛰ) RUNIC BELGTHOR SYMBOL	[37EF 37EF 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x16F0, 0x0041 };
    uint32_t const ces[12] = { 0x37EF, 0x37EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_306)
{
    // 16F0 0062;	
    // (ᛰ) RUNIC BELGTHOR SYMBOL	[37EF 37EF 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16F0, 0x0062 };
    uint32_t const ces[12] = { 0x37EF, 0x37EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_307)
{
    // 16A8 0021;	
    // (ᚨ) RUNIC LETTER ANSUZ A	[37F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A8, 0x0021 };
    uint32_t const ces[9] = { 0x37F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_308)
{
    // 16A9 0021;	
    // (ᚩ) RUNIC LETTER OS O	[37F0 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16A9, 0x0021 };
    uint32_t const ces[11] = { 0x37F0, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_309)
{
    // 16AC 0021;	
    // (ᚬ) RUNIC LETTER LONG-BRANCH-OSS O	[37F0 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16AC, 0x0021 };
    uint32_t const ces[11] = { 0x37F0, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_310)
{
    // 16AD 0021;	
    // (ᚭ) RUNIC LETTER SHORT-TWIG-OSS O	[37F0 0261 | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16AD, 0x0021 };
    uint32_t const ces[11] = { 0x37F0, 0x0261, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_311)
{
    // 16AE 0021;	
    // (ᚮ) RUNIC LETTER O	[37F0 0261 | 0020 0114 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16AE, 0x0021 };
    uint32_t const ces[11] = { 0x37F0, 0x0261, 0x0000, 0x0020, 0x0114, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_312)
{
    // 16A8 003F;	
    // (ᚨ) RUNIC LETTER ANSUZ A	[37F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A8, 0x003F };
    uint32_t const ces[9] = { 0x37F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_313)
{
    // 16A9 003F;	
    // (ᚩ) RUNIC LETTER OS O	[37F0 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16A9, 0x003F };
    uint32_t const ces[11] = { 0x37F0, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_314)
{
    // 16AC 003F;	
    // (ᚬ) RUNIC LETTER LONG-BRANCH-OSS O	[37F0 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16AC, 0x003F };
    uint32_t const ces[11] = { 0x37F0, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_315)
{
    // 16AD 003F;	
    // (ᚭ) RUNIC LETTER SHORT-TWIG-OSS O	[37F0 0267 | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16AD, 0x003F };
    uint32_t const ces[11] = { 0x37F0, 0x0267, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_316)
{
    // 16AE 003F;	
    // (ᚮ) RUNIC LETTER O	[37F0 0267 | 0020 0114 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16AE, 0x003F };
    uint32_t const ces[11] = { 0x37F0, 0x0267, 0x0000, 0x0020, 0x0114, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_317)
{
    // 16A8 0061;	
    // (ᚨ) RUNIC LETTER ANSUZ A	[37F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A8, 0x0061 };
    uint32_t const ces[9] = { 0x37F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_318)
{
    // 16A8 0041;	
    // (ᚨ) RUNIC LETTER ANSUZ A	[37F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A8, 0x0041 };
    uint32_t const ces[9] = { 0x37F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_319)
{
    // 16A9 0061;	
    // (ᚩ) RUNIC LETTER OS O	[37F0 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16A9, 0x0061 };
    uint32_t const ces[11] = { 0x37F0, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_320)
{
    // 16A9 0041;	
    // (ᚩ) RUNIC LETTER OS O	[37F0 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x16A9, 0x0041 };
    uint32_t const ces[11] = { 0x37F0, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_321)
{
    // 16AC 0061;	
    // (ᚬ) RUNIC LETTER LONG-BRANCH-OSS O	[37F0 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16AC, 0x0061 };
    uint32_t const ces[11] = { 0x37F0, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_322)
{
    // 16AC 0041;	
    // (ᚬ) RUNIC LETTER LONG-BRANCH-OSS O	[37F0 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x16AC, 0x0041 };
    uint32_t const ces[11] = { 0x37F0, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_323)
{
    // 16AD 0061;	
    // (ᚭ) RUNIC LETTER SHORT-TWIG-OSS O	[37F0 1CAD | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16AD, 0x0061 };
    uint32_t const ces[11] = { 0x37F0, 0x1CAD, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_324)
{
    // 16AD 0041;	
    // (ᚭ) RUNIC LETTER SHORT-TWIG-OSS O	[37F0 1CAD | 0020 0113 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x16AD, 0x0041 };
    uint32_t const ces[11] = { 0x37F0, 0x1CAD, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_325)
{
    // 16AE 0061;	
    // (ᚮ) RUNIC LETTER O	[37F0 1CAD | 0020 0114 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16AE, 0x0061 };
    uint32_t const ces[11] = { 0x37F0, 0x1CAD, 0x0000, 0x0020, 0x0114, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_326)
{
    // 16AE 0041;	
    // (ᚮ) RUNIC LETTER O	[37F0 1CAD | 0020 0114 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x16AE, 0x0041 };
    uint32_t const ces[11] = { 0x37F0, 0x1CAD, 0x0000, 0x0020, 0x0114, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_327)
{
    // 16A8 0062;	
    // (ᚨ) RUNIC LETTER ANSUZ A	[37F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A8, 0x0062 };
    uint32_t const ces[9] = { 0x37F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_328)
{
    // 16A9 0062;	
    // (ᚩ) RUNIC LETTER OS O	[37F0 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16A9, 0x0062 };
    uint32_t const ces[11] = { 0x37F0, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_329)
{
    // 16AC 0062;	
    // (ᚬ) RUNIC LETTER LONG-BRANCH-OSS O	[37F0 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16AC, 0x0062 };
    uint32_t const ces[11] = { 0x37F0, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_330)
{
    // 16AD 0062;	
    // (ᚭ) RUNIC LETTER SHORT-TWIG-OSS O	[37F0 1CC6 | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16AD, 0x0062 };
    uint32_t const ces[11] = { 0x37F0, 0x1CC6, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_331)
{
    // 16AE 0062;	
    // (ᚮ) RUNIC LETTER O	[37F0 1CC6 | 0020 0114 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16AE, 0x0062 };
    uint32_t const ces[11] = { 0x37F0, 0x1CC6, 0x0000, 0x0020, 0x0114, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_332)
{
    // 16F4 0021;	
    // (ᛴ) RUNIC LETTER FRANKS CASKET OS	[37F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F4, 0x0021 };
    uint32_t const ces[9] = { 0x37F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_333)
{
    // 16F4 003F;	
    // (ᛴ) RUNIC LETTER FRANKS CASKET OS	[37F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F4, 0x003F };
    uint32_t const ces[9] = { 0x37F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_334)
{
    // 16F4 0061;	
    // (ᛴ) RUNIC LETTER FRANKS CASKET OS	[37F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F4, 0x0061 };
    uint32_t const ces[9] = { 0x37F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_335)
{
    // 16F4 0041;	
    // (ᛴ) RUNIC LETTER FRANKS CASKET OS	[37F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F4, 0x0041 };
    uint32_t const ces[9] = { 0x37F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_336)
{
    // 16F4 0062;	
    // (ᛴ) RUNIC LETTER FRANKS CASKET OS	[37F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F4, 0x0062 };
    uint32_t const ces[9] = { 0x37F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_337)
{
    // 16AF 0021;	
    // (ᚯ) RUNIC LETTER OE	[37F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF, 0x0021 };
    uint32_t const ces[9] = { 0x37F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_338)
{
    // 16AF 003F;	
    // (ᚯ) RUNIC LETTER OE	[37F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF, 0x003F };
    uint32_t const ces[9] = { 0x37F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_339)
{
    // 16AF 0061;	
    // (ᚯ) RUNIC LETTER OE	[37F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF, 0x0061 };
    uint32_t const ces[9] = { 0x37F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_340)
{
    // 16AF 0041;	
    // (ᚯ) RUNIC LETTER OE	[37F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AF, 0x0041 };
    uint32_t const ces[9] = { 0x37F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_341)
{
    // 16AF 0062;	
    // (ᚯ) RUNIC LETTER OE	[37F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF, 0x0062 };
    uint32_t const ces[9] = { 0x37F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_342)
{
    // 16B0 0021;	
    // (ᚰ) RUNIC LETTER ON	[37F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B0, 0x0021 };
    uint32_t const ces[9] = { 0x37F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_343)
{
    // 16B0 003F;	
    // (ᚰ) RUNIC LETTER ON	[37F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B0, 0x003F };
    uint32_t const ces[9] = { 0x37F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_344)
{
    // 16B0 0061;	
    // (ᚰ) RUNIC LETTER ON	[37F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B0, 0x0061 };
    uint32_t const ces[9] = { 0x37F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_345)
{
    // 16B0 0041;	
    // (ᚰ) RUNIC LETTER ON	[37F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B0, 0x0041 };
    uint32_t const ces[9] = { 0x37F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_346)
{
    // 16B0 0062;	
    // (ᚰ) RUNIC LETTER ON	[37F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B0, 0x0062 };
    uint32_t const ces[9] = { 0x37F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_347)
{
    // 16B1 0021;	
    // (ᚱ) RUNIC LETTER RAIDO RAD REID R	[37F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B1, 0x0021 };
    uint32_t const ces[9] = { 0x37F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_348)
{
    // 16B1 003F;	
    // (ᚱ) RUNIC LETTER RAIDO RAD REID R	[37F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B1, 0x003F };
    uint32_t const ces[9] = { 0x37F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_349)
{
    // 16B1 0061;	
    // (ᚱ) RUNIC LETTER RAIDO RAD REID R	[37F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B1, 0x0061 };
    uint32_t const ces[9] = { 0x37F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_350)
{
    // 16B1 0041;	
    // (ᚱ) RUNIC LETTER RAIDO RAD REID R	[37F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B1, 0x0041 };
    uint32_t const ces[9] = { 0x37F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_351)
{
    // 16B1 0062;	
    // (ᚱ) RUNIC LETTER RAIDO RAD REID R	[37F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B1, 0x0062 };
    uint32_t const ces[9] = { 0x37F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_352)
{
    // 16B2 0021;	
    // (ᚲ) RUNIC LETTER KAUNA	[37F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B2, 0x0021 };
    uint32_t const ces[9] = { 0x37F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_353)
{
    // 16B3 0021;	
    // (ᚳ) RUNIC LETTER CEN	[37F5 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16B3, 0x0021 };
    uint32_t const ces[11] = { 0x37F5, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_354)
{
    // 16B4 0021;	
    // (ᚴ) RUNIC LETTER KAUN K	[37F5 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16B4, 0x0021 };
    uint32_t const ces[11] = { 0x37F5, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_355)
{
    // 16B5 0021;	
    // (ᚵ) RUNIC LETTER G	[37F5 0261 | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16B5, 0x0021 };
    uint32_t const ces[11] = { 0x37F5, 0x0261, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_356)
{
    // 16B6 0021;	
    // (ᚶ) RUNIC LETTER ENG	[37F5 0261 | 0020 0114 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16B6, 0x0021 };
    uint32_t const ces[11] = { 0x37F5, 0x0261, 0x0000, 0x0020, 0x0114, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_357)
{
    // 16B2 003F;	
    // (ᚲ) RUNIC LETTER KAUNA	[37F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B2, 0x003F };
    uint32_t const ces[9] = { 0x37F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_358)
{
    // 16B3 003F;	
    // (ᚳ) RUNIC LETTER CEN	[37F5 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16B3, 0x003F };
    uint32_t const ces[11] = { 0x37F5, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_359)
{
    // 16B4 003F;	
    // (ᚴ) RUNIC LETTER KAUN K	[37F5 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16B4, 0x003F };
    uint32_t const ces[11] = { 0x37F5, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_360)
{
    // 16B5 003F;	
    // (ᚵ) RUNIC LETTER G	[37F5 0267 | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16B5, 0x003F };
    uint32_t const ces[11] = { 0x37F5, 0x0267, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_361)
{
    // 16B6 003F;	
    // (ᚶ) RUNIC LETTER ENG	[37F5 0267 | 0020 0114 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16B6, 0x003F };
    uint32_t const ces[11] = { 0x37F5, 0x0267, 0x0000, 0x0020, 0x0114, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_362)
{
    // 16B2 0061;	
    // (ᚲ) RUNIC LETTER KAUNA	[37F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B2, 0x0061 };
    uint32_t const ces[9] = { 0x37F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_363)
{
    // 16B2 0041;	
    // (ᚲ) RUNIC LETTER KAUNA	[37F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B2, 0x0041 };
    uint32_t const ces[9] = { 0x37F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_364)
{
    // 16B3 0061;	
    // (ᚳ) RUNIC LETTER CEN	[37F5 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16B3, 0x0061 };
    uint32_t const ces[11] = { 0x37F5, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_365)
{
    // 16B3 0041;	
    // (ᚳ) RUNIC LETTER CEN	[37F5 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x16B3, 0x0041 };
    uint32_t const ces[11] = { 0x37F5, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_366)
{
    // 16B4 0061;	
    // (ᚴ) RUNIC LETTER KAUN K	[37F5 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16B4, 0x0061 };
    uint32_t const ces[11] = { 0x37F5, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_367)
{
    // 16B4 0041;	
    // (ᚴ) RUNIC LETTER KAUN K	[37F5 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x16B4, 0x0041 };
    uint32_t const ces[11] = { 0x37F5, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_368)
{
    // 16B5 0061;	
    // (ᚵ) RUNIC LETTER G	[37F5 1CAD | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16B5, 0x0061 };
    uint32_t const ces[11] = { 0x37F5, 0x1CAD, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_369)
{
    // 16B5 0041;	
    // (ᚵ) RUNIC LETTER G	[37F5 1CAD | 0020 0113 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x16B5, 0x0041 };
    uint32_t const ces[11] = { 0x37F5, 0x1CAD, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_370)
{
    // 16B6 0061;	
    // (ᚶ) RUNIC LETTER ENG	[37F5 1CAD | 0020 0114 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16B6, 0x0061 };
    uint32_t const ces[11] = { 0x37F5, 0x1CAD, 0x0000, 0x0020, 0x0114, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_371)
{
    // 16B6 0041;	
    // (ᚶ) RUNIC LETTER ENG	[37F5 1CAD | 0020 0114 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x16B6, 0x0041 };
    uint32_t const ces[11] = { 0x37F5, 0x1CAD, 0x0000, 0x0020, 0x0114, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_372)
{
    // 16B2 0062;	
    // (ᚲ) RUNIC LETTER KAUNA	[37F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B2, 0x0062 };
    uint32_t const ces[9] = { 0x37F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_373)
{
    // 16B3 0062;	
    // (ᚳ) RUNIC LETTER CEN	[37F5 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16B3, 0x0062 };
    uint32_t const ces[11] = { 0x37F5, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_374)
{
    // 16B4 0062;	
    // (ᚴ) RUNIC LETTER KAUN K	[37F5 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16B4, 0x0062 };
    uint32_t const ces[11] = { 0x37F5, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_375)
{
    // 16B5 0062;	
    // (ᚵ) RUNIC LETTER G	[37F5 1CC6 | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16B5, 0x0062 };
    uint32_t const ces[11] = { 0x37F5, 0x1CC6, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_376)
{
    // 16B6 0062;	
    // (ᚶ) RUNIC LETTER ENG	[37F5 1CC6 | 0020 0114 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16B6, 0x0062 };
    uint32_t const ces[11] = { 0x37F5, 0x1CC6, 0x0000, 0x0020, 0x0114, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_377)
{
    // 16F1 0021;	
    // (ᛱ) RUNIC LETTER K	[37F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1, 0x0021 };
    uint32_t const ces[9] = { 0x37F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_378)
{
    // 16F1 003F;	
    // (ᛱ) RUNIC LETTER K	[37F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1, 0x003F };
    uint32_t const ces[9] = { 0x37F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_379)
{
    // 16F1 0061;	
    // (ᛱ) RUNIC LETTER K	[37F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1, 0x0061 };
    uint32_t const ces[9] = { 0x37F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_380)
{
    // 16F1 0041;	
    // (ᛱ) RUNIC LETTER K	[37F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F1, 0x0041 };
    uint32_t const ces[9] = { 0x37F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_381)
{
    // 16F1 0062;	
    // (ᛱ) RUNIC LETTER K	[37F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1, 0x0062 };
    uint32_t const ces[9] = { 0x37F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_382)
{
    // 16B7 0021;	
    // (ᚷ) RUNIC LETTER GEBO GYFU G	[37F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B7, 0x0021 };
    uint32_t const ces[9] = { 0x37F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_383)
{
    // 16B7 003F;	
    // (ᚷ) RUNIC LETTER GEBO GYFU G	[37F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B7, 0x003F };
    uint32_t const ces[9] = { 0x37F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_384)
{
    // 16B7 0061;	
    // (ᚷ) RUNIC LETTER GEBO GYFU G	[37F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B7, 0x0061 };
    uint32_t const ces[9] = { 0x37F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_385)
{
    // 16B7 0041;	
    // (ᚷ) RUNIC LETTER GEBO GYFU G	[37F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B7, 0x0041 };
    uint32_t const ces[9] = { 0x37F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_386)
{
    // 16B7 0062;	
    // (ᚷ) RUNIC LETTER GEBO GYFU G	[37F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B7, 0x0062 };
    uint32_t const ces[9] = { 0x37F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_387)
{
    // 16B9 0021;	
    // (ᚹ) RUNIC LETTER WUNJO WYNN W	[37F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B9, 0x0021 };
    uint32_t const ces[9] = { 0x37F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_388)
{
    // 16E9 0021;	
    // (ᛩ) RUNIC LETTER Q	[37F8 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16E9, 0x0021 };
    uint32_t const ces[11] = { 0x37F8, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_389)
{
    // 16B9 003F;	
    // (ᚹ) RUNIC LETTER WUNJO WYNN W	[37F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B9, 0x003F };
    uint32_t const ces[9] = { 0x37F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_390)
{
    // 16E9 003F;	
    // (ᛩ) RUNIC LETTER Q	[37F8 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16E9, 0x003F };
    uint32_t const ces[11] = { 0x37F8, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_391)
{
    // 16B9 0061;	
    // (ᚹ) RUNIC LETTER WUNJO WYNN W	[37F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B9, 0x0061 };
    uint32_t const ces[9] = { 0x37F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_392)
{
    // 16B9 0041;	
    // (ᚹ) RUNIC LETTER WUNJO WYNN W	[37F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B9, 0x0041 };
    uint32_t const ces[9] = { 0x37F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_393)
{
    // 16E9 0061;	
    // (ᛩ) RUNIC LETTER Q	[37F8 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16E9, 0x0061 };
    uint32_t const ces[11] = { 0x37F8, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_394)
{
    // 16E9 0041;	
    // (ᛩ) RUNIC LETTER Q	[37F8 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x16E9, 0x0041 };
    uint32_t const ces[11] = { 0x37F8, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_395)
{
    // 16B9 0062;	
    // (ᚹ) RUNIC LETTER WUNJO WYNN W	[37F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B9, 0x0062 };
    uint32_t const ces[9] = { 0x37F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_396)
{
    // 16E9 0062;	
    // (ᛩ) RUNIC LETTER Q	[37F8 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16E9, 0x0062 };
    uint32_t const ces[11] = { 0x37F8, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_397)
{
    // 16BA 0021;	
    // (ᚺ) RUNIC LETTER HAGLAZ H	[37F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16BA, 0x0021 };
    uint32_t const ces[9] = { 0x37F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_398)
{
    // 16BB 0021;	
    // (ᚻ) RUNIC LETTER HAEGL H	[37F9 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16BB, 0x0021 };
    uint32_t const ces[11] = { 0x37F9, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_399)
{
    // 16BC 0021;	
    // (ᚼ) RUNIC LETTER LONG-BRANCH-HAGALL H	[37F9 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16BC, 0x0021 };
    uint32_t const ces[11] = { 0x37F9, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_400)
{
    // 16BD 0021;	
    // (ᚽ) RUNIC LETTER SHORT-TWIG-HAGALL H	[37F9 0261 | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16BD, 0x0021 };
    uint32_t const ces[11] = { 0x37F9, 0x0261, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_401)
{
    // 16BA 003F;	
    // (ᚺ) RUNIC LETTER HAGLAZ H	[37F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16BA, 0x003F };
    uint32_t const ces[9] = { 0x37F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_402)
{
    // 16BB 003F;	
    // (ᚻ) RUNIC LETTER HAEGL H	[37F9 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16BB, 0x003F };
    uint32_t const ces[11] = { 0x37F9, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_403)
{
    // 16BC 003F;	
    // (ᚼ) RUNIC LETTER LONG-BRANCH-HAGALL H	[37F9 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16BC, 0x003F };
    uint32_t const ces[11] = { 0x37F9, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_404)
{
    // 16BD 003F;	
    // (ᚽ) RUNIC LETTER SHORT-TWIG-HAGALL H	[37F9 0267 | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16BD, 0x003F };
    uint32_t const ces[11] = { 0x37F9, 0x0267, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_405)
{
    // 16BA 0061;	
    // (ᚺ) RUNIC LETTER HAGLAZ H	[37F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16BA, 0x0061 };
    uint32_t const ces[9] = { 0x37F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_406)
{
    // 16BA 0041;	
    // (ᚺ) RUNIC LETTER HAGLAZ H	[37F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16BA, 0x0041 };
    uint32_t const ces[9] = { 0x37F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_407)
{
    // 16BB 0061;	
    // (ᚻ) RUNIC LETTER HAEGL H	[37F9 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16BB, 0x0061 };
    uint32_t const ces[11] = { 0x37F9, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_408)
{
    // 16BB 0041;	
    // (ᚻ) RUNIC LETTER HAEGL H	[37F9 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x16BB, 0x0041 };
    uint32_t const ces[11] = { 0x37F9, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_409)
{
    // 16BC 0061;	
    // (ᚼ) RUNIC LETTER LONG-BRANCH-HAGALL H	[37F9 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16BC, 0x0061 };
    uint32_t const ces[11] = { 0x37F9, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_410)
{
    // 16BC 0041;	
    // (ᚼ) RUNIC LETTER LONG-BRANCH-HAGALL H	[37F9 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x16BC, 0x0041 };
    uint32_t const ces[11] = { 0x37F9, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_411)
{
    // 16BD 0061;	
    // (ᚽ) RUNIC LETTER SHORT-TWIG-HAGALL H	[37F9 1CAD | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16BD, 0x0061 };
    uint32_t const ces[11] = { 0x37F9, 0x1CAD, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_412)
{
    // 16BD 0041;	
    // (ᚽ) RUNIC LETTER SHORT-TWIG-HAGALL H	[37F9 1CAD | 0020 0113 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x16BD, 0x0041 };
    uint32_t const ces[11] = { 0x37F9, 0x1CAD, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_413)
{
    // 16BA 0062;	
    // (ᚺ) RUNIC LETTER HAGLAZ H	[37F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16BA, 0x0062 };
    uint32_t const ces[9] = { 0x37F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_414)
{
    // 16BB 0062;	
    // (ᚻ) RUNIC LETTER HAEGL H	[37F9 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16BB, 0x0062 };
    uint32_t const ces[11] = { 0x37F9, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_415)
{
    // 16BC 0062;	
    // (ᚼ) RUNIC LETTER LONG-BRANCH-HAGALL H	[37F9 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16BC, 0x0062 };
    uint32_t const ces[11] = { 0x37F9, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_416)
{
    // 16BD 0062;	
    // (ᚽ) RUNIC LETTER SHORT-TWIG-HAGALL H	[37F9 1CC6 | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16BD, 0x0062 };
    uint32_t const ces[11] = { 0x37F9, 0x1CC6, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_417)
{
    // 16BE 0021;	
    // (ᚾ) RUNIC LETTER NAUDIZ NYD NAUD N	[37FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16BE, 0x0021 };
    uint32_t const ces[9] = { 0x37FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_418)
{
    // 16BF 0021;	
    // (ᚿ) RUNIC LETTER SHORT-TWIG-NAUD N	[37FA 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16BF, 0x0021 };
    uint32_t const ces[11] = { 0x37FA, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_419)
{
    // 16C0 0021;	
    // (ᛀ) RUNIC LETTER DOTTED-N	[37FA 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16C0, 0x0021 };
    uint32_t const ces[11] = { 0x37FA, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_420)
{
    // 16BE 003F;	
    // (ᚾ) RUNIC LETTER NAUDIZ NYD NAUD N	[37FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16BE, 0x003F };
    uint32_t const ces[9] = { 0x37FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_421)
{
    // 16BF 003F;	
    // (ᚿ) RUNIC LETTER SHORT-TWIG-NAUD N	[37FA 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16BF, 0x003F };
    uint32_t const ces[11] = { 0x37FA, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_422)
{
    // 16C0 003F;	
    // (ᛀ) RUNIC LETTER DOTTED-N	[37FA 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16C0, 0x003F };
    uint32_t const ces[11] = { 0x37FA, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_423)
{
    // 16BE 0061;	
    // (ᚾ) RUNIC LETTER NAUDIZ NYD NAUD N	[37FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16BE, 0x0061 };
    uint32_t const ces[9] = { 0x37FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_424)
{
    // 16BE 0041;	
    // (ᚾ) RUNIC LETTER NAUDIZ NYD NAUD N	[37FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16BE, 0x0041 };
    uint32_t const ces[9] = { 0x37FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_425)
{
    // 16BF 0061;	
    // (ᚿ) RUNIC LETTER SHORT-TWIG-NAUD N	[37FA 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16BF, 0x0061 };
    uint32_t const ces[11] = { 0x37FA, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_426)
{
    // 16BF 0041;	
    // (ᚿ) RUNIC LETTER SHORT-TWIG-NAUD N	[37FA 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x16BF, 0x0041 };
    uint32_t const ces[11] = { 0x37FA, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_427)
{
    // 16C0 0061;	
    // (ᛀ) RUNIC LETTER DOTTED-N	[37FA 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16C0, 0x0061 };
    uint32_t const ces[11] = { 0x37FA, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_428)
{
    // 16C0 0041;	
    // (ᛀ) RUNIC LETTER DOTTED-N	[37FA 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x16C0, 0x0041 };
    uint32_t const ces[11] = { 0x37FA, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_429)
{
    // 16BE 0062;	
    // (ᚾ) RUNIC LETTER NAUDIZ NYD NAUD N	[37FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16BE, 0x0062 };
    uint32_t const ces[9] = { 0x37FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_430)
{
    // 16BF 0062;	
    // (ᚿ) RUNIC LETTER SHORT-TWIG-NAUD N	[37FA 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16BF, 0x0062 };
    uint32_t const ces[11] = { 0x37FA, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_431)
{
    // 16C0 0062;	
    // (ᛀ) RUNIC LETTER DOTTED-N	[37FA 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16C0, 0x0062 };
    uint32_t const ces[11] = { 0x37FA, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_432)
{
    // 16C1 0021;	
    // (ᛁ) RUNIC LETTER ISAZ IS ISS I	[37FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16C1, 0x0021 };
    uint32_t const ces[9] = { 0x37FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_433)
{
    // 16C2 0021;	
    // (ᛂ) RUNIC LETTER E	[37FB 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16C2, 0x0021 };
    uint32_t const ces[11] = { 0x37FB, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_434)
{
    // 16C1 003F;	
    // (ᛁ) RUNIC LETTER ISAZ IS ISS I	[37FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16C1, 0x003F };
    uint32_t const ces[9] = { 0x37FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_435)
{
    // 16C2 003F;	
    // (ᛂ) RUNIC LETTER E	[37FB 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16C2, 0x003F };
    uint32_t const ces[11] = { 0x37FB, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_436)
{
    // 16C1 0061;	
    // (ᛁ) RUNIC LETTER ISAZ IS ISS I	[37FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16C1, 0x0061 };
    uint32_t const ces[9] = { 0x37FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_437)
{
    // 16C1 0041;	
    // (ᛁ) RUNIC LETTER ISAZ IS ISS I	[37FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16C1, 0x0041 };
    uint32_t const ces[9] = { 0x37FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_438)
{
    // 16C2 0061;	
    // (ᛂ) RUNIC LETTER E	[37FB 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16C2, 0x0061 };
    uint32_t const ces[11] = { 0x37FB, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_439)
{
    // 16C2 0041;	
    // (ᛂ) RUNIC LETTER E	[37FB 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x16C2, 0x0041 };
    uint32_t const ces[11] = { 0x37FB, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_440)
{
    // 16C1 0062;	
    // (ᛁ) RUNIC LETTER ISAZ IS ISS I	[37FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16C1, 0x0062 };
    uint32_t const ces[9] = { 0x37FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_441)
{
    // 16C2 0062;	
    // (ᛂ) RUNIC LETTER E	[37FB 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16C2, 0x0062 };
    uint32_t const ces[11] = { 0x37FB, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_442)
{
    // 16F5 0021;	
    // (ᛵ) RUNIC LETTER FRANKS CASKET IS	[37FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5, 0x0021 };
    uint32_t const ces[9] = { 0x37FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_443)
{
    // 16F5 003F;	
    // (ᛵ) RUNIC LETTER FRANKS CASKET IS	[37FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5, 0x003F };
    uint32_t const ces[9] = { 0x37FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_444)
{
    // 16F5 0061;	
    // (ᛵ) RUNIC LETTER FRANKS CASKET IS	[37FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5, 0x0061 };
    uint32_t const ces[9] = { 0x37FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_445)
{
    // 16F5 0041;	
    // (ᛵ) RUNIC LETTER FRANKS CASKET IS	[37FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F5, 0x0041 };
    uint32_t const ces[9] = { 0x37FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_446)
{
    // 16F5 0062;	
    // (ᛵ) RUNIC LETTER FRANKS CASKET IS	[37FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5, 0x0062 };
    uint32_t const ces[9] = { 0x37FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_447)
{
    // 16C3 0021;	
    // (ᛃ) RUNIC LETTER JERAN J	[37FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16C3, 0x0021 };
    uint32_t const ces[9] = { 0x37FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_448)
{
    // 16C4 0021;	
    // (ᛄ) RUNIC LETTER GER	[37FD 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16C4, 0x0021 };
    uint32_t const ces[11] = { 0x37FD, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_449)
{
    // 16C3 003F;	
    // (ᛃ) RUNIC LETTER JERAN J	[37FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16C3, 0x003F };
    uint32_t const ces[9] = { 0x37FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_450)
{
    // 16C4 003F;	
    // (ᛄ) RUNIC LETTER GER	[37FD 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16C4, 0x003F };
    uint32_t const ces[11] = { 0x37FD, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_451)
{
    // 16C3 0061;	
    // (ᛃ) RUNIC LETTER JERAN J	[37FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16C3, 0x0061 };
    uint32_t const ces[9] = { 0x37FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_452)
{
    // 16C3 0041;	
    // (ᛃ) RUNIC LETTER JERAN J	[37FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16C3, 0x0041 };
    uint32_t const ces[9] = { 0x37FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_453)
{
    // 16C4 0061;	
    // (ᛄ) RUNIC LETTER GER	[37FD 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16C4, 0x0061 };
    uint32_t const ces[11] = { 0x37FD, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_454)
{
    // 16C4 0041;	
    // (ᛄ) RUNIC LETTER GER	[37FD 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x16C4, 0x0041 };
    uint32_t const ces[11] = { 0x37FD, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_455)
{
    // 16C3 0062;	
    // (ᛃ) RUNIC LETTER JERAN J	[37FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16C3, 0x0062 };
    uint32_t const ces[9] = { 0x37FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_456)
{
    // 16C4 0062;	
    // (ᛄ) RUNIC LETTER GER	[37FD 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16C4, 0x0062 };
    uint32_t const ces[11] = { 0x37FD, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_457)
{
    // 16C5 0021;	
    // (ᛅ) RUNIC LETTER LONG-BRANCH-AR AE	[37FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16C5, 0x0021 };
    uint32_t const ces[9] = { 0x37FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_458)
{
    // 16C6 0021;	
    // (ᛆ) RUNIC LETTER SHORT-TWIG-AR A	[37FE 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16C6, 0x0021 };
    uint32_t const ces[11] = { 0x37FE, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_459)
{
    // 16C5 003F;	
    // (ᛅ) RUNIC LETTER LONG-BRANCH-AR AE	[37FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16C5, 0x003F };
    uint32_t const ces[9] = { 0x37FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_460)
{
    // 16C6 003F;	
    // (ᛆ) RUNIC LETTER SHORT-TWIG-AR A	[37FE 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16C6, 0x003F };
    uint32_t const ces[11] = { 0x37FE, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_461)
{
    // 16C5 0061;	
    // (ᛅ) RUNIC LETTER LONG-BRANCH-AR AE	[37FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16C5, 0x0061 };
    uint32_t const ces[9] = { 0x37FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_462)
{
    // 16C5 0041;	
    // (ᛅ) RUNIC LETTER LONG-BRANCH-AR AE	[37FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16C5, 0x0041 };
    uint32_t const ces[9] = { 0x37FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_463)
{
    // 16C6 0061;	
    // (ᛆ) RUNIC LETTER SHORT-TWIG-AR A	[37FE 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16C6, 0x0061 };
    uint32_t const ces[11] = { 0x37FE, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_464)
{
    // 16C6 0041;	
    // (ᛆ) RUNIC LETTER SHORT-TWIG-AR A	[37FE 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x16C6, 0x0041 };
    uint32_t const ces[11] = { 0x37FE, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_465)
{
    // 16C5 0062;	
    // (ᛅ) RUNIC LETTER LONG-BRANCH-AR AE	[37FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16C5, 0x0062 };
    uint32_t const ces[9] = { 0x37FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_466)
{
    // 16C6 0062;	
    // (ᛆ) RUNIC LETTER SHORT-TWIG-AR A	[37FE 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16C6, 0x0062 };
    uint32_t const ces[11] = { 0x37FE, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_467)
{
    // 16EE 0021;	
    // (ᛮ) RUNIC ARLAUG SYMBOL	[37FE 3809 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16EE, 0x0021 };
    uint32_t const ces[12] = { 0x37FE, 0x3809, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_468)
{
    // 16EE 003F;	
    // (ᛮ) RUNIC ARLAUG SYMBOL	[37FE 3809 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16EE, 0x003F };
    uint32_t const ces[12] = { 0x37FE, 0x3809, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_469)
{
    // 16EE 0061;	
    // (ᛮ) RUNIC ARLAUG SYMBOL	[37FE 3809 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16EE, 0x0061 };
    uint32_t const ces[12] = { 0x37FE, 0x3809, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_470)
{
    // 16EE 0041;	
    // (ᛮ) RUNIC ARLAUG SYMBOL	[37FE 3809 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x16EE, 0x0041 };
    uint32_t const ces[12] = { 0x37FE, 0x3809, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_471)
{
    // 16EE 0062;	
    // (ᛮ) RUNIC ARLAUG SYMBOL	[37FE 3809 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16EE, 0x0062 };
    uint32_t const ces[12] = { 0x37FE, 0x3809, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_472)
{
    // 16C7 0021;	
    // (ᛇ) RUNIC LETTER IWAZ EOH	[37FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16C7, 0x0021 };
    uint32_t const ces[9] = { 0x37FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_473)
{
    // 16C7 003F;	
    // (ᛇ) RUNIC LETTER IWAZ EOH	[37FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16C7, 0x003F };
    uint32_t const ces[9] = { 0x37FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_474)
{
    // 16C7 0061;	
    // (ᛇ) RUNIC LETTER IWAZ EOH	[37FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16C7, 0x0061 };
    uint32_t const ces[9] = { 0x37FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_475)
{
    // 16C7 0041;	
    // (ᛇ) RUNIC LETTER IWAZ EOH	[37FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16C7, 0x0041 };
    uint32_t const ces[9] = { 0x37FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_476)
{
    // 16C7 0062;	
    // (ᛇ) RUNIC LETTER IWAZ EOH	[37FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16C7, 0x0062 };
    uint32_t const ces[9] = { 0x37FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_477)
{
    // 16C8 0021;	
    // (ᛈ) RUNIC LETTER PERTHO PEORTH P	[3800 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16C8, 0x0021 };
    uint32_t const ces[9] = { 0x3800, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_478)
{
    // 16D5 0021;	
    // (ᛕ) RUNIC LETTER OPEN-P	[3800 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16D5, 0x0021 };
    uint32_t const ces[11] = { 0x3800, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_479)
{
    // 16C8 003F;	
    // (ᛈ) RUNIC LETTER PERTHO PEORTH P	[3800 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16C8, 0x003F };
    uint32_t const ces[9] = { 0x3800, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_480)
{
    // 16D5 003F;	
    // (ᛕ) RUNIC LETTER OPEN-P	[3800 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16D5, 0x003F };
    uint32_t const ces[11] = { 0x3800, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_481)
{
    // 16C8 0061;	
    // (ᛈ) RUNIC LETTER PERTHO PEORTH P	[3800 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16C8, 0x0061 };
    uint32_t const ces[9] = { 0x3800, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_482)
{
    // 16C8 0041;	
    // (ᛈ) RUNIC LETTER PERTHO PEORTH P	[3800 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16C8, 0x0041 };
    uint32_t const ces[9] = { 0x3800, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_483)
{
    // 16D5 0061;	
    // (ᛕ) RUNIC LETTER OPEN-P	[3800 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16D5, 0x0061 };
    uint32_t const ces[11] = { 0x3800, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_484)
{
    // 16D5 0041;	
    // (ᛕ) RUNIC LETTER OPEN-P	[3800 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x16D5, 0x0041 };
    uint32_t const ces[11] = { 0x3800, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_485)
{
    // 16C8 0062;	
    // (ᛈ) RUNIC LETTER PERTHO PEORTH P	[3800 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16C8, 0x0062 };
    uint32_t const ces[9] = { 0x3800, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_486)
{
    // 16D5 0062;	
    // (ᛕ) RUNIC LETTER OPEN-P	[3800 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16D5, 0x0062 };
    uint32_t const ces[11] = { 0x3800, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_487)
{
    // 16C9 0021;	
    // (ᛉ) RUNIC LETTER ALGIZ EOLHX	[3801 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16C9, 0x0021 };
    uint32_t const ces[9] = { 0x3801, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_488)
{
    // 16C9 003F;	
    // (ᛉ) RUNIC LETTER ALGIZ EOLHX	[3801 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16C9, 0x003F };
    uint32_t const ces[9] = { 0x3801, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_489)
{
    // 16C9 0061;	
    // (ᛉ) RUNIC LETTER ALGIZ EOLHX	[3801 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16C9, 0x0061 };
    uint32_t const ces[9] = { 0x3801, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_490)
{
    // 16C9 0041;	
    // (ᛉ) RUNIC LETTER ALGIZ EOLHX	[3801 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16C9, 0x0041 };
    uint32_t const ces[9] = { 0x3801, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_491)
{
    // 16C9 0062;	
    // (ᛉ) RUNIC LETTER ALGIZ EOLHX	[3801 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16C9, 0x0062 };
    uint32_t const ces[9] = { 0x3801, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_492)
{
    // 16CA 0021;	
    // (ᛊ) RUNIC LETTER SOWILO S	[3802 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16CA, 0x0021 };
    uint32_t const ces[9] = { 0x3802, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_493)
{
    // 16CB 0021;	
    // (ᛋ) RUNIC LETTER SIGEL LONG-BRANCH-SOL S	[3802 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16CB, 0x0021 };
    uint32_t const ces[11] = { 0x3802, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_494)
{
    // 16EA 0021;	
    // (ᛪ) RUNIC LETTER X	[3802 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16EA, 0x0021 };
    uint32_t const ces[11] = { 0x3802, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_495)
{
    // 16CC 0021;	
    // (ᛌ) RUNIC LETTER SHORT-TWIG-SOL S	[3802 0261 | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16CC, 0x0021 };
    uint32_t const ces[11] = { 0x3802, 0x0261, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_496)
{
    // 16CD 0021;	
    // (ᛍ) RUNIC LETTER C	[3802 0261 | 0020 0114 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16CD, 0x0021 };
    uint32_t const ces[11] = { 0x3802, 0x0261, 0x0000, 0x0020, 0x0114, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_497)
{
    // 16CE 0021;	
    // (ᛎ) RUNIC LETTER Z	[3802 0261 | 0020 0115 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16CE, 0x0021 };
    uint32_t const ces[11] = { 0x3802, 0x0261, 0x0000, 0x0020, 0x0115, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_498)
{
    // 16CA 003F;	
    // (ᛊ) RUNIC LETTER SOWILO S	[3802 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16CA, 0x003F };
    uint32_t const ces[9] = { 0x3802, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_225_499)
{
    // 16CB 003F;	
    // (ᛋ) RUNIC LETTER SIGEL LONG-BRANCH-SOL S	[3802 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x16CB, 0x003F };
    uint32_t const ces[11] = { 0x3802, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

