// Warning! This file is autogenerated.
#include <boost/text/normalize.hpp>
#include <boost/text/utility.hpp>

#include <gtest/gtest.h>

#include <algorithm>



TEST(normalization, nfc_034_000)
{
    // BD20;BD20;1107 116A 11B7;BD20;1107 116A 11B7; 
    // (봠; 봠; 봠; 봠; 봠; ) HANGUL SYLLABLE BWAM
    {
        std::array<uint32_t, 1> const source = {{ 0xBD20 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD20 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_001)
{
    // BD21;BD21;1107 116A 11B8;BD21;1107 116A 11B8; 
    // (봡; 봡; 봡; 봡; 봡; ) HANGUL SYLLABLE BWAB
    {
        std::array<uint32_t, 1> const source = {{ 0xBD21 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD21 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_002)
{
    // BD22;BD22;1107 116A 11B9;BD22;1107 116A 11B9; 
    // (봢; 봢; 봢; 봢; 봢; ) HANGUL SYLLABLE BWABS
    {
        std::array<uint32_t, 1> const source = {{ 0xBD22 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD22 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_003)
{
    // BD23;BD23;1107 116A 11BA;BD23;1107 116A 11BA; 
    // (봣; 봣; 봣; 봣; 봣; ) HANGUL SYLLABLE BWAS
    {
        std::array<uint32_t, 1> const source = {{ 0xBD23 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD23 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_004)
{
    // BD24;BD24;1107 116A 11BB;BD24;1107 116A 11BB; 
    // (봤; 봤; 봤; 봤; 봤; ) HANGUL SYLLABLE BWASS
    {
        std::array<uint32_t, 1> const source = {{ 0xBD24 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD24 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_005)
{
    // BD25;BD25;1107 116A 11BC;BD25;1107 116A 11BC; 
    // (봥; 봥; 봥; 봥; 봥; ) HANGUL SYLLABLE BWANG
    {
        std::array<uint32_t, 1> const source = {{ 0xBD25 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD25 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_006)
{
    // BD26;BD26;1107 116A 11BD;BD26;1107 116A 11BD; 
    // (봦; 봦; 봦; 봦; 봦; ) HANGUL SYLLABLE BWAJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBD26 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD26 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_007)
{
    // BD27;BD27;1107 116A 11BE;BD27;1107 116A 11BE; 
    // (봧; 봧; 봧; 봧; 봧; ) HANGUL SYLLABLE BWAC
    {
        std::array<uint32_t, 1> const source = {{ 0xBD27 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD27 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_008)
{
    // BD28;BD28;1107 116A 11BF;BD28;1107 116A 11BF; 
    // (봨; 봨; 봨; 봨; 봨; ) HANGUL SYLLABLE BWAK
    {
        std::array<uint32_t, 1> const source = {{ 0xBD28 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD28 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_009)
{
    // BD29;BD29;1107 116A 11C0;BD29;1107 116A 11C0; 
    // (봩; 봩; 봩; 봩; 봩; ) HANGUL SYLLABLE BWAT
    {
        std::array<uint32_t, 1> const source = {{ 0xBD29 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD29 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_010)
{
    // BD2A;BD2A;1107 116A 11C1;BD2A;1107 116A 11C1; 
    // (봪; 봪; 봪; 봪; 봪; ) HANGUL SYLLABLE BWAP
    {
        std::array<uint32_t, 1> const source = {{ 0xBD2A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD2A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_011)
{
    // BD2B;BD2B;1107 116A 11C2;BD2B;1107 116A 11C2; 
    // (봫; 봫; 봫; 봫; 봫; ) HANGUL SYLLABLE BWAH
    {
        std::array<uint32_t, 1> const source = {{ 0xBD2B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD2B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_012)
{
    // BD2C;BD2C;1107 116B;BD2C;1107 116B; 
    // (봬; 봬; 봬; 봬; 봬; ) HANGUL SYLLABLE BWAE
    {
        std::array<uint32_t, 1> const source = {{ 0xBD2C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD2C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_013)
{
    // BD2D;BD2D;1107 116B 11A8;BD2D;1107 116B 11A8; 
    // (봭; 봭; 봭; 봭; 봭; ) HANGUL SYLLABLE BWAEG
    {
        std::array<uint32_t, 1> const source = {{ 0xBD2D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD2D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_014)
{
    // BD2E;BD2E;1107 116B 11A9;BD2E;1107 116B 11A9; 
    // (봮; 봮; 봮; 봮; 봮; ) HANGUL SYLLABLE BWAEGG
    {
        std::array<uint32_t, 1> const source = {{ 0xBD2E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD2E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_015)
{
    // BD2F;BD2F;1107 116B 11AA;BD2F;1107 116B 11AA; 
    // (봯; 봯; 봯; 봯; 봯; ) HANGUL SYLLABLE BWAEGS
    {
        std::array<uint32_t, 1> const source = {{ 0xBD2F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD2F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_016)
{
    // BD30;BD30;1107 116B 11AB;BD30;1107 116B 11AB; 
    // (봰; 봰; 봰; 봰; 봰; ) HANGUL SYLLABLE BWAEN
    {
        std::array<uint32_t, 1> const source = {{ 0xBD30 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD30 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_017)
{
    // BD31;BD31;1107 116B 11AC;BD31;1107 116B 11AC; 
    // (봱; 봱; 봱; 봱; 봱; ) HANGUL SYLLABLE BWAENJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBD31 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD31 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_018)
{
    // BD32;BD32;1107 116B 11AD;BD32;1107 116B 11AD; 
    // (봲; 봲; 봲; 봲; 봲; ) HANGUL SYLLABLE BWAENH
    {
        std::array<uint32_t, 1> const source = {{ 0xBD32 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD32 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_019)
{
    // BD33;BD33;1107 116B 11AE;BD33;1107 116B 11AE; 
    // (봳; 봳; 봳; 봳; 봳; ) HANGUL SYLLABLE BWAED
    {
        std::array<uint32_t, 1> const source = {{ 0xBD33 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD33 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_020)
{
    // BD34;BD34;1107 116B 11AF;BD34;1107 116B 11AF; 
    // (봴; 봴; 봴; 봴; 봴; ) HANGUL SYLLABLE BWAEL
    {
        std::array<uint32_t, 1> const source = {{ 0xBD34 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD34 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_021)
{
    // BD35;BD35;1107 116B 11B0;BD35;1107 116B 11B0; 
    // (봵; 봵; 봵; 봵; 봵; ) HANGUL SYLLABLE BWAELG
    {
        std::array<uint32_t, 1> const source = {{ 0xBD35 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD35 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_022)
{
    // BD36;BD36;1107 116B 11B1;BD36;1107 116B 11B1; 
    // (봶; 봶; 봶; 봶; 봶; ) HANGUL SYLLABLE BWAELM
    {
        std::array<uint32_t, 1> const source = {{ 0xBD36 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD36 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_023)
{
    // BD37;BD37;1107 116B 11B2;BD37;1107 116B 11B2; 
    // (봷; 봷; 봷; 봷; 봷; ) HANGUL SYLLABLE BWAELB
    {
        std::array<uint32_t, 1> const source = {{ 0xBD37 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD37 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_024)
{
    // BD38;BD38;1107 116B 11B3;BD38;1107 116B 11B3; 
    // (봸; 봸; 봸; 봸; 봸; ) HANGUL SYLLABLE BWAELS
    {
        std::array<uint32_t, 1> const source = {{ 0xBD38 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD38 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_025)
{
    // BD39;BD39;1107 116B 11B4;BD39;1107 116B 11B4; 
    // (봹; 봹; 봹; 봹; 봹; ) HANGUL SYLLABLE BWAELT
    {
        std::array<uint32_t, 1> const source = {{ 0xBD39 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD39 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_026)
{
    // BD3A;BD3A;1107 116B 11B5;BD3A;1107 116B 11B5; 
    // (봺; 봺; 봺; 봺; 봺; ) HANGUL SYLLABLE BWAELP
    {
        std::array<uint32_t, 1> const source = {{ 0xBD3A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD3A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_027)
{
    // BD3B;BD3B;1107 116B 11B6;BD3B;1107 116B 11B6; 
    // (봻; 봻; 봻; 봻; 봻; ) HANGUL SYLLABLE BWAELH
    {
        std::array<uint32_t, 1> const source = {{ 0xBD3B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD3B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_028)
{
    // BD3C;BD3C;1107 116B 11B7;BD3C;1107 116B 11B7; 
    // (봼; 봼; 봼; 봼; 봼; ) HANGUL SYLLABLE BWAEM
    {
        std::array<uint32_t, 1> const source = {{ 0xBD3C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD3C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_029)
{
    // BD3D;BD3D;1107 116B 11B8;BD3D;1107 116B 11B8; 
    // (봽; 봽; 봽; 봽; 봽; ) HANGUL SYLLABLE BWAEB
    {
        std::array<uint32_t, 1> const source = {{ 0xBD3D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD3D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_030)
{
    // BD3E;BD3E;1107 116B 11B9;BD3E;1107 116B 11B9; 
    // (봾; 봾; 봾; 봾; 봾; ) HANGUL SYLLABLE BWAEBS
    {
        std::array<uint32_t, 1> const source = {{ 0xBD3E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD3E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_031)
{
    // BD3F;BD3F;1107 116B 11BA;BD3F;1107 116B 11BA; 
    // (봿; 봿; 봿; 봿; 봿; ) HANGUL SYLLABLE BWAES
    {
        std::array<uint32_t, 1> const source = {{ 0xBD3F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD3F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_032)
{
    // BD40;BD40;1107 116B 11BB;BD40;1107 116B 11BB; 
    // (뵀; 뵀; 뵀; 뵀; 뵀; ) HANGUL SYLLABLE BWAESS
    {
        std::array<uint32_t, 1> const source = {{ 0xBD40 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD40 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_033)
{
    // BD41;BD41;1107 116B 11BC;BD41;1107 116B 11BC; 
    // (뵁; 뵁; 뵁; 뵁; 뵁; ) HANGUL SYLLABLE BWAENG
    {
        std::array<uint32_t, 1> const source = {{ 0xBD41 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD41 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_034)
{
    // BD42;BD42;1107 116B 11BD;BD42;1107 116B 11BD; 
    // (뵂; 뵂; 뵂; 뵂; 뵂; ) HANGUL SYLLABLE BWAEJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBD42 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD42 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_035)
{
    // BD43;BD43;1107 116B 11BE;BD43;1107 116B 11BE; 
    // (뵃; 뵃; 뵃; 뵃; 뵃; ) HANGUL SYLLABLE BWAEC
    {
        std::array<uint32_t, 1> const source = {{ 0xBD43 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD43 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_036)
{
    // BD44;BD44;1107 116B 11BF;BD44;1107 116B 11BF; 
    // (뵄; 뵄; 뵄; 뵄; 뵄; ) HANGUL SYLLABLE BWAEK
    {
        std::array<uint32_t, 1> const source = {{ 0xBD44 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD44 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_037)
{
    // BD45;BD45;1107 116B 11C0;BD45;1107 116B 11C0; 
    // (뵅; 뵅; 뵅; 뵅; 뵅; ) HANGUL SYLLABLE BWAET
    {
        std::array<uint32_t, 1> const source = {{ 0xBD45 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD45 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_038)
{
    // BD46;BD46;1107 116B 11C1;BD46;1107 116B 11C1; 
    // (뵆; 뵆; 뵆; 뵆; 뵆; ) HANGUL SYLLABLE BWAEP
    {
        std::array<uint32_t, 1> const source = {{ 0xBD46 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD46 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_039)
{
    // BD47;BD47;1107 116B 11C2;BD47;1107 116B 11C2; 
    // (뵇; 뵇; 뵇; 뵇; 뵇; ) HANGUL SYLLABLE BWAEH
    {
        std::array<uint32_t, 1> const source = {{ 0xBD47 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD47 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_040)
{
    // BD48;BD48;1107 116C;BD48;1107 116C; 
    // (뵈; 뵈; 뵈; 뵈; 뵈; ) HANGUL SYLLABLE BOE
    {
        std::array<uint32_t, 1> const source = {{ 0xBD48 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD48 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_041)
{
    // BD49;BD49;1107 116C 11A8;BD49;1107 116C 11A8; 
    // (뵉; 뵉; 뵉; 뵉; 뵉; ) HANGUL SYLLABLE BOEG
    {
        std::array<uint32_t, 1> const source = {{ 0xBD49 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD49 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_042)
{
    // BD4A;BD4A;1107 116C 11A9;BD4A;1107 116C 11A9; 
    // (뵊; 뵊; 뵊; 뵊; 뵊; ) HANGUL SYLLABLE BOEGG
    {
        std::array<uint32_t, 1> const source = {{ 0xBD4A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD4A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_043)
{
    // BD4B;BD4B;1107 116C 11AA;BD4B;1107 116C 11AA; 
    // (뵋; 뵋; 뵋; 뵋; 뵋; ) HANGUL SYLLABLE BOEGS
    {
        std::array<uint32_t, 1> const source = {{ 0xBD4B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD4B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_044)
{
    // BD4C;BD4C;1107 116C 11AB;BD4C;1107 116C 11AB; 
    // (뵌; 뵌; 뵌; 뵌; 뵌; ) HANGUL SYLLABLE BOEN
    {
        std::array<uint32_t, 1> const source = {{ 0xBD4C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD4C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_045)
{
    // BD4D;BD4D;1107 116C 11AC;BD4D;1107 116C 11AC; 
    // (뵍; 뵍; 뵍; 뵍; 뵍; ) HANGUL SYLLABLE BOENJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBD4D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD4D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_046)
{
    // BD4E;BD4E;1107 116C 11AD;BD4E;1107 116C 11AD; 
    // (뵎; 뵎; 뵎; 뵎; 뵎; ) HANGUL SYLLABLE BOENH
    {
        std::array<uint32_t, 1> const source = {{ 0xBD4E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD4E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_047)
{
    // BD4F;BD4F;1107 116C 11AE;BD4F;1107 116C 11AE; 
    // (뵏; 뵏; 뵏; 뵏; 뵏; ) HANGUL SYLLABLE BOED
    {
        std::array<uint32_t, 1> const source = {{ 0xBD4F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD4F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_048)
{
    // BD50;BD50;1107 116C 11AF;BD50;1107 116C 11AF; 
    // (뵐; 뵐; 뵐; 뵐; 뵐; ) HANGUL SYLLABLE BOEL
    {
        std::array<uint32_t, 1> const source = {{ 0xBD50 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD50 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_049)
{
    // BD51;BD51;1107 116C 11B0;BD51;1107 116C 11B0; 
    // (뵑; 뵑; 뵑; 뵑; 뵑; ) HANGUL SYLLABLE BOELG
    {
        std::array<uint32_t, 1> const source = {{ 0xBD51 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD51 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_050)
{
    // BD52;BD52;1107 116C 11B1;BD52;1107 116C 11B1; 
    // (뵒; 뵒; 뵒; 뵒; 뵒; ) HANGUL SYLLABLE BOELM
    {
        std::array<uint32_t, 1> const source = {{ 0xBD52 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD52 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_051)
{
    // BD53;BD53;1107 116C 11B2;BD53;1107 116C 11B2; 
    // (뵓; 뵓; 뵓; 뵓; 뵓; ) HANGUL SYLLABLE BOELB
    {
        std::array<uint32_t, 1> const source = {{ 0xBD53 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD53 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_052)
{
    // BD54;BD54;1107 116C 11B3;BD54;1107 116C 11B3; 
    // (뵔; 뵔; 뵔; 뵔; 뵔; ) HANGUL SYLLABLE BOELS
    {
        std::array<uint32_t, 1> const source = {{ 0xBD54 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD54 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_053)
{
    // BD55;BD55;1107 116C 11B4;BD55;1107 116C 11B4; 
    // (뵕; 뵕; 뵕; 뵕; 뵕; ) HANGUL SYLLABLE BOELT
    {
        std::array<uint32_t, 1> const source = {{ 0xBD55 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD55 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_054)
{
    // BD56;BD56;1107 116C 11B5;BD56;1107 116C 11B5; 
    // (뵖; 뵖; 뵖; 뵖; 뵖; ) HANGUL SYLLABLE BOELP
    {
        std::array<uint32_t, 1> const source = {{ 0xBD56 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD56 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_055)
{
    // BD57;BD57;1107 116C 11B6;BD57;1107 116C 11B6; 
    // (뵗; 뵗; 뵗; 뵗; 뵗; ) HANGUL SYLLABLE BOELH
    {
        std::array<uint32_t, 1> const source = {{ 0xBD57 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD57 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_056)
{
    // BD58;BD58;1107 116C 11B7;BD58;1107 116C 11B7; 
    // (뵘; 뵘; 뵘; 뵘; 뵘; ) HANGUL SYLLABLE BOEM
    {
        std::array<uint32_t, 1> const source = {{ 0xBD58 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD58 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_057)
{
    // BD59;BD59;1107 116C 11B8;BD59;1107 116C 11B8; 
    // (뵙; 뵙; 뵙; 뵙; 뵙; ) HANGUL SYLLABLE BOEB
    {
        std::array<uint32_t, 1> const source = {{ 0xBD59 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD59 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_058)
{
    // BD5A;BD5A;1107 116C 11B9;BD5A;1107 116C 11B9; 
    // (뵚; 뵚; 뵚; 뵚; 뵚; ) HANGUL SYLLABLE BOEBS
    {
        std::array<uint32_t, 1> const source = {{ 0xBD5A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD5A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_059)
{
    // BD5B;BD5B;1107 116C 11BA;BD5B;1107 116C 11BA; 
    // (뵛; 뵛; 뵛; 뵛; 뵛; ) HANGUL SYLLABLE BOES
    {
        std::array<uint32_t, 1> const source = {{ 0xBD5B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD5B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_060)
{
    // BD5C;BD5C;1107 116C 11BB;BD5C;1107 116C 11BB; 
    // (뵜; 뵜; 뵜; 뵜; 뵜; ) HANGUL SYLLABLE BOESS
    {
        std::array<uint32_t, 1> const source = {{ 0xBD5C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD5C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_061)
{
    // BD5D;BD5D;1107 116C 11BC;BD5D;1107 116C 11BC; 
    // (뵝; 뵝; 뵝; 뵝; 뵝; ) HANGUL SYLLABLE BOENG
    {
        std::array<uint32_t, 1> const source = {{ 0xBD5D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD5D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_062)
{
    // BD5E;BD5E;1107 116C 11BD;BD5E;1107 116C 11BD; 
    // (뵞; 뵞; 뵞; 뵞; 뵞; ) HANGUL SYLLABLE BOEJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBD5E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD5E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_063)
{
    // BD5F;BD5F;1107 116C 11BE;BD5F;1107 116C 11BE; 
    // (뵟; 뵟; 뵟; 뵟; 뵟; ) HANGUL SYLLABLE BOEC
    {
        std::array<uint32_t, 1> const source = {{ 0xBD5F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD5F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_064)
{
    // BD60;BD60;1107 116C 11BF;BD60;1107 116C 11BF; 
    // (뵠; 뵠; 뵠; 뵠; 뵠; ) HANGUL SYLLABLE BOEK
    {
        std::array<uint32_t, 1> const source = {{ 0xBD60 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD60 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_065)
{
    // BD61;BD61;1107 116C 11C0;BD61;1107 116C 11C0; 
    // (뵡; 뵡; 뵡; 뵡; 뵡; ) HANGUL SYLLABLE BOET
    {
        std::array<uint32_t, 1> const source = {{ 0xBD61 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD61 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_066)
{
    // BD62;BD62;1107 116C 11C1;BD62;1107 116C 11C1; 
    // (뵢; 뵢; 뵢; 뵢; 뵢; ) HANGUL SYLLABLE BOEP
    {
        std::array<uint32_t, 1> const source = {{ 0xBD62 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD62 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_067)
{
    // BD63;BD63;1107 116C 11C2;BD63;1107 116C 11C2; 
    // (뵣; 뵣; 뵣; 뵣; 뵣; ) HANGUL SYLLABLE BOEH
    {
        std::array<uint32_t, 1> const source = {{ 0xBD63 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD63 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_068)
{
    // BD64;BD64;1107 116D;BD64;1107 116D; 
    // (뵤; 뵤; 뵤; 뵤; 뵤; ) HANGUL SYLLABLE BYO
    {
        std::array<uint32_t, 1> const source = {{ 0xBD64 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD64 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_069)
{
    // BD65;BD65;1107 116D 11A8;BD65;1107 116D 11A8; 
    // (뵥; 뵥; 뵥; 뵥; 뵥; ) HANGUL SYLLABLE BYOG
    {
        std::array<uint32_t, 1> const source = {{ 0xBD65 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD65 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_070)
{
    // BD66;BD66;1107 116D 11A9;BD66;1107 116D 11A9; 
    // (뵦; 뵦; 뵦; 뵦; 뵦; ) HANGUL SYLLABLE BYOGG
    {
        std::array<uint32_t, 1> const source = {{ 0xBD66 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD66 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_071)
{
    // BD67;BD67;1107 116D 11AA;BD67;1107 116D 11AA; 
    // (뵧; 뵧; 뵧; 뵧; 뵧; ) HANGUL SYLLABLE BYOGS
    {
        std::array<uint32_t, 1> const source = {{ 0xBD67 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD67 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_072)
{
    // BD68;BD68;1107 116D 11AB;BD68;1107 116D 11AB; 
    // (뵨; 뵨; 뵨; 뵨; 뵨; ) HANGUL SYLLABLE BYON
    {
        std::array<uint32_t, 1> const source = {{ 0xBD68 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD68 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_073)
{
    // BD69;BD69;1107 116D 11AC;BD69;1107 116D 11AC; 
    // (뵩; 뵩; 뵩; 뵩; 뵩; ) HANGUL SYLLABLE BYONJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBD69 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD69 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_074)
{
    // BD6A;BD6A;1107 116D 11AD;BD6A;1107 116D 11AD; 
    // (뵪; 뵪; 뵪; 뵪; 뵪; ) HANGUL SYLLABLE BYONH
    {
        std::array<uint32_t, 1> const source = {{ 0xBD6A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD6A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_075)
{
    // BD6B;BD6B;1107 116D 11AE;BD6B;1107 116D 11AE; 
    // (뵫; 뵫; 뵫; 뵫; 뵫; ) HANGUL SYLLABLE BYOD
    {
        std::array<uint32_t, 1> const source = {{ 0xBD6B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD6B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_076)
{
    // BD6C;BD6C;1107 116D 11AF;BD6C;1107 116D 11AF; 
    // (뵬; 뵬; 뵬; 뵬; 뵬; ) HANGUL SYLLABLE BYOL
    {
        std::array<uint32_t, 1> const source = {{ 0xBD6C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD6C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_077)
{
    // BD6D;BD6D;1107 116D 11B0;BD6D;1107 116D 11B0; 
    // (뵭; 뵭; 뵭; 뵭; 뵭; ) HANGUL SYLLABLE BYOLG
    {
        std::array<uint32_t, 1> const source = {{ 0xBD6D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD6D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_078)
{
    // BD6E;BD6E;1107 116D 11B1;BD6E;1107 116D 11B1; 
    // (뵮; 뵮; 뵮; 뵮; 뵮; ) HANGUL SYLLABLE BYOLM
    {
        std::array<uint32_t, 1> const source = {{ 0xBD6E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD6E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_079)
{
    // BD6F;BD6F;1107 116D 11B2;BD6F;1107 116D 11B2; 
    // (뵯; 뵯; 뵯; 뵯; 뵯; ) HANGUL SYLLABLE BYOLB
    {
        std::array<uint32_t, 1> const source = {{ 0xBD6F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD6F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_080)
{
    // BD70;BD70;1107 116D 11B3;BD70;1107 116D 11B3; 
    // (뵰; 뵰; 뵰; 뵰; 뵰; ) HANGUL SYLLABLE BYOLS
    {
        std::array<uint32_t, 1> const source = {{ 0xBD70 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD70 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_081)
{
    // BD71;BD71;1107 116D 11B4;BD71;1107 116D 11B4; 
    // (뵱; 뵱; 뵱; 뵱; 뵱; ) HANGUL SYLLABLE BYOLT
    {
        std::array<uint32_t, 1> const source = {{ 0xBD71 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD71 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_082)
{
    // BD72;BD72;1107 116D 11B5;BD72;1107 116D 11B5; 
    // (뵲; 뵲; 뵲; 뵲; 뵲; ) HANGUL SYLLABLE BYOLP
    {
        std::array<uint32_t, 1> const source = {{ 0xBD72 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD72 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_083)
{
    // BD73;BD73;1107 116D 11B6;BD73;1107 116D 11B6; 
    // (뵳; 뵳; 뵳; 뵳; 뵳; ) HANGUL SYLLABLE BYOLH
    {
        std::array<uint32_t, 1> const source = {{ 0xBD73 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD73 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_084)
{
    // BD74;BD74;1107 116D 11B7;BD74;1107 116D 11B7; 
    // (뵴; 뵴; 뵴; 뵴; 뵴; ) HANGUL SYLLABLE BYOM
    {
        std::array<uint32_t, 1> const source = {{ 0xBD74 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD74 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_085)
{
    // BD75;BD75;1107 116D 11B8;BD75;1107 116D 11B8; 
    // (뵵; 뵵; 뵵; 뵵; 뵵; ) HANGUL SYLLABLE BYOB
    {
        std::array<uint32_t, 1> const source = {{ 0xBD75 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD75 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_086)
{
    // BD76;BD76;1107 116D 11B9;BD76;1107 116D 11B9; 
    // (뵶; 뵶; 뵶; 뵶; 뵶; ) HANGUL SYLLABLE BYOBS
    {
        std::array<uint32_t, 1> const source = {{ 0xBD76 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD76 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_087)
{
    // BD77;BD77;1107 116D 11BA;BD77;1107 116D 11BA; 
    // (뵷; 뵷; 뵷; 뵷; 뵷; ) HANGUL SYLLABLE BYOS
    {
        std::array<uint32_t, 1> const source = {{ 0xBD77 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD77 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_088)
{
    // BD78;BD78;1107 116D 11BB;BD78;1107 116D 11BB; 
    // (뵸; 뵸; 뵸; 뵸; 뵸; ) HANGUL SYLLABLE BYOSS
    {
        std::array<uint32_t, 1> const source = {{ 0xBD78 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD78 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_089)
{
    // BD79;BD79;1107 116D 11BC;BD79;1107 116D 11BC; 
    // (뵹; 뵹; 뵹; 뵹; 뵹; ) HANGUL SYLLABLE BYONG
    {
        std::array<uint32_t, 1> const source = {{ 0xBD79 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD79 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_090)
{
    // BD7A;BD7A;1107 116D 11BD;BD7A;1107 116D 11BD; 
    // (뵺; 뵺; 뵺; 뵺; 뵺; ) HANGUL SYLLABLE BYOJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBD7A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD7A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_091)
{
    // BD7B;BD7B;1107 116D 11BE;BD7B;1107 116D 11BE; 
    // (뵻; 뵻; 뵻; 뵻; 뵻; ) HANGUL SYLLABLE BYOC
    {
        std::array<uint32_t, 1> const source = {{ 0xBD7B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD7B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_092)
{
    // BD7C;BD7C;1107 116D 11BF;BD7C;1107 116D 11BF; 
    // (뵼; 뵼; 뵼; 뵼; 뵼; ) HANGUL SYLLABLE BYOK
    {
        std::array<uint32_t, 1> const source = {{ 0xBD7C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD7C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_093)
{
    // BD7D;BD7D;1107 116D 11C0;BD7D;1107 116D 11C0; 
    // (뵽; 뵽; 뵽; 뵽; 뵽; ) HANGUL SYLLABLE BYOT
    {
        std::array<uint32_t, 1> const source = {{ 0xBD7D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD7D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_094)
{
    // BD7E;BD7E;1107 116D 11C1;BD7E;1107 116D 11C1; 
    // (뵾; 뵾; 뵾; 뵾; 뵾; ) HANGUL SYLLABLE BYOP
    {
        std::array<uint32_t, 1> const source = {{ 0xBD7E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD7E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_095)
{
    // BD7F;BD7F;1107 116D 11C2;BD7F;1107 116D 11C2; 
    // (뵿; 뵿; 뵿; 뵿; 뵿; ) HANGUL SYLLABLE BYOH
    {
        std::array<uint32_t, 1> const source = {{ 0xBD7F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD7F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_096)
{
    // BD80;BD80;1107 116E;BD80;1107 116E; 
    // (부; 부; 부; 부; 부; ) HANGUL SYLLABLE BU
    {
        std::array<uint32_t, 1> const source = {{ 0xBD80 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD80 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_097)
{
    // BD81;BD81;1107 116E 11A8;BD81;1107 116E 11A8; 
    // (북; 북; 북; 북; 북; ) HANGUL SYLLABLE BUG
    {
        std::array<uint32_t, 1> const source = {{ 0xBD81 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD81 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_098)
{
    // BD82;BD82;1107 116E 11A9;BD82;1107 116E 11A9; 
    // (붂; 붂; 붂; 붂; 붂; ) HANGUL SYLLABLE BUGG
    {
        std::array<uint32_t, 1> const source = {{ 0xBD82 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD82 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_099)
{
    // BD83;BD83;1107 116E 11AA;BD83;1107 116E 11AA; 
    // (붃; 붃; 붃; 붃; 붃; ) HANGUL SYLLABLE BUGS
    {
        std::array<uint32_t, 1> const source = {{ 0xBD83 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD83 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_100)
{
    // BD84;BD84;1107 116E 11AB;BD84;1107 116E 11AB; 
    // (분; 분; 분; 분; 분; ) HANGUL SYLLABLE BUN
    {
        std::array<uint32_t, 1> const source = {{ 0xBD84 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD84 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_101)
{
    // BD85;BD85;1107 116E 11AC;BD85;1107 116E 11AC; 
    // (붅; 붅; 붅; 붅; 붅; ) HANGUL SYLLABLE BUNJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBD85 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD85 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_102)
{
    // BD86;BD86;1107 116E 11AD;BD86;1107 116E 11AD; 
    // (붆; 붆; 붆; 붆; 붆; ) HANGUL SYLLABLE BUNH
    {
        std::array<uint32_t, 1> const source = {{ 0xBD86 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD86 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_103)
{
    // BD87;BD87;1107 116E 11AE;BD87;1107 116E 11AE; 
    // (붇; 붇; 붇; 붇; 붇; ) HANGUL SYLLABLE BUD
    {
        std::array<uint32_t, 1> const source = {{ 0xBD87 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD87 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_104)
{
    // BD88;BD88;1107 116E 11AF;BD88;1107 116E 11AF; 
    // (불; 불; 불; 불; 불; ) HANGUL SYLLABLE BUL
    {
        std::array<uint32_t, 1> const source = {{ 0xBD88 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD88 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_105)
{
    // BD89;BD89;1107 116E 11B0;BD89;1107 116E 11B0; 
    // (붉; 붉; 붉; 붉; 붉; ) HANGUL SYLLABLE BULG
    {
        std::array<uint32_t, 1> const source = {{ 0xBD89 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD89 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_106)
{
    // BD8A;BD8A;1107 116E 11B1;BD8A;1107 116E 11B1; 
    // (붊; 붊; 붊; 붊; 붊; ) HANGUL SYLLABLE BULM
    {
        std::array<uint32_t, 1> const source = {{ 0xBD8A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD8A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_107)
{
    // BD8B;BD8B;1107 116E 11B2;BD8B;1107 116E 11B2; 
    // (붋; 붋; 붋; 붋; 붋; ) HANGUL SYLLABLE BULB
    {
        std::array<uint32_t, 1> const source = {{ 0xBD8B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD8B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_108)
{
    // BD8C;BD8C;1107 116E 11B3;BD8C;1107 116E 11B3; 
    // (붌; 붌; 붌; 붌; 붌; ) HANGUL SYLLABLE BULS
    {
        std::array<uint32_t, 1> const source = {{ 0xBD8C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD8C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_109)
{
    // BD8D;BD8D;1107 116E 11B4;BD8D;1107 116E 11B4; 
    // (붍; 붍; 붍; 붍; 붍; ) HANGUL SYLLABLE BULT
    {
        std::array<uint32_t, 1> const source = {{ 0xBD8D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD8D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_110)
{
    // BD8E;BD8E;1107 116E 11B5;BD8E;1107 116E 11B5; 
    // (붎; 붎; 붎; 붎; 붎; ) HANGUL SYLLABLE BULP
    {
        std::array<uint32_t, 1> const source = {{ 0xBD8E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD8E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_111)
{
    // BD8F;BD8F;1107 116E 11B6;BD8F;1107 116E 11B6; 
    // (붏; 붏; 붏; 붏; 붏; ) HANGUL SYLLABLE BULH
    {
        std::array<uint32_t, 1> const source = {{ 0xBD8F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD8F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_112)
{
    // BD90;BD90;1107 116E 11B7;BD90;1107 116E 11B7; 
    // (붐; 붐; 붐; 붐; 붐; ) HANGUL SYLLABLE BUM
    {
        std::array<uint32_t, 1> const source = {{ 0xBD90 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD90 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_113)
{
    // BD91;BD91;1107 116E 11B8;BD91;1107 116E 11B8; 
    // (붑; 붑; 붑; 붑; 붑; ) HANGUL SYLLABLE BUB
    {
        std::array<uint32_t, 1> const source = {{ 0xBD91 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD91 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_114)
{
    // BD92;BD92;1107 116E 11B9;BD92;1107 116E 11B9; 
    // (붒; 붒; 붒; 붒; 붒; ) HANGUL SYLLABLE BUBS
    {
        std::array<uint32_t, 1> const source = {{ 0xBD92 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD92 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_115)
{
    // BD93;BD93;1107 116E 11BA;BD93;1107 116E 11BA; 
    // (붓; 붓; 붓; 붓; 붓; ) HANGUL SYLLABLE BUS
    {
        std::array<uint32_t, 1> const source = {{ 0xBD93 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD93 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_116)
{
    // BD94;BD94;1107 116E 11BB;BD94;1107 116E 11BB; 
    // (붔; 붔; 붔; 붔; 붔; ) HANGUL SYLLABLE BUSS
    {
        std::array<uint32_t, 1> const source = {{ 0xBD94 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD94 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_117)
{
    // BD95;BD95;1107 116E 11BC;BD95;1107 116E 11BC; 
    // (붕; 붕; 붕; 붕; 붕; ) HANGUL SYLLABLE BUNG
    {
        std::array<uint32_t, 1> const source = {{ 0xBD95 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD95 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_118)
{
    // BD96;BD96;1107 116E 11BD;BD96;1107 116E 11BD; 
    // (붖; 붖; 붖; 붖; 붖; ) HANGUL SYLLABLE BUJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBD96 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD96 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_119)
{
    // BD97;BD97;1107 116E 11BE;BD97;1107 116E 11BE; 
    // (붗; 붗; 붗; 붗; 붗; ) HANGUL SYLLABLE BUC
    {
        std::array<uint32_t, 1> const source = {{ 0xBD97 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD97 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_120)
{
    // BD98;BD98;1107 116E 11BF;BD98;1107 116E 11BF; 
    // (붘; 붘; 붘; 붘; 붘; ) HANGUL SYLLABLE BUK
    {
        std::array<uint32_t, 1> const source = {{ 0xBD98 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD98 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_121)
{
    // BD99;BD99;1107 116E 11C0;BD99;1107 116E 11C0; 
    // (붙; 붙; 붙; 붙; 붙; ) HANGUL SYLLABLE BUT
    {
        std::array<uint32_t, 1> const source = {{ 0xBD99 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD99 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_122)
{
    // BD9A;BD9A;1107 116E 11C1;BD9A;1107 116E 11C1; 
    // (붚; 붚; 붚; 붚; 붚; ) HANGUL SYLLABLE BUP
    {
        std::array<uint32_t, 1> const source = {{ 0xBD9A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD9A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_123)
{
    // BD9B;BD9B;1107 116E 11C2;BD9B;1107 116E 11C2; 
    // (붛; 붛; 붛; 붛; 붛; ) HANGUL SYLLABLE BUH
    {
        std::array<uint32_t, 1> const source = {{ 0xBD9B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD9B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_124)
{
    // BD9C;BD9C;1107 116F;BD9C;1107 116F; 
    // (붜; 붜; 붜; 붜; 붜; ) HANGUL SYLLABLE BWEO
    {
        std::array<uint32_t, 1> const source = {{ 0xBD9C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD9C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_125)
{
    // BD9D;BD9D;1107 116F 11A8;BD9D;1107 116F 11A8; 
    // (붝; 붝; 붝; 붝; 붝; ) HANGUL SYLLABLE BWEOG
    {
        std::array<uint32_t, 1> const source = {{ 0xBD9D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD9D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_126)
{
    // BD9E;BD9E;1107 116F 11A9;BD9E;1107 116F 11A9; 
    // (붞; 붞; 붞; 붞; 붞; ) HANGUL SYLLABLE BWEOGG
    {
        std::array<uint32_t, 1> const source = {{ 0xBD9E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD9E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_127)
{
    // BD9F;BD9F;1107 116F 11AA;BD9F;1107 116F 11AA; 
    // (붟; 붟; 붟; 붟; 붟; ) HANGUL SYLLABLE BWEOGS
    {
        std::array<uint32_t, 1> const source = {{ 0xBD9F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBD9F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_128)
{
    // BDA0;BDA0;1107 116F 11AB;BDA0;1107 116F 11AB; 
    // (붠; 붠; 붠; 붠; 붠; ) HANGUL SYLLABLE BWEON
    {
        std::array<uint32_t, 1> const source = {{ 0xBDA0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDA0 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_129)
{
    // BDA1;BDA1;1107 116F 11AC;BDA1;1107 116F 11AC; 
    // (붡; 붡; 붡; 붡; 붡; ) HANGUL SYLLABLE BWEONJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBDA1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDA1 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_130)
{
    // BDA2;BDA2;1107 116F 11AD;BDA2;1107 116F 11AD; 
    // (붢; 붢; 붢; 붢; 붢; ) HANGUL SYLLABLE BWEONH
    {
        std::array<uint32_t, 1> const source = {{ 0xBDA2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDA2 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_131)
{
    // BDA3;BDA3;1107 116F 11AE;BDA3;1107 116F 11AE; 
    // (붣; 붣; 붣; 붣; 붣; ) HANGUL SYLLABLE BWEOD
    {
        std::array<uint32_t, 1> const source = {{ 0xBDA3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDA3 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_132)
{
    // BDA4;BDA4;1107 116F 11AF;BDA4;1107 116F 11AF; 
    // (붤; 붤; 붤; 붤; 붤; ) HANGUL SYLLABLE BWEOL
    {
        std::array<uint32_t, 1> const source = {{ 0xBDA4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDA4 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_133)
{
    // BDA5;BDA5;1107 116F 11B0;BDA5;1107 116F 11B0; 
    // (붥; 붥; 붥; 붥; 붥; ) HANGUL SYLLABLE BWEOLG
    {
        std::array<uint32_t, 1> const source = {{ 0xBDA5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDA5 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_134)
{
    // BDA6;BDA6;1107 116F 11B1;BDA6;1107 116F 11B1; 
    // (붦; 붦; 붦; 붦; 붦; ) HANGUL SYLLABLE BWEOLM
    {
        std::array<uint32_t, 1> const source = {{ 0xBDA6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDA6 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_135)
{
    // BDA7;BDA7;1107 116F 11B2;BDA7;1107 116F 11B2; 
    // (붧; 붧; 붧; 붧; 붧; ) HANGUL SYLLABLE BWEOLB
    {
        std::array<uint32_t, 1> const source = {{ 0xBDA7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDA7 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_136)
{
    // BDA8;BDA8;1107 116F 11B3;BDA8;1107 116F 11B3; 
    // (붨; 붨; 붨; 붨; 붨; ) HANGUL SYLLABLE BWEOLS
    {
        std::array<uint32_t, 1> const source = {{ 0xBDA8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDA8 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_137)
{
    // BDA9;BDA9;1107 116F 11B4;BDA9;1107 116F 11B4; 
    // (붩; 붩; 붩; 붩; 붩; ) HANGUL SYLLABLE BWEOLT
    {
        std::array<uint32_t, 1> const source = {{ 0xBDA9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDA9 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_138)
{
    // BDAA;BDAA;1107 116F 11B5;BDAA;1107 116F 11B5; 
    // (붪; 붪; 붪; 붪; 붪; ) HANGUL SYLLABLE BWEOLP
    {
        std::array<uint32_t, 1> const source = {{ 0xBDAA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDAA }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_139)
{
    // BDAB;BDAB;1107 116F 11B6;BDAB;1107 116F 11B6; 
    // (붫; 붫; 붫; 붫; 붫; ) HANGUL SYLLABLE BWEOLH
    {
        std::array<uint32_t, 1> const source = {{ 0xBDAB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDAB }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_140)
{
    // BDAC;BDAC;1107 116F 11B7;BDAC;1107 116F 11B7; 
    // (붬; 붬; 붬; 붬; 붬; ) HANGUL SYLLABLE BWEOM
    {
        std::array<uint32_t, 1> const source = {{ 0xBDAC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDAC }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_141)
{
    // BDAD;BDAD;1107 116F 11B8;BDAD;1107 116F 11B8; 
    // (붭; 붭; 붭; 붭; 붭; ) HANGUL SYLLABLE BWEOB
    {
        std::array<uint32_t, 1> const source = {{ 0xBDAD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDAD }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_142)
{
    // BDAE;BDAE;1107 116F 11B9;BDAE;1107 116F 11B9; 
    // (붮; 붮; 붮; 붮; 붮; ) HANGUL SYLLABLE BWEOBS
    {
        std::array<uint32_t, 1> const source = {{ 0xBDAE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDAE }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_143)
{
    // BDAF;BDAF;1107 116F 11BA;BDAF;1107 116F 11BA; 
    // (붯; 붯; 붯; 붯; 붯; ) HANGUL SYLLABLE BWEOS
    {
        std::array<uint32_t, 1> const source = {{ 0xBDAF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDAF }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_144)
{
    // BDB0;BDB0;1107 116F 11BB;BDB0;1107 116F 11BB; 
    // (붰; 붰; 붰; 붰; 붰; ) HANGUL SYLLABLE BWEOSS
    {
        std::array<uint32_t, 1> const source = {{ 0xBDB0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDB0 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_145)
{
    // BDB1;BDB1;1107 116F 11BC;BDB1;1107 116F 11BC; 
    // (붱; 붱; 붱; 붱; 붱; ) HANGUL SYLLABLE BWEONG
    {
        std::array<uint32_t, 1> const source = {{ 0xBDB1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDB1 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_146)
{
    // BDB2;BDB2;1107 116F 11BD;BDB2;1107 116F 11BD; 
    // (붲; 붲; 붲; 붲; 붲; ) HANGUL SYLLABLE BWEOJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBDB2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDB2 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_147)
{
    // BDB3;BDB3;1107 116F 11BE;BDB3;1107 116F 11BE; 
    // (붳; 붳; 붳; 붳; 붳; ) HANGUL SYLLABLE BWEOC
    {
        std::array<uint32_t, 1> const source = {{ 0xBDB3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDB3 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_148)
{
    // BDB4;BDB4;1107 116F 11BF;BDB4;1107 116F 11BF; 
    // (붴; 붴; 붴; 붴; 붴; ) HANGUL SYLLABLE BWEOK
    {
        std::array<uint32_t, 1> const source = {{ 0xBDB4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDB4 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_149)
{
    // BDB5;BDB5;1107 116F 11C0;BDB5;1107 116F 11C0; 
    // (붵; 붵; 붵; 붵; 붵; ) HANGUL SYLLABLE BWEOT
    {
        std::array<uint32_t, 1> const source = {{ 0xBDB5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDB5 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_150)
{
    // BDB6;BDB6;1107 116F 11C1;BDB6;1107 116F 11C1; 
    // (붶; 붶; 붶; 붶; 붶; ) HANGUL SYLLABLE BWEOP
    {
        std::array<uint32_t, 1> const source = {{ 0xBDB6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDB6 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_151)
{
    // BDB7;BDB7;1107 116F 11C2;BDB7;1107 116F 11C2; 
    // (붷; 붷; 붷; 붷; 붷; ) HANGUL SYLLABLE BWEOH
    {
        std::array<uint32_t, 1> const source = {{ 0xBDB7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDB7 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_152)
{
    // BDB8;BDB8;1107 1170;BDB8;1107 1170; 
    // (붸; 붸; 붸; 붸; 붸; ) HANGUL SYLLABLE BWE
    {
        std::array<uint32_t, 1> const source = {{ 0xBDB8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDB8 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_153)
{
    // BDB9;BDB9;1107 1170 11A8;BDB9;1107 1170 11A8; 
    // (붹; 붹; 붹; 붹; 붹; ) HANGUL SYLLABLE BWEG
    {
        std::array<uint32_t, 1> const source = {{ 0xBDB9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDB9 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_154)
{
    // BDBA;BDBA;1107 1170 11A9;BDBA;1107 1170 11A9; 
    // (붺; 붺; 붺; 붺; 붺; ) HANGUL SYLLABLE BWEGG
    {
        std::array<uint32_t, 1> const source = {{ 0xBDBA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDBA }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_155)
{
    // BDBB;BDBB;1107 1170 11AA;BDBB;1107 1170 11AA; 
    // (붻; 붻; 붻; 붻; 붻; ) HANGUL SYLLABLE BWEGS
    {
        std::array<uint32_t, 1> const source = {{ 0xBDBB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDBB }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_156)
{
    // BDBC;BDBC;1107 1170 11AB;BDBC;1107 1170 11AB; 
    // (붼; 붼; 붼; 붼; 붼; ) HANGUL SYLLABLE BWEN
    {
        std::array<uint32_t, 1> const source = {{ 0xBDBC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDBC }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_157)
{
    // BDBD;BDBD;1107 1170 11AC;BDBD;1107 1170 11AC; 
    // (붽; 붽; 붽; 붽; 붽; ) HANGUL SYLLABLE BWENJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBDBD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDBD }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_158)
{
    // BDBE;BDBE;1107 1170 11AD;BDBE;1107 1170 11AD; 
    // (붾; 붾; 붾; 붾; 붾; ) HANGUL SYLLABLE BWENH
    {
        std::array<uint32_t, 1> const source = {{ 0xBDBE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDBE }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_159)
{
    // BDBF;BDBF;1107 1170 11AE;BDBF;1107 1170 11AE; 
    // (붿; 붿; 붿; 붿; 붿; ) HANGUL SYLLABLE BWED
    {
        std::array<uint32_t, 1> const source = {{ 0xBDBF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDBF }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_160)
{
    // BDC0;BDC0;1107 1170 11AF;BDC0;1107 1170 11AF; 
    // (뷀; 뷀; 뷀; 뷀; 뷀; ) HANGUL SYLLABLE BWEL
    {
        std::array<uint32_t, 1> const source = {{ 0xBDC0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDC0 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_161)
{
    // BDC1;BDC1;1107 1170 11B0;BDC1;1107 1170 11B0; 
    // (뷁; 뷁; 뷁; 뷁; 뷁; ) HANGUL SYLLABLE BWELG
    {
        std::array<uint32_t, 1> const source = {{ 0xBDC1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDC1 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_162)
{
    // BDC2;BDC2;1107 1170 11B1;BDC2;1107 1170 11B1; 
    // (뷂; 뷂; 뷂; 뷂; 뷂; ) HANGUL SYLLABLE BWELM
    {
        std::array<uint32_t, 1> const source = {{ 0xBDC2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDC2 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_163)
{
    // BDC3;BDC3;1107 1170 11B2;BDC3;1107 1170 11B2; 
    // (뷃; 뷃; 뷃; 뷃; 뷃; ) HANGUL SYLLABLE BWELB
    {
        std::array<uint32_t, 1> const source = {{ 0xBDC3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDC3 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_164)
{
    // BDC4;BDC4;1107 1170 11B3;BDC4;1107 1170 11B3; 
    // (뷄; 뷄; 뷄; 뷄; 뷄; ) HANGUL SYLLABLE BWELS
    {
        std::array<uint32_t, 1> const source = {{ 0xBDC4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDC4 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_165)
{
    // BDC5;BDC5;1107 1170 11B4;BDC5;1107 1170 11B4; 
    // (뷅; 뷅; 뷅; 뷅; 뷅; ) HANGUL SYLLABLE BWELT
    {
        std::array<uint32_t, 1> const source = {{ 0xBDC5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDC5 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_166)
{
    // BDC6;BDC6;1107 1170 11B5;BDC6;1107 1170 11B5; 
    // (뷆; 뷆; 뷆; 뷆; 뷆; ) HANGUL SYLLABLE BWELP
    {
        std::array<uint32_t, 1> const source = {{ 0xBDC6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDC6 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_167)
{
    // BDC7;BDC7;1107 1170 11B6;BDC7;1107 1170 11B6; 
    // (뷇; 뷇; 뷇; 뷇; 뷇; ) HANGUL SYLLABLE BWELH
    {
        std::array<uint32_t, 1> const source = {{ 0xBDC7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDC7 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_168)
{
    // BDC8;BDC8;1107 1170 11B7;BDC8;1107 1170 11B7; 
    // (뷈; 뷈; 뷈; 뷈; 뷈; ) HANGUL SYLLABLE BWEM
    {
        std::array<uint32_t, 1> const source = {{ 0xBDC8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDC8 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_169)
{
    // BDC9;BDC9;1107 1170 11B8;BDC9;1107 1170 11B8; 
    // (뷉; 뷉; 뷉; 뷉; 뷉; ) HANGUL SYLLABLE BWEB
    {
        std::array<uint32_t, 1> const source = {{ 0xBDC9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDC9 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_170)
{
    // BDCA;BDCA;1107 1170 11B9;BDCA;1107 1170 11B9; 
    // (뷊; 뷊; 뷊; 뷊; 뷊; ) HANGUL SYLLABLE BWEBS
    {
        std::array<uint32_t, 1> const source = {{ 0xBDCA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDCA }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_171)
{
    // BDCB;BDCB;1107 1170 11BA;BDCB;1107 1170 11BA; 
    // (뷋; 뷋; 뷋; 뷋; 뷋; ) HANGUL SYLLABLE BWES
    {
        std::array<uint32_t, 1> const source = {{ 0xBDCB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDCB }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_172)
{
    // BDCC;BDCC;1107 1170 11BB;BDCC;1107 1170 11BB; 
    // (뷌; 뷌; 뷌; 뷌; 뷌; ) HANGUL SYLLABLE BWESS
    {
        std::array<uint32_t, 1> const source = {{ 0xBDCC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDCC }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_173)
{
    // BDCD;BDCD;1107 1170 11BC;BDCD;1107 1170 11BC; 
    // (뷍; 뷍; 뷍; 뷍; 뷍; ) HANGUL SYLLABLE BWENG
    {
        std::array<uint32_t, 1> const source = {{ 0xBDCD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDCD }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_174)
{
    // BDCE;BDCE;1107 1170 11BD;BDCE;1107 1170 11BD; 
    // (뷎; 뷎; 뷎; 뷎; 뷎; ) HANGUL SYLLABLE BWEJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBDCE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDCE }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_175)
{
    // BDCF;BDCF;1107 1170 11BE;BDCF;1107 1170 11BE; 
    // (뷏; 뷏; 뷏; 뷏; 뷏; ) HANGUL SYLLABLE BWEC
    {
        std::array<uint32_t, 1> const source = {{ 0xBDCF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDCF }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_176)
{
    // BDD0;BDD0;1107 1170 11BF;BDD0;1107 1170 11BF; 
    // (뷐; 뷐; 뷐; 뷐; 뷐; ) HANGUL SYLLABLE BWEK
    {
        std::array<uint32_t, 1> const source = {{ 0xBDD0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDD0 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_177)
{
    // BDD1;BDD1;1107 1170 11C0;BDD1;1107 1170 11C0; 
    // (뷑; 뷑; 뷑; 뷑; 뷑; ) HANGUL SYLLABLE BWET
    {
        std::array<uint32_t, 1> const source = {{ 0xBDD1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDD1 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_178)
{
    // BDD2;BDD2;1107 1170 11C1;BDD2;1107 1170 11C1; 
    // (뷒; 뷒; 뷒; 뷒; 뷒; ) HANGUL SYLLABLE BWEP
    {
        std::array<uint32_t, 1> const source = {{ 0xBDD2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDD2 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_179)
{
    // BDD3;BDD3;1107 1170 11C2;BDD3;1107 1170 11C2; 
    // (뷓; 뷓; 뷓; 뷓; 뷓; ) HANGUL SYLLABLE BWEH
    {
        std::array<uint32_t, 1> const source = {{ 0xBDD3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDD3 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_180)
{
    // BDD4;BDD4;1107 1171;BDD4;1107 1171; 
    // (뷔; 뷔; 뷔; 뷔; 뷔; ) HANGUL SYLLABLE BWI
    {
        std::array<uint32_t, 1> const source = {{ 0xBDD4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDD4 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_181)
{
    // BDD5;BDD5;1107 1171 11A8;BDD5;1107 1171 11A8; 
    // (뷕; 뷕; 뷕; 뷕; 뷕; ) HANGUL SYLLABLE BWIG
    {
        std::array<uint32_t, 1> const source = {{ 0xBDD5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDD5 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_182)
{
    // BDD6;BDD6;1107 1171 11A9;BDD6;1107 1171 11A9; 
    // (뷖; 뷖; 뷖; 뷖; 뷖; ) HANGUL SYLLABLE BWIGG
    {
        std::array<uint32_t, 1> const source = {{ 0xBDD6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDD6 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_183)
{
    // BDD7;BDD7;1107 1171 11AA;BDD7;1107 1171 11AA; 
    // (뷗; 뷗; 뷗; 뷗; 뷗; ) HANGUL SYLLABLE BWIGS
    {
        std::array<uint32_t, 1> const source = {{ 0xBDD7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDD7 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_184)
{
    // BDD8;BDD8;1107 1171 11AB;BDD8;1107 1171 11AB; 
    // (뷘; 뷘; 뷘; 뷘; 뷘; ) HANGUL SYLLABLE BWIN
    {
        std::array<uint32_t, 1> const source = {{ 0xBDD8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDD8 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_185)
{
    // BDD9;BDD9;1107 1171 11AC;BDD9;1107 1171 11AC; 
    // (뷙; 뷙; 뷙; 뷙; 뷙; ) HANGUL SYLLABLE BWINJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBDD9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDD9 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_186)
{
    // BDDA;BDDA;1107 1171 11AD;BDDA;1107 1171 11AD; 
    // (뷚; 뷚; 뷚; 뷚; 뷚; ) HANGUL SYLLABLE BWINH
    {
        std::array<uint32_t, 1> const source = {{ 0xBDDA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDDA }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_187)
{
    // BDDB;BDDB;1107 1171 11AE;BDDB;1107 1171 11AE; 
    // (뷛; 뷛; 뷛; 뷛; 뷛; ) HANGUL SYLLABLE BWID
    {
        std::array<uint32_t, 1> const source = {{ 0xBDDB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDDB }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_188)
{
    // BDDC;BDDC;1107 1171 11AF;BDDC;1107 1171 11AF; 
    // (뷜; 뷜; 뷜; 뷜; 뷜; ) HANGUL SYLLABLE BWIL
    {
        std::array<uint32_t, 1> const source = {{ 0xBDDC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDDC }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_189)
{
    // BDDD;BDDD;1107 1171 11B0;BDDD;1107 1171 11B0; 
    // (뷝; 뷝; 뷝; 뷝; 뷝; ) HANGUL SYLLABLE BWILG
    {
        std::array<uint32_t, 1> const source = {{ 0xBDDD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDDD }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_190)
{
    // BDDE;BDDE;1107 1171 11B1;BDDE;1107 1171 11B1; 
    // (뷞; 뷞; 뷞; 뷞; 뷞; ) HANGUL SYLLABLE BWILM
    {
        std::array<uint32_t, 1> const source = {{ 0xBDDE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDDE }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_191)
{
    // BDDF;BDDF;1107 1171 11B2;BDDF;1107 1171 11B2; 
    // (뷟; 뷟; 뷟; 뷟; 뷟; ) HANGUL SYLLABLE BWILB
    {
        std::array<uint32_t, 1> const source = {{ 0xBDDF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDDF }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_192)
{
    // BDE0;BDE0;1107 1171 11B3;BDE0;1107 1171 11B3; 
    // (뷠; 뷠; 뷠; 뷠; 뷠; ) HANGUL SYLLABLE BWILS
    {
        std::array<uint32_t, 1> const source = {{ 0xBDE0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDE0 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_193)
{
    // BDE1;BDE1;1107 1171 11B4;BDE1;1107 1171 11B4; 
    // (뷡; 뷡; 뷡; 뷡; 뷡; ) HANGUL SYLLABLE BWILT
    {
        std::array<uint32_t, 1> const source = {{ 0xBDE1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDE1 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_194)
{
    // BDE2;BDE2;1107 1171 11B5;BDE2;1107 1171 11B5; 
    // (뷢; 뷢; 뷢; 뷢; 뷢; ) HANGUL SYLLABLE BWILP
    {
        std::array<uint32_t, 1> const source = {{ 0xBDE2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDE2 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_195)
{
    // BDE3;BDE3;1107 1171 11B6;BDE3;1107 1171 11B6; 
    // (뷣; 뷣; 뷣; 뷣; 뷣; ) HANGUL SYLLABLE BWILH
    {
        std::array<uint32_t, 1> const source = {{ 0xBDE3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDE3 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_196)
{
    // BDE4;BDE4;1107 1171 11B7;BDE4;1107 1171 11B7; 
    // (뷤; 뷤; 뷤; 뷤; 뷤; ) HANGUL SYLLABLE BWIM
    {
        std::array<uint32_t, 1> const source = {{ 0xBDE4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDE4 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_197)
{
    // BDE5;BDE5;1107 1171 11B8;BDE5;1107 1171 11B8; 
    // (뷥; 뷥; 뷥; 뷥; 뷥; ) HANGUL SYLLABLE BWIB
    {
        std::array<uint32_t, 1> const source = {{ 0xBDE5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDE5 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_198)
{
    // BDE6;BDE6;1107 1171 11B9;BDE6;1107 1171 11B9; 
    // (뷦; 뷦; 뷦; 뷦; 뷦; ) HANGUL SYLLABLE BWIBS
    {
        std::array<uint32_t, 1> const source = {{ 0xBDE6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDE6 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_034_199)
{
    // BDE7;BDE7;1107 1171 11BA;BDE7;1107 1171 11BA; 
    // (뷧; 뷧; 뷧; 뷧; 뷧; ) HANGUL SYLLABLE BWIS
    {
        std::array<uint32_t, 1> const source = {{ 0xBDE7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBDE7 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


