// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_318_000)
{
    // FA3F 0061;	
    // (憎) CJK COMPATIBILITY IDEOGRAPH-FA3F	[FB40 E18E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA3F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE18E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_001)
{
    // FA89 0061;	
    // (憎) CJK COMPATIBILITY IDEOGRAPH-FA89	[FB40 E18E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA89, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE18E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_002)
{
    // 2F8AB 0061;	
    // (憎) CJK COMPATIBILITY IDEOGRAPH-2F8AB	[FB40 E18E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8AB, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE18E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_003)
{
    // FA3F 0041;	
    // (憎) CJK COMPATIBILITY IDEOGRAPH-FA3F	[FB40 E18E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA3F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE18E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_004)
{
    // FA89 0041;	
    // (憎) CJK COMPATIBILITY IDEOGRAPH-FA89	[FB40 E18E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA89, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE18E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_005)
{
    // 2F8AB 0041;	
    // (憎) CJK COMPATIBILITY IDEOGRAPH-2F8AB	[FB40 E18E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8AB, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE18E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_006)
{
    // FA3F 0062;	
    // (憎) CJK COMPATIBILITY IDEOGRAPH-FA3F	[FB40 E18E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA3F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE18E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_007)
{
    // FA89 0062;	
    // (憎) CJK COMPATIBILITY IDEOGRAPH-FA89	[FB40 E18E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA89, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE18E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_008)
{
    // 2F8AB 0062;	
    // (憎) CJK COMPATIBILITY IDEOGRAPH-2F8AB	[FB40 E18E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8AB, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE18E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_009)
{
    // F98F 0021;	
    // (憐) CJK COMPATIBILITY IDEOGRAPH-F98F	[FB40 E190 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF98F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE190, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_010)
{
    // F98F 003F;	
    // (憐) CJK COMPATIBILITY IDEOGRAPH-F98F	[FB40 E190 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF98F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE190, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_011)
{
    // F98F 0061;	
    // (憐) CJK COMPATIBILITY IDEOGRAPH-F98F	[FB40 E190 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF98F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE190, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_012)
{
    // F98F 0041;	
    // (憐) CJK COMPATIBILITY IDEOGRAPH-F98F	[FB40 E190 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF98F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE190, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_013)
{
    // F98F 0062;	
    // (憐) CJK COMPATIBILITY IDEOGRAPH-F98F	[FB40 E190 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF98F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE190, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_014)
{
    // 2F8AD 0021;	
    // (憤) CJK COMPATIBILITY IDEOGRAPH-2F8AD	[FB40 E1A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8AD, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE1A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_015)
{
    // 2F8AD 003F;	
    // (憤) CJK COMPATIBILITY IDEOGRAPH-2F8AD	[FB40 E1A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8AD, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE1A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_016)
{
    // 2F8AD 0061;	
    // (憤) CJK COMPATIBILITY IDEOGRAPH-2F8AD	[FB40 E1A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8AD, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE1A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_017)
{
    // 2F8AD 0041;	
    // (憤) CJK COMPATIBILITY IDEOGRAPH-2F8AD	[FB40 E1A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8AD, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE1A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_018)
{
    // 2F8AD 0062;	
    // (憤) CJK COMPATIBILITY IDEOGRAPH-2F8AD	[FB40 E1A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8AD, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE1A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_019)
{
    // 2F8AE 0021;	
    // (憯) CJK COMPATIBILITY IDEOGRAPH-2F8AE	[FB40 E1AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8AE, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE1AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_020)
{
    // 2F8AE 003F;	
    // (憯) CJK COMPATIBILITY IDEOGRAPH-2F8AE	[FB40 E1AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8AE, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE1AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_021)
{
    // 2F8AE 0061;	
    // (憯) CJK COMPATIBILITY IDEOGRAPH-2F8AE	[FB40 E1AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8AE, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE1AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_022)
{
    // 2F8AE 0041;	
    // (憯) CJK COMPATIBILITY IDEOGRAPH-2F8AE	[FB40 E1AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8AE, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE1AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_023)
{
    // 2F8AE 0062;	
    // (憯) CJK COMPATIBILITY IDEOGRAPH-2F8AE	[FB40 E1AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8AE, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE1AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_024)
{
    // 2F8AC 0021;	
    // (憲) CJK COMPATIBILITY IDEOGRAPH-2F8AC	[FB40 E1B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8AC, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE1B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_025)
{
    // 2F8AC 003F;	
    // (憲) CJK COMPATIBILITY IDEOGRAPH-2F8AC	[FB40 E1B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8AC, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE1B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_026)
{
    // 2F8AC 0061;	
    // (憲) CJK COMPATIBILITY IDEOGRAPH-2F8AC	[FB40 E1B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8AC, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE1B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_027)
{
    // 2F8AC 0041;	
    // (憲) CJK COMPATIBILITY IDEOGRAPH-2F8AC	[FB40 E1B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8AC, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE1B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_028)
{
    // 2F8AC 0062;	
    // (憲) CJK COMPATIBILITY IDEOGRAPH-2F8AC	[FB40 E1B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8AC, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE1B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_029)
{
    // 2F8AF 0021;	
    // (懞) CJK COMPATIBILITY IDEOGRAPH-2F8AF	[FB40 E1DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8AF, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE1DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_030)
{
    // 2F8AF 003F;	
    // (懞) CJK COMPATIBILITY IDEOGRAPH-2F8AF	[FB40 E1DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8AF, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE1DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_031)
{
    // 2F8AF 0061;	
    // (懞) CJK COMPATIBILITY IDEOGRAPH-2F8AF	[FB40 E1DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8AF, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE1DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_032)
{
    // 2F8AF 0041;	
    // (懞) CJK COMPATIBILITY IDEOGRAPH-2F8AF	[FB40 E1DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8AF, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE1DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_033)
{
    // 2F8AF 0062;	
    // (懞) CJK COMPATIBILITY IDEOGRAPH-2F8AF	[FB40 E1DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8AF, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE1DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_034)
{
    // FA40 0021;	
    // (懲) CJK COMPATIBILITY IDEOGRAPH-FA40	[FB40 E1F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA40, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE1F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_035)
{
    // FA8B 0021;	
    // (懲) CJK COMPATIBILITY IDEOGRAPH-FA8B	[FB40 E1F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA8B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE1F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_036)
{
    // 2F8B0 0021;	
    // (懲) CJK COMPATIBILITY IDEOGRAPH-2F8B0	[FB40 E1F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B0, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE1F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_037)
{
    // FA40 003F;	
    // (懲) CJK COMPATIBILITY IDEOGRAPH-FA40	[FB40 E1F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA40, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE1F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_038)
{
    // FA8B 003F;	
    // (懲) CJK COMPATIBILITY IDEOGRAPH-FA8B	[FB40 E1F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA8B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE1F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_039)
{
    // 2F8B0 003F;	
    // (懲) CJK COMPATIBILITY IDEOGRAPH-2F8B0	[FB40 E1F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B0, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE1F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_040)
{
    // FA40 0061;	
    // (懲) CJK COMPATIBILITY IDEOGRAPH-FA40	[FB40 E1F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA40, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE1F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_041)
{
    // FA8B 0061;	
    // (懲) CJK COMPATIBILITY IDEOGRAPH-FA8B	[FB40 E1F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA8B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE1F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_042)
{
    // 2F8B0 0061;	
    // (懲) CJK COMPATIBILITY IDEOGRAPH-2F8B0	[FB40 E1F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B0, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE1F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_043)
{
    // FA40 0041;	
    // (懲) CJK COMPATIBILITY IDEOGRAPH-FA40	[FB40 E1F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA40, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE1F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_044)
{
    // FA8B 0041;	
    // (懲) CJK COMPATIBILITY IDEOGRAPH-FA8B	[FB40 E1F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA8B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE1F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_045)
{
    // 2F8B0 0041;	
    // (懲) CJK COMPATIBILITY IDEOGRAPH-2F8B0	[FB40 E1F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8B0, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE1F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_046)
{
    // FA40 0062;	
    // (懲) CJK COMPATIBILITY IDEOGRAPH-FA40	[FB40 E1F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA40, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE1F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_047)
{
    // FA8B 0062;	
    // (懲) CJK COMPATIBILITY IDEOGRAPH-FA8B	[FB40 E1F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA8B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE1F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_048)
{
    // 2F8B0 0062;	
    // (懲) CJK COMPATIBILITY IDEOGRAPH-2F8B0	[FB40 E1F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B0, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE1F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_049)
{
    // F90D 0021;	
    // (懶) CJK COMPATIBILITY IDEOGRAPH-F90D	[FB40 E1F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF90D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE1F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_050)
{
    // 2F8B1 0021;	
    // (懶) CJK COMPATIBILITY IDEOGRAPH-2F8B1	[FB40 E1F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B1, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE1F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_051)
{
    // F90D 003F;	
    // (懶) CJK COMPATIBILITY IDEOGRAPH-F90D	[FB40 E1F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF90D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE1F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_052)
{
    // 2F8B1 003F;	
    // (懶) CJK COMPATIBILITY IDEOGRAPH-2F8B1	[FB40 E1F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B1, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE1F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_053)
{
    // F90D 0061;	
    // (懶) CJK COMPATIBILITY IDEOGRAPH-F90D	[FB40 E1F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF90D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE1F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_054)
{
    // 2F8B1 0061;	
    // (懶) CJK COMPATIBILITY IDEOGRAPH-2F8B1	[FB40 E1F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B1, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE1F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_055)
{
    // F90D 0041;	
    // (懶) CJK COMPATIBILITY IDEOGRAPH-F90D	[FB40 E1F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF90D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE1F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_056)
{
    // 2F8B1 0041;	
    // (懶) CJK COMPATIBILITY IDEOGRAPH-2F8B1	[FB40 E1F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8B1, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE1F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_057)
{
    // F90D 0062;	
    // (懶) CJK COMPATIBILITY IDEOGRAPH-F90D	[FB40 E1F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF90D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE1F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_058)
{
    // 2F8B1 0062;	
    // (懶) CJK COMPATIBILITY IDEOGRAPH-2F8B1	[FB40 E1F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B1, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE1F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_059)
{
    // F990 0021;	
    // (戀) CJK COMPATIBILITY IDEOGRAPH-F990	[FB40 E200 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF990, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE200, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_060)
{
    // F990 003F;	
    // (戀) CJK COMPATIBILITY IDEOGRAPH-F990	[FB40 E200 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF990, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE200, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_061)
{
    // F990 0061;	
    // (戀) CJK COMPATIBILITY IDEOGRAPH-F990	[FB40 E200 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF990, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE200, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_062)
{
    // F990 0041;	
    // (戀) CJK COMPATIBILITY IDEOGRAPH-F990	[FB40 E200 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF990, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE200, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_063)
{
    // F990 0062;	
    // (戀) CJK COMPATIBILITY IDEOGRAPH-F990	[FB40 E200 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF990, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE200, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_064)
{
    // 2F3D 0021;	
    // (⼽) KANGXI RADICAL HALBERD	[FB40 E208 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F3D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE208, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_065)
{
    // 2F3D 003F;	
    // (⼽) KANGXI RADICAL HALBERD	[FB40 E208 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F3D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE208, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_066)
{
    // 2F3D 0061;	
    // (⼽) KANGXI RADICAL HALBERD	[FB40 E208 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F3D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE208, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_067)
{
    // 2F3D 0041;	
    // (⼽) KANGXI RADICAL HALBERD	[FB40 E208 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F3D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE208, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_068)
{
    // 2F3D 0062;	
    // (⼽) KANGXI RADICAL HALBERD	[FB40 E208 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F3D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE208, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_069)
{
    // 2F8B2 0021;	
    // (成) CJK COMPATIBILITY IDEOGRAPH-2F8B2	[FB40 E210 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B2, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE210, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_070)
{
    // 2F8B2 003F;	
    // (成) CJK COMPATIBILITY IDEOGRAPH-2F8B2	[FB40 E210 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B2, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE210, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_071)
{
    // 2F8B2 0061;	
    // (成) CJK COMPATIBILITY IDEOGRAPH-2F8B2	[FB40 E210 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B2, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE210, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_072)
{
    // 2F8B2 0041;	
    // (成) CJK COMPATIBILITY IDEOGRAPH-2F8B2	[FB40 E210 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8B2, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE210, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_073)
{
    // 2F8B2 0062;	
    // (成) CJK COMPATIBILITY IDEOGRAPH-2F8B2	[FB40 E210 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B2, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE210, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_074)
{
    // 2F8B3 0021;	
    // (戛) CJK COMPATIBILITY IDEOGRAPH-2F8B3	[FB40 E21B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B3, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE21B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_075)
{
    // 2F8B3 003F;	
    // (戛) CJK COMPATIBILITY IDEOGRAPH-2F8B3	[FB40 E21B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B3, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE21B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_076)
{
    // 2F8B3 0061;	
    // (戛) CJK COMPATIBILITY IDEOGRAPH-2F8B3	[FB40 E21B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B3, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE21B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_077)
{
    // 2F8B3 0041;	
    // (戛) CJK COMPATIBILITY IDEOGRAPH-2F8B3	[FB40 E21B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8B3, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE21B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_078)
{
    // 2F8B3 0062;	
    // (戛) CJK COMPATIBILITY IDEOGRAPH-2F8B3	[FB40 E21B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B3, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE21B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_079)
{
    // F9D2 0021;	
    // (戮) CJK COMPATIBILITY IDEOGRAPH-F9D2	[FB40 E22E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D2, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE22E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_080)
{
    // F9D2 003F;	
    // (戮) CJK COMPATIBILITY IDEOGRAPH-F9D2	[FB40 E22E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D2, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE22E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_081)
{
    // F9D2 0061;	
    // (戮) CJK COMPATIBILITY IDEOGRAPH-F9D2	[FB40 E22E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D2, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE22E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_082)
{
    // F9D2 0041;	
    // (戮) CJK COMPATIBILITY IDEOGRAPH-F9D2	[FB40 E22E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9D2, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE22E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_083)
{
    // F9D2 0062;	
    // (戮) CJK COMPATIBILITY IDEOGRAPH-F9D2	[FB40 E22E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D2, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE22E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_084)
{
    // FA8C 0021;	
    // (戴) CJK COMPATIBILITY IDEOGRAPH-FA8C	[FB40 E234 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA8C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE234, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_085)
{
    // FA8C 003F;	
    // (戴) CJK COMPATIBILITY IDEOGRAPH-FA8C	[FB40 E234 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA8C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE234, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_086)
{
    // FA8C 0061;	
    // (戴) CJK COMPATIBILITY IDEOGRAPH-FA8C	[FB40 E234 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA8C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE234, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_087)
{
    // FA8C 0041;	
    // (戴) CJK COMPATIBILITY IDEOGRAPH-FA8C	[FB40 E234 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA8C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE234, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_088)
{
    // FA8C 0062;	
    // (戴) CJK COMPATIBILITY IDEOGRAPH-FA8C	[FB40 E234 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA8C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE234, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_089)
{
    // 2F3E 0021;	
    // (⼾) KANGXI RADICAL DOOR	[FB40 E236 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F3E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE236, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_090)
{
    // 2F3E 003F;	
    // (⼾) KANGXI RADICAL DOOR	[FB40 E236 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F3E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE236, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_091)
{
    // 2F3E 0061;	
    // (⼾) KANGXI RADICAL DOOR	[FB40 E236 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F3E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE236, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_092)
{
    // 2F3E 0041;	
    // (⼾) KANGXI RADICAL DOOR	[FB40 E236 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F3E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE236, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_093)
{
    // 2F3E 0062;	
    // (⼾) KANGXI RADICAL DOOR	[FB40 E236 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F3E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE236, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_094)
{
    // 2F3F 0021;	
    // (⼿) KANGXI RADICAL HAND	[FB40 E24B 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F3F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE24B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_095)
{
    // 1F210 0021;	
    // (🈐) SQUARED CJK UNIFIED IDEOGRAPH-624B	[FB40 E24B 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F210, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE24B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_096)
{
    // 2F3F 003F;	
    // (⼿) KANGXI RADICAL HAND	[FB40 E24B 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F3F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE24B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_097)
{
    // 1F210 003F;	
    // (🈐) SQUARED CJK UNIFIED IDEOGRAPH-624B	[FB40 E24B 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F210, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE24B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_098)
{
    // 2F3F 0061;	
    // (⼿) KANGXI RADICAL HAND	[FB40 E24B 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F3F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE24B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_099)
{
    // 2F3F 0041;	
    // (⼿) KANGXI RADICAL HAND	[FB40 E24B 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F3F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE24B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_100)
{
    // 1F210 0061;	
    // (🈐) SQUARED CJK UNIFIED IDEOGRAPH-624B	[FB40 E24B 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F210, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE24B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_101)
{
    // 1F210 0041;	
    // (🈐) SQUARED CJK UNIFIED IDEOGRAPH-624B	[FB40 E24B 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F210, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE24B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_102)
{
    // 2F3F 0062;	
    // (⼿) KANGXI RADICAL HAND	[FB40 E24B 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F3F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE24B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_103)
{
    // 1F210 0062;	
    // (🈐) SQUARED CJK UNIFIED IDEOGRAPH-624B	[FB40 E24B 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F210, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE24B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_104)
{
    // 2E98 0021;	
    // (⺘) CJK RADICAL HAND	[FB40 E24C 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E98, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE24C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_105)
{
    // 2E98 003F;	
    // (⺘) CJK RADICAL HAND	[FB40 E24C 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E98, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE24C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_106)
{
    // 2E98 0061;	
    // (⺘) CJK RADICAL HAND	[FB40 E24C 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E98, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE24C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_107)
{
    // 2E98 0041;	
    // (⺘) CJK RADICAL HAND	[FB40 E24C 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2E98, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE24C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_108)
{
    // 2E98 0062;	
    // (⺘) CJK RADICAL HAND	[FB40 E24C 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E98, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE24C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_109)
{
    // 1F231 0021;	
    // (🈱) SQUARED CJK UNIFIED IDEOGRAPH-6253	[FB40 E253 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F231, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE253, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_110)
{
    // 1F231 003F;	
    // (🈱) SQUARED CJK UNIFIED IDEOGRAPH-6253	[FB40 E253 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F231, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE253, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_111)
{
    // 1F231 0061;	
    // (🈱) SQUARED CJK UNIFIED IDEOGRAPH-6253	[FB40 E253 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F231, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE253, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_112)
{
    // 1F231 0041;	
    // (🈱) SQUARED CJK UNIFIED IDEOGRAPH-6253	[FB40 E253 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F231, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE253, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_113)
{
    // 1F231 0062;	
    // (🈱) SQUARED CJK UNIFIED IDEOGRAPH-6253	[FB40 E253 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F231, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE253, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_114)
{
    // 2F8B4 0021;	
    // (扝) CJK COMPATIBILITY IDEOGRAPH-2F8B4	[FB40 E25D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B4, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE25D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_115)
{
    // 2F8B4 003F;	
    // (扝) CJK COMPATIBILITY IDEOGRAPH-2F8B4	[FB40 E25D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B4, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE25D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_116)
{
    // 2F8B4 0061;	
    // (扝) CJK COMPATIBILITY IDEOGRAPH-2F8B4	[FB40 E25D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B4, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE25D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_117)
{
    // 2F8B4 0041;	
    // (扝) CJK COMPATIBILITY IDEOGRAPH-2F8B4	[FB40 E25D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8B4, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE25D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_118)
{
    // 2F8B4 0062;	
    // (扝) CJK COMPATIBILITY IDEOGRAPH-2F8B4	[FB40 E25D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B4, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE25D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_119)
{
    // 1F227 0021;	
    // (🈧) SQUARED CJK UNIFIED IDEOGRAPH-6295	[FB40 E295 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F227, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE295, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_120)
{
    // 1F227 003F;	
    // (🈧) SQUARED CJK UNIFIED IDEOGRAPH-6295	[FB40 E295 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F227, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE295, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_121)
{
    // 1F227 0061;	
    // (🈧) SQUARED CJK UNIFIED IDEOGRAPH-6295	[FB40 E295 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F227, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE295, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_122)
{
    // 1F227 0041;	
    // (🈧) SQUARED CJK UNIFIED IDEOGRAPH-6295	[FB40 E295 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F227, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE295, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_123)
{
    // 1F227 0062;	
    // (🈧) SQUARED CJK UNIFIED IDEOGRAPH-6295	[FB40 E295 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F227, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE295, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_124)
{
    // 2F8B5 0021;	
    // (抱) CJK COMPATIBILITY IDEOGRAPH-2F8B5	[FB40 E2B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B5, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE2B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_125)
{
    // 2F8B5 003F;	
    // (抱) CJK COMPATIBILITY IDEOGRAPH-2F8B5	[FB40 E2B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B5, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE2B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_126)
{
    // 2F8B5 0061;	
    // (抱) CJK COMPATIBILITY IDEOGRAPH-2F8B5	[FB40 E2B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B5, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE2B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_127)
{
    // 2F8B5 0041;	
    // (抱) CJK COMPATIBILITY IDEOGRAPH-2F8B5	[FB40 E2B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8B5, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE2B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_128)
{
    // 2F8B5 0062;	
    // (抱) CJK COMPATIBILITY IDEOGRAPH-2F8B5	[FB40 E2B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B5, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE2B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_129)
{
    // F925 0021;	
    // (拉) CJK COMPATIBILITY IDEOGRAPH-F925	[FB40 E2C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF925, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE2C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_130)
{
    // F925 003F;	
    // (拉) CJK COMPATIBILITY IDEOGRAPH-F925	[FB40 E2C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF925, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE2C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_131)
{
    // F925 0061;	
    // (拉) CJK COMPATIBILITY IDEOGRAPH-F925	[FB40 E2C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF925, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE2C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_132)
{
    // F925 0041;	
    // (拉) CJK COMPATIBILITY IDEOGRAPH-F925	[FB40 E2C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF925, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE2C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_133)
{
    // F925 0062;	
    // (拉) CJK COMPATIBILITY IDEOGRAPH-F925	[FB40 E2C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF925, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE2C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_134)
{
    // F95B 0021;	
    // (拏) CJK COMPATIBILITY IDEOGRAPH-F95B	[FB40 E2CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF95B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE2CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_135)
{
    // F95B 003F;	
    // (拏) CJK COMPATIBILITY IDEOGRAPH-F95B	[FB40 E2CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF95B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE2CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_136)
{
    // F95B 0061;	
    // (拏) CJK COMPATIBILITY IDEOGRAPH-F95B	[FB40 E2CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF95B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE2CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_137)
{
    // F95B 0041;	
    // (拏) CJK COMPATIBILITY IDEOGRAPH-F95B	[FB40 E2CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF95B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE2CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_138)
{
    // F95B 0062;	
    // (拏) CJK COMPATIBILITY IDEOGRAPH-F95B	[FB40 E2CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF95B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE2CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_139)
{
    // FA02 0021;	
    // (拓) CJK COMPATIBILITY IDEOGRAPH-FA02	[FB40 E2D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA02, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE2D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_140)
{
    // FA02 003F;	
    // (拓) CJK COMPATIBILITY IDEOGRAPH-FA02	[FB40 E2D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA02, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE2D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_141)
{
    // FA02 0061;	
    // (拓) CJK COMPATIBILITY IDEOGRAPH-FA02	[FB40 E2D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA02, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE2D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_142)
{
    // FA02 0041;	
    // (拓) CJK COMPATIBILITY IDEOGRAPH-FA02	[FB40 E2D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA02, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE2D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_143)
{
    // FA02 0062;	
    // (拓) CJK COMPATIBILITY IDEOGRAPH-FA02	[FB40 E2D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA02, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE2D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_144)
{
    // 2F8B6 0021;	
    // (拔) CJK COMPATIBILITY IDEOGRAPH-2F8B6	[FB40 E2D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B6, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE2D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_145)
{
    // 2F8B6 003F;	
    // (拔) CJK COMPATIBILITY IDEOGRAPH-2F8B6	[FB40 E2D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B6, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE2D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_146)
{
    // 2F8B6 0061;	
    // (拔) CJK COMPATIBILITY IDEOGRAPH-2F8B6	[FB40 E2D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B6, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE2D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_147)
{
    // 2F8B6 0041;	
    // (拔) CJK COMPATIBILITY IDEOGRAPH-2F8B6	[FB40 E2D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8B6, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE2D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_148)
{
    // 2F8B6 0062;	
    // (拔) CJK COMPATIBILITY IDEOGRAPH-2F8B6	[FB40 E2D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B6, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE2D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_149)
{
    // 2F8BA 0021;	
    // (拼) CJK COMPATIBILITY IDEOGRAPH-2F8BA	[FB40 E2FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8BA, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE2FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_150)
{
    // 2F8BA 003F;	
    // (拼) CJK COMPATIBILITY IDEOGRAPH-2F8BA	[FB40 E2FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8BA, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE2FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_151)
{
    // 2F8BA 0061;	
    // (拼) CJK COMPATIBILITY IDEOGRAPH-2F8BA	[FB40 E2FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8BA, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE2FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_152)
{
    // 2F8BA 0041;	
    // (拼) CJK COMPATIBILITY IDEOGRAPH-2F8BA	[FB40 E2FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8BA, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE2FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_153)
{
    // 2F8BA 0062;	
    // (拼) CJK COMPATIBILITY IDEOGRAPH-2F8BA	[FB40 E2FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8BA, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE2FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_154)
{
    // F973 0021;	
    // (拾) CJK COMPATIBILITY IDEOGRAPH-F973	[FB40 E2FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF973, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE2FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_155)
{
    // F973 003F;	
    // (拾) CJK COMPATIBILITY IDEOGRAPH-F973	[FB40 E2FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF973, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE2FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_156)
{
    // F973 0061;	
    // (拾) CJK COMPATIBILITY IDEOGRAPH-F973	[FB40 E2FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF973, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE2FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_157)
{
    // F973 0041;	
    // (拾) CJK COMPATIBILITY IDEOGRAPH-F973	[FB40 E2FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF973, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE2FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_158)
{
    // F973 0062;	
    // (拾) CJK COMPATIBILITY IDEOGRAPH-F973	[FB40 E2FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF973, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE2FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_159)
{
    // 1F22F 0021;	
    // (🈯) SQUARED CJK UNIFIED IDEOGRAPH-6307	[FB40 E307 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F22F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE307, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_160)
{
    // 1F22F 003F;	
    // (🈯) SQUARED CJK UNIFIED IDEOGRAPH-6307	[FB40 E307 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F22F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE307, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_161)
{
    // 1F22F 0061;	
    // (🈯) SQUARED CJK UNIFIED IDEOGRAPH-6307	[FB40 E307 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F22F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE307, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_162)
{
    // 1F22F 0041;	
    // (🈯) SQUARED CJK UNIFIED IDEOGRAPH-6307	[FB40 E307 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F22F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE307, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_163)
{
    // 1F22F 0062;	
    // (🈯) SQUARED CJK UNIFIED IDEOGRAPH-6307	[FB40 E307 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F22F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE307, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_164)
{
    // 2F8B9 0021;	
    // (挽) CJK COMPATIBILITY IDEOGRAPH-2F8B9	[FB40 E33D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B9, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE33D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_165)
{
    // 2F8B9 003F;	
    // (挽) CJK COMPATIBILITY IDEOGRAPH-2F8B9	[FB40 E33D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B9, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE33D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_166)
{
    // 2F8B9 0061;	
    // (挽) CJK COMPATIBILITY IDEOGRAPH-2F8B9	[FB40 E33D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B9, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE33D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_167)
{
    // 2F8B9 0041;	
    // (挽) CJK COMPATIBILITY IDEOGRAPH-2F8B9	[FB40 E33D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8B9, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE33D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_168)
{
    // 2F8B9 0062;	
    // (挽) CJK COMPATIBILITY IDEOGRAPH-2F8B9	[FB40 E33D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B9, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE33D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_169)
{
    // 2F8B7 0021;	
    // (捐) CJK COMPATIBILITY IDEOGRAPH-2F8B7	[FB40 E350 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B7, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE350, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_170)
{
    // 2F8B7 003F;	
    // (捐) CJK COMPATIBILITY IDEOGRAPH-2F8B7	[FB40 E350 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B7, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE350, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_171)
{
    // 2F8B7 0061;	
    // (捐) CJK COMPATIBILITY IDEOGRAPH-2F8B7	[FB40 E350 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B7, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE350, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_172)
{
    // 2F8B7 0041;	
    // (捐) CJK COMPATIBILITY IDEOGRAPH-2F8B7	[FB40 E350 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8B7, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE350, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_173)
{
    // 2F8B7 0062;	
    // (捐) CJK COMPATIBILITY IDEOGRAPH-2F8B7	[FB40 E350 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B7, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE350, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_174)
{
    // 1F228 0021;	
    // (🈨) SQUARED CJK UNIFIED IDEOGRAPH-6355	[FB40 E355 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F228, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE355, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_175)
{
    // 1F228 003F;	
    // (🈨) SQUARED CJK UNIFIED IDEOGRAPH-6355	[FB40 E355 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F228, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE355, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_176)
{
    // 1F228 0061;	
    // (🈨) SQUARED CJK UNIFIED IDEOGRAPH-6355	[FB40 E355 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F228, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE355, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_177)
{
    // 1F228 0041;	
    // (🈨) SQUARED CJK UNIFIED IDEOGRAPH-6355	[FB40 E355 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F228, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE355, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_178)
{
    // 1F228 0062;	
    // (🈨) SQUARED CJK UNIFIED IDEOGRAPH-6355	[FB40 E355 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F228, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE355, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_179)
{
    // 2F8BB 0021;	
    // (捨) CJK COMPATIBILITY IDEOGRAPH-2F8BB	[FB40 E368 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8BB, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE368, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_180)
{
    // 2F8BB 003F;	
    // (捨) CJK COMPATIBILITY IDEOGRAPH-2F8BB	[FB40 E368 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8BB, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE368, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_181)
{
    // 2F8BB 0061;	
    // (捨) CJK COMPATIBILITY IDEOGRAPH-2F8BB	[FB40 E368 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8BB, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE368, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_182)
{
    // 2F8BB 0041;	
    // (捨) CJK COMPATIBILITY IDEOGRAPH-2F8BB	[FB40 E368 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8BB, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE368, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_183)
{
    // 2F8BB 0062;	
    // (捨) CJK COMPATIBILITY IDEOGRAPH-2F8BB	[FB40 E368 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8BB, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE368, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_184)
{
    // F9A4 0021;	
    // (捻) CJK COMPATIBILITY IDEOGRAPH-F9A4	[FB40 E37B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A4, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE37B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_185)
{
    // F9A4 003F;	
    // (捻) CJK COMPATIBILITY IDEOGRAPH-F9A4	[FB40 E37B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A4, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE37B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_186)
{
    // F9A4 0061;	
    // (捻) CJK COMPATIBILITY IDEOGRAPH-F9A4	[FB40 E37B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A4, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE37B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_187)
{
    // F9A4 0041;	
    // (捻) CJK COMPATIBILITY IDEOGRAPH-F9A4	[FB40 E37B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9A4, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE37B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_188)
{
    // F9A4 0062;	
    // (捻) CJK COMPATIBILITY IDEOGRAPH-F9A4	[FB40 E37B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A4, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE37B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_189)
{
    // 2F8BC 0021;	
    // (掃) CJK COMPATIBILITY IDEOGRAPH-2F8BC	[FB40 E383 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8BC, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE383, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_190)
{
    // 2F8BC 003F;	
    // (掃) CJK COMPATIBILITY IDEOGRAPH-2F8BC	[FB40 E383 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8BC, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE383, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_191)
{
    // 2F8BC 0061;	
    // (掃) CJK COMPATIBILITY IDEOGRAPH-2F8BC	[FB40 E383 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8BC, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_192)
{
    // 2F8BC 0041;	
    // (掃) CJK COMPATIBILITY IDEOGRAPH-2F8BC	[FB40 E383 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8BC, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_193)
{
    // 2F8BC 0062;	
    // (掃) CJK COMPATIBILITY IDEOGRAPH-2F8BC	[FB40 E383 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8BC, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE383, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_194)
{
    // F975 0021;	
    // (掠) CJK COMPATIBILITY IDEOGRAPH-F975	[FB40 E3A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF975, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE3A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_195)
{
    // F975 003F;	
    // (掠) CJK COMPATIBILITY IDEOGRAPH-F975	[FB40 E3A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF975, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE3A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_196)
{
    // F975 0061;	
    // (掠) CJK COMPATIBILITY IDEOGRAPH-F975	[FB40 E3A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF975, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE3A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_197)
{
    // F975 0041;	
    // (掠) CJK COMPATIBILITY IDEOGRAPH-F975	[FB40 E3A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF975, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE3A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_198)
{
    // F975 0062;	
    // (掠) CJK COMPATIBILITY IDEOGRAPH-F975	[FB40 E3A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF975, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE3A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_199)
{
    // 2F8C1 0021;	
    // (掩) CJK COMPATIBILITY IDEOGRAPH-2F8C1	[FB40 E3A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C1, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE3A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_200)
{
    // 2F8C1 003F;	
    // (掩) CJK COMPATIBILITY IDEOGRAPH-2F8C1	[FB40 E3A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C1, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE3A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_201)
{
    // 2F8C1 0061;	
    // (掩) CJK COMPATIBILITY IDEOGRAPH-2F8C1	[FB40 E3A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C1, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE3A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_202)
{
    // 2F8C1 0041;	
    // (掩) CJK COMPATIBILITY IDEOGRAPH-2F8C1	[FB40 E3A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8C1, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE3A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_203)
{
    // 2F8C1 0062;	
    // (掩) CJK COMPATIBILITY IDEOGRAPH-2F8C1	[FB40 E3A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C1, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE3A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_204)
{
    // FA8D 0021;	
    // (揄) CJK COMPATIBILITY IDEOGRAPH-FA8D	[FB40 E3C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA8D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE3C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_205)
{
    // FA8D 003F;	
    // (揄) CJK COMPATIBILITY IDEOGRAPH-FA8D	[FB40 E3C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA8D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE3C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_206)
{
    // FA8D 0061;	
    // (揄) CJK COMPATIBILITY IDEOGRAPH-FA8D	[FB40 E3C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA8D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE3C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_207)
{
    // FA8D 0041;	
    // (揄) CJK COMPATIBILITY IDEOGRAPH-FA8D	[FB40 E3C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA8D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE3C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_208)
{
    // FA8D 0062;	
    // (揄) CJK COMPATIBILITY IDEOGRAPH-FA8D	[FB40 E3C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA8D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE3C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_209)
{
    // 2F8C0 0021;	
    // (揅) CJK COMPATIBILITY IDEOGRAPH-2F8C0	[FB40 E3C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C0, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE3C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_210)
{
    // 2F8C0 003F;	
    // (揅) CJK COMPATIBILITY IDEOGRAPH-2F8C0	[FB40 E3C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C0, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE3C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_211)
{
    // 2F8C0 0061;	
    // (揅) CJK COMPATIBILITY IDEOGRAPH-2F8C0	[FB40 E3C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C0, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE3C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_212)
{
    // 2F8C0 0041;	
    // (揅) CJK COMPATIBILITY IDEOGRAPH-2F8C0	[FB40 E3C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8C0, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE3C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_213)
{
    // 2F8C0 0062;	
    // (揅) CJK COMPATIBILITY IDEOGRAPH-2F8C0	[FB40 E3C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C0, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE3C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_214)
{
    // 2F8BD 0021;	
    // (揤) CJK COMPATIBILITY IDEOGRAPH-2F8BD	[FB40 E3E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8BD, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE3E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_215)
{
    // 2F8BD 003F;	
    // (揤) CJK COMPATIBILITY IDEOGRAPH-2F8BD	[FB40 E3E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8BD, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE3E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_216)
{
    // 2F8BD 0061;	
    // (揤) CJK COMPATIBILITY IDEOGRAPH-2F8BD	[FB40 E3E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8BD, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE3E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_217)
{
    // 2F8BD 0041;	
    // (揤) CJK COMPATIBILITY IDEOGRAPH-2F8BD	[FB40 E3E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8BD, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE3E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_218)
{
    // 2F8BD 0062;	
    // (揤) CJK COMPATIBILITY IDEOGRAPH-2F8BD	[FB40 E3E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8BD, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE3E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_219)
{
    // FA8E 0021;	
    // (搜) CJK COMPATIBILITY IDEOGRAPH-FA8E	[FB40 E41C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA8E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE41C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_220)
{
    // FA8E 003F;	
    // (搜) CJK COMPATIBILITY IDEOGRAPH-FA8E	[FB40 E41C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA8E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE41C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_221)
{
    // FA8E 0061;	
    // (搜) CJK COMPATIBILITY IDEOGRAPH-FA8E	[FB40 E41C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA8E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE41C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_222)
{
    // FA8E 0041;	
    // (搜) CJK COMPATIBILITY IDEOGRAPH-FA8E	[FB40 E41C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA8E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE41C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_223)
{
    // FA8E 0062;	
    // (搜) CJK COMPATIBILITY IDEOGRAPH-FA8E	[FB40 E41C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA8E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE41C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_224)
{
    // 2F8BF 0021;	
    // (搢) CJK COMPATIBILITY IDEOGRAPH-2F8BF	[FB40 E422 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8BF, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE422, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_225)
{
    // 2F8BF 003F;	
    // (搢) CJK COMPATIBILITY IDEOGRAPH-2F8BF	[FB40 E422 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8BF, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE422, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_226)
{
    // 2F8BF 0061;	
    // (搢) CJK COMPATIBILITY IDEOGRAPH-2F8BF	[FB40 E422 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8BF, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE422, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_227)
{
    // 2F8BF 0041;	
    // (搢) CJK COMPATIBILITY IDEOGRAPH-2F8BF	[FB40 E422 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8BF, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE422, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_228)
{
    // 2F8BF 0062;	
    // (搢) CJK COMPATIBILITY IDEOGRAPH-2F8BF	[FB40 E422 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8BF, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE422, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_229)
{
    // FA8F 0021;	
    // (摒) CJK COMPATIBILITY IDEOGRAPH-FA8F	[FB40 E452 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA8F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE452, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_230)
{
    // FA8F 003F;	
    // (摒) CJK COMPATIBILITY IDEOGRAPH-FA8F	[FB40 E452 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA8F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE452, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_231)
{
    // FA8F 0061;	
    // (摒) CJK COMPATIBILITY IDEOGRAPH-FA8F	[FB40 E452 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA8F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE452, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_232)
{
    // FA8F 0041;	
    // (摒) CJK COMPATIBILITY IDEOGRAPH-FA8F	[FB40 E452 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA8F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE452, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_233)
{
    // FA8F 0062;	
    // (摒) CJK COMPATIBILITY IDEOGRAPH-FA8F	[FB40 E452 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA8F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE452, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_234)
{
    // 2F8C3 0021;	
    // (摩) CJK COMPATIBILITY IDEOGRAPH-2F8C3	[FB40 E469 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C3, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE469, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_235)
{
    // 2F8C3 003F;	
    // (摩) CJK COMPATIBILITY IDEOGRAPH-2F8C3	[FB40 E469 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C3, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE469, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_236)
{
    // 2F8C3 0061;	
    // (摩) CJK COMPATIBILITY IDEOGRAPH-2F8C3	[FB40 E469 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C3, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE469, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_237)
{
    // 2F8C3 0041;	
    // (摩) CJK COMPATIBILITY IDEOGRAPH-2F8C3	[FB40 E469 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8C3, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE469, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_238)
{
    // 2F8C3 0062;	
    // (摩) CJK COMPATIBILITY IDEOGRAPH-2F8C3	[FB40 E469 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C3, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE469, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_239)
{
    // 2F8C6 0021;	
    // (摷) CJK COMPATIBILITY IDEOGRAPH-2F8C6	[FB40 E477 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C6, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE477, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_240)
{
    // 2F8C6 003F;	
    // (摷) CJK COMPATIBILITY IDEOGRAPH-2F8C6	[FB40 E477 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C6, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE477, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_241)
{
    // 2F8C6 0061;	
    // (摷) CJK COMPATIBILITY IDEOGRAPH-2F8C6	[FB40 E477 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C6, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE477, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_242)
{
    // 2F8C6 0041;	
    // (摷) CJK COMPATIBILITY IDEOGRAPH-2F8C6	[FB40 E477 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8C6, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE477, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_243)
{
    // 2F8C6 0062;	
    // (摷) CJK COMPATIBILITY IDEOGRAPH-2F8C6	[FB40 E477 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C6, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE477, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_244)
{
    // 2F8C4 0021;	
    // (摾) CJK COMPATIBILITY IDEOGRAPH-2F8C4	[FB40 E47E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C4, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE47E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_245)
{
    // 2F8C4 003F;	
    // (摾) CJK COMPATIBILITY IDEOGRAPH-2F8C4	[FB40 E47E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C4, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE47E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_246)
{
    // 2F8C4 0061;	
    // (摾) CJK COMPATIBILITY IDEOGRAPH-2F8C4	[FB40 E47E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C4, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE47E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_247)
{
    // 2F8C4 0041;	
    // (摾) CJK COMPATIBILITY IDEOGRAPH-2F8C4	[FB40 E47E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8C4, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE47E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_248)
{
    // 2F8C4 0062;	
    // (摾) CJK COMPATIBILITY IDEOGRAPH-2F8C4	[FB40 E47E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C4, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE47E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_249)
{
    // F991 0021;	
    // (撚) CJK COMPATIBILITY IDEOGRAPH-F991	[FB40 E49A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF991, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE49A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_250)
{
    // F991 003F;	
    // (撚) CJK COMPATIBILITY IDEOGRAPH-F991	[FB40 E49A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF991, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE49A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_251)
{
    // F991 0061;	
    // (撚) CJK COMPATIBILITY IDEOGRAPH-F991	[FB40 E49A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF991, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE49A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_252)
{
    // F991 0041;	
    // (撚) CJK COMPATIBILITY IDEOGRAPH-F991	[FB40 E49A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF991, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE49A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_253)
{
    // F991 0062;	
    // (撚) CJK COMPATIBILITY IDEOGRAPH-F991	[FB40 E49A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF991, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE49A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_254)
{
    // 2F8C5 0021;	
    // (撝) CJK COMPATIBILITY IDEOGRAPH-2F8C5	[FB40 E49D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C5, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE49D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_255)
{
    // 2F8C5 003F;	
    // (撝) CJK COMPATIBILITY IDEOGRAPH-2F8C5	[FB40 E49D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C5, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE49D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_256)
{
    // 2F8C5 0061;	
    // (撝) CJK COMPATIBILITY IDEOGRAPH-2F8C5	[FB40 E49D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C5, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE49D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_257)
{
    // 2F8C5 0041;	
    // (撝) CJK COMPATIBILITY IDEOGRAPH-2F8C5	[FB40 E49D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8C5, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE49D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_258)
{
    // 2F8C5 0062;	
    // (撝) CJK COMPATIBILITY IDEOGRAPH-2F8C5	[FB40 E49D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C5, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE49D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_259)
{
    // F930 0021;	
    // (擄) CJK COMPATIBILITY IDEOGRAPH-F930	[FB40 E4C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF930, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE4C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_260)
{
    // F930 003F;	
    // (擄) CJK COMPATIBILITY IDEOGRAPH-F930	[FB40 E4C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF930, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE4C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_261)
{
    // F930 0061;	
    // (擄) CJK COMPATIBILITY IDEOGRAPH-F930	[FB40 E4C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF930, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE4C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_262)
{
    // F930 0041;	
    // (擄) CJK COMPATIBILITY IDEOGRAPH-F930	[FB40 E4C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF930, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE4C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_263)
{
    // F930 0062;	
    // (擄) CJK COMPATIBILITY IDEOGRAPH-F930	[FB40 E4C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF930, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE4C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_264)
{
    // 2F40 0021;	
    // (⽀) KANGXI RADICAL BRANCH	[FB40 E52F 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F40, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE52F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_265)
{
    // 2F40 003F;	
    // (⽀) KANGXI RADICAL BRANCH	[FB40 E52F 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F40, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE52F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_266)
{
    // 2F40 0061;	
    // (⽀) KANGXI RADICAL BRANCH	[FB40 E52F 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F40, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE52F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_267)
{
    // 2F40 0041;	
    // (⽀) KANGXI RADICAL BRANCH	[FB40 E52F 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F40, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE52F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_268)
{
    // 2F40 0062;	
    // (⽀) KANGXI RADICAL BRANCH	[FB40 E52F 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F40, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE52F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_269)
{
    // 2F41 0021;	
    // (⽁) KANGXI RADICAL RAP	[FB40 E534 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F41, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE534, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_270)
{
    // 2F41 003F;	
    // (⽁) KANGXI RADICAL RAP	[FB40 E534 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F41, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE534, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_271)
{
    // 2F41 0061;	
    // (⽁) KANGXI RADICAL RAP	[FB40 E534 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F41, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE534, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_272)
{
    // 2F41 0041;	
    // (⽁) KANGXI RADICAL RAP	[FB40 E534 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F41, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE534, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_273)
{
    // 2F41 0062;	
    // (⽁) KANGXI RADICAL RAP	[FB40 E534 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F41, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE534, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_274)
{
    // 2E99 0021;	
    // (⺙) CJK RADICAL RAP	[FB40 E535 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E99, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE535, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_275)
{
    // 2E99 003F;	
    // (⺙) CJK RADICAL RAP	[FB40 E535 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E99, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE535, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_276)
{
    // 2E99 0061;	
    // (⺙) CJK RADICAL RAP	[FB40 E535 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E99, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE535, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_277)
{
    // 2E99 0041;	
    // (⺙) CJK RADICAL RAP	[FB40 E535 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2E99, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE535, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_278)
{
    // 2E99 0062;	
    // (⺙) CJK RADICAL RAP	[FB40 E535 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E99, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE535, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_279)
{
    // FA41 0021;	
    // (敏) CJK COMPATIBILITY IDEOGRAPH-FA41	[FB40 E54F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA41, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE54F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_280)
{
    // 2F8C8 0021;	
    // (敏) CJK COMPATIBILITY IDEOGRAPH-2F8C8	[FB40 E54F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C8, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE54F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_281)
{
    // FA41 003F;	
    // (敏) CJK COMPATIBILITY IDEOGRAPH-FA41	[FB40 E54F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA41, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE54F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_282)
{
    // 2F8C8 003F;	
    // (敏) CJK COMPATIBILITY IDEOGRAPH-2F8C8	[FB40 E54F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C8, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE54F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_283)
{
    // FA41 0061;	
    // (敏) CJK COMPATIBILITY IDEOGRAPH-FA41	[FB40 E54F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA41, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE54F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_284)
{
    // 2F8C8 0061;	
    // (敏) CJK COMPATIBILITY IDEOGRAPH-2F8C8	[FB40 E54F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C8, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE54F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_285)
{
    // FA41 0041;	
    // (敏) CJK COMPATIBILITY IDEOGRAPH-FA41	[FB40 E54F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA41, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE54F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_286)
{
    // 2F8C8 0041;	
    // (敏) CJK COMPATIBILITY IDEOGRAPH-2F8C8	[FB40 E54F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8C8, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE54F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_287)
{
    // FA41 0062;	
    // (敏) CJK COMPATIBILITY IDEOGRAPH-FA41	[FB40 E54F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA41, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE54F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_288)
{
    // 2F8C8 0062;	
    // (敏) CJK COMPATIBILITY IDEOGRAPH-2F8C8	[FB40 E54F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C8, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE54F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_289)
{
    // FA90 0021;	
    // (敖) CJK COMPATIBILITY IDEOGRAPH-FA90	[FB40 E556 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA90, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE556, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_290)
{
    // FA90 003F;	
    // (敖) CJK COMPATIBILITY IDEOGRAPH-FA90	[FB40 E556 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA90, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE556, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_291)
{
    // FA90 0061;	
    // (敖) CJK COMPATIBILITY IDEOGRAPH-FA90	[FB40 E556 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA90, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE556, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_292)
{
    // FA90 0041;	
    // (敖) CJK COMPATIBILITY IDEOGRAPH-FA90	[FB40 E556 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA90, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE556, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_293)
{
    // FA90 0062;	
    // (敖) CJK COMPATIBILITY IDEOGRAPH-FA90	[FB40 E556 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA90, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE556, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_294)
{
    // 2F8C9 0021;	
    // (敬) CJK COMPATIBILITY IDEOGRAPH-2F8C9	[FB40 E56C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C9, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE56C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_295)
{
    // 2F8C9 003F;	
    // (敬) CJK COMPATIBILITY IDEOGRAPH-2F8C9	[FB40 E56C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C9, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE56C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_296)
{
    // 2F8C9 0061;	
    // (敬) CJK COMPATIBILITY IDEOGRAPH-2F8C9	[FB40 E56C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C9, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE56C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_297)
{
    // 2F8C9 0041;	
    // (敬) CJK COMPATIBILITY IDEOGRAPH-2F8C9	[FB40 E56C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8C9, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE56C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_298)
{
    // 2F8C9 0062;	
    // (敬) CJK COMPATIBILITY IDEOGRAPH-2F8C9	[FB40 E56C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C9, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE56C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_299)
{
    // F969 0021;	
    // (數) CJK COMPATIBILITY IDEOGRAPH-F969	[FB40 E578 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF969, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE578, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_300)
{
    // F969 003F;	
    // (數) CJK COMPATIBILITY IDEOGRAPH-F969	[FB40 E578 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF969, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE578, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_301)
{
    // F969 0061;	
    // (數) CJK COMPATIBILITY IDEOGRAPH-F969	[FB40 E578 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF969, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE578, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_302)
{
    // F969 0041;	
    // (數) CJK COMPATIBILITY IDEOGRAPH-F969	[FB40 E578 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF969, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE578, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_303)
{
    // F969 0062;	
    // (數) CJK COMPATIBILITY IDEOGRAPH-F969	[FB40 E578 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF969, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE578, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_304)
{
    // 2F42 0021;	
    // (⽂) KANGXI RADICAL SCRIPT	[FB40 E587 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F42, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE587, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_305)
{
    // 3246 0021;	
    // (㉆) CIRCLED IDEOGRAPH SCHOOL	[FB40 E587 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3246, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE587, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_306)
{
    // 2F42 003F;	
    // (⽂) KANGXI RADICAL SCRIPT	[FB40 E587 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F42, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE587, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_307)
{
    // 3246 003F;	
    // (㉆) CIRCLED IDEOGRAPH SCHOOL	[FB40 E587 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3246, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE587, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_308)
{
    // 2F42 0061;	
    // (⽂) KANGXI RADICAL SCRIPT	[FB40 E587 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F42, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE587, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_309)
{
    // 2F42 0041;	
    // (⽂) KANGXI RADICAL SCRIPT	[FB40 E587 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F42, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE587, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_310)
{
    // 3246 0061;	
    // (㉆) CIRCLED IDEOGRAPH SCHOOL	[FB40 E587 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3246, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE587, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_311)
{
    // 3246 0041;	
    // (㉆) CIRCLED IDEOGRAPH SCHOOL	[FB40 E587 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x3246, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE587, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_312)
{
    // 2F42 0062;	
    // (⽂) KANGXI RADICAL SCRIPT	[FB40 E587 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F42, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE587, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_313)
{
    // 3246 0062;	
    // (㉆) CIRCLED IDEOGRAPH SCHOOL	[FB40 E587 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3246, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE587, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_314)
{
    // 2F43 0021;	
    // (⽃) KANGXI RADICAL DIPPER	[FB40 E597 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F43, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE597, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_315)
{
    // 2F43 003F;	
    // (⽃) KANGXI RADICAL DIPPER	[FB40 E597 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F43, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE597, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_316)
{
    // 2F43 0061;	
    // (⽃) KANGXI RADICAL DIPPER	[FB40 E597 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F43, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE597, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_317)
{
    // 2F43 0041;	
    // (⽃) KANGXI RADICAL DIPPER	[FB40 E597 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F43, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE597, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_318)
{
    // 2F43 0062;	
    // (⽃) KANGXI RADICAL DIPPER	[FB40 E597 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F43, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE597, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_319)
{
    // F9BE 0021;	
    // (料) CJK COMPATIBILITY IDEOGRAPH-F9BE	[FB40 E599 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9BE, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE599, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_320)
{
    // 1F21B 0021;	
    // (🈛) SQUARED CJK UNIFIED IDEOGRAPH-6599	[FB40 E599 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F21B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE599, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_321)
{
    // F9BE 003F;	
    // (料) CJK COMPATIBILITY IDEOGRAPH-F9BE	[FB40 E599 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9BE, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE599, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_322)
{
    // 1F21B 003F;	
    // (🈛) SQUARED CJK UNIFIED IDEOGRAPH-6599	[FB40 E599 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F21B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE599, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_323)
{
    // F9BE 0061;	
    // (料) CJK COMPATIBILITY IDEOGRAPH-F9BE	[FB40 E599 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9BE, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE599, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_324)
{
    // F9BE 0041;	
    // (料) CJK COMPATIBILITY IDEOGRAPH-F9BE	[FB40 E599 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9BE, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE599, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_325)
{
    // 1F21B 0061;	
    // (🈛) SQUARED CJK UNIFIED IDEOGRAPH-6599	[FB40 E599 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F21B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE599, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_326)
{
    // 1F21B 0041;	
    // (🈛) SQUARED CJK UNIFIED IDEOGRAPH-6599	[FB40 E599 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F21B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE599, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_327)
{
    // F9BE 0062;	
    // (料) CJK COMPATIBILITY IDEOGRAPH-F9BE	[FB40 E599 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9BE, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE599, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_328)
{
    // 1F21B 0062;	
    // (🈛) SQUARED CJK UNIFIED IDEOGRAPH-6599	[FB40 E599 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F21B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE599, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_329)
{
    // 2F44 0021;	
    // (⽄) KANGXI RADICAL AXE	[FB40 E5A4 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F44, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE5A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_330)
{
    // 2F44 003F;	
    // (⽄) KANGXI RADICAL AXE	[FB40 E5A4 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F44, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE5A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_331)
{
    // 2F44 0061;	
    // (⽄) KANGXI RADICAL AXE	[FB40 E5A4 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F44, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE5A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_332)
{
    // 2F44 0041;	
    // (⽄) KANGXI RADICAL AXE	[FB40 E5A4 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F44, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE5A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_333)
{
    // 2F44 0062;	
    // (⽄) KANGXI RADICAL AXE	[FB40 E5A4 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F44, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE5A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_334)
{
    // 1F21F 0021;	
    // (🈟) SQUARED CJK UNIFIED IDEOGRAPH-65B0	[FB40 E5B0 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F21F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE5B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_335)
{
    // 1F21F 003F;	
    // (🈟) SQUARED CJK UNIFIED IDEOGRAPH-65B0	[FB40 E5B0 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F21F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE5B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_336)
{
    // 1F21F 0061;	
    // (🈟) SQUARED CJK UNIFIED IDEOGRAPH-65B0	[FB40 E5B0 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F21F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE5B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_337)
{
    // 1F21F 0041;	
    // (🈟) SQUARED CJK UNIFIED IDEOGRAPH-65B0	[FB40 E5B0 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F21F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE5B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_338)
{
    // 1F21F 0062;	
    // (🈟) SQUARED CJK UNIFIED IDEOGRAPH-65B0	[FB40 E5B0 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F21F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE5B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_339)
{
    // 2F45 0021;	
    // (⽅) KANGXI RADICAL SQUARE	[FB40 E5B9 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F45, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE5B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_340)
{
    // 2F45 003F;	
    // (⽅) KANGXI RADICAL SQUARE	[FB40 E5B9 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F45, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE5B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_341)
{
    // 2F45 0061;	
    // (⽅) KANGXI RADICAL SQUARE	[FB40 E5B9 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F45, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE5B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_342)
{
    // 2F45 0041;	
    // (⽅) KANGXI RADICAL SQUARE	[FB40 E5B9 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F45, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE5B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_343)
{
    // 2F45 0062;	
    // (⽅) KANGXI RADICAL SQUARE	[FB40 E5B9 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F45, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE5B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_344)
{
    // F983 0021;	
    // (旅) CJK COMPATIBILITY IDEOGRAPH-F983	[FB40 E5C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF983, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE5C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_345)
{
    // F983 003F;	
    // (旅) CJK COMPATIBILITY IDEOGRAPH-F983	[FB40 E5C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF983, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE5C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_346)
{
    // F983 0061;	
    // (旅) CJK COMPATIBILITY IDEOGRAPH-F983	[FB40 E5C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF983, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE5C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_347)
{
    // F983 0041;	
    // (旅) CJK COMPATIBILITY IDEOGRAPH-F983	[FB40 E5C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF983, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE5C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_348)
{
    // F983 0062;	
    // (旅) CJK COMPATIBILITY IDEOGRAPH-F983	[FB40 E5C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF983, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE5C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_349)
{
    // 2F46 0021;	
    // (⽆) KANGXI RADICAL NOT	[FB40 E5E0 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F46, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE5E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_350)
{
    // 2F46 003F;	
    // (⽆) KANGXI RADICAL NOT	[FB40 E5E0 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F46, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE5E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_351)
{
    // 2F46 0061;	
    // (⽆) KANGXI RADICAL NOT	[FB40 E5E0 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F46, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE5E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_352)
{
    // 2F46 0041;	
    // (⽆) KANGXI RADICAL NOT	[FB40 E5E0 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F46, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE5E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_353)
{
    // 2F46 0062;	
    // (⽆) KANGXI RADICAL NOT	[FB40 E5E0 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F46, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE5E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_354)
{
    // 2E9B 0021;	
    // (⺛) CJK RADICAL CHOKE	[FB40 E5E1 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E9B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE5E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_355)
{
    // 2E9B 003F;	
    // (⺛) CJK RADICAL CHOKE	[FB40 E5E1 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E9B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE5E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_356)
{
    // 2E9B 0061;	
    // (⺛) CJK RADICAL CHOKE	[FB40 E5E1 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E9B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE5E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_357)
{
    // 2E9B 0041;	
    // (⺛) CJK RADICAL CHOKE	[FB40 E5E1 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2E9B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE5E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_358)
{
    // 2E9B 0062;	
    // (⺛) CJK RADICAL CHOKE	[FB40 E5E1 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E9B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE5E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_359)
{
    // FA42 0021;	
    // (既) CJK COMPATIBILITY IDEOGRAPH-FA42	[FB40 E5E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA42, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE5E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_360)
{
    // FA42 003F;	
    // (既) CJK COMPATIBILITY IDEOGRAPH-FA42	[FB40 E5E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA42, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE5E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_361)
{
    // FA42 0061;	
    // (既) CJK COMPATIBILITY IDEOGRAPH-FA42	[FB40 E5E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA42, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE5E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_362)
{
    // FA42 0041;	
    // (既) CJK COMPATIBILITY IDEOGRAPH-FA42	[FB40 E5E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA42, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE5E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_363)
{
    // FA42 0062;	
    // (既) CJK COMPATIBILITY IDEOGRAPH-FA42	[FB40 E5E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA42, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE5E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_364)
{
    // 2F8CB 0021;	
    // (旣) CJK COMPATIBILITY IDEOGRAPH-2F8CB	[FB40 E5E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8CB, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE5E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_365)
{
    // 2F8CB 003F;	
    // (旣) CJK COMPATIBILITY IDEOGRAPH-2F8CB	[FB40 E5E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8CB, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE5E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_366)
{
    // 2F8CB 0061;	
    // (旣) CJK COMPATIBILITY IDEOGRAPH-2F8CB	[FB40 E5E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8CB, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE5E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_367)
{
    // 2F8CB 0041;	
    // (旣) CJK COMPATIBILITY IDEOGRAPH-2F8CB	[FB40 E5E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8CB, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE5E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_368)
{
    // 2F8CB 0062;	
    // (旣) CJK COMPATIBILITY IDEOGRAPH-2F8CB	[FB40 E5E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8CB, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE5E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_369)
{
    // 2F47 0021;	
    // (⽇) KANGXI RADICAL SUN	[FB40 E5E5 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F47, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE5E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_370)
{
    // 3290 0021;	
    // (㊐) CIRCLED IDEOGRAPH SUN	[FB40 E5E5 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3290, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE5E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_371)
{
    // 2E9C 0021;	
    // (⺜) CJK RADICAL SUN	[FB40 E5E5 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E9C, 0x0021 };
    uint32_t const ces[12] = { 0xFB40, 0xE5E5, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_372)
{
    // 2F47 003F;	
    // (⽇) KANGXI RADICAL SUN	[FB40 E5E5 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F47, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE5E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_373)
{
    // 3290 003F;	
    // (㊐) CIRCLED IDEOGRAPH SUN	[FB40 E5E5 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3290, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE5E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_374)
{
    // 2E9C 003F;	
    // (⺜) CJK RADICAL SUN	[FB40 E5E5 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E9C, 0x003F };
    uint32_t const ces[12] = { 0xFB40, 0xE5E5, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_375)
{
    // 2F47 0061;	
    // (⽇) KANGXI RADICAL SUN	[FB40 E5E5 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F47, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_376)
{
    // 2F47 0041;	
    // (⽇) KANGXI RADICAL SUN	[FB40 E5E5 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F47, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_377)
{
    // 3290 0061;	
    // (㊐) CIRCLED IDEOGRAPH SUN	[FB40 E5E5 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3290, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_378)
{
    // 3290 0041;	
    // (㊐) CIRCLED IDEOGRAPH SUN	[FB40 E5E5 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x3290, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_379)
{
    // 2E9C 0061;	
    // (⺜) CJK RADICAL SUN	[FB40 E5E5 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E9C, 0x0061 };
    uint32_t const ces[12] = { 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_380)
{
    // 2E9C 0041;	
    // (⺜) CJK RADICAL SUN	[FB40 E5E5 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2E9C, 0x0041 };
    uint32_t const ces[12] = { 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_381)
{
    // 2F47 0062;	
    // (⽇) KANGXI RADICAL SUN	[FB40 E5E5 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F47, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE5E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_382)
{
    // 3290 0062;	
    // (㊐) CIRCLED IDEOGRAPH SUN	[FB40 E5E5 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3290, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE5E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_383)
{
    // 2E9C 0062;	
    // (⺜) CJK RADICAL SUN	[FB40 E5E5 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E9C, 0x0062 };
    uint32_t const ces[12] = { 0xFB40, 0xE5E5, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_384)
{
    // 337E 0021;	
    // (㍾) SQUARE ERA NAME MEIZI	[FB40 E60E FB40 ECBB 0261 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x337E, 0x0021 };
    uint32_t const ces[14] = { 0xFB40, 0xE60E, 0xFB40, 0xECBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_385)
{
    // 337E 003F;	
    // (㍾) SQUARE ERA NAME MEIZI	[FB40 E60E FB40 ECBB 0267 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x337E, 0x003F };
    uint32_t const ces[14] = { 0xFB40, 0xE60E, 0xFB40, 0xECBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_386)
{
    // 337E 0061;	
    // (㍾) SQUARE ERA NAME MEIZI	[FB40 E60E FB40 ECBB 1CAD | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x337E, 0x0061 };
    uint32_t const ces[14] = { 0xFB40, 0xE60E, 0xFB40, 0xECBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_387)
{
    // 337E 0041;	
    // (㍾) SQUARE ERA NAME MEIZI	[FB40 E60E FB40 ECBB 1CAD | 0020 0020 0020 | 001C 001C 0008 |]

    uint32_t cps[2] = { 0x337E, 0x0041 };
    uint32_t const ces[14] = { 0xFB40, 0xE60E, 0xFB40, 0xECBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_388)
{
    // 337E 0062;	
    // (㍾) SQUARE ERA NAME MEIZI	[FB40 E60E FB40 ECBB 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x337E, 0x0062 };
    uint32_t const ces[14] = { 0xFB40, 0xE60E, 0xFB40, 0xECBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_389)
{
    // F9E0 0021;	
    // (易) CJK COMPATIBILITY IDEOGRAPH-F9E0	[FB40 E613 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E0, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE613, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_390)
{
    // F9E0 003F;	
    // (易) CJK COMPATIBILITY IDEOGRAPH-F9E0	[FB40 E613 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E0, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE613, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_391)
{
    // F9E0 0061;	
    // (易) CJK COMPATIBILITY IDEOGRAPH-F9E0	[FB40 E613 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E0, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE613, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_392)
{
    // F9E0 0041;	
    // (易) CJK COMPATIBILITY IDEOGRAPH-F9E0	[FB40 E613 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9E0, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE613, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_393)
{
    // F9E0 0062;	
    // (易) CJK COMPATIBILITY IDEOGRAPH-F9E0	[FB40 E613 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E0, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE613, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_394)
{
    // 1F219 0021;	
    // (🈙) SQUARED CJK UNIFIED IDEOGRAPH-6620	[FB40 E620 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F219, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE620, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_395)
{
    // 1F219 003F;	
    // (🈙) SQUARED CJK UNIFIED IDEOGRAPH-6620	[FB40 E620 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F219, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE620, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_396)
{
    // 1F219 0061;	
    // (🈙) SQUARED CJK UNIFIED IDEOGRAPH-6620	[FB40 E620 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F219, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE620, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_397)
{
    // 1F219 0041;	
    // (🈙) SQUARED CJK UNIFIED IDEOGRAPH-6620	[FB40 E620 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F219, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE620, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_398)
{
    // 1F219 0062;	
    // (🈙) SQUARED CJK UNIFIED IDEOGRAPH-6620	[FB40 E620 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F219, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE620, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_399)
{
    // 337C 0021;	
    // (㍼) SQUARE ERA NAME SYOUWA	[FB40 E62D FB40 D48C 0261 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x337C, 0x0021 };
    uint32_t const ces[14] = { 0xFB40, 0xE62D, 0xFB40, 0xD48C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_400)
{
    // 337C 003F;	
    // (㍼) SQUARE ERA NAME SYOUWA	[FB40 E62D FB40 D48C 0267 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x337C, 0x003F };
    uint32_t const ces[14] = { 0xFB40, 0xE62D, 0xFB40, 0xD48C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_401)
{
    // 337C 0061;	
    // (㍼) SQUARE ERA NAME SYOUWA	[FB40 E62D FB40 D48C 1CAD | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x337C, 0x0061 };
    uint32_t const ces[14] = { 0xFB40, 0xE62D, 0xFB40, 0xD48C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_402)
{
    // 337C 0041;	
    // (㍼) SQUARE ERA NAME SYOUWA	[FB40 E62D FB40 D48C 1CAD | 0020 0020 0020 | 001C 001C 0008 |]

    uint32_t cps[2] = { 0x337C, 0x0041 };
    uint32_t const ces[14] = { 0xFB40, 0xE62D, 0xFB40, 0xD48C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_403)
{
    // 337C 0062;	
    // (㍼) SQUARE ERA NAME SYOUWA	[FB40 E62D FB40 D48C 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x337C, 0x0062 };
    uint32_t const ces[14] = { 0xFB40, 0xE62D, 0xFB40, 0xD48C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_404)
{
    // 2F8CD 0021;	
    // (晉) CJK COMPATIBILITY IDEOGRAPH-2F8CD	[FB40 E649 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8CD, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE649, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_405)
{
    // 2F8CD 003F;	
    // (晉) CJK COMPATIBILITY IDEOGRAPH-2F8CD	[FB40 E649 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8CD, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE649, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_406)
{
    // 2F8CD 0061;	
    // (晉) CJK COMPATIBILITY IDEOGRAPH-2F8CD	[FB40 E649 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8CD, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE649, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_407)
{
    // 2F8CD 0041;	
    // (晉) CJK COMPATIBILITY IDEOGRAPH-2F8CD	[FB40 E649 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8CD, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE649, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_408)
{
    // 2F8CD 0062;	
    // (晉) CJK COMPATIBILITY IDEOGRAPH-2F8CD	[FB40 E649 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8CD, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE649, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_409)
{
    // FA12 0021;	
    // (晴) CJK COMPATIBILITY IDEOGRAPH-FA12	[FB40 E674 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA12, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE674, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_410)
{
    // FA91 0021;	
    // (晴) CJK COMPATIBILITY IDEOGRAPH-FA91	[FB40 E674 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA91, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE674, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_411)
{
    // FA12 003F;	
    // (晴) CJK COMPATIBILITY IDEOGRAPH-FA12	[FB40 E674 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA12, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE674, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_412)
{
    // FA91 003F;	
    // (晴) CJK COMPATIBILITY IDEOGRAPH-FA91	[FB40 E674 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA91, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE674, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_413)
{
    // FA12 0061;	
    // (晴) CJK COMPATIBILITY IDEOGRAPH-FA12	[FB40 E674 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA12, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE674, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_414)
{
    // FA91 0061;	
    // (晴) CJK COMPATIBILITY IDEOGRAPH-FA91	[FB40 E674 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA91, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE674, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_415)
{
    // FA12 0041;	
    // (晴) CJK COMPATIBILITY IDEOGRAPH-FA12	[FB40 E674 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA12, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE674, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_416)
{
    // FA91 0041;	
    // (晴) CJK COMPATIBILITY IDEOGRAPH-FA91	[FB40 E674 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA91, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE674, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_417)
{
    // FA12 0062;	
    // (晴) CJK COMPATIBILITY IDEOGRAPH-FA12	[FB40 E674 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA12, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE674, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_418)
{
    // FA91 0062;	
    // (晴) CJK COMPATIBILITY IDEOGRAPH-FA91	[FB40 E674 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA91, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE674, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_419)
{
    // F9C5 0021;	
    // (暈) CJK COMPATIBILITY IDEOGRAPH-F9C5	[FB40 E688 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C5, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE688, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_420)
{
    // F9C5 003F;	
    // (暈) CJK COMPATIBILITY IDEOGRAPH-F9C5	[FB40 E688 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C5, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE688, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_421)
{
    // F9C5 0061;	
    // (暈) CJK COMPATIBILITY IDEOGRAPH-F9C5	[FB40 E688 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C5, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE688, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_422)
{
    // F9C5 0041;	
    // (暈) CJK COMPATIBILITY IDEOGRAPH-F9C5	[FB40 E688 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9C5, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE688, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_423)
{
    // F9C5 0062;	
    // (暈) CJK COMPATIBILITY IDEOGRAPH-F9C5	[FB40 E688 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C5, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE688, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_424)
{
    // FA43 0021;	
    // (暑) CJK COMPATIBILITY IDEOGRAPH-FA43	[FB40 E691 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA43, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE691, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_425)
{
    // 2F8CF 0021;	
    // (暑) CJK COMPATIBILITY IDEOGRAPH-2F8CF	[FB40 E691 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8CF, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE691, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_426)
{
    // FA43 003F;	
    // (暑) CJK COMPATIBILITY IDEOGRAPH-FA43	[FB40 E691 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA43, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE691, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_427)
{
    // 2F8CF 003F;	
    // (暑) CJK COMPATIBILITY IDEOGRAPH-2F8CF	[FB40 E691 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8CF, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE691, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_428)
{
    // FA43 0061;	
    // (暑) CJK COMPATIBILITY IDEOGRAPH-FA43	[FB40 E691 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA43, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE691, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_429)
{
    // 2F8CF 0061;	
    // (暑) CJK COMPATIBILITY IDEOGRAPH-2F8CF	[FB40 E691 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8CF, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE691, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_430)
{
    // FA43 0041;	
    // (暑) CJK COMPATIBILITY IDEOGRAPH-FA43	[FB40 E691 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA43, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE691, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_431)
{
    // 2F8CF 0041;	
    // (暑) CJK COMPATIBILITY IDEOGRAPH-2F8CF	[FB40 E691 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8CF, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE691, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_432)
{
    // FA43 0062;	
    // (暑) CJK COMPATIBILITY IDEOGRAPH-FA43	[FB40 E691 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA43, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE691, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_433)
{
    // 2F8CF 0062;	
    // (暑) CJK COMPATIBILITY IDEOGRAPH-2F8CF	[FB40 E691 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8CF, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE691, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_434)
{
    // 2F8D5 0021;	
    // (暜) CJK COMPATIBILITY IDEOGRAPH-2F8D5	[FB40 E69C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D5, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE69C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_435)
{
    // 2F8D5 003F;	
    // (暜) CJK COMPATIBILITY IDEOGRAPH-2F8D5	[FB40 E69C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D5, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE69C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_436)
{
    // 2F8D5 0061;	
    // (暜) CJK COMPATIBILITY IDEOGRAPH-2F8D5	[FB40 E69C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D5, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE69C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_437)
{
    // 2F8D5 0041;	
    // (暜) CJK COMPATIBILITY IDEOGRAPH-2F8D5	[FB40 E69C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8D5, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE69C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_438)
{
    // 2F8D5 0062;	
    // (暜) CJK COMPATIBILITY IDEOGRAPH-2F8D5	[FB40 E69C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D5, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE69C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_439)
{
    // FA06 0021;	
    // (暴) CJK COMPATIBILITY IDEOGRAPH-FA06	[FB40 E6B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA06, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE6B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_440)
{
    // FA06 003F;	
    // (暴) CJK COMPATIBILITY IDEOGRAPH-FA06	[FB40 E6B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA06, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE6B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_441)
{
    // FA06 0061;	
    // (暴) CJK COMPATIBILITY IDEOGRAPH-FA06	[FB40 E6B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA06, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE6B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_442)
{
    // FA06 0041;	
    // (暴) CJK COMPATIBILITY IDEOGRAPH-FA06	[FB40 E6B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA06, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE6B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_443)
{
    // FA06 0062;	
    // (暴) CJK COMPATIBILITY IDEOGRAPH-FA06	[FB40 E6B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA06, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE6B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_444)
{
    // F98B 0021;	
    // (曆) CJK COMPATIBILITY IDEOGRAPH-F98B	[FB40 E6C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF98B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE6C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_445)
{
    // F98B 003F;	
    // (曆) CJK COMPATIBILITY IDEOGRAPH-F98B	[FB40 E6C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF98B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE6C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_446)
{
    // F98B 0061;	
    // (曆) CJK COMPATIBILITY IDEOGRAPH-F98B	[FB40 E6C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF98B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE6C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_447)
{
    // F98B 0041;	
    // (曆) CJK COMPATIBILITY IDEOGRAPH-F98B	[FB40 E6C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF98B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE6C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_448)
{
    // F98B 0062;	
    // (曆) CJK COMPATIBILITY IDEOGRAPH-F98B	[FB40 E6C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF98B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE6C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_449)
{
    // 2F48 0021;	
    // (⽈) KANGXI RADICAL SAY	[FB40 E6F0 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F48, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE6F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_450)
{
    // 2F48 003F;	
    // (⽈) KANGXI RADICAL SAY	[FB40 E6F0 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F48, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE6F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_451)
{
    // 2F48 0061;	
    // (⽈) KANGXI RADICAL SAY	[FB40 E6F0 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F48, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE6F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_452)
{
    // 2F48 0041;	
    // (⽈) KANGXI RADICAL SAY	[FB40 E6F0 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F48, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE6F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_453)
{
    // 2F48 0062;	
    // (⽈) KANGXI RADICAL SAY	[FB40 E6F0 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F48, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE6F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_454)
{
    // F901 0021;	
    // (更) CJK COMPATIBILITY IDEOGRAPH-F901	[FB40 E6F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF901, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE6F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_455)
{
    // F901 003F;	
    // (更) CJK COMPATIBILITY IDEOGRAPH-F901	[FB40 E6F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF901, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE6F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_456)
{
    // F901 0061;	
    // (更) CJK COMPATIBILITY IDEOGRAPH-F901	[FB40 E6F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF901, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE6F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_457)
{
    // F901 0041;	
    // (更) CJK COMPATIBILITY IDEOGRAPH-F901	[FB40 E6F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF901, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE6F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_458)
{
    // F901 0062;	
    // (更) CJK COMPATIBILITY IDEOGRAPH-F901	[FB40 E6F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF901, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE6F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_459)
{
    // 2F8CC 0021;	
    // (書) CJK COMPATIBILITY IDEOGRAPH-2F8CC	[FB40 E6F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8CC, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE6F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_460)
{
    // 2F8CC 003F;	
    // (書) CJK COMPATIBILITY IDEOGRAPH-2F8CC	[FB40 E6F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8CC, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE6F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_461)
{
    // 2F8CC 0061;	
    // (書) CJK COMPATIBILITY IDEOGRAPH-2F8CC	[FB40 E6F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8CC, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE6F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_462)
{
    // 2F8CC 0041;	
    // (書) CJK COMPATIBILITY IDEOGRAPH-2F8CC	[FB40 E6F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8CC, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE6F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_463)
{
    // 2F8CC 0062;	
    // (書) CJK COMPATIBILITY IDEOGRAPH-2F8CC	[FB40 E6F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8CC, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE6F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_464)
{
    // 2F8D4 0021;	
    // (最) CJK COMPATIBILITY IDEOGRAPH-2F8D4	[FB40 E700 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D4, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE700, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_465)
{
    // 2F8D4 003F;	
    // (最) CJK COMPATIBILITY IDEOGRAPH-2F8D4	[FB40 E700 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D4, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE700, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_466)
{
    // 2F8D4 0061;	
    // (最) CJK COMPATIBILITY IDEOGRAPH-2F8D4	[FB40 E700 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D4, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE700, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_467)
{
    // 2F8D4 0041;	
    // (最) CJK COMPATIBILITY IDEOGRAPH-2F8D4	[FB40 E700 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8D4, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE700, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_468)
{
    // 2F8D4 0062;	
    // (最) CJK COMPATIBILITY IDEOGRAPH-2F8D4	[FB40 E700 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D4, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE700, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_469)
{
    // 2F49 0021;	
    // (⽉) KANGXI RADICAL MOON	[FB40 E708 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F49, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE708, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_470)
{
    // 328A 0021;	
    // (㊊) CIRCLED IDEOGRAPH MOON	[FB40 E708 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x328A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE708, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_471)
{
    // 1F237 0021;	
    // (🈷) SQUARED CJK UNIFIED IDEOGRAPH-6708	[FB40 E708 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F237, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE708, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_472)
{
    // 2E9D 0021;	
    // (⺝) CJK RADICAL MOON	[FB40 E708 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E9D, 0x0021 };
    uint32_t const ces[12] = { 0xFB40, 0xE708, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_473)
{
    // 2F49 003F;	
    // (⽉) KANGXI RADICAL MOON	[FB40 E708 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F49, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE708, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_474)
{
    // 328A 003F;	
    // (㊊) CIRCLED IDEOGRAPH MOON	[FB40 E708 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x328A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE708, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_475)
{
    // 1F237 003F;	
    // (🈷) SQUARED CJK UNIFIED IDEOGRAPH-6708	[FB40 E708 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F237, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE708, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_476)
{
    // 2E9D 003F;	
    // (⺝) CJK RADICAL MOON	[FB40 E708 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E9D, 0x003F };
    uint32_t const ces[12] = { 0xFB40, 0xE708, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_477)
{
    // 2F49 0061;	
    // (⽉) KANGXI RADICAL MOON	[FB40 E708 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F49, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_478)
{
    // 2F49 0041;	
    // (⽉) KANGXI RADICAL MOON	[FB40 E708 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F49, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_479)
{
    // 328A 0061;	
    // (㊊) CIRCLED IDEOGRAPH MOON	[FB40 E708 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x328A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_480)
{
    // 328A 0041;	
    // (㊊) CIRCLED IDEOGRAPH MOON	[FB40 E708 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x328A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_481)
{
    // 1F237 0061;	
    // (🈷) SQUARED CJK UNIFIED IDEOGRAPH-6708	[FB40 E708 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F237, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_482)
{
    // 1F237 0041;	
    // (🈷) SQUARED CJK UNIFIED IDEOGRAPH-6708	[FB40 E708 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F237, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_483)
{
    // 2E9D 0061;	
    // (⺝) CJK RADICAL MOON	[FB40 E708 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E9D, 0x0061 };
    uint32_t const ces[12] = { 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_484)
{
    // 2E9D 0041;	
    // (⺝) CJK RADICAL MOON	[FB40 E708 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2E9D, 0x0041 };
    uint32_t const ces[12] = { 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_485)
{
    // 2F49 0062;	
    // (⽉) KANGXI RADICAL MOON	[FB40 E708 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F49, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE708, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_486)
{
    // 328A 0062;	
    // (㊊) CIRCLED IDEOGRAPH MOON	[FB40 E708 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x328A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE708, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_487)
{
    // 1F237 0062;	
    // (🈷) SQUARED CJK UNIFIED IDEOGRAPH-6708	[FB40 E708 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F237, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE708, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_488)
{
    // 2E9D 0062;	
    // (⺝) CJK RADICAL MOON	[FB40 E708 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E9D, 0x0062 };
    uint32_t const ces[12] = { 0xFB40, 0xE708, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_489)
{
    // 3292 0021;	
    // (㊒) CIRCLED IDEOGRAPH HAVE	[FB40 E709 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3292, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE709, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_490)
{
    // 1F236 0021;	
    // (🈶) SQUARED CJK UNIFIED IDEOGRAPH-6709	[FB40 E709 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F236, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE709, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_491)
{
    // 3292 003F;	
    // (㊒) CIRCLED IDEOGRAPH HAVE	[FB40 E709 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3292, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE709, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_492)
{
    // 1F236 003F;	
    // (🈶) SQUARED CJK UNIFIED IDEOGRAPH-6709	[FB40 E709 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F236, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE709, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_493)
{
    // 3292 0061;	
    // (㊒) CIRCLED IDEOGRAPH HAVE	[FB40 E709 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3292, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE709, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_494)
{
    // 3292 0041;	
    // (㊒) CIRCLED IDEOGRAPH HAVE	[FB40 E709 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x3292, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE709, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_495)
{
    // 1F236 0061;	
    // (🈶) SQUARED CJK UNIFIED IDEOGRAPH-6709	[FB40 E709 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F236, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE709, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_496)
{
    // 1F236 0041;	
    // (🈶) SQUARED CJK UNIFIED IDEOGRAPH-6709	[FB40 E709 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F236, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE709, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_497)
{
    // 3292 0062;	
    // (㊒) CIRCLED IDEOGRAPH HAVE	[FB40 E709 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3292, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE709, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_498)
{
    // 1F236 0062;	
    // (🈶) SQUARED CJK UNIFIED IDEOGRAPH-6709	[FB40 E709 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F236, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE709, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_318_499)
{
    // F929 0021;	
    // (朗) CJK COMPATIBILITY IDEOGRAPH-F929	[FB40 E717 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF929, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE717, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

