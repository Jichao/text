// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_327_000)
{
    // 341B 003F;	
    // (㐛) CJK UNIFIED IDEOGRAPH-341B	[FB80 B41B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x341B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB41B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_001)
{
    // 341B 0061;	
    // (㐛) CJK UNIFIED IDEOGRAPH-341B	[FB80 B41B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x341B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB41B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_002)
{
    // 341B 0041;	
    // (㐛) CJK UNIFIED IDEOGRAPH-341B	[FB80 B41B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x341B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB41B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_003)
{
    // 341B 0062;	
    // (㐛) CJK UNIFIED IDEOGRAPH-341B	[FB80 B41B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x341B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB41B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_004)
{
    // 341C 0021;	
    // (㐜) CJK UNIFIED IDEOGRAPH-341C	[FB80 B41C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x341C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB41C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_005)
{
    // 341C 003F;	
    // (㐜) CJK UNIFIED IDEOGRAPH-341C	[FB80 B41C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x341C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB41C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_006)
{
    // 341C 0061;	
    // (㐜) CJK UNIFIED IDEOGRAPH-341C	[FB80 B41C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x341C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB41C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_007)
{
    // 341C 0041;	
    // (㐜) CJK UNIFIED IDEOGRAPH-341C	[FB80 B41C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x341C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB41C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_008)
{
    // 341C 0062;	
    // (㐜) CJK UNIFIED IDEOGRAPH-341C	[FB80 B41C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x341C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB41C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_009)
{
    // 341D 0021;	
    // (㐝) CJK UNIFIED IDEOGRAPH-341D	[FB80 B41D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x341D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB41D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_010)
{
    // 341D 003F;	
    // (㐝) CJK UNIFIED IDEOGRAPH-341D	[FB80 B41D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x341D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB41D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_011)
{
    // 341D 0061;	
    // (㐝) CJK UNIFIED IDEOGRAPH-341D	[FB80 B41D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x341D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB41D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_012)
{
    // 341D 0041;	
    // (㐝) CJK UNIFIED IDEOGRAPH-341D	[FB80 B41D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x341D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB41D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_013)
{
    // 341D 0062;	
    // (㐝) CJK UNIFIED IDEOGRAPH-341D	[FB80 B41D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x341D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB41D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_014)
{
    // 341E 0021;	
    // (㐞) CJK UNIFIED IDEOGRAPH-341E	[FB80 B41E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x341E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB41E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_015)
{
    // 341E 003F;	
    // (㐞) CJK UNIFIED IDEOGRAPH-341E	[FB80 B41E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x341E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB41E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_016)
{
    // 341E 0061;	
    // (㐞) CJK UNIFIED IDEOGRAPH-341E	[FB80 B41E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x341E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB41E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_017)
{
    // 341E 0041;	
    // (㐞) CJK UNIFIED IDEOGRAPH-341E	[FB80 B41E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x341E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB41E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_018)
{
    // 341E 0062;	
    // (㐞) CJK UNIFIED IDEOGRAPH-341E	[FB80 B41E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x341E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB41E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_019)
{
    // 341F 0021;	
    // (㐟) CJK UNIFIED IDEOGRAPH-341F	[FB80 B41F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x341F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB41F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_020)
{
    // 341F 003F;	
    // (㐟) CJK UNIFIED IDEOGRAPH-341F	[FB80 B41F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x341F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB41F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_021)
{
    // 341F 0061;	
    // (㐟) CJK UNIFIED IDEOGRAPH-341F	[FB80 B41F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x341F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB41F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_022)
{
    // 341F 0041;	
    // (㐟) CJK UNIFIED IDEOGRAPH-341F	[FB80 B41F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x341F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB41F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_023)
{
    // 341F 0062;	
    // (㐟) CJK UNIFIED IDEOGRAPH-341F	[FB80 B41F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x341F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB41F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_024)
{
    // 3420 0021;	
    // (㐠) CJK UNIFIED IDEOGRAPH-3420	[FB80 B420 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3420, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB420, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_025)
{
    // 3420 003F;	
    // (㐠) CJK UNIFIED IDEOGRAPH-3420	[FB80 B420 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3420, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB420, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_026)
{
    // 3420 0061;	
    // (㐠) CJK UNIFIED IDEOGRAPH-3420	[FB80 B420 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3420, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB420, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_027)
{
    // 3420 0041;	
    // (㐠) CJK UNIFIED IDEOGRAPH-3420	[FB80 B420 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3420, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB420, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_028)
{
    // 3420 0062;	
    // (㐠) CJK UNIFIED IDEOGRAPH-3420	[FB80 B420 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3420, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB420, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_029)
{
    // 3421 0021;	
    // (㐡) CJK UNIFIED IDEOGRAPH-3421	[FB80 B421 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3421, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB421, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_030)
{
    // 3421 003F;	
    // (㐡) CJK UNIFIED IDEOGRAPH-3421	[FB80 B421 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3421, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB421, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_031)
{
    // 3421 0061;	
    // (㐡) CJK UNIFIED IDEOGRAPH-3421	[FB80 B421 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3421, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB421, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_032)
{
    // 3421 0041;	
    // (㐡) CJK UNIFIED IDEOGRAPH-3421	[FB80 B421 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3421, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB421, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_033)
{
    // 3421 0062;	
    // (㐡) CJK UNIFIED IDEOGRAPH-3421	[FB80 B421 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3421, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB421, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_034)
{
    // 3422 0021;	
    // (㐢) CJK UNIFIED IDEOGRAPH-3422	[FB80 B422 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3422, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB422, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_035)
{
    // 3422 003F;	
    // (㐢) CJK UNIFIED IDEOGRAPH-3422	[FB80 B422 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3422, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB422, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_036)
{
    // 3422 0061;	
    // (㐢) CJK UNIFIED IDEOGRAPH-3422	[FB80 B422 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3422, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB422, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_037)
{
    // 3422 0041;	
    // (㐢) CJK UNIFIED IDEOGRAPH-3422	[FB80 B422 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3422, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB422, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_038)
{
    // 3422 0062;	
    // (㐢) CJK UNIFIED IDEOGRAPH-3422	[FB80 B422 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3422, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB422, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_039)
{
    // 3423 0021;	
    // (㐣) CJK UNIFIED IDEOGRAPH-3423	[FB80 B423 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3423, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB423, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_040)
{
    // 3423 003F;	
    // (㐣) CJK UNIFIED IDEOGRAPH-3423	[FB80 B423 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3423, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB423, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_041)
{
    // 3423 0061;	
    // (㐣) CJK UNIFIED IDEOGRAPH-3423	[FB80 B423 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3423, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB423, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_042)
{
    // 3423 0041;	
    // (㐣) CJK UNIFIED IDEOGRAPH-3423	[FB80 B423 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3423, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB423, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_043)
{
    // 3423 0062;	
    // (㐣) CJK UNIFIED IDEOGRAPH-3423	[FB80 B423 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3423, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB423, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_044)
{
    // 3424 0021;	
    // (㐤) CJK UNIFIED IDEOGRAPH-3424	[FB80 B424 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3424, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB424, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_045)
{
    // 3424 003F;	
    // (㐤) CJK UNIFIED IDEOGRAPH-3424	[FB80 B424 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3424, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB424, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_046)
{
    // 3424 0061;	
    // (㐤) CJK UNIFIED IDEOGRAPH-3424	[FB80 B424 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3424, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB424, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_047)
{
    // 3424 0041;	
    // (㐤) CJK UNIFIED IDEOGRAPH-3424	[FB80 B424 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3424, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB424, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_048)
{
    // 3424 0062;	
    // (㐤) CJK UNIFIED IDEOGRAPH-3424	[FB80 B424 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3424, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB424, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_049)
{
    // 3425 0021;	
    // (㐥) CJK UNIFIED IDEOGRAPH-3425	[FB80 B425 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3425, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB425, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_050)
{
    // 3425 003F;	
    // (㐥) CJK UNIFIED IDEOGRAPH-3425	[FB80 B425 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3425, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB425, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_051)
{
    // 3425 0061;	
    // (㐥) CJK UNIFIED IDEOGRAPH-3425	[FB80 B425 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3425, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB425, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_052)
{
    // 3425 0041;	
    // (㐥) CJK UNIFIED IDEOGRAPH-3425	[FB80 B425 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3425, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB425, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_053)
{
    // 3425 0062;	
    // (㐥) CJK UNIFIED IDEOGRAPH-3425	[FB80 B425 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3425, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB425, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_054)
{
    // 3426 0021;	
    // (㐦) CJK UNIFIED IDEOGRAPH-3426	[FB80 B426 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3426, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB426, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_055)
{
    // 3426 003F;	
    // (㐦) CJK UNIFIED IDEOGRAPH-3426	[FB80 B426 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3426, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB426, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_056)
{
    // 3426 0061;	
    // (㐦) CJK UNIFIED IDEOGRAPH-3426	[FB80 B426 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3426, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB426, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_057)
{
    // 3426 0041;	
    // (㐦) CJK UNIFIED IDEOGRAPH-3426	[FB80 B426 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3426, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB426, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_058)
{
    // 3426 0062;	
    // (㐦) CJK UNIFIED IDEOGRAPH-3426	[FB80 B426 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3426, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB426, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_059)
{
    // 3427 0021;	
    // (㐧) CJK UNIFIED IDEOGRAPH-3427	[FB80 B427 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3427, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB427, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_060)
{
    // 3427 003F;	
    // (㐧) CJK UNIFIED IDEOGRAPH-3427	[FB80 B427 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3427, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB427, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_061)
{
    // 3427 0061;	
    // (㐧) CJK UNIFIED IDEOGRAPH-3427	[FB80 B427 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3427, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB427, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_062)
{
    // 3427 0041;	
    // (㐧) CJK UNIFIED IDEOGRAPH-3427	[FB80 B427 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3427, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB427, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_063)
{
    // 3427 0062;	
    // (㐧) CJK UNIFIED IDEOGRAPH-3427	[FB80 B427 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3427, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB427, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_064)
{
    // 3428 0021;	
    // (㐨) CJK UNIFIED IDEOGRAPH-3428	[FB80 B428 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3428, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB428, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_065)
{
    // 3428 003F;	
    // (㐨) CJK UNIFIED IDEOGRAPH-3428	[FB80 B428 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3428, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB428, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_066)
{
    // 3428 0061;	
    // (㐨) CJK UNIFIED IDEOGRAPH-3428	[FB80 B428 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3428, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB428, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_067)
{
    // 3428 0041;	
    // (㐨) CJK UNIFIED IDEOGRAPH-3428	[FB80 B428 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3428, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB428, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_068)
{
    // 3428 0062;	
    // (㐨) CJK UNIFIED IDEOGRAPH-3428	[FB80 B428 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3428, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB428, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_069)
{
    // 3429 0021;	
    // (㐩) CJK UNIFIED IDEOGRAPH-3429	[FB80 B429 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3429, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB429, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_070)
{
    // 3429 003F;	
    // (㐩) CJK UNIFIED IDEOGRAPH-3429	[FB80 B429 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3429, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB429, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_071)
{
    // 3429 0061;	
    // (㐩) CJK UNIFIED IDEOGRAPH-3429	[FB80 B429 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3429, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB429, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_072)
{
    // 3429 0041;	
    // (㐩) CJK UNIFIED IDEOGRAPH-3429	[FB80 B429 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3429, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB429, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_073)
{
    // 3429 0062;	
    // (㐩) CJK UNIFIED IDEOGRAPH-3429	[FB80 B429 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3429, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB429, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_074)
{
    // 342A 0021;	
    // (㐪) CJK UNIFIED IDEOGRAPH-342A	[FB80 B42A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x342A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB42A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_075)
{
    // 342A 003F;	
    // (㐪) CJK UNIFIED IDEOGRAPH-342A	[FB80 B42A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x342A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB42A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_076)
{
    // 342A 0061;	
    // (㐪) CJK UNIFIED IDEOGRAPH-342A	[FB80 B42A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x342A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB42A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_077)
{
    // 342A 0041;	
    // (㐪) CJK UNIFIED IDEOGRAPH-342A	[FB80 B42A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x342A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB42A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_078)
{
    // 342A 0062;	
    // (㐪) CJK UNIFIED IDEOGRAPH-342A	[FB80 B42A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x342A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB42A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_079)
{
    // 342B 0021;	
    // (㐫) CJK UNIFIED IDEOGRAPH-342B	[FB80 B42B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x342B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB42B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_080)
{
    // 342B 003F;	
    // (㐫) CJK UNIFIED IDEOGRAPH-342B	[FB80 B42B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x342B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB42B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_081)
{
    // 342B 0061;	
    // (㐫) CJK UNIFIED IDEOGRAPH-342B	[FB80 B42B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x342B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB42B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_082)
{
    // 342B 0041;	
    // (㐫) CJK UNIFIED IDEOGRAPH-342B	[FB80 B42B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x342B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB42B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_083)
{
    // 342B 0062;	
    // (㐫) CJK UNIFIED IDEOGRAPH-342B	[FB80 B42B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x342B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB42B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_084)
{
    // 342C 0021;	
    // (㐬) CJK UNIFIED IDEOGRAPH-342C	[FB80 B42C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x342C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB42C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_085)
{
    // 342C 003F;	
    // (㐬) CJK UNIFIED IDEOGRAPH-342C	[FB80 B42C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x342C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB42C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_086)
{
    // 342C 0061;	
    // (㐬) CJK UNIFIED IDEOGRAPH-342C	[FB80 B42C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x342C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB42C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_087)
{
    // 342C 0041;	
    // (㐬) CJK UNIFIED IDEOGRAPH-342C	[FB80 B42C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x342C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB42C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_088)
{
    // 342C 0062;	
    // (㐬) CJK UNIFIED IDEOGRAPH-342C	[FB80 B42C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x342C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB42C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_089)
{
    // 342D 0021;	
    // (㐭) CJK UNIFIED IDEOGRAPH-342D	[FB80 B42D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x342D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB42D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_090)
{
    // 342D 003F;	
    // (㐭) CJK UNIFIED IDEOGRAPH-342D	[FB80 B42D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x342D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB42D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_091)
{
    // 342D 0061;	
    // (㐭) CJK UNIFIED IDEOGRAPH-342D	[FB80 B42D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x342D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB42D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_092)
{
    // 342D 0041;	
    // (㐭) CJK UNIFIED IDEOGRAPH-342D	[FB80 B42D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x342D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB42D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_093)
{
    // 342D 0062;	
    // (㐭) CJK UNIFIED IDEOGRAPH-342D	[FB80 B42D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x342D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB42D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_094)
{
    // 342E 0021;	
    // (㐮) CJK UNIFIED IDEOGRAPH-342E	[FB80 B42E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x342E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB42E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_095)
{
    // 342E 003F;	
    // (㐮) CJK UNIFIED IDEOGRAPH-342E	[FB80 B42E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x342E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB42E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_096)
{
    // 342E 0061;	
    // (㐮) CJK UNIFIED IDEOGRAPH-342E	[FB80 B42E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x342E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB42E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_097)
{
    // 342E 0041;	
    // (㐮) CJK UNIFIED IDEOGRAPH-342E	[FB80 B42E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x342E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB42E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_098)
{
    // 342E 0062;	
    // (㐮) CJK UNIFIED IDEOGRAPH-342E	[FB80 B42E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x342E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB42E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_099)
{
    // 342F 0021;	
    // (㐯) CJK UNIFIED IDEOGRAPH-342F	[FB80 B42F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x342F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB42F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_100)
{
    // 342F 003F;	
    // (㐯) CJK UNIFIED IDEOGRAPH-342F	[FB80 B42F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x342F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB42F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_101)
{
    // 342F 0061;	
    // (㐯) CJK UNIFIED IDEOGRAPH-342F	[FB80 B42F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x342F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB42F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_102)
{
    // 342F 0041;	
    // (㐯) CJK UNIFIED IDEOGRAPH-342F	[FB80 B42F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x342F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB42F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_103)
{
    // 342F 0062;	
    // (㐯) CJK UNIFIED IDEOGRAPH-342F	[FB80 B42F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x342F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB42F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_104)
{
    // 3430 0021;	
    // (㐰) CJK UNIFIED IDEOGRAPH-3430	[FB80 B430 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3430, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB430, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_105)
{
    // 3430 003F;	
    // (㐰) CJK UNIFIED IDEOGRAPH-3430	[FB80 B430 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3430, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB430, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_106)
{
    // 3430 0061;	
    // (㐰) CJK UNIFIED IDEOGRAPH-3430	[FB80 B430 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3430, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB430, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_107)
{
    // 3430 0041;	
    // (㐰) CJK UNIFIED IDEOGRAPH-3430	[FB80 B430 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3430, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB430, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_108)
{
    // 3430 0062;	
    // (㐰) CJK UNIFIED IDEOGRAPH-3430	[FB80 B430 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3430, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB430, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_109)
{
    // 3431 0021;	
    // (㐱) CJK UNIFIED IDEOGRAPH-3431	[FB80 B431 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3431, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB431, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_110)
{
    // 3431 003F;	
    // (㐱) CJK UNIFIED IDEOGRAPH-3431	[FB80 B431 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3431, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB431, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_111)
{
    // 3431 0061;	
    // (㐱) CJK UNIFIED IDEOGRAPH-3431	[FB80 B431 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3431, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB431, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_112)
{
    // 3431 0041;	
    // (㐱) CJK UNIFIED IDEOGRAPH-3431	[FB80 B431 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3431, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB431, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_113)
{
    // 3431 0062;	
    // (㐱) CJK UNIFIED IDEOGRAPH-3431	[FB80 B431 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3431, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB431, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_114)
{
    // 3432 0021;	
    // (㐲) CJK UNIFIED IDEOGRAPH-3432	[FB80 B432 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3432, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB432, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_115)
{
    // 3432 003F;	
    // (㐲) CJK UNIFIED IDEOGRAPH-3432	[FB80 B432 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3432, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB432, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_116)
{
    // 3432 0061;	
    // (㐲) CJK UNIFIED IDEOGRAPH-3432	[FB80 B432 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3432, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB432, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_117)
{
    // 3432 0041;	
    // (㐲) CJK UNIFIED IDEOGRAPH-3432	[FB80 B432 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3432, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB432, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_118)
{
    // 3432 0062;	
    // (㐲) CJK UNIFIED IDEOGRAPH-3432	[FB80 B432 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3432, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB432, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_119)
{
    // 3433 0021;	
    // (㐳) CJK UNIFIED IDEOGRAPH-3433	[FB80 B433 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3433, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB433, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_120)
{
    // 3433 003F;	
    // (㐳) CJK UNIFIED IDEOGRAPH-3433	[FB80 B433 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3433, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB433, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_121)
{
    // 3433 0061;	
    // (㐳) CJK UNIFIED IDEOGRAPH-3433	[FB80 B433 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3433, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB433, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_122)
{
    // 3433 0041;	
    // (㐳) CJK UNIFIED IDEOGRAPH-3433	[FB80 B433 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3433, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB433, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_123)
{
    // 3433 0062;	
    // (㐳) CJK UNIFIED IDEOGRAPH-3433	[FB80 B433 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3433, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB433, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_124)
{
    // 3434 0021;	
    // (㐴) CJK UNIFIED IDEOGRAPH-3434	[FB80 B434 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3434, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB434, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_125)
{
    // 3434 003F;	
    // (㐴) CJK UNIFIED IDEOGRAPH-3434	[FB80 B434 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3434, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB434, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_126)
{
    // 3434 0061;	
    // (㐴) CJK UNIFIED IDEOGRAPH-3434	[FB80 B434 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3434, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB434, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_127)
{
    // 3434 0041;	
    // (㐴) CJK UNIFIED IDEOGRAPH-3434	[FB80 B434 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3434, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB434, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_128)
{
    // 3434 0062;	
    // (㐴) CJK UNIFIED IDEOGRAPH-3434	[FB80 B434 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3434, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB434, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_129)
{
    // 3435 0021;	
    // (㐵) CJK UNIFIED IDEOGRAPH-3435	[FB80 B435 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3435, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB435, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_130)
{
    // 3435 003F;	
    // (㐵) CJK UNIFIED IDEOGRAPH-3435	[FB80 B435 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3435, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB435, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_131)
{
    // 3435 0061;	
    // (㐵) CJK UNIFIED IDEOGRAPH-3435	[FB80 B435 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3435, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB435, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_132)
{
    // 3435 0041;	
    // (㐵) CJK UNIFIED IDEOGRAPH-3435	[FB80 B435 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3435, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB435, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_133)
{
    // 3435 0062;	
    // (㐵) CJK UNIFIED IDEOGRAPH-3435	[FB80 B435 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3435, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB435, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_134)
{
    // 3436 0021;	
    // (㐶) CJK UNIFIED IDEOGRAPH-3436	[FB80 B436 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3436, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB436, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_135)
{
    // 3436 003F;	
    // (㐶) CJK UNIFIED IDEOGRAPH-3436	[FB80 B436 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3436, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB436, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_136)
{
    // 3436 0061;	
    // (㐶) CJK UNIFIED IDEOGRAPH-3436	[FB80 B436 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3436, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB436, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_137)
{
    // 3436 0041;	
    // (㐶) CJK UNIFIED IDEOGRAPH-3436	[FB80 B436 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3436, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB436, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_138)
{
    // 3436 0062;	
    // (㐶) CJK UNIFIED IDEOGRAPH-3436	[FB80 B436 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3436, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB436, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_139)
{
    // 3437 0021;	
    // (㐷) CJK UNIFIED IDEOGRAPH-3437	[FB80 B437 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3437, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB437, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_140)
{
    // 3437 003F;	
    // (㐷) CJK UNIFIED IDEOGRAPH-3437	[FB80 B437 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3437, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB437, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_141)
{
    // 3437 0061;	
    // (㐷) CJK UNIFIED IDEOGRAPH-3437	[FB80 B437 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3437, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB437, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_142)
{
    // 3437 0041;	
    // (㐷) CJK UNIFIED IDEOGRAPH-3437	[FB80 B437 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3437, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB437, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_143)
{
    // 3437 0062;	
    // (㐷) CJK UNIFIED IDEOGRAPH-3437	[FB80 B437 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3437, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB437, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_144)
{
    // 3438 0021;	
    // (㐸) CJK UNIFIED IDEOGRAPH-3438	[FB80 B438 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3438, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB438, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_145)
{
    // 3438 003F;	
    // (㐸) CJK UNIFIED IDEOGRAPH-3438	[FB80 B438 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3438, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB438, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_146)
{
    // 3438 0061;	
    // (㐸) CJK UNIFIED IDEOGRAPH-3438	[FB80 B438 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3438, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB438, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_147)
{
    // 3438 0041;	
    // (㐸) CJK UNIFIED IDEOGRAPH-3438	[FB80 B438 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3438, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB438, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_148)
{
    // 3438 0062;	
    // (㐸) CJK UNIFIED IDEOGRAPH-3438	[FB80 B438 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3438, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB438, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_149)
{
    // 3439 0021;	
    // (㐹) CJK UNIFIED IDEOGRAPH-3439	[FB80 B439 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3439, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB439, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_150)
{
    // 3439 003F;	
    // (㐹) CJK UNIFIED IDEOGRAPH-3439	[FB80 B439 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3439, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB439, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_151)
{
    // 3439 0061;	
    // (㐹) CJK UNIFIED IDEOGRAPH-3439	[FB80 B439 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3439, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB439, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_152)
{
    // 3439 0041;	
    // (㐹) CJK UNIFIED IDEOGRAPH-3439	[FB80 B439 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3439, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB439, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_153)
{
    // 3439 0062;	
    // (㐹) CJK UNIFIED IDEOGRAPH-3439	[FB80 B439 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3439, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB439, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_154)
{
    // 343A 0021;	
    // (㐺) CJK UNIFIED IDEOGRAPH-343A	[FB80 B43A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x343A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB43A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_155)
{
    // 343A 003F;	
    // (㐺) CJK UNIFIED IDEOGRAPH-343A	[FB80 B43A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x343A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB43A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_156)
{
    // 343A 0061;	
    // (㐺) CJK UNIFIED IDEOGRAPH-343A	[FB80 B43A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x343A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB43A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_157)
{
    // 343A 0041;	
    // (㐺) CJK UNIFIED IDEOGRAPH-343A	[FB80 B43A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x343A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB43A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_158)
{
    // 343A 0062;	
    // (㐺) CJK UNIFIED IDEOGRAPH-343A	[FB80 B43A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x343A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB43A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_159)
{
    // 343B 0021;	
    // (㐻) CJK UNIFIED IDEOGRAPH-343B	[FB80 B43B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x343B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB43B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_160)
{
    // 343B 003F;	
    // (㐻) CJK UNIFIED IDEOGRAPH-343B	[FB80 B43B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x343B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB43B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_161)
{
    // 343B 0061;	
    // (㐻) CJK UNIFIED IDEOGRAPH-343B	[FB80 B43B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x343B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB43B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_162)
{
    // 343B 0041;	
    // (㐻) CJK UNIFIED IDEOGRAPH-343B	[FB80 B43B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x343B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB43B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_163)
{
    // 343B 0062;	
    // (㐻) CJK UNIFIED IDEOGRAPH-343B	[FB80 B43B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x343B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB43B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_164)
{
    // 343C 0021;	
    // (㐼) CJK UNIFIED IDEOGRAPH-343C	[FB80 B43C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x343C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB43C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_165)
{
    // 343C 003F;	
    // (㐼) CJK UNIFIED IDEOGRAPH-343C	[FB80 B43C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x343C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB43C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_166)
{
    // 343C 0061;	
    // (㐼) CJK UNIFIED IDEOGRAPH-343C	[FB80 B43C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x343C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB43C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_167)
{
    // 343C 0041;	
    // (㐼) CJK UNIFIED IDEOGRAPH-343C	[FB80 B43C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x343C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB43C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_168)
{
    // 343C 0062;	
    // (㐼) CJK UNIFIED IDEOGRAPH-343C	[FB80 B43C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x343C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB43C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_169)
{
    // 343D 0021;	
    // (㐽) CJK UNIFIED IDEOGRAPH-343D	[FB80 B43D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x343D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB43D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_170)
{
    // 343D 003F;	
    // (㐽) CJK UNIFIED IDEOGRAPH-343D	[FB80 B43D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x343D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB43D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_171)
{
    // 343D 0061;	
    // (㐽) CJK UNIFIED IDEOGRAPH-343D	[FB80 B43D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x343D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB43D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_172)
{
    // 343D 0041;	
    // (㐽) CJK UNIFIED IDEOGRAPH-343D	[FB80 B43D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x343D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB43D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_173)
{
    // 343D 0062;	
    // (㐽) CJK UNIFIED IDEOGRAPH-343D	[FB80 B43D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x343D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB43D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_174)
{
    // 343E 0021;	
    // (㐾) CJK UNIFIED IDEOGRAPH-343E	[FB80 B43E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x343E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB43E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_175)
{
    // 343E 003F;	
    // (㐾) CJK UNIFIED IDEOGRAPH-343E	[FB80 B43E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x343E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB43E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_176)
{
    // 343E 0061;	
    // (㐾) CJK UNIFIED IDEOGRAPH-343E	[FB80 B43E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x343E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB43E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_177)
{
    // 343E 0041;	
    // (㐾) CJK UNIFIED IDEOGRAPH-343E	[FB80 B43E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x343E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB43E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_178)
{
    // 343E 0062;	
    // (㐾) CJK UNIFIED IDEOGRAPH-343E	[FB80 B43E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x343E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB43E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_179)
{
    // 343F 0021;	
    // (㐿) CJK UNIFIED IDEOGRAPH-343F	[FB80 B43F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x343F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB43F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_180)
{
    // 343F 003F;	
    // (㐿) CJK UNIFIED IDEOGRAPH-343F	[FB80 B43F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x343F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB43F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_181)
{
    // 343F 0061;	
    // (㐿) CJK UNIFIED IDEOGRAPH-343F	[FB80 B43F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x343F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB43F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_182)
{
    // 343F 0041;	
    // (㐿) CJK UNIFIED IDEOGRAPH-343F	[FB80 B43F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x343F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB43F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_183)
{
    // 343F 0062;	
    // (㐿) CJK UNIFIED IDEOGRAPH-343F	[FB80 B43F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x343F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB43F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_184)
{
    // 3440 0021;	
    // (㑀) CJK UNIFIED IDEOGRAPH-3440	[FB80 B440 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3440, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB440, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_185)
{
    // 3440 003F;	
    // (㑀) CJK UNIFIED IDEOGRAPH-3440	[FB80 B440 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3440, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB440, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_186)
{
    // 3440 0061;	
    // (㑀) CJK UNIFIED IDEOGRAPH-3440	[FB80 B440 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3440, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB440, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_187)
{
    // 3440 0041;	
    // (㑀) CJK UNIFIED IDEOGRAPH-3440	[FB80 B440 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3440, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB440, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_188)
{
    // 3440 0062;	
    // (㑀) CJK UNIFIED IDEOGRAPH-3440	[FB80 B440 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3440, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB440, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_189)
{
    // 3441 0021;	
    // (㑁) CJK UNIFIED IDEOGRAPH-3441	[FB80 B441 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3441, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB441, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_190)
{
    // 3441 003F;	
    // (㑁) CJK UNIFIED IDEOGRAPH-3441	[FB80 B441 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3441, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB441, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_191)
{
    // 3441 0061;	
    // (㑁) CJK UNIFIED IDEOGRAPH-3441	[FB80 B441 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3441, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB441, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_192)
{
    // 3441 0041;	
    // (㑁) CJK UNIFIED IDEOGRAPH-3441	[FB80 B441 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3441, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB441, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_193)
{
    // 3441 0062;	
    // (㑁) CJK UNIFIED IDEOGRAPH-3441	[FB80 B441 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3441, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB441, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_194)
{
    // 3442 0021;	
    // (㑂) CJK UNIFIED IDEOGRAPH-3442	[FB80 B442 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3442, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB442, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_195)
{
    // 3442 003F;	
    // (㑂) CJK UNIFIED IDEOGRAPH-3442	[FB80 B442 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3442, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB442, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_196)
{
    // 3442 0061;	
    // (㑂) CJK UNIFIED IDEOGRAPH-3442	[FB80 B442 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3442, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB442, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_197)
{
    // 3442 0041;	
    // (㑂) CJK UNIFIED IDEOGRAPH-3442	[FB80 B442 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3442, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB442, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_198)
{
    // 3442 0062;	
    // (㑂) CJK UNIFIED IDEOGRAPH-3442	[FB80 B442 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3442, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB442, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_199)
{
    // 3443 0021;	
    // (㑃) CJK UNIFIED IDEOGRAPH-3443	[FB80 B443 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3443, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB443, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_200)
{
    // 3443 003F;	
    // (㑃) CJK UNIFIED IDEOGRAPH-3443	[FB80 B443 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3443, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB443, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_201)
{
    // 3443 0061;	
    // (㑃) CJK UNIFIED IDEOGRAPH-3443	[FB80 B443 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3443, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB443, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_202)
{
    // 3443 0041;	
    // (㑃) CJK UNIFIED IDEOGRAPH-3443	[FB80 B443 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3443, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB443, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_203)
{
    // 3443 0062;	
    // (㑃) CJK UNIFIED IDEOGRAPH-3443	[FB80 B443 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3443, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB443, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_204)
{
    // 3444 0021;	
    // (㑄) CJK UNIFIED IDEOGRAPH-3444	[FB80 B444 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3444, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB444, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_205)
{
    // 3444 003F;	
    // (㑄) CJK UNIFIED IDEOGRAPH-3444	[FB80 B444 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3444, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB444, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_206)
{
    // 3444 0061;	
    // (㑄) CJK UNIFIED IDEOGRAPH-3444	[FB80 B444 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3444, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB444, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_207)
{
    // 3444 0041;	
    // (㑄) CJK UNIFIED IDEOGRAPH-3444	[FB80 B444 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3444, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB444, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_208)
{
    // 3444 0062;	
    // (㑄) CJK UNIFIED IDEOGRAPH-3444	[FB80 B444 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3444, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB444, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_209)
{
    // 3445 0021;	
    // (㑅) CJK UNIFIED IDEOGRAPH-3445	[FB80 B445 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3445, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB445, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_210)
{
    // 3445 003F;	
    // (㑅) CJK UNIFIED IDEOGRAPH-3445	[FB80 B445 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3445, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB445, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_211)
{
    // 3445 0061;	
    // (㑅) CJK UNIFIED IDEOGRAPH-3445	[FB80 B445 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3445, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB445, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_212)
{
    // 3445 0041;	
    // (㑅) CJK UNIFIED IDEOGRAPH-3445	[FB80 B445 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3445, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB445, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_213)
{
    // 3445 0062;	
    // (㑅) CJK UNIFIED IDEOGRAPH-3445	[FB80 B445 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3445, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB445, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_214)
{
    // 3446 0021;	
    // (㑆) CJK UNIFIED IDEOGRAPH-3446	[FB80 B446 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3446, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB446, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_215)
{
    // 3446 003F;	
    // (㑆) CJK UNIFIED IDEOGRAPH-3446	[FB80 B446 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3446, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB446, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_216)
{
    // 3446 0061;	
    // (㑆) CJK UNIFIED IDEOGRAPH-3446	[FB80 B446 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3446, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB446, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_217)
{
    // 3446 0041;	
    // (㑆) CJK UNIFIED IDEOGRAPH-3446	[FB80 B446 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3446, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB446, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_218)
{
    // 3446 0062;	
    // (㑆) CJK UNIFIED IDEOGRAPH-3446	[FB80 B446 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3446, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB446, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_219)
{
    // 3447 0021;	
    // (㑇) CJK UNIFIED IDEOGRAPH-3447	[FB80 B447 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3447, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB447, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_220)
{
    // 3447 003F;	
    // (㑇) CJK UNIFIED IDEOGRAPH-3447	[FB80 B447 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3447, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB447, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_221)
{
    // 3447 0061;	
    // (㑇) CJK UNIFIED IDEOGRAPH-3447	[FB80 B447 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3447, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB447, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_222)
{
    // 3447 0041;	
    // (㑇) CJK UNIFIED IDEOGRAPH-3447	[FB80 B447 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3447, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB447, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_223)
{
    // 3447 0062;	
    // (㑇) CJK UNIFIED IDEOGRAPH-3447	[FB80 B447 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3447, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB447, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_224)
{
    // 3448 0021;	
    // (㑈) CJK UNIFIED IDEOGRAPH-3448	[FB80 B448 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3448, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB448, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_225)
{
    // 3448 003F;	
    // (㑈) CJK UNIFIED IDEOGRAPH-3448	[FB80 B448 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3448, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB448, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_226)
{
    // 3448 0061;	
    // (㑈) CJK UNIFIED IDEOGRAPH-3448	[FB80 B448 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3448, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB448, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_227)
{
    // 3448 0041;	
    // (㑈) CJK UNIFIED IDEOGRAPH-3448	[FB80 B448 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3448, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB448, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_228)
{
    // 3448 0062;	
    // (㑈) CJK UNIFIED IDEOGRAPH-3448	[FB80 B448 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3448, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB448, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_229)
{
    // 3449 0021;	
    // (㑉) CJK UNIFIED IDEOGRAPH-3449	[FB80 B449 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3449, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB449, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_230)
{
    // 3449 003F;	
    // (㑉) CJK UNIFIED IDEOGRAPH-3449	[FB80 B449 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3449, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB449, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_231)
{
    // 3449 0061;	
    // (㑉) CJK UNIFIED IDEOGRAPH-3449	[FB80 B449 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3449, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB449, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_232)
{
    // 3449 0041;	
    // (㑉) CJK UNIFIED IDEOGRAPH-3449	[FB80 B449 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3449, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB449, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_233)
{
    // 3449 0062;	
    // (㑉) CJK UNIFIED IDEOGRAPH-3449	[FB80 B449 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3449, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB449, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_234)
{
    // 344A 0021;	
    // (㑊) CJK UNIFIED IDEOGRAPH-344A	[FB80 B44A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x344A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB44A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_235)
{
    // 344A 003F;	
    // (㑊) CJK UNIFIED IDEOGRAPH-344A	[FB80 B44A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x344A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB44A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_236)
{
    // 344A 0061;	
    // (㑊) CJK UNIFIED IDEOGRAPH-344A	[FB80 B44A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x344A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB44A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_237)
{
    // 344A 0041;	
    // (㑊) CJK UNIFIED IDEOGRAPH-344A	[FB80 B44A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x344A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB44A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_238)
{
    // 344A 0062;	
    // (㑊) CJK UNIFIED IDEOGRAPH-344A	[FB80 B44A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x344A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB44A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_239)
{
    // 344B 0021;	
    // (㑋) CJK UNIFIED IDEOGRAPH-344B	[FB80 B44B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x344B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB44B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_240)
{
    // 344B 003F;	
    // (㑋) CJK UNIFIED IDEOGRAPH-344B	[FB80 B44B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x344B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB44B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_241)
{
    // 344B 0061;	
    // (㑋) CJK UNIFIED IDEOGRAPH-344B	[FB80 B44B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x344B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB44B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_242)
{
    // 344B 0041;	
    // (㑋) CJK UNIFIED IDEOGRAPH-344B	[FB80 B44B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x344B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB44B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_243)
{
    // 344B 0062;	
    // (㑋) CJK UNIFIED IDEOGRAPH-344B	[FB80 B44B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x344B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB44B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_244)
{
    // 344C 0021;	
    // (㑌) CJK UNIFIED IDEOGRAPH-344C	[FB80 B44C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x344C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB44C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_245)
{
    // 344C 003F;	
    // (㑌) CJK UNIFIED IDEOGRAPH-344C	[FB80 B44C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x344C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB44C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_246)
{
    // 344C 0061;	
    // (㑌) CJK UNIFIED IDEOGRAPH-344C	[FB80 B44C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x344C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB44C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_247)
{
    // 344C 0041;	
    // (㑌) CJK UNIFIED IDEOGRAPH-344C	[FB80 B44C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x344C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB44C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_248)
{
    // 344C 0062;	
    // (㑌) CJK UNIFIED IDEOGRAPH-344C	[FB80 B44C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x344C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB44C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_249)
{
    // 344D 0021;	
    // (㑍) CJK UNIFIED IDEOGRAPH-344D	[FB80 B44D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x344D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB44D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_250)
{
    // 344D 003F;	
    // (㑍) CJK UNIFIED IDEOGRAPH-344D	[FB80 B44D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x344D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB44D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_251)
{
    // 344D 0061;	
    // (㑍) CJK UNIFIED IDEOGRAPH-344D	[FB80 B44D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x344D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB44D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_252)
{
    // 344D 0041;	
    // (㑍) CJK UNIFIED IDEOGRAPH-344D	[FB80 B44D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x344D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB44D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_253)
{
    // 344D 0062;	
    // (㑍) CJK UNIFIED IDEOGRAPH-344D	[FB80 B44D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x344D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB44D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_254)
{
    // 344E 0021;	
    // (㑎) CJK UNIFIED IDEOGRAPH-344E	[FB80 B44E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x344E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB44E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_255)
{
    // 344E 003F;	
    // (㑎) CJK UNIFIED IDEOGRAPH-344E	[FB80 B44E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x344E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB44E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_256)
{
    // 344E 0061;	
    // (㑎) CJK UNIFIED IDEOGRAPH-344E	[FB80 B44E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x344E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB44E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_257)
{
    // 344E 0041;	
    // (㑎) CJK UNIFIED IDEOGRAPH-344E	[FB80 B44E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x344E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB44E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_258)
{
    // 344E 0062;	
    // (㑎) CJK UNIFIED IDEOGRAPH-344E	[FB80 B44E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x344E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB44E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_259)
{
    // 344F 0021;	
    // (㑏) CJK UNIFIED IDEOGRAPH-344F	[FB80 B44F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x344F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB44F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_260)
{
    // 344F 003F;	
    // (㑏) CJK UNIFIED IDEOGRAPH-344F	[FB80 B44F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x344F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB44F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_261)
{
    // 344F 0061;	
    // (㑏) CJK UNIFIED IDEOGRAPH-344F	[FB80 B44F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x344F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB44F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_262)
{
    // 344F 0041;	
    // (㑏) CJK UNIFIED IDEOGRAPH-344F	[FB80 B44F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x344F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB44F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_263)
{
    // 344F 0062;	
    // (㑏) CJK UNIFIED IDEOGRAPH-344F	[FB80 B44F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x344F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB44F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_264)
{
    // 3450 0021;	
    // (㑐) CJK UNIFIED IDEOGRAPH-3450	[FB80 B450 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3450, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB450, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_265)
{
    // 3450 003F;	
    // (㑐) CJK UNIFIED IDEOGRAPH-3450	[FB80 B450 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3450, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB450, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_266)
{
    // 3450 0061;	
    // (㑐) CJK UNIFIED IDEOGRAPH-3450	[FB80 B450 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3450, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB450, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_267)
{
    // 3450 0041;	
    // (㑐) CJK UNIFIED IDEOGRAPH-3450	[FB80 B450 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3450, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB450, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_268)
{
    // 3450 0062;	
    // (㑐) CJK UNIFIED IDEOGRAPH-3450	[FB80 B450 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3450, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB450, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_269)
{
    // 3451 0021;	
    // (㑑) CJK UNIFIED IDEOGRAPH-3451	[FB80 B451 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3451, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB451, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_270)
{
    // 3451 003F;	
    // (㑑) CJK UNIFIED IDEOGRAPH-3451	[FB80 B451 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3451, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB451, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_271)
{
    // 3451 0061;	
    // (㑑) CJK UNIFIED IDEOGRAPH-3451	[FB80 B451 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3451, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB451, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_272)
{
    // 3451 0041;	
    // (㑑) CJK UNIFIED IDEOGRAPH-3451	[FB80 B451 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3451, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB451, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_273)
{
    // 3451 0062;	
    // (㑑) CJK UNIFIED IDEOGRAPH-3451	[FB80 B451 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3451, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB451, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_274)
{
    // 3452 0021;	
    // (㑒) CJK UNIFIED IDEOGRAPH-3452	[FB80 B452 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3452, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB452, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_275)
{
    // 3452 003F;	
    // (㑒) CJK UNIFIED IDEOGRAPH-3452	[FB80 B452 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3452, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB452, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_276)
{
    // 3452 0061;	
    // (㑒) CJK UNIFIED IDEOGRAPH-3452	[FB80 B452 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3452, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB452, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_277)
{
    // 3452 0041;	
    // (㑒) CJK UNIFIED IDEOGRAPH-3452	[FB80 B452 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3452, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB452, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_278)
{
    // 3452 0062;	
    // (㑒) CJK UNIFIED IDEOGRAPH-3452	[FB80 B452 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3452, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB452, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_279)
{
    // 3453 0021;	
    // (㑓) CJK UNIFIED IDEOGRAPH-3453	[FB80 B453 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3453, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB453, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_280)
{
    // 3453 003F;	
    // (㑓) CJK UNIFIED IDEOGRAPH-3453	[FB80 B453 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3453, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB453, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_281)
{
    // 3453 0061;	
    // (㑓) CJK UNIFIED IDEOGRAPH-3453	[FB80 B453 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3453, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB453, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_282)
{
    // 3453 0041;	
    // (㑓) CJK UNIFIED IDEOGRAPH-3453	[FB80 B453 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3453, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB453, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_283)
{
    // 3453 0062;	
    // (㑓) CJK UNIFIED IDEOGRAPH-3453	[FB80 B453 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3453, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB453, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_284)
{
    // 3454 0021;	
    // (㑔) CJK UNIFIED IDEOGRAPH-3454	[FB80 B454 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3454, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB454, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_285)
{
    // 3454 003F;	
    // (㑔) CJK UNIFIED IDEOGRAPH-3454	[FB80 B454 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3454, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB454, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_286)
{
    // 3454 0061;	
    // (㑔) CJK UNIFIED IDEOGRAPH-3454	[FB80 B454 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3454, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB454, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_287)
{
    // 3454 0041;	
    // (㑔) CJK UNIFIED IDEOGRAPH-3454	[FB80 B454 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3454, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB454, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_288)
{
    // 3454 0062;	
    // (㑔) CJK UNIFIED IDEOGRAPH-3454	[FB80 B454 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3454, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB454, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_289)
{
    // 3455 0021;	
    // (㑕) CJK UNIFIED IDEOGRAPH-3455	[FB80 B455 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3455, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB455, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_290)
{
    // 3455 003F;	
    // (㑕) CJK UNIFIED IDEOGRAPH-3455	[FB80 B455 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3455, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB455, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_291)
{
    // 3455 0061;	
    // (㑕) CJK UNIFIED IDEOGRAPH-3455	[FB80 B455 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3455, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB455, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_292)
{
    // 3455 0041;	
    // (㑕) CJK UNIFIED IDEOGRAPH-3455	[FB80 B455 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3455, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB455, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_293)
{
    // 3455 0062;	
    // (㑕) CJK UNIFIED IDEOGRAPH-3455	[FB80 B455 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3455, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB455, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_294)
{
    // 3456 0021;	
    // (㑖) CJK UNIFIED IDEOGRAPH-3456	[FB80 B456 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3456, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB456, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_295)
{
    // 3456 003F;	
    // (㑖) CJK UNIFIED IDEOGRAPH-3456	[FB80 B456 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3456, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB456, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_296)
{
    // 3456 0061;	
    // (㑖) CJK UNIFIED IDEOGRAPH-3456	[FB80 B456 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3456, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB456, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_297)
{
    // 3456 0041;	
    // (㑖) CJK UNIFIED IDEOGRAPH-3456	[FB80 B456 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3456, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB456, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_298)
{
    // 3456 0062;	
    // (㑖) CJK UNIFIED IDEOGRAPH-3456	[FB80 B456 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3456, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB456, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_299)
{
    // 3457 0021;	
    // (㑗) CJK UNIFIED IDEOGRAPH-3457	[FB80 B457 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3457, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB457, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_300)
{
    // 3457 003F;	
    // (㑗) CJK UNIFIED IDEOGRAPH-3457	[FB80 B457 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3457, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB457, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_301)
{
    // 3457 0061;	
    // (㑗) CJK UNIFIED IDEOGRAPH-3457	[FB80 B457 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3457, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB457, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_302)
{
    // 3457 0041;	
    // (㑗) CJK UNIFIED IDEOGRAPH-3457	[FB80 B457 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3457, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB457, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_303)
{
    // 3457 0062;	
    // (㑗) CJK UNIFIED IDEOGRAPH-3457	[FB80 B457 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3457, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB457, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_304)
{
    // 3458 0021;	
    // (㑘) CJK UNIFIED IDEOGRAPH-3458	[FB80 B458 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3458, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB458, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_305)
{
    // 3458 003F;	
    // (㑘) CJK UNIFIED IDEOGRAPH-3458	[FB80 B458 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3458, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB458, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_306)
{
    // 3458 0061;	
    // (㑘) CJK UNIFIED IDEOGRAPH-3458	[FB80 B458 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3458, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB458, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_307)
{
    // 3458 0041;	
    // (㑘) CJK UNIFIED IDEOGRAPH-3458	[FB80 B458 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3458, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB458, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_308)
{
    // 3458 0062;	
    // (㑘) CJK UNIFIED IDEOGRAPH-3458	[FB80 B458 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3458, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB458, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_309)
{
    // 3459 0021;	
    // (㑙) CJK UNIFIED IDEOGRAPH-3459	[FB80 B459 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3459, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB459, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_310)
{
    // 3459 003F;	
    // (㑙) CJK UNIFIED IDEOGRAPH-3459	[FB80 B459 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3459, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB459, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_311)
{
    // 3459 0061;	
    // (㑙) CJK UNIFIED IDEOGRAPH-3459	[FB80 B459 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3459, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB459, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_312)
{
    // 3459 0041;	
    // (㑙) CJK UNIFIED IDEOGRAPH-3459	[FB80 B459 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3459, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB459, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_313)
{
    // 3459 0062;	
    // (㑙) CJK UNIFIED IDEOGRAPH-3459	[FB80 B459 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3459, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB459, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_314)
{
    // 345A 0021;	
    // (㑚) CJK UNIFIED IDEOGRAPH-345A	[FB80 B45A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x345A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB45A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_315)
{
    // 345A 003F;	
    // (㑚) CJK UNIFIED IDEOGRAPH-345A	[FB80 B45A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x345A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB45A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_316)
{
    // 345A 0061;	
    // (㑚) CJK UNIFIED IDEOGRAPH-345A	[FB80 B45A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x345A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB45A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_317)
{
    // 345A 0041;	
    // (㑚) CJK UNIFIED IDEOGRAPH-345A	[FB80 B45A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x345A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB45A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_318)
{
    // 345A 0062;	
    // (㑚) CJK UNIFIED IDEOGRAPH-345A	[FB80 B45A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x345A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB45A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_319)
{
    // 345B 0021;	
    // (㑛) CJK UNIFIED IDEOGRAPH-345B	[FB80 B45B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x345B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB45B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_320)
{
    // 345B 003F;	
    // (㑛) CJK UNIFIED IDEOGRAPH-345B	[FB80 B45B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x345B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB45B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_321)
{
    // 345B 0061;	
    // (㑛) CJK UNIFIED IDEOGRAPH-345B	[FB80 B45B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x345B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB45B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_322)
{
    // 345B 0041;	
    // (㑛) CJK UNIFIED IDEOGRAPH-345B	[FB80 B45B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x345B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB45B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_323)
{
    // 345B 0062;	
    // (㑛) CJK UNIFIED IDEOGRAPH-345B	[FB80 B45B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x345B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB45B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_324)
{
    // 345C 0021;	
    // (㑜) CJK UNIFIED IDEOGRAPH-345C	[FB80 B45C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x345C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB45C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_325)
{
    // 345C 003F;	
    // (㑜) CJK UNIFIED IDEOGRAPH-345C	[FB80 B45C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x345C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB45C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_326)
{
    // 345C 0061;	
    // (㑜) CJK UNIFIED IDEOGRAPH-345C	[FB80 B45C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x345C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB45C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_327)
{
    // 345C 0041;	
    // (㑜) CJK UNIFIED IDEOGRAPH-345C	[FB80 B45C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x345C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB45C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_328)
{
    // 345C 0062;	
    // (㑜) CJK UNIFIED IDEOGRAPH-345C	[FB80 B45C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x345C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB45C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_329)
{
    // 345D 0021;	
    // (㑝) CJK UNIFIED IDEOGRAPH-345D	[FB80 B45D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x345D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB45D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_330)
{
    // 345D 003F;	
    // (㑝) CJK UNIFIED IDEOGRAPH-345D	[FB80 B45D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x345D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB45D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_331)
{
    // 345D 0061;	
    // (㑝) CJK UNIFIED IDEOGRAPH-345D	[FB80 B45D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x345D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB45D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_332)
{
    // 345D 0041;	
    // (㑝) CJK UNIFIED IDEOGRAPH-345D	[FB80 B45D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x345D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB45D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_333)
{
    // 345D 0062;	
    // (㑝) CJK UNIFIED IDEOGRAPH-345D	[FB80 B45D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x345D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB45D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_334)
{
    // 345E 0021;	
    // (㑞) CJK UNIFIED IDEOGRAPH-345E	[FB80 B45E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x345E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB45E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_335)
{
    // 345E 003F;	
    // (㑞) CJK UNIFIED IDEOGRAPH-345E	[FB80 B45E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x345E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB45E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_336)
{
    // 345E 0061;	
    // (㑞) CJK UNIFIED IDEOGRAPH-345E	[FB80 B45E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x345E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB45E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_337)
{
    // 345E 0041;	
    // (㑞) CJK UNIFIED IDEOGRAPH-345E	[FB80 B45E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x345E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB45E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_338)
{
    // 345E 0062;	
    // (㑞) CJK UNIFIED IDEOGRAPH-345E	[FB80 B45E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x345E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB45E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_339)
{
    // 345F 0021;	
    // (㑟) CJK UNIFIED IDEOGRAPH-345F	[FB80 B45F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x345F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB45F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_340)
{
    // 345F 003F;	
    // (㑟) CJK UNIFIED IDEOGRAPH-345F	[FB80 B45F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x345F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB45F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_341)
{
    // 345F 0061;	
    // (㑟) CJK UNIFIED IDEOGRAPH-345F	[FB80 B45F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x345F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB45F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_342)
{
    // 345F 0041;	
    // (㑟) CJK UNIFIED IDEOGRAPH-345F	[FB80 B45F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x345F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB45F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_343)
{
    // 345F 0062;	
    // (㑟) CJK UNIFIED IDEOGRAPH-345F	[FB80 B45F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x345F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB45F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_344)
{
    // 3460 0021;	
    // (㑠) CJK UNIFIED IDEOGRAPH-3460	[FB80 B460 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3460, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB460, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_345)
{
    // 3460 003F;	
    // (㑠) CJK UNIFIED IDEOGRAPH-3460	[FB80 B460 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3460, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB460, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_346)
{
    // 3460 0061;	
    // (㑠) CJK UNIFIED IDEOGRAPH-3460	[FB80 B460 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3460, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB460, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_347)
{
    // 3460 0041;	
    // (㑠) CJK UNIFIED IDEOGRAPH-3460	[FB80 B460 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3460, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB460, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_348)
{
    // 3460 0062;	
    // (㑠) CJK UNIFIED IDEOGRAPH-3460	[FB80 B460 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3460, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB460, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_349)
{
    // 3461 0021;	
    // (㑡) CJK UNIFIED IDEOGRAPH-3461	[FB80 B461 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3461, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB461, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_350)
{
    // 3461 003F;	
    // (㑡) CJK UNIFIED IDEOGRAPH-3461	[FB80 B461 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3461, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB461, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_351)
{
    // 3461 0061;	
    // (㑡) CJK UNIFIED IDEOGRAPH-3461	[FB80 B461 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3461, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB461, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_352)
{
    // 3461 0041;	
    // (㑡) CJK UNIFIED IDEOGRAPH-3461	[FB80 B461 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3461, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB461, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_353)
{
    // 3461 0062;	
    // (㑡) CJK UNIFIED IDEOGRAPH-3461	[FB80 B461 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3461, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB461, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_354)
{
    // 3462 0021;	
    // (㑢) CJK UNIFIED IDEOGRAPH-3462	[FB80 B462 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3462, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB462, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_355)
{
    // 3462 003F;	
    // (㑢) CJK UNIFIED IDEOGRAPH-3462	[FB80 B462 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3462, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB462, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_356)
{
    // 3462 0061;	
    // (㑢) CJK UNIFIED IDEOGRAPH-3462	[FB80 B462 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3462, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB462, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_357)
{
    // 3462 0041;	
    // (㑢) CJK UNIFIED IDEOGRAPH-3462	[FB80 B462 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3462, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB462, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_358)
{
    // 3462 0062;	
    // (㑢) CJK UNIFIED IDEOGRAPH-3462	[FB80 B462 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3462, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB462, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_359)
{
    // 3463 0021;	
    // (㑣) CJK UNIFIED IDEOGRAPH-3463	[FB80 B463 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3463, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB463, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_360)
{
    // 3463 003F;	
    // (㑣) CJK UNIFIED IDEOGRAPH-3463	[FB80 B463 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3463, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB463, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_361)
{
    // 3463 0061;	
    // (㑣) CJK UNIFIED IDEOGRAPH-3463	[FB80 B463 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3463, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB463, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_362)
{
    // 3463 0041;	
    // (㑣) CJK UNIFIED IDEOGRAPH-3463	[FB80 B463 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3463, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB463, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_363)
{
    // 3463 0062;	
    // (㑣) CJK UNIFIED IDEOGRAPH-3463	[FB80 B463 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3463, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB463, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_364)
{
    // 3464 0021;	
    // (㑤) CJK UNIFIED IDEOGRAPH-3464	[FB80 B464 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3464, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB464, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_365)
{
    // 3464 003F;	
    // (㑤) CJK UNIFIED IDEOGRAPH-3464	[FB80 B464 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3464, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB464, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_366)
{
    // 3464 0061;	
    // (㑤) CJK UNIFIED IDEOGRAPH-3464	[FB80 B464 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3464, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB464, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_367)
{
    // 3464 0041;	
    // (㑤) CJK UNIFIED IDEOGRAPH-3464	[FB80 B464 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3464, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB464, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_368)
{
    // 3464 0062;	
    // (㑤) CJK UNIFIED IDEOGRAPH-3464	[FB80 B464 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3464, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB464, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_369)
{
    // 3465 0021;	
    // (㑥) CJK UNIFIED IDEOGRAPH-3465	[FB80 B465 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3465, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB465, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_370)
{
    // 3465 003F;	
    // (㑥) CJK UNIFIED IDEOGRAPH-3465	[FB80 B465 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3465, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB465, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_371)
{
    // 3465 0061;	
    // (㑥) CJK UNIFIED IDEOGRAPH-3465	[FB80 B465 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3465, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB465, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_372)
{
    // 3465 0041;	
    // (㑥) CJK UNIFIED IDEOGRAPH-3465	[FB80 B465 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3465, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB465, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_373)
{
    // 3465 0062;	
    // (㑥) CJK UNIFIED IDEOGRAPH-3465	[FB80 B465 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3465, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB465, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_374)
{
    // 3466 0021;	
    // (㑦) CJK UNIFIED IDEOGRAPH-3466	[FB80 B466 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3466, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB466, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_375)
{
    // 3466 003F;	
    // (㑦) CJK UNIFIED IDEOGRAPH-3466	[FB80 B466 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3466, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB466, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_376)
{
    // 3466 0061;	
    // (㑦) CJK UNIFIED IDEOGRAPH-3466	[FB80 B466 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3466, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB466, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_377)
{
    // 3466 0041;	
    // (㑦) CJK UNIFIED IDEOGRAPH-3466	[FB80 B466 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3466, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB466, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_378)
{
    // 3466 0062;	
    // (㑦) CJK UNIFIED IDEOGRAPH-3466	[FB80 B466 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3466, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB466, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_379)
{
    // 3467 0021;	
    // (㑧) CJK UNIFIED IDEOGRAPH-3467	[FB80 B467 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3467, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB467, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_380)
{
    // 3467 003F;	
    // (㑧) CJK UNIFIED IDEOGRAPH-3467	[FB80 B467 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3467, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB467, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_381)
{
    // 3467 0061;	
    // (㑧) CJK UNIFIED IDEOGRAPH-3467	[FB80 B467 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3467, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB467, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_382)
{
    // 3467 0041;	
    // (㑧) CJK UNIFIED IDEOGRAPH-3467	[FB80 B467 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3467, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB467, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_383)
{
    // 3467 0062;	
    // (㑧) CJK UNIFIED IDEOGRAPH-3467	[FB80 B467 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3467, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB467, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_384)
{
    // 3468 0021;	
    // (㑨) CJK UNIFIED IDEOGRAPH-3468	[FB80 B468 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3468, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB468, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_385)
{
    // 3468 003F;	
    // (㑨) CJK UNIFIED IDEOGRAPH-3468	[FB80 B468 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3468, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB468, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_386)
{
    // 3468 0061;	
    // (㑨) CJK UNIFIED IDEOGRAPH-3468	[FB80 B468 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3468, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB468, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_387)
{
    // 3468 0041;	
    // (㑨) CJK UNIFIED IDEOGRAPH-3468	[FB80 B468 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3468, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB468, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_388)
{
    // 3468 0062;	
    // (㑨) CJK UNIFIED IDEOGRAPH-3468	[FB80 B468 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3468, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB468, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_389)
{
    // 3469 0021;	
    // (㑩) CJK UNIFIED IDEOGRAPH-3469	[FB80 B469 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3469, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB469, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_390)
{
    // 3469 003F;	
    // (㑩) CJK UNIFIED IDEOGRAPH-3469	[FB80 B469 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3469, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB469, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_391)
{
    // 3469 0061;	
    // (㑩) CJK UNIFIED IDEOGRAPH-3469	[FB80 B469 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3469, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB469, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_392)
{
    // 3469 0041;	
    // (㑩) CJK UNIFIED IDEOGRAPH-3469	[FB80 B469 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3469, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB469, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_393)
{
    // 3469 0062;	
    // (㑩) CJK UNIFIED IDEOGRAPH-3469	[FB80 B469 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3469, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB469, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_394)
{
    // 346A 0021;	
    // (㑪) CJK UNIFIED IDEOGRAPH-346A	[FB80 B46A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x346A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB46A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_395)
{
    // 346A 003F;	
    // (㑪) CJK UNIFIED IDEOGRAPH-346A	[FB80 B46A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x346A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB46A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_396)
{
    // 346A 0061;	
    // (㑪) CJK UNIFIED IDEOGRAPH-346A	[FB80 B46A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x346A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB46A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_397)
{
    // 346A 0041;	
    // (㑪) CJK UNIFIED IDEOGRAPH-346A	[FB80 B46A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x346A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB46A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_398)
{
    // 346A 0062;	
    // (㑪) CJK UNIFIED IDEOGRAPH-346A	[FB80 B46A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x346A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB46A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_399)
{
    // 346B 0021;	
    // (㑫) CJK UNIFIED IDEOGRAPH-346B	[FB80 B46B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x346B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB46B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_400)
{
    // 346B 003F;	
    // (㑫) CJK UNIFIED IDEOGRAPH-346B	[FB80 B46B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x346B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB46B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_401)
{
    // 346B 0061;	
    // (㑫) CJK UNIFIED IDEOGRAPH-346B	[FB80 B46B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x346B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB46B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_402)
{
    // 346B 0041;	
    // (㑫) CJK UNIFIED IDEOGRAPH-346B	[FB80 B46B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x346B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB46B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_403)
{
    // 346B 0062;	
    // (㑫) CJK UNIFIED IDEOGRAPH-346B	[FB80 B46B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x346B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB46B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_404)
{
    // 346C 0021;	
    // (㑬) CJK UNIFIED IDEOGRAPH-346C	[FB80 B46C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x346C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB46C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_405)
{
    // 346C 003F;	
    // (㑬) CJK UNIFIED IDEOGRAPH-346C	[FB80 B46C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x346C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB46C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_406)
{
    // 346C 0061;	
    // (㑬) CJK UNIFIED IDEOGRAPH-346C	[FB80 B46C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x346C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB46C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_407)
{
    // 346C 0041;	
    // (㑬) CJK UNIFIED IDEOGRAPH-346C	[FB80 B46C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x346C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB46C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_408)
{
    // 346C 0062;	
    // (㑬) CJK UNIFIED IDEOGRAPH-346C	[FB80 B46C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x346C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB46C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_409)
{
    // 346D 0021;	
    // (㑭) CJK UNIFIED IDEOGRAPH-346D	[FB80 B46D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x346D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB46D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_410)
{
    // 346D 003F;	
    // (㑭) CJK UNIFIED IDEOGRAPH-346D	[FB80 B46D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x346D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB46D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_411)
{
    // 346D 0061;	
    // (㑭) CJK UNIFIED IDEOGRAPH-346D	[FB80 B46D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x346D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB46D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_412)
{
    // 346D 0041;	
    // (㑭) CJK UNIFIED IDEOGRAPH-346D	[FB80 B46D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x346D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB46D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_413)
{
    // 346D 0062;	
    // (㑭) CJK UNIFIED IDEOGRAPH-346D	[FB80 B46D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x346D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB46D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_414)
{
    // 346E 0021;	
    // (㑮) CJK UNIFIED IDEOGRAPH-346E	[FB80 B46E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x346E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB46E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_415)
{
    // 346E 003F;	
    // (㑮) CJK UNIFIED IDEOGRAPH-346E	[FB80 B46E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x346E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB46E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_416)
{
    // 346E 0061;	
    // (㑮) CJK UNIFIED IDEOGRAPH-346E	[FB80 B46E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x346E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB46E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_417)
{
    // 346E 0041;	
    // (㑮) CJK UNIFIED IDEOGRAPH-346E	[FB80 B46E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x346E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB46E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_418)
{
    // 346E 0062;	
    // (㑮) CJK UNIFIED IDEOGRAPH-346E	[FB80 B46E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x346E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB46E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_419)
{
    // 346F 0021;	
    // (㑯) CJK UNIFIED IDEOGRAPH-346F	[FB80 B46F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x346F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB46F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_420)
{
    // 346F 003F;	
    // (㑯) CJK UNIFIED IDEOGRAPH-346F	[FB80 B46F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x346F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB46F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_421)
{
    // 346F 0061;	
    // (㑯) CJK UNIFIED IDEOGRAPH-346F	[FB80 B46F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x346F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB46F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_422)
{
    // 346F 0041;	
    // (㑯) CJK UNIFIED IDEOGRAPH-346F	[FB80 B46F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x346F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB46F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_423)
{
    // 346F 0062;	
    // (㑯) CJK UNIFIED IDEOGRAPH-346F	[FB80 B46F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x346F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB46F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_424)
{
    // 3470 0021;	
    // (㑰) CJK UNIFIED IDEOGRAPH-3470	[FB80 B470 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3470, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB470, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_425)
{
    // 3470 003F;	
    // (㑰) CJK UNIFIED IDEOGRAPH-3470	[FB80 B470 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3470, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB470, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_426)
{
    // 3470 0061;	
    // (㑰) CJK UNIFIED IDEOGRAPH-3470	[FB80 B470 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3470, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB470, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_427)
{
    // 3470 0041;	
    // (㑰) CJK UNIFIED IDEOGRAPH-3470	[FB80 B470 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3470, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB470, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_428)
{
    // 3470 0062;	
    // (㑰) CJK UNIFIED IDEOGRAPH-3470	[FB80 B470 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3470, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB470, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_429)
{
    // 3471 0021;	
    // (㑱) CJK UNIFIED IDEOGRAPH-3471	[FB80 B471 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3471, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB471, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_430)
{
    // 3471 003F;	
    // (㑱) CJK UNIFIED IDEOGRAPH-3471	[FB80 B471 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3471, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB471, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_431)
{
    // 3471 0061;	
    // (㑱) CJK UNIFIED IDEOGRAPH-3471	[FB80 B471 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3471, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB471, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_432)
{
    // 3471 0041;	
    // (㑱) CJK UNIFIED IDEOGRAPH-3471	[FB80 B471 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3471, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB471, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_433)
{
    // 3471 0062;	
    // (㑱) CJK UNIFIED IDEOGRAPH-3471	[FB80 B471 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3471, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB471, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_434)
{
    // 3472 0021;	
    // (㑲) CJK UNIFIED IDEOGRAPH-3472	[FB80 B472 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3472, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB472, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_435)
{
    // 3472 003F;	
    // (㑲) CJK UNIFIED IDEOGRAPH-3472	[FB80 B472 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3472, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB472, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_436)
{
    // 3472 0061;	
    // (㑲) CJK UNIFIED IDEOGRAPH-3472	[FB80 B472 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3472, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB472, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_437)
{
    // 3472 0041;	
    // (㑲) CJK UNIFIED IDEOGRAPH-3472	[FB80 B472 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3472, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB472, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_438)
{
    // 3472 0062;	
    // (㑲) CJK UNIFIED IDEOGRAPH-3472	[FB80 B472 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3472, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB472, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_439)
{
    // 3473 0021;	
    // (㑳) CJK UNIFIED IDEOGRAPH-3473	[FB80 B473 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3473, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB473, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_440)
{
    // 3473 003F;	
    // (㑳) CJK UNIFIED IDEOGRAPH-3473	[FB80 B473 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3473, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB473, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_441)
{
    // 3473 0061;	
    // (㑳) CJK UNIFIED IDEOGRAPH-3473	[FB80 B473 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3473, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB473, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_442)
{
    // 3473 0041;	
    // (㑳) CJK UNIFIED IDEOGRAPH-3473	[FB80 B473 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3473, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB473, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_443)
{
    // 3473 0062;	
    // (㑳) CJK UNIFIED IDEOGRAPH-3473	[FB80 B473 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3473, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB473, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_444)
{
    // 3474 0021;	
    // (㑴) CJK UNIFIED IDEOGRAPH-3474	[FB80 B474 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3474, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB474, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_445)
{
    // 3474 003F;	
    // (㑴) CJK UNIFIED IDEOGRAPH-3474	[FB80 B474 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3474, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB474, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_446)
{
    // 3474 0061;	
    // (㑴) CJK UNIFIED IDEOGRAPH-3474	[FB80 B474 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3474, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB474, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_447)
{
    // 3474 0041;	
    // (㑴) CJK UNIFIED IDEOGRAPH-3474	[FB80 B474 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3474, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB474, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_448)
{
    // 3474 0062;	
    // (㑴) CJK UNIFIED IDEOGRAPH-3474	[FB80 B474 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3474, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB474, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_449)
{
    // 3475 0021;	
    // (㑵) CJK UNIFIED IDEOGRAPH-3475	[FB80 B475 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3475, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB475, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_450)
{
    // 3475 003F;	
    // (㑵) CJK UNIFIED IDEOGRAPH-3475	[FB80 B475 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3475, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB475, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_451)
{
    // 3475 0061;	
    // (㑵) CJK UNIFIED IDEOGRAPH-3475	[FB80 B475 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3475, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB475, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_452)
{
    // 3475 0041;	
    // (㑵) CJK UNIFIED IDEOGRAPH-3475	[FB80 B475 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3475, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB475, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_453)
{
    // 3475 0062;	
    // (㑵) CJK UNIFIED IDEOGRAPH-3475	[FB80 B475 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3475, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB475, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_454)
{
    // 3476 0021;	
    // (㑶) CJK UNIFIED IDEOGRAPH-3476	[FB80 B476 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3476, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB476, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_455)
{
    // 3476 003F;	
    // (㑶) CJK UNIFIED IDEOGRAPH-3476	[FB80 B476 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3476, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB476, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_456)
{
    // 3476 0061;	
    // (㑶) CJK UNIFIED IDEOGRAPH-3476	[FB80 B476 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3476, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB476, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_457)
{
    // 3476 0041;	
    // (㑶) CJK UNIFIED IDEOGRAPH-3476	[FB80 B476 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3476, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB476, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_458)
{
    // 3476 0062;	
    // (㑶) CJK UNIFIED IDEOGRAPH-3476	[FB80 B476 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3476, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB476, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_459)
{
    // 3477 0021;	
    // (㑷) CJK UNIFIED IDEOGRAPH-3477	[FB80 B477 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3477, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB477, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_460)
{
    // 3477 003F;	
    // (㑷) CJK UNIFIED IDEOGRAPH-3477	[FB80 B477 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3477, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB477, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_461)
{
    // 3477 0061;	
    // (㑷) CJK UNIFIED IDEOGRAPH-3477	[FB80 B477 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3477, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB477, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_462)
{
    // 3477 0041;	
    // (㑷) CJK UNIFIED IDEOGRAPH-3477	[FB80 B477 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3477, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB477, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_463)
{
    // 3477 0062;	
    // (㑷) CJK UNIFIED IDEOGRAPH-3477	[FB80 B477 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3477, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB477, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_464)
{
    // 3478 0021;	
    // (㑸) CJK UNIFIED IDEOGRAPH-3478	[FB80 B478 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3478, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB478, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_465)
{
    // 3478 003F;	
    // (㑸) CJK UNIFIED IDEOGRAPH-3478	[FB80 B478 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3478, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB478, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_466)
{
    // 3478 0061;	
    // (㑸) CJK UNIFIED IDEOGRAPH-3478	[FB80 B478 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3478, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB478, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_467)
{
    // 3478 0041;	
    // (㑸) CJK UNIFIED IDEOGRAPH-3478	[FB80 B478 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3478, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB478, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_468)
{
    // 3478 0062;	
    // (㑸) CJK UNIFIED IDEOGRAPH-3478	[FB80 B478 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3478, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB478, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_469)
{
    // 3479 0021;	
    // (㑹) CJK UNIFIED IDEOGRAPH-3479	[FB80 B479 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3479, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB479, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_470)
{
    // 3479 003F;	
    // (㑹) CJK UNIFIED IDEOGRAPH-3479	[FB80 B479 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3479, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB479, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_471)
{
    // 3479 0061;	
    // (㑹) CJK UNIFIED IDEOGRAPH-3479	[FB80 B479 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3479, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB479, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_472)
{
    // 3479 0041;	
    // (㑹) CJK UNIFIED IDEOGRAPH-3479	[FB80 B479 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3479, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB479, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_473)
{
    // 3479 0062;	
    // (㑹) CJK UNIFIED IDEOGRAPH-3479	[FB80 B479 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3479, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB479, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_474)
{
    // 347A 0021;	
    // (㑺) CJK UNIFIED IDEOGRAPH-347A	[FB80 B47A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x347A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB47A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_475)
{
    // 347A 003F;	
    // (㑺) CJK UNIFIED IDEOGRAPH-347A	[FB80 B47A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x347A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB47A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_476)
{
    // 347A 0061;	
    // (㑺) CJK UNIFIED IDEOGRAPH-347A	[FB80 B47A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x347A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB47A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_477)
{
    // 347A 0041;	
    // (㑺) CJK UNIFIED IDEOGRAPH-347A	[FB80 B47A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x347A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB47A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_478)
{
    // 347A 0062;	
    // (㑺) CJK UNIFIED IDEOGRAPH-347A	[FB80 B47A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x347A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB47A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_479)
{
    // 347B 0021;	
    // (㑻) CJK UNIFIED IDEOGRAPH-347B	[FB80 B47B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x347B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB47B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_480)
{
    // 347B 003F;	
    // (㑻) CJK UNIFIED IDEOGRAPH-347B	[FB80 B47B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x347B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB47B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_481)
{
    // 347B 0061;	
    // (㑻) CJK UNIFIED IDEOGRAPH-347B	[FB80 B47B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x347B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB47B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_482)
{
    // 347B 0041;	
    // (㑻) CJK UNIFIED IDEOGRAPH-347B	[FB80 B47B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x347B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB47B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_483)
{
    // 347B 0062;	
    // (㑻) CJK UNIFIED IDEOGRAPH-347B	[FB80 B47B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x347B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB47B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_484)
{
    // 347C 0021;	
    // (㑼) CJK UNIFIED IDEOGRAPH-347C	[FB80 B47C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x347C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB47C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_485)
{
    // 347C 003F;	
    // (㑼) CJK UNIFIED IDEOGRAPH-347C	[FB80 B47C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x347C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB47C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_486)
{
    // 347C 0061;	
    // (㑼) CJK UNIFIED IDEOGRAPH-347C	[FB80 B47C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x347C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB47C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_487)
{
    // 347C 0041;	
    // (㑼) CJK UNIFIED IDEOGRAPH-347C	[FB80 B47C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x347C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB47C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_488)
{
    // 347C 0062;	
    // (㑼) CJK UNIFIED IDEOGRAPH-347C	[FB80 B47C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x347C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB47C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_489)
{
    // 347D 0021;	
    // (㑽) CJK UNIFIED IDEOGRAPH-347D	[FB80 B47D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x347D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB47D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_490)
{
    // 347D 003F;	
    // (㑽) CJK UNIFIED IDEOGRAPH-347D	[FB80 B47D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x347D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB47D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_491)
{
    // 347D 0061;	
    // (㑽) CJK UNIFIED IDEOGRAPH-347D	[FB80 B47D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x347D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB47D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_492)
{
    // 347D 0041;	
    // (㑽) CJK UNIFIED IDEOGRAPH-347D	[FB80 B47D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x347D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB47D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_493)
{
    // 347D 0062;	
    // (㑽) CJK UNIFIED IDEOGRAPH-347D	[FB80 B47D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x347D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB47D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_494)
{
    // 347E 0021;	
    // (㑾) CJK UNIFIED IDEOGRAPH-347E	[FB80 B47E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x347E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB47E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_495)
{
    // 347E 003F;	
    // (㑾) CJK UNIFIED IDEOGRAPH-347E	[FB80 B47E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x347E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB47E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_496)
{
    // 347E 0061;	
    // (㑾) CJK UNIFIED IDEOGRAPH-347E	[FB80 B47E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x347E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB47E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_497)
{
    // 347E 0041;	
    // (㑾) CJK UNIFIED IDEOGRAPH-347E	[FB80 B47E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x347E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB47E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_498)
{
    // 347E 0062;	
    // (㑾) CJK UNIFIED IDEOGRAPH-347E	[FB80 B47E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x347E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB47E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_327_499)
{
    // 347F 0021;	
    // (㑿) CJK UNIFIED IDEOGRAPH-347F	[FB80 B47F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x347F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB47F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

