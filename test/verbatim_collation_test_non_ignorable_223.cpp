// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_223_000)
{
    // 15D8 0041;	
    // (ᗘ) CANADIAN SYLLABICS CARRIER HWE	[36EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15D8, 0x0041 };
    uint32_t const ces[9] = { 0x36EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_001)
{
    // 15D8 0062;	
    // (ᗘ) CANADIAN SYLLABICS CARRIER HWE	[36EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D8, 0x0062 };
    uint32_t const ces[9] = { 0x36EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_002)
{
    // 15D9 0021;	
    // (ᗙ) CANADIAN SYLLABICS CARRIER HWEE	[36F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D9, 0x0021 };
    uint32_t const ces[9] = { 0x36F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_003)
{
    // 15D9 003F;	
    // (ᗙ) CANADIAN SYLLABICS CARRIER HWEE	[36F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D9, 0x003F };
    uint32_t const ces[9] = { 0x36F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_004)
{
    // 15D9 0061;	
    // (ᗙ) CANADIAN SYLLABICS CARRIER HWEE	[36F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D9, 0x0061 };
    uint32_t const ces[9] = { 0x36F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_005)
{
    // 15D9 0041;	
    // (ᗙ) CANADIAN SYLLABICS CARRIER HWEE	[36F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15D9, 0x0041 };
    uint32_t const ces[9] = { 0x36F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_006)
{
    // 15D9 0062;	
    // (ᗙ) CANADIAN SYLLABICS CARRIER HWEE	[36F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D9, 0x0062 };
    uint32_t const ces[9] = { 0x36F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_007)
{
    // 15DA 0021;	
    // (ᗚ) CANADIAN SYLLABICS CARRIER HWI	[36F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15DA, 0x0021 };
    uint32_t const ces[9] = { 0x36F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_008)
{
    // 15DA 003F;	
    // (ᗚ) CANADIAN SYLLABICS CARRIER HWI	[36F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15DA, 0x003F };
    uint32_t const ces[9] = { 0x36F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_009)
{
    // 15DA 0061;	
    // (ᗚ) CANADIAN SYLLABICS CARRIER HWI	[36F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15DA, 0x0061 };
    uint32_t const ces[9] = { 0x36F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_010)
{
    // 15DA 0041;	
    // (ᗚ) CANADIAN SYLLABICS CARRIER HWI	[36F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15DA, 0x0041 };
    uint32_t const ces[9] = { 0x36F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_011)
{
    // 15DA 0062;	
    // (ᗚ) CANADIAN SYLLABICS CARRIER HWI	[36F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15DA, 0x0062 };
    uint32_t const ces[9] = { 0x36F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_012)
{
    // 15DB 0021;	
    // (ᗛ) CANADIAN SYLLABICS CARRIER HWA	[36F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15DB, 0x0021 };
    uint32_t const ces[9] = { 0x36F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_013)
{
    // 15DB 003F;	
    // (ᗛ) CANADIAN SYLLABICS CARRIER HWA	[36F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15DB, 0x003F };
    uint32_t const ces[9] = { 0x36F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_014)
{
    // 15DB 0061;	
    // (ᗛ) CANADIAN SYLLABICS CARRIER HWA	[36F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15DB, 0x0061 };
    uint32_t const ces[9] = { 0x36F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_015)
{
    // 15DB 0041;	
    // (ᗛ) CANADIAN SYLLABICS CARRIER HWA	[36F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15DB, 0x0041 };
    uint32_t const ces[9] = { 0x36F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_016)
{
    // 15DB 0062;	
    // (ᗛ) CANADIAN SYLLABICS CARRIER HWA	[36F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15DB, 0x0062 };
    uint32_t const ces[9] = { 0x36F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_017)
{
    // 15DC 0021;	
    // (ᗜ) CANADIAN SYLLABICS CARRIER THU	[36F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15DC, 0x0021 };
    uint32_t const ces[9] = { 0x36F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_018)
{
    // 15DC 003F;	
    // (ᗜ) CANADIAN SYLLABICS CARRIER THU	[36F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15DC, 0x003F };
    uint32_t const ces[9] = { 0x36F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_019)
{
    // 15DC 0061;	
    // (ᗜ) CANADIAN SYLLABICS CARRIER THU	[36F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15DC, 0x0061 };
    uint32_t const ces[9] = { 0x36F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_020)
{
    // 15DC 0041;	
    // (ᗜ) CANADIAN SYLLABICS CARRIER THU	[36F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15DC, 0x0041 };
    uint32_t const ces[9] = { 0x36F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_021)
{
    // 15DC 0062;	
    // (ᗜ) CANADIAN SYLLABICS CARRIER THU	[36F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15DC, 0x0062 };
    uint32_t const ces[9] = { 0x36F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_022)
{
    // 15DD 0021;	
    // (ᗝ) CANADIAN SYLLABICS CARRIER THO	[36F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15DD, 0x0021 };
    uint32_t const ces[9] = { 0x36F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_023)
{
    // 15DD 003F;	
    // (ᗝ) CANADIAN SYLLABICS CARRIER THO	[36F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15DD, 0x003F };
    uint32_t const ces[9] = { 0x36F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_024)
{
    // 15DD 0061;	
    // (ᗝ) CANADIAN SYLLABICS CARRIER THO	[36F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15DD, 0x0061 };
    uint32_t const ces[9] = { 0x36F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_025)
{
    // 15DD 0041;	
    // (ᗝ) CANADIAN SYLLABICS CARRIER THO	[36F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15DD, 0x0041 };
    uint32_t const ces[9] = { 0x36F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_026)
{
    // 15DD 0062;	
    // (ᗝ) CANADIAN SYLLABICS CARRIER THO	[36F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15DD, 0x0062 };
    uint32_t const ces[9] = { 0x36F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_027)
{
    // 15DE 0021;	
    // (ᗞ) CANADIAN SYLLABICS CARRIER THE	[36F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15DE, 0x0021 };
    uint32_t const ces[9] = { 0x36F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_028)
{
    // 15DE 003F;	
    // (ᗞ) CANADIAN SYLLABICS CARRIER THE	[36F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15DE, 0x003F };
    uint32_t const ces[9] = { 0x36F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_029)
{
    // 15DE 0061;	
    // (ᗞ) CANADIAN SYLLABICS CARRIER THE	[36F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15DE, 0x0061 };
    uint32_t const ces[9] = { 0x36F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_030)
{
    // 15DE 0041;	
    // (ᗞ) CANADIAN SYLLABICS CARRIER THE	[36F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15DE, 0x0041 };
    uint32_t const ces[9] = { 0x36F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_031)
{
    // 15DE 0062;	
    // (ᗞ) CANADIAN SYLLABICS CARRIER THE	[36F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15DE, 0x0062 };
    uint32_t const ces[9] = { 0x36F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_032)
{
    // 15DF 0021;	
    // (ᗟ) CANADIAN SYLLABICS CARRIER THEE	[36F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15DF, 0x0021 };
    uint32_t const ces[9] = { 0x36F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_033)
{
    // 15DF 003F;	
    // (ᗟ) CANADIAN SYLLABICS CARRIER THEE	[36F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15DF, 0x003F };
    uint32_t const ces[9] = { 0x36F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_034)
{
    // 15DF 0061;	
    // (ᗟ) CANADIAN SYLLABICS CARRIER THEE	[36F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15DF, 0x0061 };
    uint32_t const ces[9] = { 0x36F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_035)
{
    // 15DF 0041;	
    // (ᗟ) CANADIAN SYLLABICS CARRIER THEE	[36F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15DF, 0x0041 };
    uint32_t const ces[9] = { 0x36F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_036)
{
    // 15DF 0062;	
    // (ᗟ) CANADIAN SYLLABICS CARRIER THEE	[36F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15DF, 0x0062 };
    uint32_t const ces[9] = { 0x36F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_037)
{
    // 15E0 0021;	
    // (ᗠ) CANADIAN SYLLABICS CARRIER THI	[36F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E0, 0x0021 };
    uint32_t const ces[9] = { 0x36F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_038)
{
    // 15E0 003F;	
    // (ᗠ) CANADIAN SYLLABICS CARRIER THI	[36F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E0, 0x003F };
    uint32_t const ces[9] = { 0x36F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_039)
{
    // 15E0 0061;	
    // (ᗠ) CANADIAN SYLLABICS CARRIER THI	[36F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E0, 0x0061 };
    uint32_t const ces[9] = { 0x36F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_040)
{
    // 15E0 0041;	
    // (ᗠ) CANADIAN SYLLABICS CARRIER THI	[36F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15E0, 0x0041 };
    uint32_t const ces[9] = { 0x36F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_041)
{
    // 15E0 0062;	
    // (ᗠ) CANADIAN SYLLABICS CARRIER THI	[36F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E0, 0x0062 };
    uint32_t const ces[9] = { 0x36F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_042)
{
    // 15E1 0021;	
    // (ᗡ) CANADIAN SYLLABICS CARRIER THA	[36F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E1, 0x0021 };
    uint32_t const ces[9] = { 0x36F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_043)
{
    // 15E1 003F;	
    // (ᗡ) CANADIAN SYLLABICS CARRIER THA	[36F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E1, 0x003F };
    uint32_t const ces[9] = { 0x36F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_044)
{
    // 15E1 0061;	
    // (ᗡ) CANADIAN SYLLABICS CARRIER THA	[36F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E1, 0x0061 };
    uint32_t const ces[9] = { 0x36F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_045)
{
    // 15E1 0041;	
    // (ᗡ) CANADIAN SYLLABICS CARRIER THA	[36F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15E1, 0x0041 };
    uint32_t const ces[9] = { 0x36F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_046)
{
    // 15E1 0062;	
    // (ᗡ) CANADIAN SYLLABICS CARRIER THA	[36F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E1, 0x0062 };
    uint32_t const ces[9] = { 0x36F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_047)
{
    // 15E2 0021;	
    // (ᗢ) CANADIAN SYLLABICS CARRIER TTU	[36F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E2, 0x0021 };
    uint32_t const ces[9] = { 0x36F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_048)
{
    // 15E2 003F;	
    // (ᗢ) CANADIAN SYLLABICS CARRIER TTU	[36F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E2, 0x003F };
    uint32_t const ces[9] = { 0x36F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_049)
{
    // 15E2 0061;	
    // (ᗢ) CANADIAN SYLLABICS CARRIER TTU	[36F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E2, 0x0061 };
    uint32_t const ces[9] = { 0x36F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_050)
{
    // 15E2 0041;	
    // (ᗢ) CANADIAN SYLLABICS CARRIER TTU	[36F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15E2, 0x0041 };
    uint32_t const ces[9] = { 0x36F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_051)
{
    // 15E2 0062;	
    // (ᗢ) CANADIAN SYLLABICS CARRIER TTU	[36F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E2, 0x0062 };
    uint32_t const ces[9] = { 0x36F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_052)
{
    // 15E3 0021;	
    // (ᗣ) CANADIAN SYLLABICS CARRIER TTO	[36FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E3, 0x0021 };
    uint32_t const ces[9] = { 0x36FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_053)
{
    // 15E3 003F;	
    // (ᗣ) CANADIAN SYLLABICS CARRIER TTO	[36FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E3, 0x003F };
    uint32_t const ces[9] = { 0x36FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_054)
{
    // 15E3 0061;	
    // (ᗣ) CANADIAN SYLLABICS CARRIER TTO	[36FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E3, 0x0061 };
    uint32_t const ces[9] = { 0x36FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_055)
{
    // 15E3 0041;	
    // (ᗣ) CANADIAN SYLLABICS CARRIER TTO	[36FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15E3, 0x0041 };
    uint32_t const ces[9] = { 0x36FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_056)
{
    // 15E3 0062;	
    // (ᗣ) CANADIAN SYLLABICS CARRIER TTO	[36FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E3, 0x0062 };
    uint32_t const ces[9] = { 0x36FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_057)
{
    // 15E4 0021;	
    // (ᗤ) CANADIAN SYLLABICS CARRIER TTE	[36FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E4, 0x0021 };
    uint32_t const ces[9] = { 0x36FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_058)
{
    // 15E4 003F;	
    // (ᗤ) CANADIAN SYLLABICS CARRIER TTE	[36FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E4, 0x003F };
    uint32_t const ces[9] = { 0x36FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_059)
{
    // 15E4 0061;	
    // (ᗤ) CANADIAN SYLLABICS CARRIER TTE	[36FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E4, 0x0061 };
    uint32_t const ces[9] = { 0x36FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_060)
{
    // 15E4 0041;	
    // (ᗤ) CANADIAN SYLLABICS CARRIER TTE	[36FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15E4, 0x0041 };
    uint32_t const ces[9] = { 0x36FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_061)
{
    // 15E4 0062;	
    // (ᗤ) CANADIAN SYLLABICS CARRIER TTE	[36FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E4, 0x0062 };
    uint32_t const ces[9] = { 0x36FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_062)
{
    // 15E5 0021;	
    // (ᗥ) CANADIAN SYLLABICS CARRIER TTEE	[36FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E5, 0x0021 };
    uint32_t const ces[9] = { 0x36FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_063)
{
    // 15E5 003F;	
    // (ᗥ) CANADIAN SYLLABICS CARRIER TTEE	[36FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E5, 0x003F };
    uint32_t const ces[9] = { 0x36FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_064)
{
    // 15E5 0061;	
    // (ᗥ) CANADIAN SYLLABICS CARRIER TTEE	[36FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E5, 0x0061 };
    uint32_t const ces[9] = { 0x36FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_065)
{
    // 15E5 0041;	
    // (ᗥ) CANADIAN SYLLABICS CARRIER TTEE	[36FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15E5, 0x0041 };
    uint32_t const ces[9] = { 0x36FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_066)
{
    // 15E5 0062;	
    // (ᗥ) CANADIAN SYLLABICS CARRIER TTEE	[36FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E5, 0x0062 };
    uint32_t const ces[9] = { 0x36FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_067)
{
    // 15E6 0021;	
    // (ᗦ) CANADIAN SYLLABICS CARRIER TTI	[36FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E6, 0x0021 };
    uint32_t const ces[9] = { 0x36FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_068)
{
    // 15E6 003F;	
    // (ᗦ) CANADIAN SYLLABICS CARRIER TTI	[36FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E6, 0x003F };
    uint32_t const ces[9] = { 0x36FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_069)
{
    // 15E6 0061;	
    // (ᗦ) CANADIAN SYLLABICS CARRIER TTI	[36FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E6, 0x0061 };
    uint32_t const ces[9] = { 0x36FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_070)
{
    // 15E6 0041;	
    // (ᗦ) CANADIAN SYLLABICS CARRIER TTI	[36FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15E6, 0x0041 };
    uint32_t const ces[9] = { 0x36FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_071)
{
    // 15E6 0062;	
    // (ᗦ) CANADIAN SYLLABICS CARRIER TTI	[36FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E6, 0x0062 };
    uint32_t const ces[9] = { 0x36FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_072)
{
    // 15E7 0021;	
    // (ᗧ) CANADIAN SYLLABICS CARRIER TTA	[36FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E7, 0x0021 };
    uint32_t const ces[9] = { 0x36FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_073)
{
    // 15E7 003F;	
    // (ᗧ) CANADIAN SYLLABICS CARRIER TTA	[36FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E7, 0x003F };
    uint32_t const ces[9] = { 0x36FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_074)
{
    // 15E7 0061;	
    // (ᗧ) CANADIAN SYLLABICS CARRIER TTA	[36FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E7, 0x0061 };
    uint32_t const ces[9] = { 0x36FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_075)
{
    // 15E7 0041;	
    // (ᗧ) CANADIAN SYLLABICS CARRIER TTA	[36FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15E7, 0x0041 };
    uint32_t const ces[9] = { 0x36FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_076)
{
    // 15E7 0062;	
    // (ᗧ) CANADIAN SYLLABICS CARRIER TTA	[36FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E7, 0x0062 };
    uint32_t const ces[9] = { 0x36FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_077)
{
    // 15E8 0021;	
    // (ᗨ) CANADIAN SYLLABICS CARRIER PU	[36FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E8, 0x0021 };
    uint32_t const ces[9] = { 0x36FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_078)
{
    // 15E8 003F;	
    // (ᗨ) CANADIAN SYLLABICS CARRIER PU	[36FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E8, 0x003F };
    uint32_t const ces[9] = { 0x36FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_079)
{
    // 15E8 0061;	
    // (ᗨ) CANADIAN SYLLABICS CARRIER PU	[36FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E8, 0x0061 };
    uint32_t const ces[9] = { 0x36FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_080)
{
    // 15E8 0041;	
    // (ᗨ) CANADIAN SYLLABICS CARRIER PU	[36FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15E8, 0x0041 };
    uint32_t const ces[9] = { 0x36FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_081)
{
    // 15E8 0062;	
    // (ᗨ) CANADIAN SYLLABICS CARRIER PU	[36FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E8, 0x0062 };
    uint32_t const ces[9] = { 0x36FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_082)
{
    // 15E9 0021;	
    // (ᗩ) CANADIAN SYLLABICS CARRIER PO	[3700 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E9, 0x0021 };
    uint32_t const ces[9] = { 0x3700, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_083)
{
    // 15E9 003F;	
    // (ᗩ) CANADIAN SYLLABICS CARRIER PO	[3700 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E9, 0x003F };
    uint32_t const ces[9] = { 0x3700, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_084)
{
    // 15E9 0061;	
    // (ᗩ) CANADIAN SYLLABICS CARRIER PO	[3700 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E9, 0x0061 };
    uint32_t const ces[9] = { 0x3700, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_085)
{
    // 15E9 0041;	
    // (ᗩ) CANADIAN SYLLABICS CARRIER PO	[3700 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15E9, 0x0041 };
    uint32_t const ces[9] = { 0x3700, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_086)
{
    // 15E9 0062;	
    // (ᗩ) CANADIAN SYLLABICS CARRIER PO	[3700 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15E9, 0x0062 };
    uint32_t const ces[9] = { 0x3700, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_087)
{
    // 15EA 0021;	
    // (ᗪ) CANADIAN SYLLABICS CARRIER PE	[3701 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15EA, 0x0021 };
    uint32_t const ces[9] = { 0x3701, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_088)
{
    // 15EA 003F;	
    // (ᗪ) CANADIAN SYLLABICS CARRIER PE	[3701 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15EA, 0x003F };
    uint32_t const ces[9] = { 0x3701, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_089)
{
    // 15EA 0061;	
    // (ᗪ) CANADIAN SYLLABICS CARRIER PE	[3701 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15EA, 0x0061 };
    uint32_t const ces[9] = { 0x3701, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_090)
{
    // 15EA 0041;	
    // (ᗪ) CANADIAN SYLLABICS CARRIER PE	[3701 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15EA, 0x0041 };
    uint32_t const ces[9] = { 0x3701, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_091)
{
    // 15EA 0062;	
    // (ᗪ) CANADIAN SYLLABICS CARRIER PE	[3701 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15EA, 0x0062 };
    uint32_t const ces[9] = { 0x3701, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_092)
{
    // 15EB 0021;	
    // (ᗫ) CANADIAN SYLLABICS CARRIER PEE	[3702 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15EB, 0x0021 };
    uint32_t const ces[9] = { 0x3702, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_093)
{
    // 15EB 003F;	
    // (ᗫ) CANADIAN SYLLABICS CARRIER PEE	[3702 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15EB, 0x003F };
    uint32_t const ces[9] = { 0x3702, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_094)
{
    // 15EB 0061;	
    // (ᗫ) CANADIAN SYLLABICS CARRIER PEE	[3702 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15EB, 0x0061 };
    uint32_t const ces[9] = { 0x3702, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_095)
{
    // 15EB 0041;	
    // (ᗫ) CANADIAN SYLLABICS CARRIER PEE	[3702 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15EB, 0x0041 };
    uint32_t const ces[9] = { 0x3702, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_096)
{
    // 15EB 0062;	
    // (ᗫ) CANADIAN SYLLABICS CARRIER PEE	[3702 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15EB, 0x0062 };
    uint32_t const ces[9] = { 0x3702, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_097)
{
    // 15EC 0021;	
    // (ᗬ) CANADIAN SYLLABICS CARRIER PI	[3703 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15EC, 0x0021 };
    uint32_t const ces[9] = { 0x3703, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_098)
{
    // 15EC 003F;	
    // (ᗬ) CANADIAN SYLLABICS CARRIER PI	[3703 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15EC, 0x003F };
    uint32_t const ces[9] = { 0x3703, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_099)
{
    // 15EC 0061;	
    // (ᗬ) CANADIAN SYLLABICS CARRIER PI	[3703 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15EC, 0x0061 };
    uint32_t const ces[9] = { 0x3703, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_100)
{
    // 15EC 0041;	
    // (ᗬ) CANADIAN SYLLABICS CARRIER PI	[3703 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15EC, 0x0041 };
    uint32_t const ces[9] = { 0x3703, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_101)
{
    // 15EC 0062;	
    // (ᗬ) CANADIAN SYLLABICS CARRIER PI	[3703 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15EC, 0x0062 };
    uint32_t const ces[9] = { 0x3703, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_102)
{
    // 15ED 0021;	
    // (ᗭ) CANADIAN SYLLABICS CARRIER PA	[3704 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15ED, 0x0021 };
    uint32_t const ces[9] = { 0x3704, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_103)
{
    // 15ED 003F;	
    // (ᗭ) CANADIAN SYLLABICS CARRIER PA	[3704 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15ED, 0x003F };
    uint32_t const ces[9] = { 0x3704, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_104)
{
    // 15ED 0061;	
    // (ᗭ) CANADIAN SYLLABICS CARRIER PA	[3704 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15ED, 0x0061 };
    uint32_t const ces[9] = { 0x3704, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_105)
{
    // 15ED 0041;	
    // (ᗭ) CANADIAN SYLLABICS CARRIER PA	[3704 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15ED, 0x0041 };
    uint32_t const ces[9] = { 0x3704, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_106)
{
    // 15ED 0062;	
    // (ᗭ) CANADIAN SYLLABICS CARRIER PA	[3704 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15ED, 0x0062 };
    uint32_t const ces[9] = { 0x3704, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_107)
{
    // 15EE 0021;	
    // (ᗮ) CANADIAN SYLLABICS CARRIER P	[3705 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15EE, 0x0021 };
    uint32_t const ces[9] = { 0x3705, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_108)
{
    // 15EE 003F;	
    // (ᗮ) CANADIAN SYLLABICS CARRIER P	[3705 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15EE, 0x003F };
    uint32_t const ces[9] = { 0x3705, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_109)
{
    // 15EE 0061;	
    // (ᗮ) CANADIAN SYLLABICS CARRIER P	[3705 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15EE, 0x0061 };
    uint32_t const ces[9] = { 0x3705, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_110)
{
    // 15EE 0041;	
    // (ᗮ) CANADIAN SYLLABICS CARRIER P	[3705 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15EE, 0x0041 };
    uint32_t const ces[9] = { 0x3705, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_111)
{
    // 15EE 0062;	
    // (ᗮ) CANADIAN SYLLABICS CARRIER P	[3705 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15EE, 0x0062 };
    uint32_t const ces[9] = { 0x3705, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_112)
{
    // 15EF 0021;	
    // (ᗯ) CANADIAN SYLLABICS CARRIER GU	[3706 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15EF, 0x0021 };
    uint32_t const ces[9] = { 0x3706, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_113)
{
    // 15EF 003F;	
    // (ᗯ) CANADIAN SYLLABICS CARRIER GU	[3706 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15EF, 0x003F };
    uint32_t const ces[9] = { 0x3706, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_114)
{
    // 15EF 0061;	
    // (ᗯ) CANADIAN SYLLABICS CARRIER GU	[3706 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15EF, 0x0061 };
    uint32_t const ces[9] = { 0x3706, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_115)
{
    // 15EF 0041;	
    // (ᗯ) CANADIAN SYLLABICS CARRIER GU	[3706 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15EF, 0x0041 };
    uint32_t const ces[9] = { 0x3706, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_116)
{
    // 15EF 0062;	
    // (ᗯ) CANADIAN SYLLABICS CARRIER GU	[3706 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15EF, 0x0062 };
    uint32_t const ces[9] = { 0x3706, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_117)
{
    // 15F0 0021;	
    // (ᗰ) CANADIAN SYLLABICS CARRIER GO	[3707 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F0, 0x0021 };
    uint32_t const ces[9] = { 0x3707, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_118)
{
    // 15F0 003F;	
    // (ᗰ) CANADIAN SYLLABICS CARRIER GO	[3707 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F0, 0x003F };
    uint32_t const ces[9] = { 0x3707, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_119)
{
    // 15F0 0061;	
    // (ᗰ) CANADIAN SYLLABICS CARRIER GO	[3707 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F0, 0x0061 };
    uint32_t const ces[9] = { 0x3707, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_120)
{
    // 15F0 0041;	
    // (ᗰ) CANADIAN SYLLABICS CARRIER GO	[3707 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15F0, 0x0041 };
    uint32_t const ces[9] = { 0x3707, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_121)
{
    // 15F0 0062;	
    // (ᗰ) CANADIAN SYLLABICS CARRIER GO	[3707 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F0, 0x0062 };
    uint32_t const ces[9] = { 0x3707, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_122)
{
    // 15F1 0021;	
    // (ᗱ) CANADIAN SYLLABICS CARRIER GE	[3708 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F1, 0x0021 };
    uint32_t const ces[9] = { 0x3708, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_123)
{
    // 15F1 003F;	
    // (ᗱ) CANADIAN SYLLABICS CARRIER GE	[3708 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F1, 0x003F };
    uint32_t const ces[9] = { 0x3708, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_124)
{
    // 15F1 0061;	
    // (ᗱ) CANADIAN SYLLABICS CARRIER GE	[3708 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F1, 0x0061 };
    uint32_t const ces[9] = { 0x3708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_125)
{
    // 15F1 0041;	
    // (ᗱ) CANADIAN SYLLABICS CARRIER GE	[3708 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15F1, 0x0041 };
    uint32_t const ces[9] = { 0x3708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_126)
{
    // 15F1 0062;	
    // (ᗱ) CANADIAN SYLLABICS CARRIER GE	[3708 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F1, 0x0062 };
    uint32_t const ces[9] = { 0x3708, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_127)
{
    // 15F2 0021;	
    // (ᗲ) CANADIAN SYLLABICS CARRIER GEE	[3709 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F2, 0x0021 };
    uint32_t const ces[9] = { 0x3709, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_128)
{
    // 15F2 003F;	
    // (ᗲ) CANADIAN SYLLABICS CARRIER GEE	[3709 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F2, 0x003F };
    uint32_t const ces[9] = { 0x3709, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_129)
{
    // 15F2 0061;	
    // (ᗲ) CANADIAN SYLLABICS CARRIER GEE	[3709 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F2, 0x0061 };
    uint32_t const ces[9] = { 0x3709, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_130)
{
    // 15F2 0041;	
    // (ᗲ) CANADIAN SYLLABICS CARRIER GEE	[3709 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15F2, 0x0041 };
    uint32_t const ces[9] = { 0x3709, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_131)
{
    // 15F2 0062;	
    // (ᗲ) CANADIAN SYLLABICS CARRIER GEE	[3709 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F2, 0x0062 };
    uint32_t const ces[9] = { 0x3709, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_132)
{
    // 15F3 0021;	
    // (ᗳ) CANADIAN SYLLABICS CARRIER GI	[370A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F3, 0x0021 };
    uint32_t const ces[9] = { 0x370A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_133)
{
    // 15F3 003F;	
    // (ᗳ) CANADIAN SYLLABICS CARRIER GI	[370A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F3, 0x003F };
    uint32_t const ces[9] = { 0x370A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_134)
{
    // 15F3 0061;	
    // (ᗳ) CANADIAN SYLLABICS CARRIER GI	[370A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F3, 0x0061 };
    uint32_t const ces[9] = { 0x370A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_135)
{
    // 15F3 0041;	
    // (ᗳ) CANADIAN SYLLABICS CARRIER GI	[370A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15F3, 0x0041 };
    uint32_t const ces[9] = { 0x370A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_136)
{
    // 15F3 0062;	
    // (ᗳ) CANADIAN SYLLABICS CARRIER GI	[370A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F3, 0x0062 };
    uint32_t const ces[9] = { 0x370A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_137)
{
    // 15F4 0021;	
    // (ᗴ) CANADIAN SYLLABICS CARRIER GA	[370B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F4, 0x0021 };
    uint32_t const ces[9] = { 0x370B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_138)
{
    // 15F4 003F;	
    // (ᗴ) CANADIAN SYLLABICS CARRIER GA	[370B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F4, 0x003F };
    uint32_t const ces[9] = { 0x370B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_139)
{
    // 15F4 0061;	
    // (ᗴ) CANADIAN SYLLABICS CARRIER GA	[370B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F4, 0x0061 };
    uint32_t const ces[9] = { 0x370B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_140)
{
    // 15F4 0041;	
    // (ᗴ) CANADIAN SYLLABICS CARRIER GA	[370B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15F4, 0x0041 };
    uint32_t const ces[9] = { 0x370B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_141)
{
    // 15F4 0062;	
    // (ᗴ) CANADIAN SYLLABICS CARRIER GA	[370B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F4, 0x0062 };
    uint32_t const ces[9] = { 0x370B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_142)
{
    // 15F5 0021;	
    // (ᗵ) CANADIAN SYLLABICS CARRIER KHU	[370C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F5, 0x0021 };
    uint32_t const ces[9] = { 0x370C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_143)
{
    // 15F5 003F;	
    // (ᗵ) CANADIAN SYLLABICS CARRIER KHU	[370C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F5, 0x003F };
    uint32_t const ces[9] = { 0x370C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_144)
{
    // 15F5 0061;	
    // (ᗵ) CANADIAN SYLLABICS CARRIER KHU	[370C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F5, 0x0061 };
    uint32_t const ces[9] = { 0x370C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_145)
{
    // 15F5 0041;	
    // (ᗵ) CANADIAN SYLLABICS CARRIER KHU	[370C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15F5, 0x0041 };
    uint32_t const ces[9] = { 0x370C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_146)
{
    // 15F5 0062;	
    // (ᗵ) CANADIAN SYLLABICS CARRIER KHU	[370C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F5, 0x0062 };
    uint32_t const ces[9] = { 0x370C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_147)
{
    // 15F6 0021;	
    // (ᗶ) CANADIAN SYLLABICS CARRIER KHO	[370D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F6, 0x0021 };
    uint32_t const ces[9] = { 0x370D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_148)
{
    // 15F6 003F;	
    // (ᗶ) CANADIAN SYLLABICS CARRIER KHO	[370D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F6, 0x003F };
    uint32_t const ces[9] = { 0x370D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_149)
{
    // 15F6 0061;	
    // (ᗶ) CANADIAN SYLLABICS CARRIER KHO	[370D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F6, 0x0061 };
    uint32_t const ces[9] = { 0x370D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_150)
{
    // 15F6 0041;	
    // (ᗶ) CANADIAN SYLLABICS CARRIER KHO	[370D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15F6, 0x0041 };
    uint32_t const ces[9] = { 0x370D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_151)
{
    // 15F6 0062;	
    // (ᗶ) CANADIAN SYLLABICS CARRIER KHO	[370D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F6, 0x0062 };
    uint32_t const ces[9] = { 0x370D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_152)
{
    // 15F7 0021;	
    // (ᗷ) CANADIAN SYLLABICS CARRIER KHE	[370E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F7, 0x0021 };
    uint32_t const ces[9] = { 0x370E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_153)
{
    // 15F7 003F;	
    // (ᗷ) CANADIAN SYLLABICS CARRIER KHE	[370E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F7, 0x003F };
    uint32_t const ces[9] = { 0x370E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_154)
{
    // 15F7 0061;	
    // (ᗷ) CANADIAN SYLLABICS CARRIER KHE	[370E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F7, 0x0061 };
    uint32_t const ces[9] = { 0x370E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_155)
{
    // 15F7 0041;	
    // (ᗷ) CANADIAN SYLLABICS CARRIER KHE	[370E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15F7, 0x0041 };
    uint32_t const ces[9] = { 0x370E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_156)
{
    // 15F7 0062;	
    // (ᗷ) CANADIAN SYLLABICS CARRIER KHE	[370E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F7, 0x0062 };
    uint32_t const ces[9] = { 0x370E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_157)
{
    // 15F8 0021;	
    // (ᗸ) CANADIAN SYLLABICS CARRIER KHEE	[370F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F8, 0x0021 };
    uint32_t const ces[9] = { 0x370F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_158)
{
    // 15F8 003F;	
    // (ᗸ) CANADIAN SYLLABICS CARRIER KHEE	[370F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F8, 0x003F };
    uint32_t const ces[9] = { 0x370F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_159)
{
    // 15F8 0061;	
    // (ᗸ) CANADIAN SYLLABICS CARRIER KHEE	[370F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F8, 0x0061 };
    uint32_t const ces[9] = { 0x370F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_160)
{
    // 15F8 0041;	
    // (ᗸ) CANADIAN SYLLABICS CARRIER KHEE	[370F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15F8, 0x0041 };
    uint32_t const ces[9] = { 0x370F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_161)
{
    // 15F8 0062;	
    // (ᗸ) CANADIAN SYLLABICS CARRIER KHEE	[370F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F8, 0x0062 };
    uint32_t const ces[9] = { 0x370F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_162)
{
    // 15F9 0021;	
    // (ᗹ) CANADIAN SYLLABICS CARRIER KHI	[3710 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F9, 0x0021 };
    uint32_t const ces[9] = { 0x3710, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_163)
{
    // 15F9 003F;	
    // (ᗹ) CANADIAN SYLLABICS CARRIER KHI	[3710 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F9, 0x003F };
    uint32_t const ces[9] = { 0x3710, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_164)
{
    // 15F9 0061;	
    // (ᗹ) CANADIAN SYLLABICS CARRIER KHI	[3710 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F9, 0x0061 };
    uint32_t const ces[9] = { 0x3710, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_165)
{
    // 15F9 0041;	
    // (ᗹ) CANADIAN SYLLABICS CARRIER KHI	[3710 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15F9, 0x0041 };
    uint32_t const ces[9] = { 0x3710, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_166)
{
    // 15F9 0062;	
    // (ᗹ) CANADIAN SYLLABICS CARRIER KHI	[3710 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15F9, 0x0062 };
    uint32_t const ces[9] = { 0x3710, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_167)
{
    // 15FA 0021;	
    // (ᗺ) CANADIAN SYLLABICS CARRIER KHA	[3711 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15FA, 0x0021 };
    uint32_t const ces[9] = { 0x3711, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_168)
{
    // 15FA 003F;	
    // (ᗺ) CANADIAN SYLLABICS CARRIER KHA	[3711 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15FA, 0x003F };
    uint32_t const ces[9] = { 0x3711, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_169)
{
    // 15FA 0061;	
    // (ᗺ) CANADIAN SYLLABICS CARRIER KHA	[3711 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15FA, 0x0061 };
    uint32_t const ces[9] = { 0x3711, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_170)
{
    // 15FA 0041;	
    // (ᗺ) CANADIAN SYLLABICS CARRIER KHA	[3711 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15FA, 0x0041 };
    uint32_t const ces[9] = { 0x3711, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_171)
{
    // 15FA 0062;	
    // (ᗺ) CANADIAN SYLLABICS CARRIER KHA	[3711 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15FA, 0x0062 };
    uint32_t const ces[9] = { 0x3711, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_172)
{
    // 15FB 0021;	
    // (ᗻ) CANADIAN SYLLABICS CARRIER KKU	[3712 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15FB, 0x0021 };
    uint32_t const ces[9] = { 0x3712, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_173)
{
    // 15FB 003F;	
    // (ᗻ) CANADIAN SYLLABICS CARRIER KKU	[3712 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15FB, 0x003F };
    uint32_t const ces[9] = { 0x3712, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_174)
{
    // 15FB 0061;	
    // (ᗻ) CANADIAN SYLLABICS CARRIER KKU	[3712 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15FB, 0x0061 };
    uint32_t const ces[9] = { 0x3712, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_175)
{
    // 15FB 0041;	
    // (ᗻ) CANADIAN SYLLABICS CARRIER KKU	[3712 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15FB, 0x0041 };
    uint32_t const ces[9] = { 0x3712, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_176)
{
    // 15FB 0062;	
    // (ᗻ) CANADIAN SYLLABICS CARRIER KKU	[3712 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15FB, 0x0062 };
    uint32_t const ces[9] = { 0x3712, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_177)
{
    // 15FC 0021;	
    // (ᗼ) CANADIAN SYLLABICS CARRIER KKO	[3713 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15FC, 0x0021 };
    uint32_t const ces[9] = { 0x3713, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_178)
{
    // 15FC 003F;	
    // (ᗼ) CANADIAN SYLLABICS CARRIER KKO	[3713 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15FC, 0x003F };
    uint32_t const ces[9] = { 0x3713, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_179)
{
    // 15FC 0061;	
    // (ᗼ) CANADIAN SYLLABICS CARRIER KKO	[3713 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15FC, 0x0061 };
    uint32_t const ces[9] = { 0x3713, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_180)
{
    // 15FC 0041;	
    // (ᗼ) CANADIAN SYLLABICS CARRIER KKO	[3713 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15FC, 0x0041 };
    uint32_t const ces[9] = { 0x3713, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_181)
{
    // 15FC 0062;	
    // (ᗼ) CANADIAN SYLLABICS CARRIER KKO	[3713 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15FC, 0x0062 };
    uint32_t const ces[9] = { 0x3713, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_182)
{
    // 15FD 0021;	
    // (ᗽ) CANADIAN SYLLABICS CARRIER KKE	[3714 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15FD, 0x0021 };
    uint32_t const ces[9] = { 0x3714, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_183)
{
    // 15FD 003F;	
    // (ᗽ) CANADIAN SYLLABICS CARRIER KKE	[3714 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15FD, 0x003F };
    uint32_t const ces[9] = { 0x3714, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_184)
{
    // 15FD 0061;	
    // (ᗽ) CANADIAN SYLLABICS CARRIER KKE	[3714 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15FD, 0x0061 };
    uint32_t const ces[9] = { 0x3714, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_185)
{
    // 15FD 0041;	
    // (ᗽ) CANADIAN SYLLABICS CARRIER KKE	[3714 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15FD, 0x0041 };
    uint32_t const ces[9] = { 0x3714, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_186)
{
    // 15FD 0062;	
    // (ᗽ) CANADIAN SYLLABICS CARRIER KKE	[3714 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15FD, 0x0062 };
    uint32_t const ces[9] = { 0x3714, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_187)
{
    // 15FE 0021;	
    // (ᗾ) CANADIAN SYLLABICS CARRIER KKEE	[3715 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15FE, 0x0021 };
    uint32_t const ces[9] = { 0x3715, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_188)
{
    // 15FE 003F;	
    // (ᗾ) CANADIAN SYLLABICS CARRIER KKEE	[3715 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15FE, 0x003F };
    uint32_t const ces[9] = { 0x3715, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_189)
{
    // 15FE 0061;	
    // (ᗾ) CANADIAN SYLLABICS CARRIER KKEE	[3715 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15FE, 0x0061 };
    uint32_t const ces[9] = { 0x3715, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_190)
{
    // 15FE 0041;	
    // (ᗾ) CANADIAN SYLLABICS CARRIER KKEE	[3715 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15FE, 0x0041 };
    uint32_t const ces[9] = { 0x3715, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_191)
{
    // 15FE 0062;	
    // (ᗾ) CANADIAN SYLLABICS CARRIER KKEE	[3715 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15FE, 0x0062 };
    uint32_t const ces[9] = { 0x3715, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_192)
{
    // 15FF 0021;	
    // (ᗿ) CANADIAN SYLLABICS CARRIER KKI	[3716 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15FF, 0x0021 };
    uint32_t const ces[9] = { 0x3716, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_193)
{
    // 15FF 003F;	
    // (ᗿ) CANADIAN SYLLABICS CARRIER KKI	[3716 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15FF, 0x003F };
    uint32_t const ces[9] = { 0x3716, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_194)
{
    // 15FF 0061;	
    // (ᗿ) CANADIAN SYLLABICS CARRIER KKI	[3716 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15FF, 0x0061 };
    uint32_t const ces[9] = { 0x3716, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_195)
{
    // 15FF 0041;	
    // (ᗿ) CANADIAN SYLLABICS CARRIER KKI	[3716 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15FF, 0x0041 };
    uint32_t const ces[9] = { 0x3716, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_196)
{
    // 15FF 0062;	
    // (ᗿ) CANADIAN SYLLABICS CARRIER KKI	[3716 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15FF, 0x0062 };
    uint32_t const ces[9] = { 0x3716, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_197)
{
    // 1600 0021;	
    // (ᘀ) CANADIAN SYLLABICS CARRIER KKA	[3717 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1600, 0x0021 };
    uint32_t const ces[9] = { 0x3717, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_198)
{
    // 1600 003F;	
    // (ᘀ) CANADIAN SYLLABICS CARRIER KKA	[3717 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1600, 0x003F };
    uint32_t const ces[9] = { 0x3717, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_199)
{
    // 1600 0061;	
    // (ᘀ) CANADIAN SYLLABICS CARRIER KKA	[3717 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1600, 0x0061 };
    uint32_t const ces[9] = { 0x3717, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_200)
{
    // 1600 0041;	
    // (ᘀ) CANADIAN SYLLABICS CARRIER KKA	[3717 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1600, 0x0041 };
    uint32_t const ces[9] = { 0x3717, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_201)
{
    // 1600 0062;	
    // (ᘀ) CANADIAN SYLLABICS CARRIER KKA	[3717 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1600, 0x0062 };
    uint32_t const ces[9] = { 0x3717, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_202)
{
    // 1601 0021;	
    // (ᘁ) CANADIAN SYLLABICS CARRIER KK	[3718 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1601, 0x0021 };
    uint32_t const ces[9] = { 0x3718, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_203)
{
    // 1601 003F;	
    // (ᘁ) CANADIAN SYLLABICS CARRIER KK	[3718 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1601, 0x003F };
    uint32_t const ces[9] = { 0x3718, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_204)
{
    // 1601 0061;	
    // (ᘁ) CANADIAN SYLLABICS CARRIER KK	[3718 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1601, 0x0061 };
    uint32_t const ces[9] = { 0x3718, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_205)
{
    // 1601 0041;	
    // (ᘁ) CANADIAN SYLLABICS CARRIER KK	[3718 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1601, 0x0041 };
    uint32_t const ces[9] = { 0x3718, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_206)
{
    // 1601 0062;	
    // (ᘁ) CANADIAN SYLLABICS CARRIER KK	[3718 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1601, 0x0062 };
    uint32_t const ces[9] = { 0x3718, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_207)
{
    // 1602 0021;	
    // (ᘂ) CANADIAN SYLLABICS CARRIER NU	[3719 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1602, 0x0021 };
    uint32_t const ces[9] = { 0x3719, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_208)
{
    // 1602 003F;	
    // (ᘂ) CANADIAN SYLLABICS CARRIER NU	[3719 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1602, 0x003F };
    uint32_t const ces[9] = { 0x3719, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_209)
{
    // 1602 0061;	
    // (ᘂ) CANADIAN SYLLABICS CARRIER NU	[3719 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1602, 0x0061 };
    uint32_t const ces[9] = { 0x3719, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_210)
{
    // 1602 0041;	
    // (ᘂ) CANADIAN SYLLABICS CARRIER NU	[3719 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1602, 0x0041 };
    uint32_t const ces[9] = { 0x3719, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_211)
{
    // 1602 0062;	
    // (ᘂ) CANADIAN SYLLABICS CARRIER NU	[3719 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1602, 0x0062 };
    uint32_t const ces[9] = { 0x3719, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_212)
{
    // 1603 0021;	
    // (ᘃ) CANADIAN SYLLABICS CARRIER NO	[371A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1603, 0x0021 };
    uint32_t const ces[9] = { 0x371A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_213)
{
    // 1603 003F;	
    // (ᘃ) CANADIAN SYLLABICS CARRIER NO	[371A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1603, 0x003F };
    uint32_t const ces[9] = { 0x371A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_214)
{
    // 1603 0061;	
    // (ᘃ) CANADIAN SYLLABICS CARRIER NO	[371A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1603, 0x0061 };
    uint32_t const ces[9] = { 0x371A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_215)
{
    // 1603 0041;	
    // (ᘃ) CANADIAN SYLLABICS CARRIER NO	[371A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1603, 0x0041 };
    uint32_t const ces[9] = { 0x371A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_216)
{
    // 1603 0062;	
    // (ᘃ) CANADIAN SYLLABICS CARRIER NO	[371A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1603, 0x0062 };
    uint32_t const ces[9] = { 0x371A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_217)
{
    // 1604 0021;	
    // (ᘄ) CANADIAN SYLLABICS CARRIER NE	[371B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1604, 0x0021 };
    uint32_t const ces[9] = { 0x371B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_218)
{
    // 1604 003F;	
    // (ᘄ) CANADIAN SYLLABICS CARRIER NE	[371B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1604, 0x003F };
    uint32_t const ces[9] = { 0x371B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_219)
{
    // 1604 0061;	
    // (ᘄ) CANADIAN SYLLABICS CARRIER NE	[371B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1604, 0x0061 };
    uint32_t const ces[9] = { 0x371B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_220)
{
    // 1604 0041;	
    // (ᘄ) CANADIAN SYLLABICS CARRIER NE	[371B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1604, 0x0041 };
    uint32_t const ces[9] = { 0x371B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_221)
{
    // 1604 0062;	
    // (ᘄ) CANADIAN SYLLABICS CARRIER NE	[371B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1604, 0x0062 };
    uint32_t const ces[9] = { 0x371B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_222)
{
    // 1605 0021;	
    // (ᘅ) CANADIAN SYLLABICS CARRIER NEE	[371C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1605, 0x0021 };
    uint32_t const ces[9] = { 0x371C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_223)
{
    // 1605 003F;	
    // (ᘅ) CANADIAN SYLLABICS CARRIER NEE	[371C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1605, 0x003F };
    uint32_t const ces[9] = { 0x371C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_224)
{
    // 1605 0061;	
    // (ᘅ) CANADIAN SYLLABICS CARRIER NEE	[371C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1605, 0x0061 };
    uint32_t const ces[9] = { 0x371C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_225)
{
    // 1605 0041;	
    // (ᘅ) CANADIAN SYLLABICS CARRIER NEE	[371C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1605, 0x0041 };
    uint32_t const ces[9] = { 0x371C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_226)
{
    // 1605 0062;	
    // (ᘅ) CANADIAN SYLLABICS CARRIER NEE	[371C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1605, 0x0062 };
    uint32_t const ces[9] = { 0x371C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_227)
{
    // 1606 0021;	
    // (ᘆ) CANADIAN SYLLABICS CARRIER NI	[371D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1606, 0x0021 };
    uint32_t const ces[9] = { 0x371D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_228)
{
    // 1606 003F;	
    // (ᘆ) CANADIAN SYLLABICS CARRIER NI	[371D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1606, 0x003F };
    uint32_t const ces[9] = { 0x371D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_229)
{
    // 1606 0061;	
    // (ᘆ) CANADIAN SYLLABICS CARRIER NI	[371D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1606, 0x0061 };
    uint32_t const ces[9] = { 0x371D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_230)
{
    // 1606 0041;	
    // (ᘆ) CANADIAN SYLLABICS CARRIER NI	[371D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1606, 0x0041 };
    uint32_t const ces[9] = { 0x371D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_231)
{
    // 1606 0062;	
    // (ᘆ) CANADIAN SYLLABICS CARRIER NI	[371D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1606, 0x0062 };
    uint32_t const ces[9] = { 0x371D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_232)
{
    // 1607 0021;	
    // (ᘇ) CANADIAN SYLLABICS CARRIER NA	[371E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1607, 0x0021 };
    uint32_t const ces[9] = { 0x371E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_233)
{
    // 1607 003F;	
    // (ᘇ) CANADIAN SYLLABICS CARRIER NA	[371E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1607, 0x003F };
    uint32_t const ces[9] = { 0x371E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_234)
{
    // 1607 0061;	
    // (ᘇ) CANADIAN SYLLABICS CARRIER NA	[371E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1607, 0x0061 };
    uint32_t const ces[9] = { 0x371E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_235)
{
    // 1607 0041;	
    // (ᘇ) CANADIAN SYLLABICS CARRIER NA	[371E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1607, 0x0041 };
    uint32_t const ces[9] = { 0x371E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_236)
{
    // 1607 0062;	
    // (ᘇ) CANADIAN SYLLABICS CARRIER NA	[371E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1607, 0x0062 };
    uint32_t const ces[9] = { 0x371E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_237)
{
    // 1608 0021;	
    // (ᘈ) CANADIAN SYLLABICS CARRIER MU	[371F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1608, 0x0021 };
    uint32_t const ces[9] = { 0x371F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_238)
{
    // 1608 003F;	
    // (ᘈ) CANADIAN SYLLABICS CARRIER MU	[371F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1608, 0x003F };
    uint32_t const ces[9] = { 0x371F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_239)
{
    // 1608 0061;	
    // (ᘈ) CANADIAN SYLLABICS CARRIER MU	[371F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1608, 0x0061 };
    uint32_t const ces[9] = { 0x371F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_240)
{
    // 1608 0041;	
    // (ᘈ) CANADIAN SYLLABICS CARRIER MU	[371F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1608, 0x0041 };
    uint32_t const ces[9] = { 0x371F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_241)
{
    // 1608 0062;	
    // (ᘈ) CANADIAN SYLLABICS CARRIER MU	[371F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1608, 0x0062 };
    uint32_t const ces[9] = { 0x371F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_242)
{
    // 1609 0021;	
    // (ᘉ) CANADIAN SYLLABICS CARRIER MO	[3720 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1609, 0x0021 };
    uint32_t const ces[9] = { 0x3720, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_243)
{
    // 1609 003F;	
    // (ᘉ) CANADIAN SYLLABICS CARRIER MO	[3720 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1609, 0x003F };
    uint32_t const ces[9] = { 0x3720, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_244)
{
    // 1609 0061;	
    // (ᘉ) CANADIAN SYLLABICS CARRIER MO	[3720 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1609, 0x0061 };
    uint32_t const ces[9] = { 0x3720, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_245)
{
    // 1609 0041;	
    // (ᘉ) CANADIAN SYLLABICS CARRIER MO	[3720 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1609, 0x0041 };
    uint32_t const ces[9] = { 0x3720, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_246)
{
    // 1609 0062;	
    // (ᘉ) CANADIAN SYLLABICS CARRIER MO	[3720 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1609, 0x0062 };
    uint32_t const ces[9] = { 0x3720, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_247)
{
    // 160A 0021;	
    // (ᘊ) CANADIAN SYLLABICS CARRIER ME	[3721 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x160A, 0x0021 };
    uint32_t const ces[9] = { 0x3721, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_248)
{
    // 160A 003F;	
    // (ᘊ) CANADIAN SYLLABICS CARRIER ME	[3721 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x160A, 0x003F };
    uint32_t const ces[9] = { 0x3721, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_249)
{
    // 160A 0061;	
    // (ᘊ) CANADIAN SYLLABICS CARRIER ME	[3721 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x160A, 0x0061 };
    uint32_t const ces[9] = { 0x3721, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_250)
{
    // 160A 0041;	
    // (ᘊ) CANADIAN SYLLABICS CARRIER ME	[3721 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x160A, 0x0041 };
    uint32_t const ces[9] = { 0x3721, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_251)
{
    // 160A 0062;	
    // (ᘊ) CANADIAN SYLLABICS CARRIER ME	[3721 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x160A, 0x0062 };
    uint32_t const ces[9] = { 0x3721, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_252)
{
    // 160B 0021;	
    // (ᘋ) CANADIAN SYLLABICS CARRIER MEE	[3722 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x160B, 0x0021 };
    uint32_t const ces[9] = { 0x3722, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_253)
{
    // 160B 003F;	
    // (ᘋ) CANADIAN SYLLABICS CARRIER MEE	[3722 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x160B, 0x003F };
    uint32_t const ces[9] = { 0x3722, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_254)
{
    // 160B 0061;	
    // (ᘋ) CANADIAN SYLLABICS CARRIER MEE	[3722 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x160B, 0x0061 };
    uint32_t const ces[9] = { 0x3722, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_255)
{
    // 160B 0041;	
    // (ᘋ) CANADIAN SYLLABICS CARRIER MEE	[3722 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x160B, 0x0041 };
    uint32_t const ces[9] = { 0x3722, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_256)
{
    // 160B 0062;	
    // (ᘋ) CANADIAN SYLLABICS CARRIER MEE	[3722 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x160B, 0x0062 };
    uint32_t const ces[9] = { 0x3722, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_257)
{
    // 160C 0021;	
    // (ᘌ) CANADIAN SYLLABICS CARRIER MI	[3723 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x160C, 0x0021 };
    uint32_t const ces[9] = { 0x3723, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_258)
{
    // 160C 003F;	
    // (ᘌ) CANADIAN SYLLABICS CARRIER MI	[3723 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x160C, 0x003F };
    uint32_t const ces[9] = { 0x3723, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_259)
{
    // 160C 0061;	
    // (ᘌ) CANADIAN SYLLABICS CARRIER MI	[3723 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x160C, 0x0061 };
    uint32_t const ces[9] = { 0x3723, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_260)
{
    // 160C 0041;	
    // (ᘌ) CANADIAN SYLLABICS CARRIER MI	[3723 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x160C, 0x0041 };
    uint32_t const ces[9] = { 0x3723, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_261)
{
    // 160C 0062;	
    // (ᘌ) CANADIAN SYLLABICS CARRIER MI	[3723 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x160C, 0x0062 };
    uint32_t const ces[9] = { 0x3723, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_262)
{
    // 160D 0021;	
    // (ᘍ) CANADIAN SYLLABICS CARRIER MA	[3724 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x160D, 0x0021 };
    uint32_t const ces[9] = { 0x3724, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_263)
{
    // 160D 003F;	
    // (ᘍ) CANADIAN SYLLABICS CARRIER MA	[3724 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x160D, 0x003F };
    uint32_t const ces[9] = { 0x3724, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_264)
{
    // 160D 0061;	
    // (ᘍ) CANADIAN SYLLABICS CARRIER MA	[3724 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x160D, 0x0061 };
    uint32_t const ces[9] = { 0x3724, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_265)
{
    // 160D 0041;	
    // (ᘍ) CANADIAN SYLLABICS CARRIER MA	[3724 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x160D, 0x0041 };
    uint32_t const ces[9] = { 0x3724, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_266)
{
    // 160D 0062;	
    // (ᘍ) CANADIAN SYLLABICS CARRIER MA	[3724 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x160D, 0x0062 };
    uint32_t const ces[9] = { 0x3724, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_267)
{
    // 160E 0021;	
    // (ᘎ) CANADIAN SYLLABICS CARRIER YU	[3725 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x160E, 0x0021 };
    uint32_t const ces[9] = { 0x3725, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_268)
{
    // 160E 003F;	
    // (ᘎ) CANADIAN SYLLABICS CARRIER YU	[3725 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x160E, 0x003F };
    uint32_t const ces[9] = { 0x3725, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_269)
{
    // 160E 0061;	
    // (ᘎ) CANADIAN SYLLABICS CARRIER YU	[3725 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x160E, 0x0061 };
    uint32_t const ces[9] = { 0x3725, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_270)
{
    // 160E 0041;	
    // (ᘎ) CANADIAN SYLLABICS CARRIER YU	[3725 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x160E, 0x0041 };
    uint32_t const ces[9] = { 0x3725, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_271)
{
    // 160E 0062;	
    // (ᘎ) CANADIAN SYLLABICS CARRIER YU	[3725 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x160E, 0x0062 };
    uint32_t const ces[9] = { 0x3725, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_272)
{
    // 160F 0021;	
    // (ᘏ) CANADIAN SYLLABICS CARRIER YO	[3726 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x160F, 0x0021 };
    uint32_t const ces[9] = { 0x3726, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_273)
{
    // 160F 003F;	
    // (ᘏ) CANADIAN SYLLABICS CARRIER YO	[3726 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x160F, 0x003F };
    uint32_t const ces[9] = { 0x3726, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_274)
{
    // 160F 0061;	
    // (ᘏ) CANADIAN SYLLABICS CARRIER YO	[3726 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x160F, 0x0061 };
    uint32_t const ces[9] = { 0x3726, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_275)
{
    // 160F 0041;	
    // (ᘏ) CANADIAN SYLLABICS CARRIER YO	[3726 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x160F, 0x0041 };
    uint32_t const ces[9] = { 0x3726, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_276)
{
    // 160F 0062;	
    // (ᘏ) CANADIAN SYLLABICS CARRIER YO	[3726 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x160F, 0x0062 };
    uint32_t const ces[9] = { 0x3726, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_277)
{
    // 1610 0021;	
    // (ᘐ) CANADIAN SYLLABICS CARRIER YE	[3727 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1610, 0x0021 };
    uint32_t const ces[9] = { 0x3727, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_278)
{
    // 1610 003F;	
    // (ᘐ) CANADIAN SYLLABICS CARRIER YE	[3727 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1610, 0x003F };
    uint32_t const ces[9] = { 0x3727, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_279)
{
    // 1610 0061;	
    // (ᘐ) CANADIAN SYLLABICS CARRIER YE	[3727 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1610, 0x0061 };
    uint32_t const ces[9] = { 0x3727, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_280)
{
    // 1610 0041;	
    // (ᘐ) CANADIAN SYLLABICS CARRIER YE	[3727 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1610, 0x0041 };
    uint32_t const ces[9] = { 0x3727, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_281)
{
    // 1610 0062;	
    // (ᘐ) CANADIAN SYLLABICS CARRIER YE	[3727 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1610, 0x0062 };
    uint32_t const ces[9] = { 0x3727, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_282)
{
    // 1611 0021;	
    // (ᘑ) CANADIAN SYLLABICS CARRIER YEE	[3728 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1611, 0x0021 };
    uint32_t const ces[9] = { 0x3728, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_283)
{
    // 1611 003F;	
    // (ᘑ) CANADIAN SYLLABICS CARRIER YEE	[3728 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1611, 0x003F };
    uint32_t const ces[9] = { 0x3728, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_284)
{
    // 1611 0061;	
    // (ᘑ) CANADIAN SYLLABICS CARRIER YEE	[3728 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1611, 0x0061 };
    uint32_t const ces[9] = { 0x3728, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_285)
{
    // 1611 0041;	
    // (ᘑ) CANADIAN SYLLABICS CARRIER YEE	[3728 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1611, 0x0041 };
    uint32_t const ces[9] = { 0x3728, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_286)
{
    // 1611 0062;	
    // (ᘑ) CANADIAN SYLLABICS CARRIER YEE	[3728 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1611, 0x0062 };
    uint32_t const ces[9] = { 0x3728, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_287)
{
    // 1612 0021;	
    // (ᘒ) CANADIAN SYLLABICS CARRIER YI	[3729 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1612, 0x0021 };
    uint32_t const ces[9] = { 0x3729, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_288)
{
    // 1612 003F;	
    // (ᘒ) CANADIAN SYLLABICS CARRIER YI	[3729 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1612, 0x003F };
    uint32_t const ces[9] = { 0x3729, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_289)
{
    // 1612 0061;	
    // (ᘒ) CANADIAN SYLLABICS CARRIER YI	[3729 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1612, 0x0061 };
    uint32_t const ces[9] = { 0x3729, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_290)
{
    // 1612 0041;	
    // (ᘒ) CANADIAN SYLLABICS CARRIER YI	[3729 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1612, 0x0041 };
    uint32_t const ces[9] = { 0x3729, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_291)
{
    // 1612 0062;	
    // (ᘒ) CANADIAN SYLLABICS CARRIER YI	[3729 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1612, 0x0062 };
    uint32_t const ces[9] = { 0x3729, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_292)
{
    // 1613 0021;	
    // (ᘓ) CANADIAN SYLLABICS CARRIER YA	[372A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1613, 0x0021 };
    uint32_t const ces[9] = { 0x372A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_293)
{
    // 1613 003F;	
    // (ᘓ) CANADIAN SYLLABICS CARRIER YA	[372A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1613, 0x003F };
    uint32_t const ces[9] = { 0x372A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_294)
{
    // 1613 0061;	
    // (ᘓ) CANADIAN SYLLABICS CARRIER YA	[372A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1613, 0x0061 };
    uint32_t const ces[9] = { 0x372A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_295)
{
    // 1613 0041;	
    // (ᘓ) CANADIAN SYLLABICS CARRIER YA	[372A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1613, 0x0041 };
    uint32_t const ces[9] = { 0x372A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_296)
{
    // 1613 0062;	
    // (ᘓ) CANADIAN SYLLABICS CARRIER YA	[372A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1613, 0x0062 };
    uint32_t const ces[9] = { 0x372A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_297)
{
    // 1614 0021;	
    // (ᘔ) CANADIAN SYLLABICS CARRIER JU	[372B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1614, 0x0021 };
    uint32_t const ces[9] = { 0x372B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_298)
{
    // 1614 003F;	
    // (ᘔ) CANADIAN SYLLABICS CARRIER JU	[372B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1614, 0x003F };
    uint32_t const ces[9] = { 0x372B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_299)
{
    // 1614 0061;	
    // (ᘔ) CANADIAN SYLLABICS CARRIER JU	[372B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1614, 0x0061 };
    uint32_t const ces[9] = { 0x372B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_300)
{
    // 1614 0041;	
    // (ᘔ) CANADIAN SYLLABICS CARRIER JU	[372B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1614, 0x0041 };
    uint32_t const ces[9] = { 0x372B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_301)
{
    // 1614 0062;	
    // (ᘔ) CANADIAN SYLLABICS CARRIER JU	[372B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1614, 0x0062 };
    uint32_t const ces[9] = { 0x372B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_302)
{
    // 1615 0021;	
    // (ᘕ) CANADIAN SYLLABICS SAYISI JU	[372C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1615, 0x0021 };
    uint32_t const ces[9] = { 0x372C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_303)
{
    // 1615 003F;	
    // (ᘕ) CANADIAN SYLLABICS SAYISI JU	[372C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1615, 0x003F };
    uint32_t const ces[9] = { 0x372C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_304)
{
    // 1615 0061;	
    // (ᘕ) CANADIAN SYLLABICS SAYISI JU	[372C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1615, 0x0061 };
    uint32_t const ces[9] = { 0x372C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_305)
{
    // 1615 0041;	
    // (ᘕ) CANADIAN SYLLABICS SAYISI JU	[372C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1615, 0x0041 };
    uint32_t const ces[9] = { 0x372C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_306)
{
    // 1615 0062;	
    // (ᘕ) CANADIAN SYLLABICS SAYISI JU	[372C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1615, 0x0062 };
    uint32_t const ces[9] = { 0x372C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_307)
{
    // 1616 0021;	
    // (ᘖ) CANADIAN SYLLABICS CARRIER JO	[372D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1616, 0x0021 };
    uint32_t const ces[9] = { 0x372D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_308)
{
    // 1616 003F;	
    // (ᘖ) CANADIAN SYLLABICS CARRIER JO	[372D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1616, 0x003F };
    uint32_t const ces[9] = { 0x372D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_309)
{
    // 1616 0061;	
    // (ᘖ) CANADIAN SYLLABICS CARRIER JO	[372D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1616, 0x0061 };
    uint32_t const ces[9] = { 0x372D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_310)
{
    // 1616 0041;	
    // (ᘖ) CANADIAN SYLLABICS CARRIER JO	[372D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1616, 0x0041 };
    uint32_t const ces[9] = { 0x372D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_311)
{
    // 1616 0062;	
    // (ᘖ) CANADIAN SYLLABICS CARRIER JO	[372D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1616, 0x0062 };
    uint32_t const ces[9] = { 0x372D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_312)
{
    // 1617 0021;	
    // (ᘗ) CANADIAN SYLLABICS CARRIER JE	[372E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1617, 0x0021 };
    uint32_t const ces[9] = { 0x372E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_313)
{
    // 1617 003F;	
    // (ᘗ) CANADIAN SYLLABICS CARRIER JE	[372E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1617, 0x003F };
    uint32_t const ces[9] = { 0x372E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_314)
{
    // 1617 0061;	
    // (ᘗ) CANADIAN SYLLABICS CARRIER JE	[372E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1617, 0x0061 };
    uint32_t const ces[9] = { 0x372E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_315)
{
    // 1617 0041;	
    // (ᘗ) CANADIAN SYLLABICS CARRIER JE	[372E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1617, 0x0041 };
    uint32_t const ces[9] = { 0x372E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_316)
{
    // 1617 0062;	
    // (ᘗ) CANADIAN SYLLABICS CARRIER JE	[372E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1617, 0x0062 };
    uint32_t const ces[9] = { 0x372E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_317)
{
    // 1618 0021;	
    // (ᘘ) CANADIAN SYLLABICS CARRIER JEE	[372F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1618, 0x0021 };
    uint32_t const ces[9] = { 0x372F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_318)
{
    // 1618 003F;	
    // (ᘘ) CANADIAN SYLLABICS CARRIER JEE	[372F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1618, 0x003F };
    uint32_t const ces[9] = { 0x372F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_319)
{
    // 1618 0061;	
    // (ᘘ) CANADIAN SYLLABICS CARRIER JEE	[372F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1618, 0x0061 };
    uint32_t const ces[9] = { 0x372F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_320)
{
    // 1618 0041;	
    // (ᘘ) CANADIAN SYLLABICS CARRIER JEE	[372F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1618, 0x0041 };
    uint32_t const ces[9] = { 0x372F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_321)
{
    // 1618 0062;	
    // (ᘘ) CANADIAN SYLLABICS CARRIER JEE	[372F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1618, 0x0062 };
    uint32_t const ces[9] = { 0x372F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_322)
{
    // 1619 0021;	
    // (ᘙ) CANADIAN SYLLABICS CARRIER JI	[3730 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1619, 0x0021 };
    uint32_t const ces[9] = { 0x3730, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_323)
{
    // 1619 003F;	
    // (ᘙ) CANADIAN SYLLABICS CARRIER JI	[3730 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1619, 0x003F };
    uint32_t const ces[9] = { 0x3730, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_324)
{
    // 1619 0061;	
    // (ᘙ) CANADIAN SYLLABICS CARRIER JI	[3730 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1619, 0x0061 };
    uint32_t const ces[9] = { 0x3730, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_325)
{
    // 1619 0041;	
    // (ᘙ) CANADIAN SYLLABICS CARRIER JI	[3730 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1619, 0x0041 };
    uint32_t const ces[9] = { 0x3730, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_326)
{
    // 1619 0062;	
    // (ᘙ) CANADIAN SYLLABICS CARRIER JI	[3730 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1619, 0x0062 };
    uint32_t const ces[9] = { 0x3730, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_327)
{
    // 161A 0021;	
    // (ᘚ) CANADIAN SYLLABICS SAYISI JI	[3731 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x161A, 0x0021 };
    uint32_t const ces[9] = { 0x3731, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_328)
{
    // 161A 003F;	
    // (ᘚ) CANADIAN SYLLABICS SAYISI JI	[3731 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x161A, 0x003F };
    uint32_t const ces[9] = { 0x3731, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_329)
{
    // 161A 0061;	
    // (ᘚ) CANADIAN SYLLABICS SAYISI JI	[3731 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x161A, 0x0061 };
    uint32_t const ces[9] = { 0x3731, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_330)
{
    // 161A 0041;	
    // (ᘚ) CANADIAN SYLLABICS SAYISI JI	[3731 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x161A, 0x0041 };
    uint32_t const ces[9] = { 0x3731, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_331)
{
    // 161A 0062;	
    // (ᘚ) CANADIAN SYLLABICS SAYISI JI	[3731 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x161A, 0x0062 };
    uint32_t const ces[9] = { 0x3731, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_332)
{
    // 161B 0021;	
    // (ᘛ) CANADIAN SYLLABICS CARRIER JA	[3732 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x161B, 0x0021 };
    uint32_t const ces[9] = { 0x3732, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_333)
{
    // 161B 003F;	
    // (ᘛ) CANADIAN SYLLABICS CARRIER JA	[3732 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x161B, 0x003F };
    uint32_t const ces[9] = { 0x3732, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_334)
{
    // 161B 0061;	
    // (ᘛ) CANADIAN SYLLABICS CARRIER JA	[3732 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x161B, 0x0061 };
    uint32_t const ces[9] = { 0x3732, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_335)
{
    // 161B 0041;	
    // (ᘛ) CANADIAN SYLLABICS CARRIER JA	[3732 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x161B, 0x0041 };
    uint32_t const ces[9] = { 0x3732, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_336)
{
    // 161B 0062;	
    // (ᘛ) CANADIAN SYLLABICS CARRIER JA	[3732 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x161B, 0x0062 };
    uint32_t const ces[9] = { 0x3732, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_337)
{
    // 161C 0021;	
    // (ᘜ) CANADIAN SYLLABICS CARRIER JJU	[3733 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x161C, 0x0021 };
    uint32_t const ces[9] = { 0x3733, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_338)
{
    // 161C 003F;	
    // (ᘜ) CANADIAN SYLLABICS CARRIER JJU	[3733 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x161C, 0x003F };
    uint32_t const ces[9] = { 0x3733, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_339)
{
    // 161C 0061;	
    // (ᘜ) CANADIAN SYLLABICS CARRIER JJU	[3733 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x161C, 0x0061 };
    uint32_t const ces[9] = { 0x3733, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_340)
{
    // 161C 0041;	
    // (ᘜ) CANADIAN SYLLABICS CARRIER JJU	[3733 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x161C, 0x0041 };
    uint32_t const ces[9] = { 0x3733, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_341)
{
    // 161C 0062;	
    // (ᘜ) CANADIAN SYLLABICS CARRIER JJU	[3733 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x161C, 0x0062 };
    uint32_t const ces[9] = { 0x3733, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_342)
{
    // 161D 0021;	
    // (ᘝ) CANADIAN SYLLABICS CARRIER JJO	[3734 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x161D, 0x0021 };
    uint32_t const ces[9] = { 0x3734, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_343)
{
    // 161D 003F;	
    // (ᘝ) CANADIAN SYLLABICS CARRIER JJO	[3734 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x161D, 0x003F };
    uint32_t const ces[9] = { 0x3734, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_344)
{
    // 161D 0061;	
    // (ᘝ) CANADIAN SYLLABICS CARRIER JJO	[3734 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x161D, 0x0061 };
    uint32_t const ces[9] = { 0x3734, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_345)
{
    // 161D 0041;	
    // (ᘝ) CANADIAN SYLLABICS CARRIER JJO	[3734 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x161D, 0x0041 };
    uint32_t const ces[9] = { 0x3734, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_346)
{
    // 161D 0062;	
    // (ᘝ) CANADIAN SYLLABICS CARRIER JJO	[3734 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x161D, 0x0062 };
    uint32_t const ces[9] = { 0x3734, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_347)
{
    // 161E 0021;	
    // (ᘞ) CANADIAN SYLLABICS CARRIER JJE	[3735 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x161E, 0x0021 };
    uint32_t const ces[9] = { 0x3735, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_348)
{
    // 161E 003F;	
    // (ᘞ) CANADIAN SYLLABICS CARRIER JJE	[3735 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x161E, 0x003F };
    uint32_t const ces[9] = { 0x3735, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_349)
{
    // 161E 0061;	
    // (ᘞ) CANADIAN SYLLABICS CARRIER JJE	[3735 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x161E, 0x0061 };
    uint32_t const ces[9] = { 0x3735, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_350)
{
    // 161E 0041;	
    // (ᘞ) CANADIAN SYLLABICS CARRIER JJE	[3735 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x161E, 0x0041 };
    uint32_t const ces[9] = { 0x3735, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_351)
{
    // 161E 0062;	
    // (ᘞ) CANADIAN SYLLABICS CARRIER JJE	[3735 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x161E, 0x0062 };
    uint32_t const ces[9] = { 0x3735, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_352)
{
    // 161F 0021;	
    // (ᘟ) CANADIAN SYLLABICS CARRIER JJEE	[3736 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x161F, 0x0021 };
    uint32_t const ces[9] = { 0x3736, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_353)
{
    // 161F 003F;	
    // (ᘟ) CANADIAN SYLLABICS CARRIER JJEE	[3736 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x161F, 0x003F };
    uint32_t const ces[9] = { 0x3736, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_354)
{
    // 161F 0061;	
    // (ᘟ) CANADIAN SYLLABICS CARRIER JJEE	[3736 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x161F, 0x0061 };
    uint32_t const ces[9] = { 0x3736, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_355)
{
    // 161F 0041;	
    // (ᘟ) CANADIAN SYLLABICS CARRIER JJEE	[3736 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x161F, 0x0041 };
    uint32_t const ces[9] = { 0x3736, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_356)
{
    // 161F 0062;	
    // (ᘟ) CANADIAN SYLLABICS CARRIER JJEE	[3736 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x161F, 0x0062 };
    uint32_t const ces[9] = { 0x3736, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_357)
{
    // 1620 0021;	
    // (ᘠ) CANADIAN SYLLABICS CARRIER JJI	[3737 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1620, 0x0021 };
    uint32_t const ces[9] = { 0x3737, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_358)
{
    // 1620 003F;	
    // (ᘠ) CANADIAN SYLLABICS CARRIER JJI	[3737 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1620, 0x003F };
    uint32_t const ces[9] = { 0x3737, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_359)
{
    // 1620 0061;	
    // (ᘠ) CANADIAN SYLLABICS CARRIER JJI	[3737 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1620, 0x0061 };
    uint32_t const ces[9] = { 0x3737, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_360)
{
    // 1620 0041;	
    // (ᘠ) CANADIAN SYLLABICS CARRIER JJI	[3737 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1620, 0x0041 };
    uint32_t const ces[9] = { 0x3737, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_361)
{
    // 1620 0062;	
    // (ᘠ) CANADIAN SYLLABICS CARRIER JJI	[3737 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1620, 0x0062 };
    uint32_t const ces[9] = { 0x3737, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_362)
{
    // 1621 0021;	
    // (ᘡ) CANADIAN SYLLABICS CARRIER JJA	[3738 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1621, 0x0021 };
    uint32_t const ces[9] = { 0x3738, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_363)
{
    // 1621 003F;	
    // (ᘡ) CANADIAN SYLLABICS CARRIER JJA	[3738 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1621, 0x003F };
    uint32_t const ces[9] = { 0x3738, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_364)
{
    // 1621 0061;	
    // (ᘡ) CANADIAN SYLLABICS CARRIER JJA	[3738 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1621, 0x0061 };
    uint32_t const ces[9] = { 0x3738, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_365)
{
    // 1621 0041;	
    // (ᘡ) CANADIAN SYLLABICS CARRIER JJA	[3738 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1621, 0x0041 };
    uint32_t const ces[9] = { 0x3738, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_366)
{
    // 1621 0062;	
    // (ᘡ) CANADIAN SYLLABICS CARRIER JJA	[3738 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1621, 0x0062 };
    uint32_t const ces[9] = { 0x3738, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_367)
{
    // 1622 0021;	
    // (ᘢ) CANADIAN SYLLABICS CARRIER LU	[3739 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1622, 0x0021 };
    uint32_t const ces[9] = { 0x3739, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_368)
{
    // 1622 003F;	
    // (ᘢ) CANADIAN SYLLABICS CARRIER LU	[3739 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1622, 0x003F };
    uint32_t const ces[9] = { 0x3739, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_369)
{
    // 1622 0061;	
    // (ᘢ) CANADIAN SYLLABICS CARRIER LU	[3739 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1622, 0x0061 };
    uint32_t const ces[9] = { 0x3739, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_370)
{
    // 1622 0041;	
    // (ᘢ) CANADIAN SYLLABICS CARRIER LU	[3739 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1622, 0x0041 };
    uint32_t const ces[9] = { 0x3739, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_371)
{
    // 1622 0062;	
    // (ᘢ) CANADIAN SYLLABICS CARRIER LU	[3739 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1622, 0x0062 };
    uint32_t const ces[9] = { 0x3739, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_372)
{
    // 1623 0021;	
    // (ᘣ) CANADIAN SYLLABICS CARRIER LO	[373A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1623, 0x0021 };
    uint32_t const ces[9] = { 0x373A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_373)
{
    // 1623 003F;	
    // (ᘣ) CANADIAN SYLLABICS CARRIER LO	[373A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1623, 0x003F };
    uint32_t const ces[9] = { 0x373A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_374)
{
    // 1623 0061;	
    // (ᘣ) CANADIAN SYLLABICS CARRIER LO	[373A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1623, 0x0061 };
    uint32_t const ces[9] = { 0x373A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_375)
{
    // 1623 0041;	
    // (ᘣ) CANADIAN SYLLABICS CARRIER LO	[373A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1623, 0x0041 };
    uint32_t const ces[9] = { 0x373A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_376)
{
    // 1623 0062;	
    // (ᘣ) CANADIAN SYLLABICS CARRIER LO	[373A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1623, 0x0062 };
    uint32_t const ces[9] = { 0x373A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_377)
{
    // 1624 0021;	
    // (ᘤ) CANADIAN SYLLABICS CARRIER LE	[373B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1624, 0x0021 };
    uint32_t const ces[9] = { 0x373B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_378)
{
    // 1624 003F;	
    // (ᘤ) CANADIAN SYLLABICS CARRIER LE	[373B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1624, 0x003F };
    uint32_t const ces[9] = { 0x373B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_379)
{
    // 1624 0061;	
    // (ᘤ) CANADIAN SYLLABICS CARRIER LE	[373B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1624, 0x0061 };
    uint32_t const ces[9] = { 0x373B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_380)
{
    // 1624 0041;	
    // (ᘤ) CANADIAN SYLLABICS CARRIER LE	[373B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1624, 0x0041 };
    uint32_t const ces[9] = { 0x373B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_381)
{
    // 1624 0062;	
    // (ᘤ) CANADIAN SYLLABICS CARRIER LE	[373B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1624, 0x0062 };
    uint32_t const ces[9] = { 0x373B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_382)
{
    // 1625 0021;	
    // (ᘥ) CANADIAN SYLLABICS CARRIER LEE	[373C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1625, 0x0021 };
    uint32_t const ces[9] = { 0x373C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_383)
{
    // 1625 003F;	
    // (ᘥ) CANADIAN SYLLABICS CARRIER LEE	[373C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1625, 0x003F };
    uint32_t const ces[9] = { 0x373C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_384)
{
    // 1625 0061;	
    // (ᘥ) CANADIAN SYLLABICS CARRIER LEE	[373C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1625, 0x0061 };
    uint32_t const ces[9] = { 0x373C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_385)
{
    // 1625 0041;	
    // (ᘥ) CANADIAN SYLLABICS CARRIER LEE	[373C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1625, 0x0041 };
    uint32_t const ces[9] = { 0x373C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_386)
{
    // 1625 0062;	
    // (ᘥ) CANADIAN SYLLABICS CARRIER LEE	[373C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1625, 0x0062 };
    uint32_t const ces[9] = { 0x373C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_387)
{
    // 1626 0021;	
    // (ᘦ) CANADIAN SYLLABICS CARRIER LI	[373D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1626, 0x0021 };
    uint32_t const ces[9] = { 0x373D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_388)
{
    // 1626 003F;	
    // (ᘦ) CANADIAN SYLLABICS CARRIER LI	[373D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1626, 0x003F };
    uint32_t const ces[9] = { 0x373D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_389)
{
    // 1626 0061;	
    // (ᘦ) CANADIAN SYLLABICS CARRIER LI	[373D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1626, 0x0061 };
    uint32_t const ces[9] = { 0x373D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_390)
{
    // 1626 0041;	
    // (ᘦ) CANADIAN SYLLABICS CARRIER LI	[373D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1626, 0x0041 };
    uint32_t const ces[9] = { 0x373D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_391)
{
    // 1626 0062;	
    // (ᘦ) CANADIAN SYLLABICS CARRIER LI	[373D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1626, 0x0062 };
    uint32_t const ces[9] = { 0x373D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_392)
{
    // 1627 0021;	
    // (ᘧ) CANADIAN SYLLABICS CARRIER LA	[373E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1627, 0x0021 };
    uint32_t const ces[9] = { 0x373E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_393)
{
    // 1627 003F;	
    // (ᘧ) CANADIAN SYLLABICS CARRIER LA	[373E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1627, 0x003F };
    uint32_t const ces[9] = { 0x373E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_394)
{
    // 1627 0061;	
    // (ᘧ) CANADIAN SYLLABICS CARRIER LA	[373E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1627, 0x0061 };
    uint32_t const ces[9] = { 0x373E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_395)
{
    // 1627 0041;	
    // (ᘧ) CANADIAN SYLLABICS CARRIER LA	[373E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1627, 0x0041 };
    uint32_t const ces[9] = { 0x373E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_396)
{
    // 1627 0062;	
    // (ᘧ) CANADIAN SYLLABICS CARRIER LA	[373E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1627, 0x0062 };
    uint32_t const ces[9] = { 0x373E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_397)
{
    // 1628 0021;	
    // (ᘨ) CANADIAN SYLLABICS CARRIER DLU	[373F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1628, 0x0021 };
    uint32_t const ces[9] = { 0x373F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_398)
{
    // 1628 003F;	
    // (ᘨ) CANADIAN SYLLABICS CARRIER DLU	[373F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1628, 0x003F };
    uint32_t const ces[9] = { 0x373F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_399)
{
    // 1628 0061;	
    // (ᘨ) CANADIAN SYLLABICS CARRIER DLU	[373F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1628, 0x0061 };
    uint32_t const ces[9] = { 0x373F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_400)
{
    // 1628 0041;	
    // (ᘨ) CANADIAN SYLLABICS CARRIER DLU	[373F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1628, 0x0041 };
    uint32_t const ces[9] = { 0x373F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_401)
{
    // 1628 0062;	
    // (ᘨ) CANADIAN SYLLABICS CARRIER DLU	[373F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1628, 0x0062 };
    uint32_t const ces[9] = { 0x373F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_402)
{
    // 1629 0021;	
    // (ᘩ) CANADIAN SYLLABICS CARRIER DLO	[3740 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1629, 0x0021 };
    uint32_t const ces[9] = { 0x3740, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_403)
{
    // 1629 003F;	
    // (ᘩ) CANADIAN SYLLABICS CARRIER DLO	[3740 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1629, 0x003F };
    uint32_t const ces[9] = { 0x3740, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_404)
{
    // 1629 0061;	
    // (ᘩ) CANADIAN SYLLABICS CARRIER DLO	[3740 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1629, 0x0061 };
    uint32_t const ces[9] = { 0x3740, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_405)
{
    // 1629 0041;	
    // (ᘩ) CANADIAN SYLLABICS CARRIER DLO	[3740 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1629, 0x0041 };
    uint32_t const ces[9] = { 0x3740, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_406)
{
    // 1629 0062;	
    // (ᘩ) CANADIAN SYLLABICS CARRIER DLO	[3740 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1629, 0x0062 };
    uint32_t const ces[9] = { 0x3740, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_407)
{
    // 162A 0021;	
    // (ᘪ) CANADIAN SYLLABICS CARRIER DLE	[3741 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x162A, 0x0021 };
    uint32_t const ces[9] = { 0x3741, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_408)
{
    // 162A 003F;	
    // (ᘪ) CANADIAN SYLLABICS CARRIER DLE	[3741 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x162A, 0x003F };
    uint32_t const ces[9] = { 0x3741, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_409)
{
    // 162A 0061;	
    // (ᘪ) CANADIAN SYLLABICS CARRIER DLE	[3741 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x162A, 0x0061 };
    uint32_t const ces[9] = { 0x3741, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_410)
{
    // 162A 0041;	
    // (ᘪ) CANADIAN SYLLABICS CARRIER DLE	[3741 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x162A, 0x0041 };
    uint32_t const ces[9] = { 0x3741, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_411)
{
    // 162A 0062;	
    // (ᘪ) CANADIAN SYLLABICS CARRIER DLE	[3741 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x162A, 0x0062 };
    uint32_t const ces[9] = { 0x3741, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_412)
{
    // 162B 0021;	
    // (ᘫ) CANADIAN SYLLABICS CARRIER DLEE	[3742 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x162B, 0x0021 };
    uint32_t const ces[9] = { 0x3742, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_413)
{
    // 162B 003F;	
    // (ᘫ) CANADIAN SYLLABICS CARRIER DLEE	[3742 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x162B, 0x003F };
    uint32_t const ces[9] = { 0x3742, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_414)
{
    // 162B 0061;	
    // (ᘫ) CANADIAN SYLLABICS CARRIER DLEE	[3742 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x162B, 0x0061 };
    uint32_t const ces[9] = { 0x3742, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_415)
{
    // 162B 0041;	
    // (ᘫ) CANADIAN SYLLABICS CARRIER DLEE	[3742 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x162B, 0x0041 };
    uint32_t const ces[9] = { 0x3742, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_416)
{
    // 162B 0062;	
    // (ᘫ) CANADIAN SYLLABICS CARRIER DLEE	[3742 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x162B, 0x0062 };
    uint32_t const ces[9] = { 0x3742, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_417)
{
    // 162C 0021;	
    // (ᘬ) CANADIAN SYLLABICS CARRIER DLI	[3743 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x162C, 0x0021 };
    uint32_t const ces[9] = { 0x3743, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_418)
{
    // 162C 003F;	
    // (ᘬ) CANADIAN SYLLABICS CARRIER DLI	[3743 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x162C, 0x003F };
    uint32_t const ces[9] = { 0x3743, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_419)
{
    // 162C 0061;	
    // (ᘬ) CANADIAN SYLLABICS CARRIER DLI	[3743 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x162C, 0x0061 };
    uint32_t const ces[9] = { 0x3743, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_420)
{
    // 162C 0041;	
    // (ᘬ) CANADIAN SYLLABICS CARRIER DLI	[3743 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x162C, 0x0041 };
    uint32_t const ces[9] = { 0x3743, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_421)
{
    // 162C 0062;	
    // (ᘬ) CANADIAN SYLLABICS CARRIER DLI	[3743 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x162C, 0x0062 };
    uint32_t const ces[9] = { 0x3743, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_422)
{
    // 162D 0021;	
    // (ᘭ) CANADIAN SYLLABICS CARRIER DLA	[3744 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x162D, 0x0021 };
    uint32_t const ces[9] = { 0x3744, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_423)
{
    // 162D 003F;	
    // (ᘭ) CANADIAN SYLLABICS CARRIER DLA	[3744 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x162D, 0x003F };
    uint32_t const ces[9] = { 0x3744, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_424)
{
    // 162D 0061;	
    // (ᘭ) CANADIAN SYLLABICS CARRIER DLA	[3744 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x162D, 0x0061 };
    uint32_t const ces[9] = { 0x3744, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_425)
{
    // 162D 0041;	
    // (ᘭ) CANADIAN SYLLABICS CARRIER DLA	[3744 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x162D, 0x0041 };
    uint32_t const ces[9] = { 0x3744, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_426)
{
    // 162D 0062;	
    // (ᘭ) CANADIAN SYLLABICS CARRIER DLA	[3744 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x162D, 0x0062 };
    uint32_t const ces[9] = { 0x3744, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_427)
{
    // 162E 0021;	
    // (ᘮ) CANADIAN SYLLABICS CARRIER LHU	[3745 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x162E, 0x0021 };
    uint32_t const ces[9] = { 0x3745, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_428)
{
    // 162E 003F;	
    // (ᘮ) CANADIAN SYLLABICS CARRIER LHU	[3745 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x162E, 0x003F };
    uint32_t const ces[9] = { 0x3745, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_429)
{
    // 162E 0061;	
    // (ᘮ) CANADIAN SYLLABICS CARRIER LHU	[3745 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x162E, 0x0061 };
    uint32_t const ces[9] = { 0x3745, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_430)
{
    // 162E 0041;	
    // (ᘮ) CANADIAN SYLLABICS CARRIER LHU	[3745 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x162E, 0x0041 };
    uint32_t const ces[9] = { 0x3745, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_431)
{
    // 162E 0062;	
    // (ᘮ) CANADIAN SYLLABICS CARRIER LHU	[3745 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x162E, 0x0062 };
    uint32_t const ces[9] = { 0x3745, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_432)
{
    // 162F 0021;	
    // (ᘯ) CANADIAN SYLLABICS CARRIER LHO	[3746 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x162F, 0x0021 };
    uint32_t const ces[9] = { 0x3746, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_433)
{
    // 162F 003F;	
    // (ᘯ) CANADIAN SYLLABICS CARRIER LHO	[3746 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x162F, 0x003F };
    uint32_t const ces[9] = { 0x3746, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_434)
{
    // 162F 0061;	
    // (ᘯ) CANADIAN SYLLABICS CARRIER LHO	[3746 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x162F, 0x0061 };
    uint32_t const ces[9] = { 0x3746, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_435)
{
    // 162F 0041;	
    // (ᘯ) CANADIAN SYLLABICS CARRIER LHO	[3746 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x162F, 0x0041 };
    uint32_t const ces[9] = { 0x3746, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_436)
{
    // 162F 0062;	
    // (ᘯ) CANADIAN SYLLABICS CARRIER LHO	[3746 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x162F, 0x0062 };
    uint32_t const ces[9] = { 0x3746, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_437)
{
    // 1630 0021;	
    // (ᘰ) CANADIAN SYLLABICS CARRIER LHE	[3747 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1630, 0x0021 };
    uint32_t const ces[9] = { 0x3747, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_438)
{
    // 1630 003F;	
    // (ᘰ) CANADIAN SYLLABICS CARRIER LHE	[3747 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1630, 0x003F };
    uint32_t const ces[9] = { 0x3747, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_439)
{
    // 1630 0061;	
    // (ᘰ) CANADIAN SYLLABICS CARRIER LHE	[3747 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1630, 0x0061 };
    uint32_t const ces[9] = { 0x3747, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_440)
{
    // 1630 0041;	
    // (ᘰ) CANADIAN SYLLABICS CARRIER LHE	[3747 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1630, 0x0041 };
    uint32_t const ces[9] = { 0x3747, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_441)
{
    // 1630 0062;	
    // (ᘰ) CANADIAN SYLLABICS CARRIER LHE	[3747 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1630, 0x0062 };
    uint32_t const ces[9] = { 0x3747, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_442)
{
    // 1631 0021;	
    // (ᘱ) CANADIAN SYLLABICS CARRIER LHEE	[3748 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1631, 0x0021 };
    uint32_t const ces[9] = { 0x3748, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_443)
{
    // 1631 003F;	
    // (ᘱ) CANADIAN SYLLABICS CARRIER LHEE	[3748 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1631, 0x003F };
    uint32_t const ces[9] = { 0x3748, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_444)
{
    // 1631 0061;	
    // (ᘱ) CANADIAN SYLLABICS CARRIER LHEE	[3748 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1631, 0x0061 };
    uint32_t const ces[9] = { 0x3748, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_445)
{
    // 1631 0041;	
    // (ᘱ) CANADIAN SYLLABICS CARRIER LHEE	[3748 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1631, 0x0041 };
    uint32_t const ces[9] = { 0x3748, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_446)
{
    // 1631 0062;	
    // (ᘱ) CANADIAN SYLLABICS CARRIER LHEE	[3748 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1631, 0x0062 };
    uint32_t const ces[9] = { 0x3748, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_447)
{
    // 1632 0021;	
    // (ᘲ) CANADIAN SYLLABICS CARRIER LHI	[3749 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1632, 0x0021 };
    uint32_t const ces[9] = { 0x3749, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_448)
{
    // 1632 003F;	
    // (ᘲ) CANADIAN SYLLABICS CARRIER LHI	[3749 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1632, 0x003F };
    uint32_t const ces[9] = { 0x3749, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_449)
{
    // 1632 0061;	
    // (ᘲ) CANADIAN SYLLABICS CARRIER LHI	[3749 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1632, 0x0061 };
    uint32_t const ces[9] = { 0x3749, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_450)
{
    // 1632 0041;	
    // (ᘲ) CANADIAN SYLLABICS CARRIER LHI	[3749 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1632, 0x0041 };
    uint32_t const ces[9] = { 0x3749, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_451)
{
    // 1632 0062;	
    // (ᘲ) CANADIAN SYLLABICS CARRIER LHI	[3749 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1632, 0x0062 };
    uint32_t const ces[9] = { 0x3749, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_452)
{
    // 1633 0021;	
    // (ᘳ) CANADIAN SYLLABICS CARRIER LHA	[374A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1633, 0x0021 };
    uint32_t const ces[9] = { 0x374A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_453)
{
    // 1633 003F;	
    // (ᘳ) CANADIAN SYLLABICS CARRIER LHA	[374A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1633, 0x003F };
    uint32_t const ces[9] = { 0x374A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_454)
{
    // 1633 0061;	
    // (ᘳ) CANADIAN SYLLABICS CARRIER LHA	[374A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1633, 0x0061 };
    uint32_t const ces[9] = { 0x374A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_455)
{
    // 1633 0041;	
    // (ᘳ) CANADIAN SYLLABICS CARRIER LHA	[374A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1633, 0x0041 };
    uint32_t const ces[9] = { 0x374A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_456)
{
    // 1633 0062;	
    // (ᘳ) CANADIAN SYLLABICS CARRIER LHA	[374A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1633, 0x0062 };
    uint32_t const ces[9] = { 0x374A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_457)
{
    // 1634 0021;	
    // (ᘴ) CANADIAN SYLLABICS CARRIER TLHU	[374B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1634, 0x0021 };
    uint32_t const ces[9] = { 0x374B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_458)
{
    // 1634 003F;	
    // (ᘴ) CANADIAN SYLLABICS CARRIER TLHU	[374B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1634, 0x003F };
    uint32_t const ces[9] = { 0x374B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_459)
{
    // 1634 0061;	
    // (ᘴ) CANADIAN SYLLABICS CARRIER TLHU	[374B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1634, 0x0061 };
    uint32_t const ces[9] = { 0x374B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_460)
{
    // 1634 0041;	
    // (ᘴ) CANADIAN SYLLABICS CARRIER TLHU	[374B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1634, 0x0041 };
    uint32_t const ces[9] = { 0x374B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_461)
{
    // 1634 0062;	
    // (ᘴ) CANADIAN SYLLABICS CARRIER TLHU	[374B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1634, 0x0062 };
    uint32_t const ces[9] = { 0x374B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_462)
{
    // 1635 0021;	
    // (ᘵ) CANADIAN SYLLABICS CARRIER TLHO	[374C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1635, 0x0021 };
    uint32_t const ces[9] = { 0x374C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_463)
{
    // 1635 003F;	
    // (ᘵ) CANADIAN SYLLABICS CARRIER TLHO	[374C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1635, 0x003F };
    uint32_t const ces[9] = { 0x374C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_464)
{
    // 1635 0061;	
    // (ᘵ) CANADIAN SYLLABICS CARRIER TLHO	[374C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1635, 0x0061 };
    uint32_t const ces[9] = { 0x374C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_465)
{
    // 1635 0041;	
    // (ᘵ) CANADIAN SYLLABICS CARRIER TLHO	[374C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1635, 0x0041 };
    uint32_t const ces[9] = { 0x374C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_466)
{
    // 1635 0062;	
    // (ᘵ) CANADIAN SYLLABICS CARRIER TLHO	[374C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1635, 0x0062 };
    uint32_t const ces[9] = { 0x374C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_467)
{
    // 1636 0021;	
    // (ᘶ) CANADIAN SYLLABICS CARRIER TLHE	[374D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1636, 0x0021 };
    uint32_t const ces[9] = { 0x374D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_468)
{
    // 1636 003F;	
    // (ᘶ) CANADIAN SYLLABICS CARRIER TLHE	[374D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1636, 0x003F };
    uint32_t const ces[9] = { 0x374D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_469)
{
    // 1636 0061;	
    // (ᘶ) CANADIAN SYLLABICS CARRIER TLHE	[374D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1636, 0x0061 };
    uint32_t const ces[9] = { 0x374D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_470)
{
    // 1636 0041;	
    // (ᘶ) CANADIAN SYLLABICS CARRIER TLHE	[374D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1636, 0x0041 };
    uint32_t const ces[9] = { 0x374D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_471)
{
    // 1636 0062;	
    // (ᘶ) CANADIAN SYLLABICS CARRIER TLHE	[374D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1636, 0x0062 };
    uint32_t const ces[9] = { 0x374D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_472)
{
    // 1637 0021;	
    // (ᘷ) CANADIAN SYLLABICS CARRIER TLHEE	[374E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1637, 0x0021 };
    uint32_t const ces[9] = { 0x374E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_473)
{
    // 1637 003F;	
    // (ᘷ) CANADIAN SYLLABICS CARRIER TLHEE	[374E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1637, 0x003F };
    uint32_t const ces[9] = { 0x374E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_474)
{
    // 1637 0061;	
    // (ᘷ) CANADIAN SYLLABICS CARRIER TLHEE	[374E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1637, 0x0061 };
    uint32_t const ces[9] = { 0x374E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_475)
{
    // 1637 0041;	
    // (ᘷ) CANADIAN SYLLABICS CARRIER TLHEE	[374E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1637, 0x0041 };
    uint32_t const ces[9] = { 0x374E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_476)
{
    // 1637 0062;	
    // (ᘷ) CANADIAN SYLLABICS CARRIER TLHEE	[374E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1637, 0x0062 };
    uint32_t const ces[9] = { 0x374E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_477)
{
    // 1638 0021;	
    // (ᘸ) CANADIAN SYLLABICS CARRIER TLHI	[374F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1638, 0x0021 };
    uint32_t const ces[9] = { 0x374F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_478)
{
    // 1638 003F;	
    // (ᘸ) CANADIAN SYLLABICS CARRIER TLHI	[374F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1638, 0x003F };
    uint32_t const ces[9] = { 0x374F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_479)
{
    // 1638 0061;	
    // (ᘸ) CANADIAN SYLLABICS CARRIER TLHI	[374F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1638, 0x0061 };
    uint32_t const ces[9] = { 0x374F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_480)
{
    // 1638 0041;	
    // (ᘸ) CANADIAN SYLLABICS CARRIER TLHI	[374F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1638, 0x0041 };
    uint32_t const ces[9] = { 0x374F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_481)
{
    // 1638 0062;	
    // (ᘸ) CANADIAN SYLLABICS CARRIER TLHI	[374F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1638, 0x0062 };
    uint32_t const ces[9] = { 0x374F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_482)
{
    // 1639 0021;	
    // (ᘹ) CANADIAN SYLLABICS CARRIER TLHA	[3750 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1639, 0x0021 };
    uint32_t const ces[9] = { 0x3750, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_483)
{
    // 1639 003F;	
    // (ᘹ) CANADIAN SYLLABICS CARRIER TLHA	[3750 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1639, 0x003F };
    uint32_t const ces[9] = { 0x3750, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_484)
{
    // 1639 0061;	
    // (ᘹ) CANADIAN SYLLABICS CARRIER TLHA	[3750 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1639, 0x0061 };
    uint32_t const ces[9] = { 0x3750, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_485)
{
    // 1639 0041;	
    // (ᘹ) CANADIAN SYLLABICS CARRIER TLHA	[3750 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1639, 0x0041 };
    uint32_t const ces[9] = { 0x3750, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_486)
{
    // 1639 0062;	
    // (ᘹ) CANADIAN SYLLABICS CARRIER TLHA	[3750 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1639, 0x0062 };
    uint32_t const ces[9] = { 0x3750, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_487)
{
    // 163A 0021;	
    // (ᘺ) CANADIAN SYLLABICS CARRIER TLU	[3751 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x163A, 0x0021 };
    uint32_t const ces[9] = { 0x3751, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_488)
{
    // 163A 003F;	
    // (ᘺ) CANADIAN SYLLABICS CARRIER TLU	[3751 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x163A, 0x003F };
    uint32_t const ces[9] = { 0x3751, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_489)
{
    // 163A 0061;	
    // (ᘺ) CANADIAN SYLLABICS CARRIER TLU	[3751 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x163A, 0x0061 };
    uint32_t const ces[9] = { 0x3751, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_490)
{
    // 163A 0041;	
    // (ᘺ) CANADIAN SYLLABICS CARRIER TLU	[3751 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x163A, 0x0041 };
    uint32_t const ces[9] = { 0x3751, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_491)
{
    // 163A 0062;	
    // (ᘺ) CANADIAN SYLLABICS CARRIER TLU	[3751 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x163A, 0x0062 };
    uint32_t const ces[9] = { 0x3751, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_492)
{
    // 163B 0021;	
    // (ᘻ) CANADIAN SYLLABICS CARRIER TLO	[3752 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x163B, 0x0021 };
    uint32_t const ces[9] = { 0x3752, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_493)
{
    // 163B 003F;	
    // (ᘻ) CANADIAN SYLLABICS CARRIER TLO	[3752 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x163B, 0x003F };
    uint32_t const ces[9] = { 0x3752, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_494)
{
    // 163B 0061;	
    // (ᘻ) CANADIAN SYLLABICS CARRIER TLO	[3752 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x163B, 0x0061 };
    uint32_t const ces[9] = { 0x3752, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_495)
{
    // 163B 0041;	
    // (ᘻ) CANADIAN SYLLABICS CARRIER TLO	[3752 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x163B, 0x0041 };
    uint32_t const ces[9] = { 0x3752, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_496)
{
    // 163B 0062;	
    // (ᘻ) CANADIAN SYLLABICS CARRIER TLO	[3752 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x163B, 0x0062 };
    uint32_t const ces[9] = { 0x3752, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_497)
{
    // 163C 0021;	
    // (ᘼ) CANADIAN SYLLABICS CARRIER TLE	[3753 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x163C, 0x0021 };
    uint32_t const ces[9] = { 0x3753, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_498)
{
    // 163C 003F;	
    // (ᘼ) CANADIAN SYLLABICS CARRIER TLE	[3753 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x163C, 0x003F };
    uint32_t const ces[9] = { 0x3753, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_223_499)
{
    // 163C 0061;	
    // (ᘼ) CANADIAN SYLLABICS CARRIER TLE	[3753 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x163C, 0x0061 };
    uint32_t const ces[9] = { 0x3753, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

