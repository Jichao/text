// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_055_000)
{
    // 1F0E3 0041;	
    // (🃣) PLAYING CARD TRUMP-3	[12AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0E3, 0x0041 };
    uint32_t const ces[9] = { 0x12AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_001)
{
    // 1F0E3 0062;	
    // (🃣) PLAYING CARD TRUMP-3	[12AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E3, 0x0062 };
    uint32_t const ces[9] = { 0x12AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_002)
{
    // 1F0E4 0021;	
    // (🃤) PLAYING CARD TRUMP-4	[12AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E4, 0x0021 };
    uint32_t const ces[9] = { 0x12AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_003)
{
    // 1F0E4 003F;	
    // (🃤) PLAYING CARD TRUMP-4	[12AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E4, 0x003F };
    uint32_t const ces[9] = { 0x12AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_004)
{
    // 1F0E4 0061;	
    // (🃤) PLAYING CARD TRUMP-4	[12AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E4, 0x0061 };
    uint32_t const ces[9] = { 0x12AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_005)
{
    // 1F0E4 0041;	
    // (🃤) PLAYING CARD TRUMP-4	[12AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0E4, 0x0041 };
    uint32_t const ces[9] = { 0x12AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_006)
{
    // 1F0E4 0062;	
    // (🃤) PLAYING CARD TRUMP-4	[12AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E4, 0x0062 };
    uint32_t const ces[9] = { 0x12AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_007)
{
    // 1F0E5 0021;	
    // (🃥) PLAYING CARD TRUMP-5	[12B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E5, 0x0021 };
    uint32_t const ces[9] = { 0x12B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_008)
{
    // 1F0E5 003F;	
    // (🃥) PLAYING CARD TRUMP-5	[12B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E5, 0x003F };
    uint32_t const ces[9] = { 0x12B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_009)
{
    // 1F0E5 0061;	
    // (🃥) PLAYING CARD TRUMP-5	[12B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E5, 0x0061 };
    uint32_t const ces[9] = { 0x12B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_010)
{
    // 1F0E5 0041;	
    // (🃥) PLAYING CARD TRUMP-5	[12B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0E5, 0x0041 };
    uint32_t const ces[9] = { 0x12B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_011)
{
    // 1F0E5 0062;	
    // (🃥) PLAYING CARD TRUMP-5	[12B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E5, 0x0062 };
    uint32_t const ces[9] = { 0x12B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_012)
{
    // 1F0E6 0021;	
    // (🃦) PLAYING CARD TRUMP-6	[12B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E6, 0x0021 };
    uint32_t const ces[9] = { 0x12B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_013)
{
    // 1F0E6 003F;	
    // (🃦) PLAYING CARD TRUMP-6	[12B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E6, 0x003F };
    uint32_t const ces[9] = { 0x12B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_014)
{
    // 1F0E6 0061;	
    // (🃦) PLAYING CARD TRUMP-6	[12B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E6, 0x0061 };
    uint32_t const ces[9] = { 0x12B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_015)
{
    // 1F0E6 0041;	
    // (🃦) PLAYING CARD TRUMP-6	[12B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0E6, 0x0041 };
    uint32_t const ces[9] = { 0x12B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_016)
{
    // 1F0E6 0062;	
    // (🃦) PLAYING CARD TRUMP-6	[12B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E6, 0x0062 };
    uint32_t const ces[9] = { 0x12B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_017)
{
    // 1F0E7 0021;	
    // (🃧) PLAYING CARD TRUMP-7	[12B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E7, 0x0021 };
    uint32_t const ces[9] = { 0x12B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_018)
{
    // 1F0E7 003F;	
    // (🃧) PLAYING CARD TRUMP-7	[12B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E7, 0x003F };
    uint32_t const ces[9] = { 0x12B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_019)
{
    // 1F0E7 0061;	
    // (🃧) PLAYING CARD TRUMP-7	[12B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E7, 0x0061 };
    uint32_t const ces[9] = { 0x12B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_020)
{
    // 1F0E7 0041;	
    // (🃧) PLAYING CARD TRUMP-7	[12B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0E7, 0x0041 };
    uint32_t const ces[9] = { 0x12B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_021)
{
    // 1F0E7 0062;	
    // (🃧) PLAYING CARD TRUMP-7	[12B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E7, 0x0062 };
    uint32_t const ces[9] = { 0x12B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_022)
{
    // 1F0E8 0021;	
    // (🃨) PLAYING CARD TRUMP-8	[12B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E8, 0x0021 };
    uint32_t const ces[9] = { 0x12B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_023)
{
    // 1F0E8 003F;	
    // (🃨) PLAYING CARD TRUMP-8	[12B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E8, 0x003F };
    uint32_t const ces[9] = { 0x12B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_024)
{
    // 1F0E8 0061;	
    // (🃨) PLAYING CARD TRUMP-8	[12B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E8, 0x0061 };
    uint32_t const ces[9] = { 0x12B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_025)
{
    // 1F0E8 0041;	
    // (🃨) PLAYING CARD TRUMP-8	[12B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0E8, 0x0041 };
    uint32_t const ces[9] = { 0x12B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_026)
{
    // 1F0E8 0062;	
    // (🃨) PLAYING CARD TRUMP-8	[12B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E8, 0x0062 };
    uint32_t const ces[9] = { 0x12B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_027)
{
    // 1F0E9 0021;	
    // (🃩) PLAYING CARD TRUMP-9	[12B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E9, 0x0021 };
    uint32_t const ces[9] = { 0x12B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_028)
{
    // 1F0E9 003F;	
    // (🃩) PLAYING CARD TRUMP-9	[12B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E9, 0x003F };
    uint32_t const ces[9] = { 0x12B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_029)
{
    // 1F0E9 0061;	
    // (🃩) PLAYING CARD TRUMP-9	[12B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E9, 0x0061 };
    uint32_t const ces[9] = { 0x12B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_030)
{
    // 1F0E9 0041;	
    // (🃩) PLAYING CARD TRUMP-9	[12B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0E9, 0x0041 };
    uint32_t const ces[9] = { 0x12B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_031)
{
    // 1F0E9 0062;	
    // (🃩) PLAYING CARD TRUMP-9	[12B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E9, 0x0062 };
    uint32_t const ces[9] = { 0x12B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_032)
{
    // 1F0EA 0021;	
    // (🃪) PLAYING CARD TRUMP-10	[12B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0EA, 0x0021 };
    uint32_t const ces[9] = { 0x12B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_033)
{
    // 1F0EA 003F;	
    // (🃪) PLAYING CARD TRUMP-10	[12B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0EA, 0x003F };
    uint32_t const ces[9] = { 0x12B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_034)
{
    // 1F0EA 0061;	
    // (🃪) PLAYING CARD TRUMP-10	[12B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0EA, 0x0061 };
    uint32_t const ces[9] = { 0x12B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_035)
{
    // 1F0EA 0041;	
    // (🃪) PLAYING CARD TRUMP-10	[12B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0EA, 0x0041 };
    uint32_t const ces[9] = { 0x12B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_036)
{
    // 1F0EA 0062;	
    // (🃪) PLAYING CARD TRUMP-10	[12B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0EA, 0x0062 };
    uint32_t const ces[9] = { 0x12B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_037)
{
    // 1F0EB 0021;	
    // (🃫) PLAYING CARD TRUMP-11	[12B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0EB, 0x0021 };
    uint32_t const ces[9] = { 0x12B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_038)
{
    // 1F0EB 003F;	
    // (🃫) PLAYING CARD TRUMP-11	[12B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0EB, 0x003F };
    uint32_t const ces[9] = { 0x12B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_039)
{
    // 1F0EB 0061;	
    // (🃫) PLAYING CARD TRUMP-11	[12B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0EB, 0x0061 };
    uint32_t const ces[9] = { 0x12B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_040)
{
    // 1F0EB 0041;	
    // (🃫) PLAYING CARD TRUMP-11	[12B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0EB, 0x0041 };
    uint32_t const ces[9] = { 0x12B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_041)
{
    // 1F0EB 0062;	
    // (🃫) PLAYING CARD TRUMP-11	[12B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0EB, 0x0062 };
    uint32_t const ces[9] = { 0x12B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_042)
{
    // 1F0EC 0021;	
    // (🃬) PLAYING CARD TRUMP-12	[12B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0EC, 0x0021 };
    uint32_t const ces[9] = { 0x12B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_043)
{
    // 1F0EC 003F;	
    // (🃬) PLAYING CARD TRUMP-12	[12B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0EC, 0x003F };
    uint32_t const ces[9] = { 0x12B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_044)
{
    // 1F0EC 0061;	
    // (🃬) PLAYING CARD TRUMP-12	[12B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0EC, 0x0061 };
    uint32_t const ces[9] = { 0x12B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_045)
{
    // 1F0EC 0041;	
    // (🃬) PLAYING CARD TRUMP-12	[12B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0EC, 0x0041 };
    uint32_t const ces[9] = { 0x12B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_046)
{
    // 1F0EC 0062;	
    // (🃬) PLAYING CARD TRUMP-12	[12B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0EC, 0x0062 };
    uint32_t const ces[9] = { 0x12B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_047)
{
    // 1F0ED 0021;	
    // (🃭) PLAYING CARD TRUMP-13	[12B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0ED, 0x0021 };
    uint32_t const ces[9] = { 0x12B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_048)
{
    // 1F0ED 003F;	
    // (🃭) PLAYING CARD TRUMP-13	[12B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0ED, 0x003F };
    uint32_t const ces[9] = { 0x12B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_049)
{
    // 1F0ED 0061;	
    // (🃭) PLAYING CARD TRUMP-13	[12B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0ED, 0x0061 };
    uint32_t const ces[9] = { 0x12B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_050)
{
    // 1F0ED 0041;	
    // (🃭) PLAYING CARD TRUMP-13	[12B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0ED, 0x0041 };
    uint32_t const ces[9] = { 0x12B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_051)
{
    // 1F0ED 0062;	
    // (🃭) PLAYING CARD TRUMP-13	[12B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0ED, 0x0062 };
    uint32_t const ces[9] = { 0x12B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_052)
{
    // 1F0EE 0021;	
    // (🃮) PLAYING CARD TRUMP-14	[12B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0EE, 0x0021 };
    uint32_t const ces[9] = { 0x12B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_053)
{
    // 1F0EE 003F;	
    // (🃮) PLAYING CARD TRUMP-14	[12B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0EE, 0x003F };
    uint32_t const ces[9] = { 0x12B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_054)
{
    // 1F0EE 0061;	
    // (🃮) PLAYING CARD TRUMP-14	[12B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0EE, 0x0061 };
    uint32_t const ces[9] = { 0x12B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_055)
{
    // 1F0EE 0041;	
    // (🃮) PLAYING CARD TRUMP-14	[12B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0EE, 0x0041 };
    uint32_t const ces[9] = { 0x12B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_056)
{
    // 1F0EE 0062;	
    // (🃮) PLAYING CARD TRUMP-14	[12B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0EE, 0x0062 };
    uint32_t const ces[9] = { 0x12B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_057)
{
    // 1F0EF 0021;	
    // (🃯) PLAYING CARD TRUMP-15	[12BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0EF, 0x0021 };
    uint32_t const ces[9] = { 0x12BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_058)
{
    // 1F0EF 003F;	
    // (🃯) PLAYING CARD TRUMP-15	[12BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0EF, 0x003F };
    uint32_t const ces[9] = { 0x12BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_059)
{
    // 1F0EF 0061;	
    // (🃯) PLAYING CARD TRUMP-15	[12BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0EF, 0x0061 };
    uint32_t const ces[9] = { 0x12BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_060)
{
    // 1F0EF 0041;	
    // (🃯) PLAYING CARD TRUMP-15	[12BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0EF, 0x0041 };
    uint32_t const ces[9] = { 0x12BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_061)
{
    // 1F0EF 0062;	
    // (🃯) PLAYING CARD TRUMP-15	[12BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0EF, 0x0062 };
    uint32_t const ces[9] = { 0x12BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_062)
{
    // 1F0F0 0021;	
    // (🃰) PLAYING CARD TRUMP-16	[12BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0F0, 0x0021 };
    uint32_t const ces[9] = { 0x12BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_063)
{
    // 1F0F0 003F;	
    // (🃰) PLAYING CARD TRUMP-16	[12BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0F0, 0x003F };
    uint32_t const ces[9] = { 0x12BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_064)
{
    // 1F0F0 0061;	
    // (🃰) PLAYING CARD TRUMP-16	[12BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0F0, 0x0061 };
    uint32_t const ces[9] = { 0x12BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_065)
{
    // 1F0F0 0041;	
    // (🃰) PLAYING CARD TRUMP-16	[12BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0F0, 0x0041 };
    uint32_t const ces[9] = { 0x12BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_066)
{
    // 1F0F0 0062;	
    // (🃰) PLAYING CARD TRUMP-16	[12BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0F0, 0x0062 };
    uint32_t const ces[9] = { 0x12BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_067)
{
    // 1F0F1 0021;	
    // (🃱) PLAYING CARD TRUMP-17	[12BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0F1, 0x0021 };
    uint32_t const ces[9] = { 0x12BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_068)
{
    // 1F0F1 003F;	
    // (🃱) PLAYING CARD TRUMP-17	[12BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0F1, 0x003F };
    uint32_t const ces[9] = { 0x12BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_069)
{
    // 1F0F1 0061;	
    // (🃱) PLAYING CARD TRUMP-17	[12BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0F1, 0x0061 };
    uint32_t const ces[9] = { 0x12BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_070)
{
    // 1F0F1 0041;	
    // (🃱) PLAYING CARD TRUMP-17	[12BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0F1, 0x0041 };
    uint32_t const ces[9] = { 0x12BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_071)
{
    // 1F0F1 0062;	
    // (🃱) PLAYING CARD TRUMP-17	[12BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0F1, 0x0062 };
    uint32_t const ces[9] = { 0x12BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_072)
{
    // 1F0F2 0021;	
    // (🃲) PLAYING CARD TRUMP-18	[12BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0F2, 0x0021 };
    uint32_t const ces[9] = { 0x12BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_073)
{
    // 1F0F2 003F;	
    // (🃲) PLAYING CARD TRUMP-18	[12BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0F2, 0x003F };
    uint32_t const ces[9] = { 0x12BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_074)
{
    // 1F0F2 0061;	
    // (🃲) PLAYING CARD TRUMP-18	[12BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0F2, 0x0061 };
    uint32_t const ces[9] = { 0x12BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_075)
{
    // 1F0F2 0041;	
    // (🃲) PLAYING CARD TRUMP-18	[12BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0F2, 0x0041 };
    uint32_t const ces[9] = { 0x12BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_076)
{
    // 1F0F2 0062;	
    // (🃲) PLAYING CARD TRUMP-18	[12BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0F2, 0x0062 };
    uint32_t const ces[9] = { 0x12BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_077)
{
    // 1F0F3 0021;	
    // (🃳) PLAYING CARD TRUMP-19	[12BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0F3, 0x0021 };
    uint32_t const ces[9] = { 0x12BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_078)
{
    // 1F0F3 003F;	
    // (🃳) PLAYING CARD TRUMP-19	[12BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0F3, 0x003F };
    uint32_t const ces[9] = { 0x12BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_079)
{
    // 1F0F3 0061;	
    // (🃳) PLAYING CARD TRUMP-19	[12BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0F3, 0x0061 };
    uint32_t const ces[9] = { 0x12BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_080)
{
    // 1F0F3 0041;	
    // (🃳) PLAYING CARD TRUMP-19	[12BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0F3, 0x0041 };
    uint32_t const ces[9] = { 0x12BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_081)
{
    // 1F0F3 0062;	
    // (🃳) PLAYING CARD TRUMP-19	[12BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0F3, 0x0062 };
    uint32_t const ces[9] = { 0x12BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_082)
{
    // 1F0F4 0021;	
    // (🃴) PLAYING CARD TRUMP-20	[12BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0F4, 0x0021 };
    uint32_t const ces[9] = { 0x12BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_083)
{
    // 1F0F4 003F;	
    // (🃴) PLAYING CARD TRUMP-20	[12BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0F4, 0x003F };
    uint32_t const ces[9] = { 0x12BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_084)
{
    // 1F0F4 0061;	
    // (🃴) PLAYING CARD TRUMP-20	[12BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0F4, 0x0061 };
    uint32_t const ces[9] = { 0x12BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_085)
{
    // 1F0F4 0041;	
    // (🃴) PLAYING CARD TRUMP-20	[12BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0F4, 0x0041 };
    uint32_t const ces[9] = { 0x12BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_086)
{
    // 1F0F4 0062;	
    // (🃴) PLAYING CARD TRUMP-20	[12BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0F4, 0x0062 };
    uint32_t const ces[9] = { 0x12BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_087)
{
    // 1F0F5 0021;	
    // (🃵) PLAYING CARD TRUMP-21	[12C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0F5, 0x0021 };
    uint32_t const ces[9] = { 0x12C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_088)
{
    // 1F0F5 003F;	
    // (🃵) PLAYING CARD TRUMP-21	[12C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0F5, 0x003F };
    uint32_t const ces[9] = { 0x12C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_089)
{
    // 1F0F5 0061;	
    // (🃵) PLAYING CARD TRUMP-21	[12C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0F5, 0x0061 };
    uint32_t const ces[9] = { 0x12C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_090)
{
    // 1F0F5 0041;	
    // (🃵) PLAYING CARD TRUMP-21	[12C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0F5, 0x0041 };
    uint32_t const ces[9] = { 0x12C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_091)
{
    // 1F0F5 0062;	
    // (🃵) PLAYING CARD TRUMP-21	[12C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0F5, 0x0062 };
    uint32_t const ces[9] = { 0x12C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_092)
{
    // 1F260 0021;	
    // (🉠) ROUNDED SYMBOL FOR FU	[12C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F260, 0x0021 };
    uint32_t const ces[9] = { 0x12C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_093)
{
    // 1F260 003F;	
    // (🉠) ROUNDED SYMBOL FOR FU	[12C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F260, 0x003F };
    uint32_t const ces[9] = { 0x12C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_094)
{
    // 1F260 0061;	
    // (🉠) ROUNDED SYMBOL FOR FU	[12C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F260, 0x0061 };
    uint32_t const ces[9] = { 0x12C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_095)
{
    // 1F260 0041;	
    // (🉠) ROUNDED SYMBOL FOR FU	[12C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F260, 0x0041 };
    uint32_t const ces[9] = { 0x12C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_096)
{
    // 1F260 0062;	
    // (🉠) ROUNDED SYMBOL FOR FU	[12C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F260, 0x0062 };
    uint32_t const ces[9] = { 0x12C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_097)
{
    // 1F261 0021;	
    // (🉡) ROUNDED SYMBOL FOR LU	[12C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F261, 0x0021 };
    uint32_t const ces[9] = { 0x12C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_098)
{
    // 1F261 003F;	
    // (🉡) ROUNDED SYMBOL FOR LU	[12C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F261, 0x003F };
    uint32_t const ces[9] = { 0x12C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_099)
{
    // 1F261 0061;	
    // (🉡) ROUNDED SYMBOL FOR LU	[12C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F261, 0x0061 };
    uint32_t const ces[9] = { 0x12C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_100)
{
    // 1F261 0041;	
    // (🉡) ROUNDED SYMBOL FOR LU	[12C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F261, 0x0041 };
    uint32_t const ces[9] = { 0x12C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_101)
{
    // 1F261 0062;	
    // (🉡) ROUNDED SYMBOL FOR LU	[12C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F261, 0x0062 };
    uint32_t const ces[9] = { 0x12C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_102)
{
    // 1F262 0021;	
    // (🉢) ROUNDED SYMBOL FOR SHOU	[12C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F262, 0x0021 };
    uint32_t const ces[9] = { 0x12C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_103)
{
    // 1F262 003F;	
    // (🉢) ROUNDED SYMBOL FOR SHOU	[12C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F262, 0x003F };
    uint32_t const ces[9] = { 0x12C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_104)
{
    // 1F262 0061;	
    // (🉢) ROUNDED SYMBOL FOR SHOU	[12C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F262, 0x0061 };
    uint32_t const ces[9] = { 0x12C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_105)
{
    // 1F262 0041;	
    // (🉢) ROUNDED SYMBOL FOR SHOU	[12C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F262, 0x0041 };
    uint32_t const ces[9] = { 0x12C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_106)
{
    // 1F262 0062;	
    // (🉢) ROUNDED SYMBOL FOR SHOU	[12C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F262, 0x0062 };
    uint32_t const ces[9] = { 0x12C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_107)
{
    // 1F263 0021;	
    // (🉣) ROUNDED SYMBOL FOR XI	[12C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F263, 0x0021 };
    uint32_t const ces[9] = { 0x12C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_108)
{
    // 1F263 003F;	
    // (🉣) ROUNDED SYMBOL FOR XI	[12C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F263, 0x003F };
    uint32_t const ces[9] = { 0x12C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_109)
{
    // 1F263 0061;	
    // (🉣) ROUNDED SYMBOL FOR XI	[12C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F263, 0x0061 };
    uint32_t const ces[9] = { 0x12C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_110)
{
    // 1F263 0041;	
    // (🉣) ROUNDED SYMBOL FOR XI	[12C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F263, 0x0041 };
    uint32_t const ces[9] = { 0x12C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_111)
{
    // 1F263 0062;	
    // (🉣) ROUNDED SYMBOL FOR XI	[12C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F263, 0x0062 };
    uint32_t const ces[9] = { 0x12C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_112)
{
    // 1F264 0021;	
    // (🉤) ROUNDED SYMBOL FOR SHUANGXI	[12C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F264, 0x0021 };
    uint32_t const ces[9] = { 0x12C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_113)
{
    // 1F264 003F;	
    // (🉤) ROUNDED SYMBOL FOR SHUANGXI	[12C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F264, 0x003F };
    uint32_t const ces[9] = { 0x12C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_114)
{
    // 1F264 0061;	
    // (🉤) ROUNDED SYMBOL FOR SHUANGXI	[12C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F264, 0x0061 };
    uint32_t const ces[9] = { 0x12C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_115)
{
    // 1F264 0041;	
    // (🉤) ROUNDED SYMBOL FOR SHUANGXI	[12C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F264, 0x0041 };
    uint32_t const ces[9] = { 0x12C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_116)
{
    // 1F264 0062;	
    // (🉤) ROUNDED SYMBOL FOR SHUANGXI	[12C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F264, 0x0062 };
    uint32_t const ces[9] = { 0x12C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_117)
{
    // 1F265 0021;	
    // (🉥) ROUNDED SYMBOL FOR CAI	[12C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F265, 0x0021 };
    uint32_t const ces[9] = { 0x12C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_118)
{
    // 1F265 003F;	
    // (🉥) ROUNDED SYMBOL FOR CAI	[12C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F265, 0x003F };
    uint32_t const ces[9] = { 0x12C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_119)
{
    // 1F265 0061;	
    // (🉥) ROUNDED SYMBOL FOR CAI	[12C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F265, 0x0061 };
    uint32_t const ces[9] = { 0x12C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_120)
{
    // 1F265 0041;	
    // (🉥) ROUNDED SYMBOL FOR CAI	[12C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F265, 0x0041 };
    uint32_t const ces[9] = { 0x12C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_121)
{
    // 1F265 0062;	
    // (🉥) ROUNDED SYMBOL FOR CAI	[12C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F265, 0x0062 };
    uint32_t const ces[9] = { 0x12C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_122)
{
    // 1F300 0021;	
    // (🌀) CYCLONE	[12C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F300, 0x0021 };
    uint32_t const ces[9] = { 0x12C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_123)
{
    // 1F300 003F;	
    // (🌀) CYCLONE	[12C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F300, 0x003F };
    uint32_t const ces[9] = { 0x12C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_124)
{
    // 1F300 0061;	
    // (🌀) CYCLONE	[12C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F300, 0x0061 };
    uint32_t const ces[9] = { 0x12C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_125)
{
    // 1F300 0041;	
    // (🌀) CYCLONE	[12C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F300, 0x0041 };
    uint32_t const ces[9] = { 0x12C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_126)
{
    // 1F300 0062;	
    // (🌀) CYCLONE	[12C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F300, 0x0062 };
    uint32_t const ces[9] = { 0x12C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_127)
{
    // 1F301 0021;	
    // (🌁) FOGGY	[12C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F301, 0x0021 };
    uint32_t const ces[9] = { 0x12C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_128)
{
    // 1F301 003F;	
    // (🌁) FOGGY	[12C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F301, 0x003F };
    uint32_t const ces[9] = { 0x12C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_129)
{
    // 1F301 0061;	
    // (🌁) FOGGY	[12C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F301, 0x0061 };
    uint32_t const ces[9] = { 0x12C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_130)
{
    // 1F301 0041;	
    // (🌁) FOGGY	[12C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F301, 0x0041 };
    uint32_t const ces[9] = { 0x12C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_131)
{
    // 1F301 0062;	
    // (🌁) FOGGY	[12C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F301, 0x0062 };
    uint32_t const ces[9] = { 0x12C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_132)
{
    // 1F302 0021;	
    // (🌂) CLOSED UMBRELLA	[12C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F302, 0x0021 };
    uint32_t const ces[9] = { 0x12C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_133)
{
    // 1F302 003F;	
    // (🌂) CLOSED UMBRELLA	[12C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F302, 0x003F };
    uint32_t const ces[9] = { 0x12C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_134)
{
    // 1F302 0061;	
    // (🌂) CLOSED UMBRELLA	[12C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F302, 0x0061 };
    uint32_t const ces[9] = { 0x12C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_135)
{
    // 1F302 0041;	
    // (🌂) CLOSED UMBRELLA	[12C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F302, 0x0041 };
    uint32_t const ces[9] = { 0x12C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_136)
{
    // 1F302 0062;	
    // (🌂) CLOSED UMBRELLA	[12C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F302, 0x0062 };
    uint32_t const ces[9] = { 0x12C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_137)
{
    // 1F303 0021;	
    // (🌃) NIGHT WITH STARS	[12CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F303, 0x0021 };
    uint32_t const ces[9] = { 0x12CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_138)
{
    // 1F303 003F;	
    // (🌃) NIGHT WITH STARS	[12CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F303, 0x003F };
    uint32_t const ces[9] = { 0x12CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_139)
{
    // 1F303 0061;	
    // (🌃) NIGHT WITH STARS	[12CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F303, 0x0061 };
    uint32_t const ces[9] = { 0x12CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_140)
{
    // 1F303 0041;	
    // (🌃) NIGHT WITH STARS	[12CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F303, 0x0041 };
    uint32_t const ces[9] = { 0x12CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_141)
{
    // 1F303 0062;	
    // (🌃) NIGHT WITH STARS	[12CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F303, 0x0062 };
    uint32_t const ces[9] = { 0x12CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_142)
{
    // 1F304 0021;	
    // (🌄) SUNRISE OVER MOUNTAINS	[12CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F304, 0x0021 };
    uint32_t const ces[9] = { 0x12CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_143)
{
    // 1F304 003F;	
    // (🌄) SUNRISE OVER MOUNTAINS	[12CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F304, 0x003F };
    uint32_t const ces[9] = { 0x12CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_144)
{
    // 1F304 0061;	
    // (🌄) SUNRISE OVER MOUNTAINS	[12CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F304, 0x0061 };
    uint32_t const ces[9] = { 0x12CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_145)
{
    // 1F304 0041;	
    // (🌄) SUNRISE OVER MOUNTAINS	[12CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F304, 0x0041 };
    uint32_t const ces[9] = { 0x12CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_146)
{
    // 1F304 0062;	
    // (🌄) SUNRISE OVER MOUNTAINS	[12CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F304, 0x0062 };
    uint32_t const ces[9] = { 0x12CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_147)
{
    // 1F305 0021;	
    // (🌅) SUNRISE	[12CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F305, 0x0021 };
    uint32_t const ces[9] = { 0x12CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_148)
{
    // 1F305 003F;	
    // (🌅) SUNRISE	[12CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F305, 0x003F };
    uint32_t const ces[9] = { 0x12CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_149)
{
    // 1F305 0061;	
    // (🌅) SUNRISE	[12CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F305, 0x0061 };
    uint32_t const ces[9] = { 0x12CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_150)
{
    // 1F305 0041;	
    // (🌅) SUNRISE	[12CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F305, 0x0041 };
    uint32_t const ces[9] = { 0x12CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_151)
{
    // 1F305 0062;	
    // (🌅) SUNRISE	[12CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F305, 0x0062 };
    uint32_t const ces[9] = { 0x12CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_152)
{
    // 1F306 0021;	
    // (🌆) CITYSCAPE AT DUSK	[12CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F306, 0x0021 };
    uint32_t const ces[9] = { 0x12CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_153)
{
    // 1F306 003F;	
    // (🌆) CITYSCAPE AT DUSK	[12CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F306, 0x003F };
    uint32_t const ces[9] = { 0x12CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_154)
{
    // 1F306 0061;	
    // (🌆) CITYSCAPE AT DUSK	[12CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F306, 0x0061 };
    uint32_t const ces[9] = { 0x12CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_155)
{
    // 1F306 0041;	
    // (🌆) CITYSCAPE AT DUSK	[12CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F306, 0x0041 };
    uint32_t const ces[9] = { 0x12CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_156)
{
    // 1F306 0062;	
    // (🌆) CITYSCAPE AT DUSK	[12CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F306, 0x0062 };
    uint32_t const ces[9] = { 0x12CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_157)
{
    // 1F307 0021;	
    // (🌇) SUNSET OVER BUILDINGS	[12CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F307, 0x0021 };
    uint32_t const ces[9] = { 0x12CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_158)
{
    // 1F307 003F;	
    // (🌇) SUNSET OVER BUILDINGS	[12CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F307, 0x003F };
    uint32_t const ces[9] = { 0x12CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_159)
{
    // 1F307 0061;	
    // (🌇) SUNSET OVER BUILDINGS	[12CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F307, 0x0061 };
    uint32_t const ces[9] = { 0x12CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_160)
{
    // 1F307 0041;	
    // (🌇) SUNSET OVER BUILDINGS	[12CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F307, 0x0041 };
    uint32_t const ces[9] = { 0x12CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_161)
{
    // 1F307 0062;	
    // (🌇) SUNSET OVER BUILDINGS	[12CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F307, 0x0062 };
    uint32_t const ces[9] = { 0x12CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_162)
{
    // 1F308 0021;	
    // (🌈) RAINBOW	[12CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F308, 0x0021 };
    uint32_t const ces[9] = { 0x12CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_163)
{
    // 1F308 003F;	
    // (🌈) RAINBOW	[12CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F308, 0x003F };
    uint32_t const ces[9] = { 0x12CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_164)
{
    // 1F308 0061;	
    // (🌈) RAINBOW	[12CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F308, 0x0061 };
    uint32_t const ces[9] = { 0x12CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_165)
{
    // 1F308 0041;	
    // (🌈) RAINBOW	[12CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F308, 0x0041 };
    uint32_t const ces[9] = { 0x12CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_166)
{
    // 1F308 0062;	
    // (🌈) RAINBOW	[12CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F308, 0x0062 };
    uint32_t const ces[9] = { 0x12CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_167)
{
    // 1F309 0021;	
    // (🌉) BRIDGE AT NIGHT	[12D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F309, 0x0021 };
    uint32_t const ces[9] = { 0x12D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_168)
{
    // 1F309 003F;	
    // (🌉) BRIDGE AT NIGHT	[12D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F309, 0x003F };
    uint32_t const ces[9] = { 0x12D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_169)
{
    // 1F309 0061;	
    // (🌉) BRIDGE AT NIGHT	[12D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F309, 0x0061 };
    uint32_t const ces[9] = { 0x12D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_170)
{
    // 1F309 0041;	
    // (🌉) BRIDGE AT NIGHT	[12D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F309, 0x0041 };
    uint32_t const ces[9] = { 0x12D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_171)
{
    // 1F309 0062;	
    // (🌉) BRIDGE AT NIGHT	[12D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F309, 0x0062 };
    uint32_t const ces[9] = { 0x12D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_172)
{
    // 1F30A 0021;	
    // (🌊) WATER WAVE	[12D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F30A, 0x0021 };
    uint32_t const ces[9] = { 0x12D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_173)
{
    // 1F30A 003F;	
    // (🌊) WATER WAVE	[12D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F30A, 0x003F };
    uint32_t const ces[9] = { 0x12D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_174)
{
    // 1F30A 0061;	
    // (🌊) WATER WAVE	[12D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F30A, 0x0061 };
    uint32_t const ces[9] = { 0x12D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_175)
{
    // 1F30A 0041;	
    // (🌊) WATER WAVE	[12D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F30A, 0x0041 };
    uint32_t const ces[9] = { 0x12D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_176)
{
    // 1F30A 0062;	
    // (🌊) WATER WAVE	[12D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F30A, 0x0062 };
    uint32_t const ces[9] = { 0x12D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_177)
{
    // 1F30B 0021;	
    // (🌋) VOLCANO	[12D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F30B, 0x0021 };
    uint32_t const ces[9] = { 0x12D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_178)
{
    // 1F30B 003F;	
    // (🌋) VOLCANO	[12D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F30B, 0x003F };
    uint32_t const ces[9] = { 0x12D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_179)
{
    // 1F30B 0061;	
    // (🌋) VOLCANO	[12D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F30B, 0x0061 };
    uint32_t const ces[9] = { 0x12D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_180)
{
    // 1F30B 0041;	
    // (🌋) VOLCANO	[12D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F30B, 0x0041 };
    uint32_t const ces[9] = { 0x12D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_181)
{
    // 1F30B 0062;	
    // (🌋) VOLCANO	[12D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F30B, 0x0062 };
    uint32_t const ces[9] = { 0x12D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_182)
{
    // 1F30C 0021;	
    // (🌌) MILKY WAY	[12D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F30C, 0x0021 };
    uint32_t const ces[9] = { 0x12D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_183)
{
    // 1F30C 003F;	
    // (🌌) MILKY WAY	[12D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F30C, 0x003F };
    uint32_t const ces[9] = { 0x12D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_184)
{
    // 1F30C 0061;	
    // (🌌) MILKY WAY	[12D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F30C, 0x0061 };
    uint32_t const ces[9] = { 0x12D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_185)
{
    // 1F30C 0041;	
    // (🌌) MILKY WAY	[12D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F30C, 0x0041 };
    uint32_t const ces[9] = { 0x12D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_186)
{
    // 1F30C 0062;	
    // (🌌) MILKY WAY	[12D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F30C, 0x0062 };
    uint32_t const ces[9] = { 0x12D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_187)
{
    // 1F30D 0021;	
    // (🌍) EARTH GLOBE EUROPE-AFRICA	[12D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F30D, 0x0021 };
    uint32_t const ces[9] = { 0x12D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_188)
{
    // 1F30D 003F;	
    // (🌍) EARTH GLOBE EUROPE-AFRICA	[12D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F30D, 0x003F };
    uint32_t const ces[9] = { 0x12D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_189)
{
    // 1F30D 0061;	
    // (🌍) EARTH GLOBE EUROPE-AFRICA	[12D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F30D, 0x0061 };
    uint32_t const ces[9] = { 0x12D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_190)
{
    // 1F30D 0041;	
    // (🌍) EARTH GLOBE EUROPE-AFRICA	[12D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F30D, 0x0041 };
    uint32_t const ces[9] = { 0x12D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_191)
{
    // 1F30D 0062;	
    // (🌍) EARTH GLOBE EUROPE-AFRICA	[12D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F30D, 0x0062 };
    uint32_t const ces[9] = { 0x12D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_192)
{
    // 1F30E 0021;	
    // (🌎) EARTH GLOBE AMERICAS	[12D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F30E, 0x0021 };
    uint32_t const ces[9] = { 0x12D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_193)
{
    // 1F30E 003F;	
    // (🌎) EARTH GLOBE AMERICAS	[12D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F30E, 0x003F };
    uint32_t const ces[9] = { 0x12D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_194)
{
    // 1F30E 0061;	
    // (🌎) EARTH GLOBE AMERICAS	[12D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F30E, 0x0061 };
    uint32_t const ces[9] = { 0x12D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_195)
{
    // 1F30E 0041;	
    // (🌎) EARTH GLOBE AMERICAS	[12D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F30E, 0x0041 };
    uint32_t const ces[9] = { 0x12D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_196)
{
    // 1F30E 0062;	
    // (🌎) EARTH GLOBE AMERICAS	[12D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F30E, 0x0062 };
    uint32_t const ces[9] = { 0x12D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_197)
{
    // 1F30F 0021;	
    // (🌏) EARTH GLOBE ASIA-AUSTRALIA	[12D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F30F, 0x0021 };
    uint32_t const ces[9] = { 0x12D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_198)
{
    // 1F30F 003F;	
    // (🌏) EARTH GLOBE ASIA-AUSTRALIA	[12D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F30F, 0x003F };
    uint32_t const ces[9] = { 0x12D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_199)
{
    // 1F30F 0061;	
    // (🌏) EARTH GLOBE ASIA-AUSTRALIA	[12D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F30F, 0x0061 };
    uint32_t const ces[9] = { 0x12D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_200)
{
    // 1F30F 0041;	
    // (🌏) EARTH GLOBE ASIA-AUSTRALIA	[12D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F30F, 0x0041 };
    uint32_t const ces[9] = { 0x12D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_201)
{
    // 1F30F 0062;	
    // (🌏) EARTH GLOBE ASIA-AUSTRALIA	[12D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F30F, 0x0062 };
    uint32_t const ces[9] = { 0x12D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_202)
{
    // 1F310 0021;	
    // (🌐) GLOBE WITH MERIDIANS	[12D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F310, 0x0021 };
    uint32_t const ces[9] = { 0x12D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_203)
{
    // 1F310 003F;	
    // (🌐) GLOBE WITH MERIDIANS	[12D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F310, 0x003F };
    uint32_t const ces[9] = { 0x12D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_204)
{
    // 1F310 0061;	
    // (🌐) GLOBE WITH MERIDIANS	[12D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F310, 0x0061 };
    uint32_t const ces[9] = { 0x12D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_205)
{
    // 1F310 0041;	
    // (🌐) GLOBE WITH MERIDIANS	[12D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F310, 0x0041 };
    uint32_t const ces[9] = { 0x12D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_206)
{
    // 1F310 0062;	
    // (🌐) GLOBE WITH MERIDIANS	[12D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F310, 0x0062 };
    uint32_t const ces[9] = { 0x12D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_207)
{
    // 1F311 0021;	
    // (🌑) NEW MOON SYMBOL	[12D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F311, 0x0021 };
    uint32_t const ces[9] = { 0x12D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_208)
{
    // 1F311 003F;	
    // (🌑) NEW MOON SYMBOL	[12D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F311, 0x003F };
    uint32_t const ces[9] = { 0x12D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_209)
{
    // 1F311 0061;	
    // (🌑) NEW MOON SYMBOL	[12D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F311, 0x0061 };
    uint32_t const ces[9] = { 0x12D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_210)
{
    // 1F311 0041;	
    // (🌑) NEW MOON SYMBOL	[12D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F311, 0x0041 };
    uint32_t const ces[9] = { 0x12D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_211)
{
    // 1F311 0062;	
    // (🌑) NEW MOON SYMBOL	[12D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F311, 0x0062 };
    uint32_t const ces[9] = { 0x12D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_212)
{
    // 1F312 0021;	
    // (🌒) WAXING CRESCENT MOON SYMBOL	[12D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F312, 0x0021 };
    uint32_t const ces[9] = { 0x12D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_213)
{
    // 1F312 003F;	
    // (🌒) WAXING CRESCENT MOON SYMBOL	[12D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F312, 0x003F };
    uint32_t const ces[9] = { 0x12D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_214)
{
    // 1F312 0061;	
    // (🌒) WAXING CRESCENT MOON SYMBOL	[12D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F312, 0x0061 };
    uint32_t const ces[9] = { 0x12D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_215)
{
    // 1F312 0041;	
    // (🌒) WAXING CRESCENT MOON SYMBOL	[12D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F312, 0x0041 };
    uint32_t const ces[9] = { 0x12D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_216)
{
    // 1F312 0062;	
    // (🌒) WAXING CRESCENT MOON SYMBOL	[12D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F312, 0x0062 };
    uint32_t const ces[9] = { 0x12D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_217)
{
    // 1F313 0021;	
    // (🌓) FIRST QUARTER MOON SYMBOL	[12DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F313, 0x0021 };
    uint32_t const ces[9] = { 0x12DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_218)
{
    // 1F313 003F;	
    // (🌓) FIRST QUARTER MOON SYMBOL	[12DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F313, 0x003F };
    uint32_t const ces[9] = { 0x12DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_219)
{
    // 1F313 0061;	
    // (🌓) FIRST QUARTER MOON SYMBOL	[12DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F313, 0x0061 };
    uint32_t const ces[9] = { 0x12DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_220)
{
    // 1F313 0041;	
    // (🌓) FIRST QUARTER MOON SYMBOL	[12DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F313, 0x0041 };
    uint32_t const ces[9] = { 0x12DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_221)
{
    // 1F313 0062;	
    // (🌓) FIRST QUARTER MOON SYMBOL	[12DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F313, 0x0062 };
    uint32_t const ces[9] = { 0x12DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_222)
{
    // 1F314 0021;	
    // (🌔) WAXING GIBBOUS MOON SYMBOL	[12DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F314, 0x0021 };
    uint32_t const ces[9] = { 0x12DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_223)
{
    // 1F314 003F;	
    // (🌔) WAXING GIBBOUS MOON SYMBOL	[12DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F314, 0x003F };
    uint32_t const ces[9] = { 0x12DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_224)
{
    // 1F314 0061;	
    // (🌔) WAXING GIBBOUS MOON SYMBOL	[12DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F314, 0x0061 };
    uint32_t const ces[9] = { 0x12DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_225)
{
    // 1F314 0041;	
    // (🌔) WAXING GIBBOUS MOON SYMBOL	[12DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F314, 0x0041 };
    uint32_t const ces[9] = { 0x12DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_226)
{
    // 1F314 0062;	
    // (🌔) WAXING GIBBOUS MOON SYMBOL	[12DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F314, 0x0062 };
    uint32_t const ces[9] = { 0x12DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_227)
{
    // 1F315 0021;	
    // (🌕) FULL MOON SYMBOL	[12DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F315, 0x0021 };
    uint32_t const ces[9] = { 0x12DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_228)
{
    // 1F315 003F;	
    // (🌕) FULL MOON SYMBOL	[12DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F315, 0x003F };
    uint32_t const ces[9] = { 0x12DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_229)
{
    // 1F315 0061;	
    // (🌕) FULL MOON SYMBOL	[12DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F315, 0x0061 };
    uint32_t const ces[9] = { 0x12DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_230)
{
    // 1F315 0041;	
    // (🌕) FULL MOON SYMBOL	[12DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F315, 0x0041 };
    uint32_t const ces[9] = { 0x12DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_231)
{
    // 1F315 0062;	
    // (🌕) FULL MOON SYMBOL	[12DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F315, 0x0062 };
    uint32_t const ces[9] = { 0x12DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_232)
{
    // 1F316 0021;	
    // (🌖) WANING GIBBOUS MOON SYMBOL	[12DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F316, 0x0021 };
    uint32_t const ces[9] = { 0x12DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_233)
{
    // 1F316 003F;	
    // (🌖) WANING GIBBOUS MOON SYMBOL	[12DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F316, 0x003F };
    uint32_t const ces[9] = { 0x12DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_234)
{
    // 1F316 0061;	
    // (🌖) WANING GIBBOUS MOON SYMBOL	[12DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F316, 0x0061 };
    uint32_t const ces[9] = { 0x12DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_235)
{
    // 1F316 0041;	
    // (🌖) WANING GIBBOUS MOON SYMBOL	[12DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F316, 0x0041 };
    uint32_t const ces[9] = { 0x12DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_236)
{
    // 1F316 0062;	
    // (🌖) WANING GIBBOUS MOON SYMBOL	[12DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F316, 0x0062 };
    uint32_t const ces[9] = { 0x12DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_237)
{
    // 1F317 0021;	
    // (🌗) LAST QUARTER MOON SYMBOL	[12DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F317, 0x0021 };
    uint32_t const ces[9] = { 0x12DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_238)
{
    // 1F317 003F;	
    // (🌗) LAST QUARTER MOON SYMBOL	[12DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F317, 0x003F };
    uint32_t const ces[9] = { 0x12DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_239)
{
    // 1F317 0061;	
    // (🌗) LAST QUARTER MOON SYMBOL	[12DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F317, 0x0061 };
    uint32_t const ces[9] = { 0x12DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_240)
{
    // 1F317 0041;	
    // (🌗) LAST QUARTER MOON SYMBOL	[12DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F317, 0x0041 };
    uint32_t const ces[9] = { 0x12DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_241)
{
    // 1F317 0062;	
    // (🌗) LAST QUARTER MOON SYMBOL	[12DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F317, 0x0062 };
    uint32_t const ces[9] = { 0x12DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_242)
{
    // 1F318 0021;	
    // (🌘) WANING CRESCENT MOON SYMBOL	[12DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F318, 0x0021 };
    uint32_t const ces[9] = { 0x12DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_243)
{
    // 1F318 003F;	
    // (🌘) WANING CRESCENT MOON SYMBOL	[12DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F318, 0x003F };
    uint32_t const ces[9] = { 0x12DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_244)
{
    // 1F318 0061;	
    // (🌘) WANING CRESCENT MOON SYMBOL	[12DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F318, 0x0061 };
    uint32_t const ces[9] = { 0x12DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_245)
{
    // 1F318 0041;	
    // (🌘) WANING CRESCENT MOON SYMBOL	[12DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F318, 0x0041 };
    uint32_t const ces[9] = { 0x12DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_246)
{
    // 1F318 0062;	
    // (🌘) WANING CRESCENT MOON SYMBOL	[12DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F318, 0x0062 };
    uint32_t const ces[9] = { 0x12DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_247)
{
    // 1F319 0021;	
    // (🌙) CRESCENT MOON	[12E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F319, 0x0021 };
    uint32_t const ces[9] = { 0x12E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_248)
{
    // 1F319 003F;	
    // (🌙) CRESCENT MOON	[12E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F319, 0x003F };
    uint32_t const ces[9] = { 0x12E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_249)
{
    // 1F319 0061;	
    // (🌙) CRESCENT MOON	[12E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F319, 0x0061 };
    uint32_t const ces[9] = { 0x12E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_250)
{
    // 1F319 0041;	
    // (🌙) CRESCENT MOON	[12E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F319, 0x0041 };
    uint32_t const ces[9] = { 0x12E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_251)
{
    // 1F319 0062;	
    // (🌙) CRESCENT MOON	[12E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F319, 0x0062 };
    uint32_t const ces[9] = { 0x12E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_252)
{
    // 1F31A 0021;	
    // (🌚) NEW MOON WITH FACE	[12E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F31A, 0x0021 };
    uint32_t const ces[9] = { 0x12E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_253)
{
    // 1F31A 003F;	
    // (🌚) NEW MOON WITH FACE	[12E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F31A, 0x003F };
    uint32_t const ces[9] = { 0x12E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_254)
{
    // 1F31A 0061;	
    // (🌚) NEW MOON WITH FACE	[12E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F31A, 0x0061 };
    uint32_t const ces[9] = { 0x12E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_255)
{
    // 1F31A 0041;	
    // (🌚) NEW MOON WITH FACE	[12E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F31A, 0x0041 };
    uint32_t const ces[9] = { 0x12E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_256)
{
    // 1F31A 0062;	
    // (🌚) NEW MOON WITH FACE	[12E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F31A, 0x0062 };
    uint32_t const ces[9] = { 0x12E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_257)
{
    // 1F31B 0021;	
    // (🌛) FIRST QUARTER MOON WITH FACE	[12E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F31B, 0x0021 };
    uint32_t const ces[9] = { 0x12E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_258)
{
    // 1F31B 003F;	
    // (🌛) FIRST QUARTER MOON WITH FACE	[12E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F31B, 0x003F };
    uint32_t const ces[9] = { 0x12E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_259)
{
    // 1F31B 0061;	
    // (🌛) FIRST QUARTER MOON WITH FACE	[12E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F31B, 0x0061 };
    uint32_t const ces[9] = { 0x12E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_260)
{
    // 1F31B 0041;	
    // (🌛) FIRST QUARTER MOON WITH FACE	[12E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F31B, 0x0041 };
    uint32_t const ces[9] = { 0x12E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_261)
{
    // 1F31B 0062;	
    // (🌛) FIRST QUARTER MOON WITH FACE	[12E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F31B, 0x0062 };
    uint32_t const ces[9] = { 0x12E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_262)
{
    // 1F31C 0021;	
    // (🌜) LAST QUARTER MOON WITH FACE	[12E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F31C, 0x0021 };
    uint32_t const ces[9] = { 0x12E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_263)
{
    // 1F31C 003F;	
    // (🌜) LAST QUARTER MOON WITH FACE	[12E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F31C, 0x003F };
    uint32_t const ces[9] = { 0x12E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_264)
{
    // 1F31C 0061;	
    // (🌜) LAST QUARTER MOON WITH FACE	[12E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F31C, 0x0061 };
    uint32_t const ces[9] = { 0x12E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_265)
{
    // 1F31C 0041;	
    // (🌜) LAST QUARTER MOON WITH FACE	[12E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F31C, 0x0041 };
    uint32_t const ces[9] = { 0x12E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_266)
{
    // 1F31C 0062;	
    // (🌜) LAST QUARTER MOON WITH FACE	[12E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F31C, 0x0062 };
    uint32_t const ces[9] = { 0x12E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_267)
{
    // 1F31D 0021;	
    // (🌝) FULL MOON WITH FACE	[12E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F31D, 0x0021 };
    uint32_t const ces[9] = { 0x12E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_268)
{
    // 1F31D 003F;	
    // (🌝) FULL MOON WITH FACE	[12E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F31D, 0x003F };
    uint32_t const ces[9] = { 0x12E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_269)
{
    // 1F31D 0061;	
    // (🌝) FULL MOON WITH FACE	[12E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F31D, 0x0061 };
    uint32_t const ces[9] = { 0x12E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_270)
{
    // 1F31D 0041;	
    // (🌝) FULL MOON WITH FACE	[12E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F31D, 0x0041 };
    uint32_t const ces[9] = { 0x12E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_271)
{
    // 1F31D 0062;	
    // (🌝) FULL MOON WITH FACE	[12E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F31D, 0x0062 };
    uint32_t const ces[9] = { 0x12E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_272)
{
    // 1F31E 0021;	
    // (🌞) SUN WITH FACE	[12E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F31E, 0x0021 };
    uint32_t const ces[9] = { 0x12E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_273)
{
    // 1F31E 003F;	
    // (🌞) SUN WITH FACE	[12E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F31E, 0x003F };
    uint32_t const ces[9] = { 0x12E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_274)
{
    // 1F31E 0061;	
    // (🌞) SUN WITH FACE	[12E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F31E, 0x0061 };
    uint32_t const ces[9] = { 0x12E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_275)
{
    // 1F31E 0041;	
    // (🌞) SUN WITH FACE	[12E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F31E, 0x0041 };
    uint32_t const ces[9] = { 0x12E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_276)
{
    // 1F31E 0062;	
    // (🌞) SUN WITH FACE	[12E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F31E, 0x0062 };
    uint32_t const ces[9] = { 0x12E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_277)
{
    // 1F31F 0021;	
    // (🌟) GLOWING STAR	[12E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F31F, 0x0021 };
    uint32_t const ces[9] = { 0x12E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_278)
{
    // 1F31F 003F;	
    // (🌟) GLOWING STAR	[12E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F31F, 0x003F };
    uint32_t const ces[9] = { 0x12E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_279)
{
    // 1F31F 0061;	
    // (🌟) GLOWING STAR	[12E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F31F, 0x0061 };
    uint32_t const ces[9] = { 0x12E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_280)
{
    // 1F31F 0041;	
    // (🌟) GLOWING STAR	[12E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F31F, 0x0041 };
    uint32_t const ces[9] = { 0x12E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_281)
{
    // 1F31F 0062;	
    // (🌟) GLOWING STAR	[12E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F31F, 0x0062 };
    uint32_t const ces[9] = { 0x12E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_282)
{
    // 1F320 0021;	
    // (🌠) SHOOTING STAR	[12E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F320, 0x0021 };
    uint32_t const ces[9] = { 0x12E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_283)
{
    // 1F320 003F;	
    // (🌠) SHOOTING STAR	[12E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F320, 0x003F };
    uint32_t const ces[9] = { 0x12E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_284)
{
    // 1F320 0061;	
    // (🌠) SHOOTING STAR	[12E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F320, 0x0061 };
    uint32_t const ces[9] = { 0x12E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_285)
{
    // 1F320 0041;	
    // (🌠) SHOOTING STAR	[12E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F320, 0x0041 };
    uint32_t const ces[9] = { 0x12E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_286)
{
    // 1F320 0062;	
    // (🌠) SHOOTING STAR	[12E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F320, 0x0062 };
    uint32_t const ces[9] = { 0x12E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_287)
{
    // 1F321 0021;	
    // (🌡) THERMOMETER	[12E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F321, 0x0021 };
    uint32_t const ces[9] = { 0x12E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_288)
{
    // 1F321 003F;	
    // (🌡) THERMOMETER	[12E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F321, 0x003F };
    uint32_t const ces[9] = { 0x12E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_289)
{
    // 1F321 0061;	
    // (🌡) THERMOMETER	[12E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F321, 0x0061 };
    uint32_t const ces[9] = { 0x12E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_290)
{
    // 1F321 0041;	
    // (🌡) THERMOMETER	[12E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F321, 0x0041 };
    uint32_t const ces[9] = { 0x12E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_291)
{
    // 1F321 0062;	
    // (🌡) THERMOMETER	[12E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F321, 0x0062 };
    uint32_t const ces[9] = { 0x12E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_292)
{
    // 1F322 0021;	
    // (🌢) BLACK DROPLET	[12E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F322, 0x0021 };
    uint32_t const ces[9] = { 0x12E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_293)
{
    // 1F322 003F;	
    // (🌢) BLACK DROPLET	[12E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F322, 0x003F };
    uint32_t const ces[9] = { 0x12E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_294)
{
    // 1F322 0061;	
    // (🌢) BLACK DROPLET	[12E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F322, 0x0061 };
    uint32_t const ces[9] = { 0x12E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_295)
{
    // 1F322 0041;	
    // (🌢) BLACK DROPLET	[12E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F322, 0x0041 };
    uint32_t const ces[9] = { 0x12E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_296)
{
    // 1F322 0062;	
    // (🌢) BLACK DROPLET	[12E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F322, 0x0062 };
    uint32_t const ces[9] = { 0x12E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_297)
{
    // 1F323 0021;	
    // (🌣) WHITE SUN	[12EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F323, 0x0021 };
    uint32_t const ces[9] = { 0x12EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_298)
{
    // 1F323 003F;	
    // (🌣) WHITE SUN	[12EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F323, 0x003F };
    uint32_t const ces[9] = { 0x12EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_299)
{
    // 1F323 0061;	
    // (🌣) WHITE SUN	[12EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F323, 0x0061 };
    uint32_t const ces[9] = { 0x12EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_300)
{
    // 1F323 0041;	
    // (🌣) WHITE SUN	[12EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F323, 0x0041 };
    uint32_t const ces[9] = { 0x12EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_301)
{
    // 1F323 0062;	
    // (🌣) WHITE SUN	[12EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F323, 0x0062 };
    uint32_t const ces[9] = { 0x12EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_302)
{
    // 1F324 0021;	
    // (🌤) WHITE SUN WITH SMALL CLOUD	[12EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F324, 0x0021 };
    uint32_t const ces[9] = { 0x12EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_303)
{
    // 1F324 003F;	
    // (🌤) WHITE SUN WITH SMALL CLOUD	[12EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F324, 0x003F };
    uint32_t const ces[9] = { 0x12EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_304)
{
    // 1F324 0061;	
    // (🌤) WHITE SUN WITH SMALL CLOUD	[12EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F324, 0x0061 };
    uint32_t const ces[9] = { 0x12EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_305)
{
    // 1F324 0041;	
    // (🌤) WHITE SUN WITH SMALL CLOUD	[12EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F324, 0x0041 };
    uint32_t const ces[9] = { 0x12EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_306)
{
    // 1F324 0062;	
    // (🌤) WHITE SUN WITH SMALL CLOUD	[12EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F324, 0x0062 };
    uint32_t const ces[9] = { 0x12EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_307)
{
    // 1F325 0021;	
    // (🌥) WHITE SUN BEHIND CLOUD	[12EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F325, 0x0021 };
    uint32_t const ces[9] = { 0x12EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_308)
{
    // 1F325 003F;	
    // (🌥) WHITE SUN BEHIND CLOUD	[12EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F325, 0x003F };
    uint32_t const ces[9] = { 0x12EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_309)
{
    // 1F325 0061;	
    // (🌥) WHITE SUN BEHIND CLOUD	[12EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F325, 0x0061 };
    uint32_t const ces[9] = { 0x12EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_310)
{
    // 1F325 0041;	
    // (🌥) WHITE SUN BEHIND CLOUD	[12EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F325, 0x0041 };
    uint32_t const ces[9] = { 0x12EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_311)
{
    // 1F325 0062;	
    // (🌥) WHITE SUN BEHIND CLOUD	[12EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F325, 0x0062 };
    uint32_t const ces[9] = { 0x12EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_312)
{
    // 1F326 0021;	
    // (🌦) WHITE SUN BEHIND CLOUD WITH RAIN	[12ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F326, 0x0021 };
    uint32_t const ces[9] = { 0x12ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_313)
{
    // 1F326 003F;	
    // (🌦) WHITE SUN BEHIND CLOUD WITH RAIN	[12ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F326, 0x003F };
    uint32_t const ces[9] = { 0x12ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_314)
{
    // 1F326 0061;	
    // (🌦) WHITE SUN BEHIND CLOUD WITH RAIN	[12ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F326, 0x0061 };
    uint32_t const ces[9] = { 0x12ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_315)
{
    // 1F326 0041;	
    // (🌦) WHITE SUN BEHIND CLOUD WITH RAIN	[12ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F326, 0x0041 };
    uint32_t const ces[9] = { 0x12ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_316)
{
    // 1F326 0062;	
    // (🌦) WHITE SUN BEHIND CLOUD WITH RAIN	[12ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F326, 0x0062 };
    uint32_t const ces[9] = { 0x12ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_317)
{
    // 1F327 0021;	
    // (🌧) CLOUD WITH RAIN	[12EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F327, 0x0021 };
    uint32_t const ces[9] = { 0x12EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_318)
{
    // 1F327 003F;	
    // (🌧) CLOUD WITH RAIN	[12EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F327, 0x003F };
    uint32_t const ces[9] = { 0x12EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_319)
{
    // 1F327 0061;	
    // (🌧) CLOUD WITH RAIN	[12EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F327, 0x0061 };
    uint32_t const ces[9] = { 0x12EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_320)
{
    // 1F327 0041;	
    // (🌧) CLOUD WITH RAIN	[12EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F327, 0x0041 };
    uint32_t const ces[9] = { 0x12EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_321)
{
    // 1F327 0062;	
    // (🌧) CLOUD WITH RAIN	[12EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F327, 0x0062 };
    uint32_t const ces[9] = { 0x12EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_322)
{
    // 1F328 0021;	
    // (🌨) CLOUD WITH SNOW	[12EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F328, 0x0021 };
    uint32_t const ces[9] = { 0x12EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_323)
{
    // 1F328 003F;	
    // (🌨) CLOUD WITH SNOW	[12EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F328, 0x003F };
    uint32_t const ces[9] = { 0x12EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_324)
{
    // 1F328 0061;	
    // (🌨) CLOUD WITH SNOW	[12EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F328, 0x0061 };
    uint32_t const ces[9] = { 0x12EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_325)
{
    // 1F328 0041;	
    // (🌨) CLOUD WITH SNOW	[12EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F328, 0x0041 };
    uint32_t const ces[9] = { 0x12EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_326)
{
    // 1F328 0062;	
    // (🌨) CLOUD WITH SNOW	[12EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F328, 0x0062 };
    uint32_t const ces[9] = { 0x12EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_327)
{
    // 1F329 0021;	
    // (🌩) CLOUD WITH LIGHTNING	[12F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F329, 0x0021 };
    uint32_t const ces[9] = { 0x12F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_328)
{
    // 1F329 003F;	
    // (🌩) CLOUD WITH LIGHTNING	[12F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F329, 0x003F };
    uint32_t const ces[9] = { 0x12F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_329)
{
    // 1F329 0061;	
    // (🌩) CLOUD WITH LIGHTNING	[12F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F329, 0x0061 };
    uint32_t const ces[9] = { 0x12F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_330)
{
    // 1F329 0041;	
    // (🌩) CLOUD WITH LIGHTNING	[12F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F329, 0x0041 };
    uint32_t const ces[9] = { 0x12F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_331)
{
    // 1F329 0062;	
    // (🌩) CLOUD WITH LIGHTNING	[12F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F329, 0x0062 };
    uint32_t const ces[9] = { 0x12F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_332)
{
    // 1F32A 0021;	
    // (🌪) CLOUD WITH TORNADO	[12F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F32A, 0x0021 };
    uint32_t const ces[9] = { 0x12F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_333)
{
    // 1F32A 003F;	
    // (🌪) CLOUD WITH TORNADO	[12F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F32A, 0x003F };
    uint32_t const ces[9] = { 0x12F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_334)
{
    // 1F32A 0061;	
    // (🌪) CLOUD WITH TORNADO	[12F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F32A, 0x0061 };
    uint32_t const ces[9] = { 0x12F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_335)
{
    // 1F32A 0041;	
    // (🌪) CLOUD WITH TORNADO	[12F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F32A, 0x0041 };
    uint32_t const ces[9] = { 0x12F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_336)
{
    // 1F32A 0062;	
    // (🌪) CLOUD WITH TORNADO	[12F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F32A, 0x0062 };
    uint32_t const ces[9] = { 0x12F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_337)
{
    // 1F32B 0021;	
    // (🌫) FOG	[12F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F32B, 0x0021 };
    uint32_t const ces[9] = { 0x12F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_338)
{
    // 1F32B 003F;	
    // (🌫) FOG	[12F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F32B, 0x003F };
    uint32_t const ces[9] = { 0x12F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_339)
{
    // 1F32B 0061;	
    // (🌫) FOG	[12F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F32B, 0x0061 };
    uint32_t const ces[9] = { 0x12F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_340)
{
    // 1F32B 0041;	
    // (🌫) FOG	[12F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F32B, 0x0041 };
    uint32_t const ces[9] = { 0x12F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_341)
{
    // 1F32B 0062;	
    // (🌫) FOG	[12F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F32B, 0x0062 };
    uint32_t const ces[9] = { 0x12F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_342)
{
    // 1F32C 0021;	
    // (🌬) WIND BLOWING FACE	[12F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F32C, 0x0021 };
    uint32_t const ces[9] = { 0x12F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_343)
{
    // 1F32C 003F;	
    // (🌬) WIND BLOWING FACE	[12F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F32C, 0x003F };
    uint32_t const ces[9] = { 0x12F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_344)
{
    // 1F32C 0061;	
    // (🌬) WIND BLOWING FACE	[12F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F32C, 0x0061 };
    uint32_t const ces[9] = { 0x12F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_345)
{
    // 1F32C 0041;	
    // (🌬) WIND BLOWING FACE	[12F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F32C, 0x0041 };
    uint32_t const ces[9] = { 0x12F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_346)
{
    // 1F32C 0062;	
    // (🌬) WIND BLOWING FACE	[12F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F32C, 0x0062 };
    uint32_t const ces[9] = { 0x12F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_347)
{
    // 1F32D 0021;	
    // (🌭) HOT DOG	[12F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F32D, 0x0021 };
    uint32_t const ces[9] = { 0x12F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_348)
{
    // 1F32D 003F;	
    // (🌭) HOT DOG	[12F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F32D, 0x003F };
    uint32_t const ces[9] = { 0x12F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_349)
{
    // 1F32D 0061;	
    // (🌭) HOT DOG	[12F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F32D, 0x0061 };
    uint32_t const ces[9] = { 0x12F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_350)
{
    // 1F32D 0041;	
    // (🌭) HOT DOG	[12F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F32D, 0x0041 };
    uint32_t const ces[9] = { 0x12F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_351)
{
    // 1F32D 0062;	
    // (🌭) HOT DOG	[12F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F32D, 0x0062 };
    uint32_t const ces[9] = { 0x12F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_352)
{
    // 1F32E 0021;	
    // (🌮) TACO	[12F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F32E, 0x0021 };
    uint32_t const ces[9] = { 0x12F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_353)
{
    // 1F32E 003F;	
    // (🌮) TACO	[12F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F32E, 0x003F };
    uint32_t const ces[9] = { 0x12F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_354)
{
    // 1F32E 0061;	
    // (🌮) TACO	[12F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F32E, 0x0061 };
    uint32_t const ces[9] = { 0x12F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_355)
{
    // 1F32E 0041;	
    // (🌮) TACO	[12F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F32E, 0x0041 };
    uint32_t const ces[9] = { 0x12F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_356)
{
    // 1F32E 0062;	
    // (🌮) TACO	[12F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F32E, 0x0062 };
    uint32_t const ces[9] = { 0x12F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_357)
{
    // 1F32F 0021;	
    // (🌯) BURRITO	[12F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F32F, 0x0021 };
    uint32_t const ces[9] = { 0x12F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_358)
{
    // 1F32F 003F;	
    // (🌯) BURRITO	[12F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F32F, 0x003F };
    uint32_t const ces[9] = { 0x12F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_359)
{
    // 1F32F 0061;	
    // (🌯) BURRITO	[12F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F32F, 0x0061 };
    uint32_t const ces[9] = { 0x12F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_360)
{
    // 1F32F 0041;	
    // (🌯) BURRITO	[12F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F32F, 0x0041 };
    uint32_t const ces[9] = { 0x12F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_361)
{
    // 1F32F 0062;	
    // (🌯) BURRITO	[12F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F32F, 0x0062 };
    uint32_t const ces[9] = { 0x12F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_362)
{
    // 1F330 0021;	
    // (🌰) CHESTNUT	[12F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F330, 0x0021 };
    uint32_t const ces[9] = { 0x12F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_363)
{
    // 1F330 003F;	
    // (🌰) CHESTNUT	[12F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F330, 0x003F };
    uint32_t const ces[9] = { 0x12F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_364)
{
    // 1F330 0061;	
    // (🌰) CHESTNUT	[12F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F330, 0x0061 };
    uint32_t const ces[9] = { 0x12F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_365)
{
    // 1F330 0041;	
    // (🌰) CHESTNUT	[12F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F330, 0x0041 };
    uint32_t const ces[9] = { 0x12F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_366)
{
    // 1F330 0062;	
    // (🌰) CHESTNUT	[12F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F330, 0x0062 };
    uint32_t const ces[9] = { 0x12F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_367)
{
    // 1F331 0021;	
    // (🌱) SEEDLING	[12F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F331, 0x0021 };
    uint32_t const ces[9] = { 0x12F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_368)
{
    // 1F331 003F;	
    // (🌱) SEEDLING	[12F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F331, 0x003F };
    uint32_t const ces[9] = { 0x12F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_369)
{
    // 1F331 0061;	
    // (🌱) SEEDLING	[12F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F331, 0x0061 };
    uint32_t const ces[9] = { 0x12F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_370)
{
    // 1F331 0041;	
    // (🌱) SEEDLING	[12F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F331, 0x0041 };
    uint32_t const ces[9] = { 0x12F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_371)
{
    // 1F331 0062;	
    // (🌱) SEEDLING	[12F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F331, 0x0062 };
    uint32_t const ces[9] = { 0x12F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_372)
{
    // 1F332 0021;	
    // (🌲) EVERGREEN TREE	[12F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F332, 0x0021 };
    uint32_t const ces[9] = { 0x12F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_373)
{
    // 1F332 003F;	
    // (🌲) EVERGREEN TREE	[12F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F332, 0x003F };
    uint32_t const ces[9] = { 0x12F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_374)
{
    // 1F332 0061;	
    // (🌲) EVERGREEN TREE	[12F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F332, 0x0061 };
    uint32_t const ces[9] = { 0x12F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_375)
{
    // 1F332 0041;	
    // (🌲) EVERGREEN TREE	[12F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F332, 0x0041 };
    uint32_t const ces[9] = { 0x12F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_376)
{
    // 1F332 0062;	
    // (🌲) EVERGREEN TREE	[12F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F332, 0x0062 };
    uint32_t const ces[9] = { 0x12F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_377)
{
    // 1F333 0021;	
    // (🌳) DECIDUOUS TREE	[12FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F333, 0x0021 };
    uint32_t const ces[9] = { 0x12FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_378)
{
    // 1F333 003F;	
    // (🌳) DECIDUOUS TREE	[12FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F333, 0x003F };
    uint32_t const ces[9] = { 0x12FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_379)
{
    // 1F333 0061;	
    // (🌳) DECIDUOUS TREE	[12FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F333, 0x0061 };
    uint32_t const ces[9] = { 0x12FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_380)
{
    // 1F333 0041;	
    // (🌳) DECIDUOUS TREE	[12FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F333, 0x0041 };
    uint32_t const ces[9] = { 0x12FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_381)
{
    // 1F333 0062;	
    // (🌳) DECIDUOUS TREE	[12FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F333, 0x0062 };
    uint32_t const ces[9] = { 0x12FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_382)
{
    // 1F334 0021;	
    // (🌴) PALM TREE	[12FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F334, 0x0021 };
    uint32_t const ces[9] = { 0x12FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_383)
{
    // 1F334 003F;	
    // (🌴) PALM TREE	[12FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F334, 0x003F };
    uint32_t const ces[9] = { 0x12FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_384)
{
    // 1F334 0061;	
    // (🌴) PALM TREE	[12FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F334, 0x0061 };
    uint32_t const ces[9] = { 0x12FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_385)
{
    // 1F334 0041;	
    // (🌴) PALM TREE	[12FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F334, 0x0041 };
    uint32_t const ces[9] = { 0x12FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_386)
{
    // 1F334 0062;	
    // (🌴) PALM TREE	[12FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F334, 0x0062 };
    uint32_t const ces[9] = { 0x12FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_387)
{
    // 1F335 0021;	
    // (🌵) CACTUS	[12FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F335, 0x0021 };
    uint32_t const ces[9] = { 0x12FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_388)
{
    // 1F335 003F;	
    // (🌵) CACTUS	[12FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F335, 0x003F };
    uint32_t const ces[9] = { 0x12FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_389)
{
    // 1F335 0061;	
    // (🌵) CACTUS	[12FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F335, 0x0061 };
    uint32_t const ces[9] = { 0x12FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_390)
{
    // 1F335 0041;	
    // (🌵) CACTUS	[12FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F335, 0x0041 };
    uint32_t const ces[9] = { 0x12FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_391)
{
    // 1F335 0062;	
    // (🌵) CACTUS	[12FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F335, 0x0062 };
    uint32_t const ces[9] = { 0x12FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_392)
{
    // 1F336 0021;	
    // (🌶) HOT PEPPER	[12FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F336, 0x0021 };
    uint32_t const ces[9] = { 0x12FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_393)
{
    // 1F336 003F;	
    // (🌶) HOT PEPPER	[12FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F336, 0x003F };
    uint32_t const ces[9] = { 0x12FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_394)
{
    // 1F336 0061;	
    // (🌶) HOT PEPPER	[12FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F336, 0x0061 };
    uint32_t const ces[9] = { 0x12FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_395)
{
    // 1F336 0041;	
    // (🌶) HOT PEPPER	[12FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F336, 0x0041 };
    uint32_t const ces[9] = { 0x12FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_396)
{
    // 1F336 0062;	
    // (🌶) HOT PEPPER	[12FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F336, 0x0062 };
    uint32_t const ces[9] = { 0x12FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_397)
{
    // 1F337 0021;	
    // (🌷) TULIP	[12FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F337, 0x0021 };
    uint32_t const ces[9] = { 0x12FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_398)
{
    // 1F337 003F;	
    // (🌷) TULIP	[12FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F337, 0x003F };
    uint32_t const ces[9] = { 0x12FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_399)
{
    // 1F337 0061;	
    // (🌷) TULIP	[12FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F337, 0x0061 };
    uint32_t const ces[9] = { 0x12FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_400)
{
    // 1F337 0041;	
    // (🌷) TULIP	[12FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F337, 0x0041 };
    uint32_t const ces[9] = { 0x12FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_401)
{
    // 1F337 0062;	
    // (🌷) TULIP	[12FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F337, 0x0062 };
    uint32_t const ces[9] = { 0x12FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_402)
{
    // 1F338 0021;	
    // (🌸) CHERRY BLOSSOM	[12FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F338, 0x0021 };
    uint32_t const ces[9] = { 0x12FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_403)
{
    // 1F338 003F;	
    // (🌸) CHERRY BLOSSOM	[12FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F338, 0x003F };
    uint32_t const ces[9] = { 0x12FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_404)
{
    // 1F338 0061;	
    // (🌸) CHERRY BLOSSOM	[12FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F338, 0x0061 };
    uint32_t const ces[9] = { 0x12FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_405)
{
    // 1F338 0041;	
    // (🌸) CHERRY BLOSSOM	[12FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F338, 0x0041 };
    uint32_t const ces[9] = { 0x12FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_406)
{
    // 1F338 0062;	
    // (🌸) CHERRY BLOSSOM	[12FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F338, 0x0062 };
    uint32_t const ces[9] = { 0x12FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_407)
{
    // 1F339 0021;	
    // (🌹) ROSE	[1300 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F339, 0x0021 };
    uint32_t const ces[9] = { 0x1300, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_408)
{
    // 1F339 003F;	
    // (🌹) ROSE	[1300 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F339, 0x003F };
    uint32_t const ces[9] = { 0x1300, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_409)
{
    // 1F339 0061;	
    // (🌹) ROSE	[1300 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F339, 0x0061 };
    uint32_t const ces[9] = { 0x1300, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_410)
{
    // 1F339 0041;	
    // (🌹) ROSE	[1300 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F339, 0x0041 };
    uint32_t const ces[9] = { 0x1300, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_411)
{
    // 1F339 0062;	
    // (🌹) ROSE	[1300 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F339, 0x0062 };
    uint32_t const ces[9] = { 0x1300, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_412)
{
    // 1F33A 0021;	
    // (🌺) HIBISCUS	[1301 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F33A, 0x0021 };
    uint32_t const ces[9] = { 0x1301, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_413)
{
    // 1F33A 003F;	
    // (🌺) HIBISCUS	[1301 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F33A, 0x003F };
    uint32_t const ces[9] = { 0x1301, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_414)
{
    // 1F33A 0061;	
    // (🌺) HIBISCUS	[1301 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F33A, 0x0061 };
    uint32_t const ces[9] = { 0x1301, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_415)
{
    // 1F33A 0041;	
    // (🌺) HIBISCUS	[1301 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F33A, 0x0041 };
    uint32_t const ces[9] = { 0x1301, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_416)
{
    // 1F33A 0062;	
    // (🌺) HIBISCUS	[1301 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F33A, 0x0062 };
    uint32_t const ces[9] = { 0x1301, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_417)
{
    // 1F33B 0021;	
    // (🌻) SUNFLOWER	[1302 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F33B, 0x0021 };
    uint32_t const ces[9] = { 0x1302, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_418)
{
    // 1F33B 003F;	
    // (🌻) SUNFLOWER	[1302 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F33B, 0x003F };
    uint32_t const ces[9] = { 0x1302, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_419)
{
    // 1F33B 0061;	
    // (🌻) SUNFLOWER	[1302 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F33B, 0x0061 };
    uint32_t const ces[9] = { 0x1302, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_420)
{
    // 1F33B 0041;	
    // (🌻) SUNFLOWER	[1302 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F33B, 0x0041 };
    uint32_t const ces[9] = { 0x1302, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_421)
{
    // 1F33B 0062;	
    // (🌻) SUNFLOWER	[1302 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F33B, 0x0062 };
    uint32_t const ces[9] = { 0x1302, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_422)
{
    // 1F33C 0021;	
    // (🌼) BLOSSOM	[1303 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F33C, 0x0021 };
    uint32_t const ces[9] = { 0x1303, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_423)
{
    // 1F33C 003F;	
    // (🌼) BLOSSOM	[1303 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F33C, 0x003F };
    uint32_t const ces[9] = { 0x1303, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_424)
{
    // 1F33C 0061;	
    // (🌼) BLOSSOM	[1303 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F33C, 0x0061 };
    uint32_t const ces[9] = { 0x1303, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_425)
{
    // 1F33C 0041;	
    // (🌼) BLOSSOM	[1303 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F33C, 0x0041 };
    uint32_t const ces[9] = { 0x1303, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_426)
{
    // 1F33C 0062;	
    // (🌼) BLOSSOM	[1303 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F33C, 0x0062 };
    uint32_t const ces[9] = { 0x1303, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_427)
{
    // 1F33D 0021;	
    // (🌽) EAR OF MAIZE	[1304 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F33D, 0x0021 };
    uint32_t const ces[9] = { 0x1304, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_428)
{
    // 1F33D 003F;	
    // (🌽) EAR OF MAIZE	[1304 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F33D, 0x003F };
    uint32_t const ces[9] = { 0x1304, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_429)
{
    // 1F33D 0061;	
    // (🌽) EAR OF MAIZE	[1304 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F33D, 0x0061 };
    uint32_t const ces[9] = { 0x1304, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_430)
{
    // 1F33D 0041;	
    // (🌽) EAR OF MAIZE	[1304 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F33D, 0x0041 };
    uint32_t const ces[9] = { 0x1304, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_431)
{
    // 1F33D 0062;	
    // (🌽) EAR OF MAIZE	[1304 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F33D, 0x0062 };
    uint32_t const ces[9] = { 0x1304, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_432)
{
    // 1F33E 0021;	
    // (🌾) EAR OF RICE	[1305 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F33E, 0x0021 };
    uint32_t const ces[9] = { 0x1305, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_433)
{
    // 1F33E 003F;	
    // (🌾) EAR OF RICE	[1305 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F33E, 0x003F };
    uint32_t const ces[9] = { 0x1305, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_434)
{
    // 1F33E 0061;	
    // (🌾) EAR OF RICE	[1305 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F33E, 0x0061 };
    uint32_t const ces[9] = { 0x1305, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_435)
{
    // 1F33E 0041;	
    // (🌾) EAR OF RICE	[1305 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F33E, 0x0041 };
    uint32_t const ces[9] = { 0x1305, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_436)
{
    // 1F33E 0062;	
    // (🌾) EAR OF RICE	[1305 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F33E, 0x0062 };
    uint32_t const ces[9] = { 0x1305, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_437)
{
    // 1F33F 0021;	
    // (🌿) HERB	[1306 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F33F, 0x0021 };
    uint32_t const ces[9] = { 0x1306, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_438)
{
    // 1F33F 003F;	
    // (🌿) HERB	[1306 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F33F, 0x003F };
    uint32_t const ces[9] = { 0x1306, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_439)
{
    // 1F33F 0061;	
    // (🌿) HERB	[1306 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F33F, 0x0061 };
    uint32_t const ces[9] = { 0x1306, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_440)
{
    // 1F33F 0041;	
    // (🌿) HERB	[1306 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F33F, 0x0041 };
    uint32_t const ces[9] = { 0x1306, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_441)
{
    // 1F33F 0062;	
    // (🌿) HERB	[1306 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F33F, 0x0062 };
    uint32_t const ces[9] = { 0x1306, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_442)
{
    // 1F340 0021;	
    // (🍀) FOUR LEAF CLOVER	[1307 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F340, 0x0021 };
    uint32_t const ces[9] = { 0x1307, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_443)
{
    // 1F340 003F;	
    // (🍀) FOUR LEAF CLOVER	[1307 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F340, 0x003F };
    uint32_t const ces[9] = { 0x1307, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_444)
{
    // 1F340 0061;	
    // (🍀) FOUR LEAF CLOVER	[1307 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F340, 0x0061 };
    uint32_t const ces[9] = { 0x1307, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_445)
{
    // 1F340 0041;	
    // (🍀) FOUR LEAF CLOVER	[1307 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F340, 0x0041 };
    uint32_t const ces[9] = { 0x1307, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_446)
{
    // 1F340 0062;	
    // (🍀) FOUR LEAF CLOVER	[1307 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F340, 0x0062 };
    uint32_t const ces[9] = { 0x1307, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_447)
{
    // 1F341 0021;	
    // (🍁) MAPLE LEAF	[1308 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F341, 0x0021 };
    uint32_t const ces[9] = { 0x1308, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_448)
{
    // 1F341 003F;	
    // (🍁) MAPLE LEAF	[1308 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F341, 0x003F };
    uint32_t const ces[9] = { 0x1308, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_449)
{
    // 1F341 0061;	
    // (🍁) MAPLE LEAF	[1308 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F341, 0x0061 };
    uint32_t const ces[9] = { 0x1308, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_450)
{
    // 1F341 0041;	
    // (🍁) MAPLE LEAF	[1308 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F341, 0x0041 };
    uint32_t const ces[9] = { 0x1308, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_451)
{
    // 1F341 0062;	
    // (🍁) MAPLE LEAF	[1308 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F341, 0x0062 };
    uint32_t const ces[9] = { 0x1308, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_452)
{
    // 1F342 0021;	
    // (🍂) FALLEN LEAF	[1309 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F342, 0x0021 };
    uint32_t const ces[9] = { 0x1309, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_453)
{
    // 1F342 003F;	
    // (🍂) FALLEN LEAF	[1309 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F342, 0x003F };
    uint32_t const ces[9] = { 0x1309, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_454)
{
    // 1F342 0061;	
    // (🍂) FALLEN LEAF	[1309 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F342, 0x0061 };
    uint32_t const ces[9] = { 0x1309, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_455)
{
    // 1F342 0041;	
    // (🍂) FALLEN LEAF	[1309 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F342, 0x0041 };
    uint32_t const ces[9] = { 0x1309, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_456)
{
    // 1F342 0062;	
    // (🍂) FALLEN LEAF	[1309 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F342, 0x0062 };
    uint32_t const ces[9] = { 0x1309, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_457)
{
    // 1F343 0021;	
    // (🍃) LEAF FLUTTERING IN WIND	[130A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F343, 0x0021 };
    uint32_t const ces[9] = { 0x130A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_458)
{
    // 1F343 003F;	
    // (🍃) LEAF FLUTTERING IN WIND	[130A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F343, 0x003F };
    uint32_t const ces[9] = { 0x130A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_459)
{
    // 1F343 0061;	
    // (🍃) LEAF FLUTTERING IN WIND	[130A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F343, 0x0061 };
    uint32_t const ces[9] = { 0x130A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_460)
{
    // 1F343 0041;	
    // (🍃) LEAF FLUTTERING IN WIND	[130A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F343, 0x0041 };
    uint32_t const ces[9] = { 0x130A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_461)
{
    // 1F343 0062;	
    // (🍃) LEAF FLUTTERING IN WIND	[130A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F343, 0x0062 };
    uint32_t const ces[9] = { 0x130A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_462)
{
    // 1F344 0021;	
    // (🍄) MUSHROOM	[130B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F344, 0x0021 };
    uint32_t const ces[9] = { 0x130B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_463)
{
    // 1F344 003F;	
    // (🍄) MUSHROOM	[130B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F344, 0x003F };
    uint32_t const ces[9] = { 0x130B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_464)
{
    // 1F344 0061;	
    // (🍄) MUSHROOM	[130B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F344, 0x0061 };
    uint32_t const ces[9] = { 0x130B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_465)
{
    // 1F344 0041;	
    // (🍄) MUSHROOM	[130B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F344, 0x0041 };
    uint32_t const ces[9] = { 0x130B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_466)
{
    // 1F344 0062;	
    // (🍄) MUSHROOM	[130B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F344, 0x0062 };
    uint32_t const ces[9] = { 0x130B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_467)
{
    // 1F345 0021;	
    // (🍅) TOMATO	[130C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F345, 0x0021 };
    uint32_t const ces[9] = { 0x130C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_468)
{
    // 1F345 003F;	
    // (🍅) TOMATO	[130C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F345, 0x003F };
    uint32_t const ces[9] = { 0x130C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_469)
{
    // 1F345 0061;	
    // (🍅) TOMATO	[130C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F345, 0x0061 };
    uint32_t const ces[9] = { 0x130C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_470)
{
    // 1F345 0041;	
    // (🍅) TOMATO	[130C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F345, 0x0041 };
    uint32_t const ces[9] = { 0x130C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_471)
{
    // 1F345 0062;	
    // (🍅) TOMATO	[130C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F345, 0x0062 };
    uint32_t const ces[9] = { 0x130C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_472)
{
    // 1F346 0021;	
    // (🍆) AUBERGINE	[130D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F346, 0x0021 };
    uint32_t const ces[9] = { 0x130D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_473)
{
    // 1F346 003F;	
    // (🍆) AUBERGINE	[130D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F346, 0x003F };
    uint32_t const ces[9] = { 0x130D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_474)
{
    // 1F346 0061;	
    // (🍆) AUBERGINE	[130D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F346, 0x0061 };
    uint32_t const ces[9] = { 0x130D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_475)
{
    // 1F346 0041;	
    // (🍆) AUBERGINE	[130D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F346, 0x0041 };
    uint32_t const ces[9] = { 0x130D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_476)
{
    // 1F346 0062;	
    // (🍆) AUBERGINE	[130D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F346, 0x0062 };
    uint32_t const ces[9] = { 0x130D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_477)
{
    // 1F347 0021;	
    // (🍇) GRAPES	[130E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F347, 0x0021 };
    uint32_t const ces[9] = { 0x130E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_478)
{
    // 1F347 003F;	
    // (🍇) GRAPES	[130E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F347, 0x003F };
    uint32_t const ces[9] = { 0x130E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_479)
{
    // 1F347 0061;	
    // (🍇) GRAPES	[130E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F347, 0x0061 };
    uint32_t const ces[9] = { 0x130E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_480)
{
    // 1F347 0041;	
    // (🍇) GRAPES	[130E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F347, 0x0041 };
    uint32_t const ces[9] = { 0x130E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_481)
{
    // 1F347 0062;	
    // (🍇) GRAPES	[130E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F347, 0x0062 };
    uint32_t const ces[9] = { 0x130E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_482)
{
    // 1F348 0021;	
    // (🍈) MELON	[130F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F348, 0x0021 };
    uint32_t const ces[9] = { 0x130F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_483)
{
    // 1F348 003F;	
    // (🍈) MELON	[130F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F348, 0x003F };
    uint32_t const ces[9] = { 0x130F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_484)
{
    // 1F348 0061;	
    // (🍈) MELON	[130F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F348, 0x0061 };
    uint32_t const ces[9] = { 0x130F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_485)
{
    // 1F348 0041;	
    // (🍈) MELON	[130F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F348, 0x0041 };
    uint32_t const ces[9] = { 0x130F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_486)
{
    // 1F348 0062;	
    // (🍈) MELON	[130F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F348, 0x0062 };
    uint32_t const ces[9] = { 0x130F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_487)
{
    // 1F349 0021;	
    // (🍉) WATERMELON	[1310 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F349, 0x0021 };
    uint32_t const ces[9] = { 0x1310, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_488)
{
    // 1F349 003F;	
    // (🍉) WATERMELON	[1310 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F349, 0x003F };
    uint32_t const ces[9] = { 0x1310, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_489)
{
    // 1F349 0061;	
    // (🍉) WATERMELON	[1310 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F349, 0x0061 };
    uint32_t const ces[9] = { 0x1310, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_490)
{
    // 1F349 0041;	
    // (🍉) WATERMELON	[1310 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F349, 0x0041 };
    uint32_t const ces[9] = { 0x1310, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_491)
{
    // 1F349 0062;	
    // (🍉) WATERMELON	[1310 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F349, 0x0062 };
    uint32_t const ces[9] = { 0x1310, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_492)
{
    // 1F34A 0021;	
    // (🍊) TANGERINE	[1311 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F34A, 0x0021 };
    uint32_t const ces[9] = { 0x1311, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_493)
{
    // 1F34A 003F;	
    // (🍊) TANGERINE	[1311 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F34A, 0x003F };
    uint32_t const ces[9] = { 0x1311, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_494)
{
    // 1F34A 0061;	
    // (🍊) TANGERINE	[1311 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F34A, 0x0061 };
    uint32_t const ces[9] = { 0x1311, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_495)
{
    // 1F34A 0041;	
    // (🍊) TANGERINE	[1311 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F34A, 0x0041 };
    uint32_t const ces[9] = { 0x1311, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_496)
{
    // 1F34A 0062;	
    // (🍊) TANGERINE	[1311 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F34A, 0x0062 };
    uint32_t const ces[9] = { 0x1311, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_497)
{
    // 1F34B 0021;	
    // (🍋) LEMON	[1312 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F34B, 0x0021 };
    uint32_t const ces[9] = { 0x1312, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_498)
{
    // 1F34B 003F;	
    // (🍋) LEMON	[1312 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F34B, 0x003F };
    uint32_t const ces[9] = { 0x1312, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_055_499)
{
    // 1F34B 0061;	
    // (🍋) LEMON	[1312 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F34B, 0x0061 };
    uint32_t const ces[9] = { 0x1312, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

