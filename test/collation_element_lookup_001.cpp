// Warning! This file is autogenerated.
#include <boost/text/detail/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_001_000)
{
    // 0092  ; [.0000.0000.0000] 
    // PRIVATE USE TWO (in ISO 6429)

    uint32_t const cps[1] = { 0x92 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_001)
{
    // 0093  ; [.0000.0000.0000] 
    // SET TRANSMIT STATE (in ISO 6429)

    uint32_t const cps[1] = { 0x93 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_002)
{
    // 0094  ; [.0000.0000.0000] 
    // CANCEL CHARACTER (in ISO 6429)

    uint32_t const cps[1] = { 0x94 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_003)
{
    // 0095  ; [.0000.0000.0000] 
    // MESSAGE WAITING (in ISO 6429)

    uint32_t const cps[1] = { 0x95 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_004)
{
    // 0096  ; [.0000.0000.0000] 
    // START OF GUARDED AREA (in ISO 6429)

    uint32_t const cps[1] = { 0x96 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_005)
{
    // 0097  ; [.0000.0000.0000] 
    // END OF GUARDED AREA (in ISO 6429)

    uint32_t const cps[1] = { 0x97 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_006)
{
    // 0098  ; [.0000.0000.0000] 
    // START OF STRING (in ISO 6429)

    uint32_t const cps[1] = { 0x98 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_007)
{
    // 0099  ; [.0000.0000.0000] 
    // <control>

    uint32_t const cps[1] = { 0x99 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_008)
{
    // 009A  ; [.0000.0000.0000] 
    // SINGLE CHARACTER INTRODUCER (in ISO 6429)

    uint32_t const cps[1] = { 0x9a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_009)
{
    // 009B  ; [.0000.0000.0000] 
    // CONTROL SEQUENCE INTRODUCER (in ISO 6429)

    uint32_t const cps[1] = { 0x9b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_010)
{
    // 009C  ; [.0000.0000.0000] 
    // STRING TERMINATOR (in ISO 6429)

    uint32_t const cps[1] = { 0x9c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_011)
{
    // 009D  ; [.0000.0000.0000] 
    // OPERATING SYSTEM COMMAND (in ISO 6429)

    uint32_t const cps[1] = { 0x9d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_012)
{
    // 009E  ; [.0000.0000.0000] 
    // PRIVACY MESSAGE (in ISO 6429)

    uint32_t const cps[1] = { 0x9e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_013)
{
    // 009F  ; [.0000.0000.0000] 
    // APPLICATION PROGRAM COMMAND (in ISO 6429)

    uint32_t const cps[1] = { 0x9f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_014)
{
    // 00A0  ; [*0209.0020.001B] 
    // NO-BREAK SPACE

    uint32_t const cps[1] = { 0xa0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x209), uint8_t(0x1), uint8_t(0x1b)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_015)
{
    // 00A1  ; [*0262.0020.0002] 
    // INVERTED EXCLAMATION MARK

    uint32_t const cps[1] = { 0xa1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x262), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_016)
{
    // 00A2  ; [.1C76.0020.0002] 
    // CENT SIGN

    uint32_t const cps[1] = { 0xa2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1c76), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_017)
{
    // 00A3  ; [.1C78.0020.0002] 
    // POUND SIGN

    uint32_t const cps[1] = { 0xa3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1c78), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_018)
{
    // 00A4  ; [.1C75.0020.0002] 
    // CURRENCY SIGN

    uint32_t const cps[1] = { 0xa4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1c75), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_019)
{
    // 00A5  ; [.1C79.0020.0002] 
    // YEN SIGN

    uint32_t const cps[1] = { 0xa5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1c79), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_020)
{
    // 00A6  ; [*0635.0020.0002] 
    // BROKEN BAR

    uint32_t const cps[1] = { 0xa6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x635), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_021)
{
    // 00A7  ; [*038A.0020.0002] 
    // SECTION SIGN

    uint32_t const cps[1] = { 0xa7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x38a), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_022)
{
    // 00A8  ; [*049F.0020.0002] 
    // DIAERESIS

    uint32_t const cps[1] = { 0xa8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x49f), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_023)
{
    // 00A9  ; [*059A.0020.0002] 
    // COPYRIGHT SIGN

    uint32_t const cps[1] = { 0xa9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x59a), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_024)
{
    // 00AA  ; [.1CAD.0020.0014] 
    // FEMININE ORDINAL INDICATOR

    uint32_t const cps[1] = { 0xaa };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0x14)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_025)
{
    // 00AB  ; [*0316.0020.0002] 
    // LEFT-POINTING DOUBLE ANGLE QUOTATION MARK

    uint32_t const cps[1] = { 0xab };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x316), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_026)
{
    // 00AC  ; [*0633.0020.0002] 
    // NOT SIGN

    uint32_t const cps[1] = { 0xac };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x633), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_027)
{
    // 00AD  ; [.0000.0000.0000] 
    // SOFT HYPHEN

    uint32_t const cps[1] = { 0xad };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_028)
{
    // 00AE  ; [*059B.0020.0002] 
    // REGISTERED SIGN

    uint32_t const cps[1] = { 0xae };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x59b), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_029)
{
    // 00AF  ; [*049C.0020.0002] 
    // MACRON

    uint32_t const cps[1] = { 0xaf };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x49c), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_030)
{
    // 00B0  ; [*050C.0020.0002] 
    // DEGREE SIGN

    uint32_t const cps[1] = { 0xb0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x50c), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_031)
{
    // 00B1  ; [*062D.0020.0002] 
    // PLUS-MINUS SIGN

    uint32_t const cps[1] = { 0xb1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x62d), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_032)
{
    // 00B2  ; [.1CA5.0020.0014] 
    // SUPERSCRIPT TWO

    uint32_t const cps[1] = { 0xb2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x1), uint8_t(0x14)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_033)
{
    // 00B3  ; [.1CA6.0020.0014] 
    // SUPERSCRIPT THREE

    uint32_t const cps[1] = { 0xb3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x1), uint8_t(0x14)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_034)
{
    // 00B4  ; [*0499.0020.0002] 
    // ACUTE ACCENT

    uint32_t const cps[1] = { 0x1ffd }; // Expands to the code points in the comment above.
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x499), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_035)
{
    // 00B5  ; [.2031.0020.0004] 
    // MICRO SIGN

    uint32_t const cps[1] = { 0xb5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2031), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_036)
{
    // 00B6  ; [*038C.0020.0002] 
    // PILCROW SIGN

    uint32_t const cps[1] = { 0xb6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x38c), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_037)
{
    // 00B7  ; [*028C.0020.0002] 
    // MIDDLE DOT

    uint32_t const cps[1] = { 0x387 }; // Expands to the code points in the comment above.
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x28c), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_038)
{
    // 00B8  ; [*04A2.0020.0002] 
    // CEDILLA

    uint32_t const cps[1] = { 0xb8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4a2), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_039)
{
    // 00B9  ; [.1CA4.0020.0014] 
    // SUPERSCRIPT ONE

    uint32_t const cps[1] = { 0xb9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x1), uint8_t(0x14)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_040)
{
    // 00BA  ; [.1E43.0020.0014] 
    // MASCULINE ORDINAL INDICATOR

    uint32_t const cps[1] = { 0xba };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x1), uint8_t(0x14)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_041)
{
    // 00BB  ; [*0317.0020.0002] 
    // RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK

    uint32_t const cps[1] = { 0xbb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x317), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_042)
{
    // 00BC  ; [.1CA4.0020.001E][*063C.0020.001E][.1CA7.0020.001E] 
    // VULGAR FRACTION ONE QUARTER

    uint32_t const cps[1] = { 0xbc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1ca4), uint8_t(0x1), uint8_t(0x1e)}, {uint16_t(0x63c), uint8_t(0x1), uint8_t(0x1e)}, {uint16_t(0x1ca7), uint8_t(0x1), uint8_t(0x1e)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_001_043)
{
    // 00BD  ; [.1CA4.0020.001E][*063C.0020.001E][.1CA5.0020.001E] 
    // VULGAR FRACTION ONE HALF

    uint32_t const cps[1] = { 0xbd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1ca4), uint8_t(0x1), uint8_t(0x1e)}, {uint16_t(0x63c), uint8_t(0x1), uint8_t(0x1e)}, {uint16_t(0x1ca5), uint8_t(0x1), uint8_t(0x1e)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_001_044)
{
    // 00BE  ; [.1CA6.0020.001E][*063C.0020.001E][.1CA7.0020.001E] 
    // VULGAR FRACTION THREE QUARTERS

    uint32_t const cps[1] = { 0xbe };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1ca6), uint8_t(0x1), uint8_t(0x1e)}, {uint16_t(0x63c), uint8_t(0x1), uint8_t(0x1e)}, {uint16_t(0x1ca7), uint8_t(0x1), uint8_t(0x1e)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_001_045)
{
    // 00BF  ; [*0268.0020.0002] 
    // INVERTED QUESTION MARK

    uint32_t const cps[1] = { 0xbf };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x268), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_046)
{
    // 00C0  ; [.1CAD.0020.0008][.0000.0025.0002] 
    // LATIN CAPITAL LETTER A WITH GRAVE

    uint32_t const cps[1] = { 0xc0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_047)
{
    // 00C1  ; [.1CAD.0020.0008][.0000.0024.0002] 
    // LATIN CAPITAL LETTER A WITH ACUTE

    uint32_t const cps[1] = { 0xc1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_048)
{
    // 00C2  ; [.1CAD.0020.0008][.0000.0027.0002] 
    // LATIN CAPITAL LETTER A WITH CIRCUMFLEX

    uint32_t const cps[1] = { 0xc2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_049)
{
    // 00C3  ; [.1CAD.0020.0008][.0000.002D.0002] 
    // LATIN CAPITAL LETTER A WITH TILDE

    uint32_t const cps[1] = { 0xc3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xe), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_050)
{
    // 00C4  ; [.1CAD.0020.0008][.0000.002B.0002] 
    // LATIN CAPITAL LETTER A WITH DIAERESIS

    uint32_t const cps[1] = { 0xc4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xc), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_051)
{
    // 00C5  ; [.1CAD.0020.0008][.0000.0029.0002] 
    // LATIN CAPITAL LETTER A WITH RING ABOVE

    uint32_t const cps[1] = { 0xc5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_052)
{
    // 00C6  ; [.1CAD.0020.000A][.0000.0111.0004][.1D10.0020.000A] 
    // LATIN CAPITAL LETTER AE

    uint32_t const cps[1] = { 0xc6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)}, {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0xa)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_001_053)
{
    // 00C7  ; [.1CE0.0020.0008][.0000.0030.0002] 
    // LATIN CAPITAL LETTER C WITH CEDILLA

    uint32_t const cps[1] = { 0xc7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ce0), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x11), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_054)
{
    // 00C8  ; [.1D10.0020.0008][.0000.0025.0002] 
    // LATIN CAPITAL LETTER E WITH GRAVE

    uint32_t const cps[1] = { 0xc8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_055)
{
    // 00C9  ; [.1D10.0020.0008][.0000.0024.0002] 
    // LATIN CAPITAL LETTER E WITH ACUTE

    uint32_t const cps[1] = { 0xc9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_056)
{
    // 00CA  ; [.1D10.0020.0008][.0000.0027.0002] 
    // LATIN CAPITAL LETTER E WITH CIRCUMFLEX

    uint32_t const cps[1] = { 0xca };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_057)
{
    // 00CB  ; [.1D10.0020.0008][.0000.002B.0002] 
    // LATIN CAPITAL LETTER E WITH DIAERESIS

    uint32_t const cps[1] = { 0xcb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xc), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_058)
{
    // 00CC  ; [.1D98.0020.0008][.0000.0025.0002] 
    // LATIN CAPITAL LETTER I WITH GRAVE

    uint32_t const cps[1] = { 0xcc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_059)
{
    // 00CD  ; [.1D98.0020.0008][.0000.0024.0002] 
    // LATIN CAPITAL LETTER I WITH ACUTE

    uint32_t const cps[1] = { 0xcd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_060)
{
    // 00CE  ; [.1D98.0020.0008][.0000.0027.0002] 
    // LATIN CAPITAL LETTER I WITH CIRCUMFLEX

    uint32_t const cps[1] = { 0xce };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_061)
{
    // 00CF  ; [.1D98.0020.0008][.0000.002B.0002] 
    // LATIN CAPITAL LETTER I WITH DIAERESIS

    uint32_t const cps[1] = { 0xcf };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xc), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_062)
{
    // 00D0  ; [.1CF5.0020.000A][.0000.0111.0004] 
    // LATIN CAPITAL LETTER ETH

    uint32_t const cps[1] = { 0xd0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x1), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_063)
{
    // 00D1  ; [.1E1F.0020.0008][.0000.002D.0002] 
    // LATIN CAPITAL LETTER N WITH TILDE

    uint32_t const cps[1] = { 0xd1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1e1f), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xe), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_064)
{
    // 00D2  ; [.1E43.0020.0008][.0000.0025.0002] 
    // LATIN CAPITAL LETTER O WITH GRAVE

    uint32_t const cps[1] = { 0xd2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_065)
{
    // 00D3  ; [.1E43.0020.0008][.0000.0024.0002] 
    // LATIN CAPITAL LETTER O WITH ACUTE

    uint32_t const cps[1] = { 0xd3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_066)
{
    // 00D4  ; [.1E43.0020.0008][.0000.0027.0002] 
    // LATIN CAPITAL LETTER O WITH CIRCUMFLEX

    uint32_t const cps[1] = { 0xd4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_067)
{
    // 00D5  ; [.1E43.0020.0008][.0000.002D.0002] 
    // LATIN CAPITAL LETTER O WITH TILDE

    uint32_t const cps[1] = { 0xd5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xe), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_068)
{
    // 00D6  ; [.1E43.0020.0008][.0000.002B.0002] 
    // LATIN CAPITAL LETTER O WITH DIAERESIS

    uint32_t const cps[1] = { 0xd6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xc), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_069)
{
    // 00D7  ; [*062F.0020.0002] 
    // MULTIPLICATION SIGN

    uint32_t const cps[1] = { 0xd7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x62f), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_070)
{
    // 00D8  ; [.1E43.0020.0008][.0000.002F.0002] 
    // LATIN CAPITAL LETTER O WITH STROKE

    uint32_t const cps[1] = { 0xd8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_071)
{
    // 00D9  ; [.1F1B.0020.0008][.0000.0025.0002] 
    // LATIN CAPITAL LETTER U WITH GRAVE

    uint32_t const cps[1] = { 0xd9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_072)
{
    // 00DA  ; [.1F1B.0020.0008][.0000.0024.0002] 
    // LATIN CAPITAL LETTER U WITH ACUTE

    uint32_t const cps[1] = { 0xda };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_073)
{
    // 00DB  ; [.1F1B.0020.0008][.0000.0027.0002] 
    // LATIN CAPITAL LETTER U WITH CIRCUMFLEX

    uint32_t const cps[1] = { 0xdb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_074)
{
    // 00DC  ; [.1F1B.0020.0008][.0000.002B.0002] 
    // LATIN CAPITAL LETTER U WITH DIAERESIS

    uint32_t const cps[1] = { 0xdc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xc), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_075)
{
    // 00DD  ; [.1F71.0020.0008][.0000.0024.0002] 
    // LATIN CAPITAL LETTER Y WITH ACUTE

    uint32_t const cps[1] = { 0xdd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1f71), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_076)
{
    // 00DE  ; [.1FB6.0020.0008] 
    // LATIN CAPITAL LETTER THORN

    uint32_t const cps[1] = { 0xde };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1fb6), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_077)
{
    // 00DF  ; [.1ED7.0020.0004][.0000.0111.0004][.1ED7.0020.0004] 
    // LATIN SMALL LETTER SHARP S

    uint32_t const cps[1] = { 0xdf };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1ed7), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)}, {uint16_t(0x1ed7), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_001_078)
{
    // 00E0  ; [.1CAD.0020.0002][.0000.0025.0002] 
    // LATIN SMALL LETTER A WITH GRAVE

    uint32_t const cps[1] = { 0xe0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_079)
{
    // 00E1  ; [.1CAD.0020.0002][.0000.0024.0002] 
    // LATIN SMALL LETTER A WITH ACUTE

    uint32_t const cps[1] = { 0xe1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_080)
{
    // 00E2  ; [.1CAD.0020.0002][.0000.0027.0002] 
    // LATIN SMALL LETTER A WITH CIRCUMFLEX

    uint32_t const cps[1] = { 0xe2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_081)
{
    // 00E3  ; [.1CAD.0020.0002][.0000.002D.0002] 
    // LATIN SMALL LETTER A WITH TILDE

    uint32_t const cps[1] = { 0xe3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xe), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_082)
{
    // 00E4  ; [.1CAD.0020.0002][.0000.002B.0002] 
    // LATIN SMALL LETTER A WITH DIAERESIS

    uint32_t const cps[1] = { 0xe4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xc), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_083)
{
    // 00E5  ; [.1CAD.0020.0002][.0000.0029.0002] 
    // LATIN SMALL LETTER A WITH RING ABOVE

    uint32_t const cps[1] = { 0xe5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_084)
{
    // 00E6  ; [.1CAD.0020.0004][.0000.0111.0004][.1D10.0020.0004] 
    // LATIN SMALL LETTER AE

    uint32_t const cps[1] = { 0xe6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)}, {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_001_085)
{
    // 00E7  ; [.1CE0.0020.0002][.0000.0030.0002] 
    // LATIN SMALL LETTER C WITH CEDILLA

    uint32_t const cps[1] = { 0xe7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ce0), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x11), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_086)
{
    // 00E8  ; [.1D10.0020.0002][.0000.0025.0002] 
    // LATIN SMALL LETTER E WITH GRAVE

    uint32_t const cps[1] = { 0xe8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_087)
{
    // 00E9  ; [.1D10.0020.0002][.0000.0024.0002] 
    // LATIN SMALL LETTER E WITH ACUTE

    uint32_t const cps[1] = { 0xe9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_088)
{
    // 00EA  ; [.1D10.0020.0002][.0000.0027.0002] 
    // LATIN SMALL LETTER E WITH CIRCUMFLEX

    uint32_t const cps[1] = { 0xea };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_089)
{
    // 00EB  ; [.1D10.0020.0002][.0000.002B.0002] 
    // LATIN SMALL LETTER E WITH DIAERESIS

    uint32_t const cps[1] = { 0xeb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xc), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_090)
{
    // 00EC  ; [.1D98.0020.0002][.0000.0025.0002] 
    // LATIN SMALL LETTER I WITH GRAVE

    uint32_t const cps[1] = { 0xec };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_091)
{
    // 00ED  ; [.1D98.0020.0002][.0000.0024.0002] 
    // LATIN SMALL LETTER I WITH ACUTE

    uint32_t const cps[1] = { 0xed };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_092)
{
    // 00EE  ; [.1D98.0020.0002][.0000.0027.0002] 
    // LATIN SMALL LETTER I WITH CIRCUMFLEX

    uint32_t const cps[1] = { 0xee };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_093)
{
    // 00EF  ; [.1D98.0020.0002][.0000.002B.0002] 
    // LATIN SMALL LETTER I WITH DIAERESIS

    uint32_t const cps[1] = { 0xef };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xc), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_094)
{
    // 00F0  ; [.1CF5.0020.0004][.0000.0111.0004] 
    // LATIN SMALL LETTER ETH

    uint32_t const cps[1] = { 0xf0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_095)
{
    // 00F1  ; [.1E1F.0020.0002][.0000.002D.0002] 
    // LATIN SMALL LETTER N WITH TILDE

    uint32_t const cps[1] = { 0xf1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1e1f), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xe), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_096)
{
    // 00F2  ; [.1E43.0020.0002][.0000.0025.0002] 
    // LATIN SMALL LETTER O WITH GRAVE

    uint32_t const cps[1] = { 0xf2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_097)
{
    // 00F3  ; [.1E43.0020.0002][.0000.0024.0002] 
    // LATIN SMALL LETTER O WITH ACUTE

    uint32_t const cps[1] = { 0xf3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_098)
{
    // 00F4  ; [.1E43.0020.0002][.0000.0027.0002] 
    // LATIN SMALL LETTER O WITH CIRCUMFLEX

    uint32_t const cps[1] = { 0xf4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_099)
{
    // 00F5  ; [.1E43.0020.0002][.0000.002D.0002] 
    // LATIN SMALL LETTER O WITH TILDE

    uint32_t const cps[1] = { 0xf5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xe), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_100)
{
    // 00F6  ; [.1E43.0020.0002][.0000.002B.0002] 
    // LATIN SMALL LETTER O WITH DIAERESIS

    uint32_t const cps[1] = { 0xf6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xc), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_101)
{
    // 00F7  ; [*062E.0020.0002] 
    // DIVISION SIGN

    uint32_t const cps[1] = { 0xf7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x62e), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_102)
{
    // 00F8  ; [.1E43.0020.0002][.0000.002F.0002] 
    // LATIN SMALL LETTER O WITH STROKE

    uint32_t const cps[1] = { 0xf8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_103)
{
    // 00F9  ; [.1F1B.0020.0002][.0000.0025.0002] 
    // LATIN SMALL LETTER U WITH GRAVE

    uint32_t const cps[1] = { 0xf9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_104)
{
    // 00FA  ; [.1F1B.0020.0002][.0000.0024.0002] 
    // LATIN SMALL LETTER U WITH ACUTE

    uint32_t const cps[1] = { 0xfa };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_105)
{
    // 00FB  ; [.1F1B.0020.0002][.0000.0027.0002] 
    // LATIN SMALL LETTER U WITH CIRCUMFLEX

    uint32_t const cps[1] = { 0xfb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_106)
{
    // 00FC  ; [.1F1B.0020.0002][.0000.002B.0002] 
    // LATIN SMALL LETTER U WITH DIAERESIS

    uint32_t const cps[1] = { 0xfc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xc), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_107)
{
    // 00FD  ; [.1F71.0020.0002][.0000.0024.0002] 
    // LATIN SMALL LETTER Y WITH ACUTE

    uint32_t const cps[1] = { 0xfd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1f71), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_108)
{
    // 00FE  ; [.1FB6.0020.0002] 
    // LATIN SMALL LETTER THORN

    uint32_t const cps[1] = { 0xfe };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1fb6), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_001_109)
{
    // 00FF  ; [.1F71.0020.0002][.0000.002B.0002] 
    // LATIN SMALL LETTER Y WITH DIAERESIS

    uint32_t const cps[1] = { 0xff };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1f71), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xc), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_110)
{
    // 0100  ; [.1CAD.0020.0008][.0000.0032.0002] 
    // LATIN CAPITAL LETTER A WITH MACRON

    uint32_t const cps[1] = { 0x100 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_111)
{
    // 0101  ; [.1CAD.0020.0002][.0000.0032.0002] 
    // LATIN SMALL LETTER A WITH MACRON

    uint32_t const cps[1] = { 0x101 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_112)
{
    // 0102  ; [.1CAD.0020.0008][.0000.0026.0002] 
    // LATIN CAPITAL LETTER A WITH BREVE

    uint32_t const cps[1] = { 0x102 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_113)
{
    // 0103  ; [.1CAD.0020.0002][.0000.0026.0002] 
    // LATIN SMALL LETTER A WITH BREVE

    uint32_t const cps[1] = { 0x103 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_114)
{
    // 0104  ; [.1CAD.0020.0008][.0000.0031.0002] 
    // LATIN CAPITAL LETTER A WITH OGONEK

    uint32_t const cps[1] = { 0x104 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_115)
{
    // 0105  ; [.1CAD.0020.0002][.0000.0031.0002] 
    // LATIN SMALL LETTER A WITH OGONEK

    uint32_t const cps[1] = { 0x105 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_116)
{
    // 0106  ; [.1CE0.0020.0008][.0000.0024.0002] 
    // LATIN CAPITAL LETTER C WITH ACUTE

    uint32_t const cps[1] = { 0x106 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ce0), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_117)
{
    // 0107  ; [.1CE0.0020.0002][.0000.0024.0002] 
    // LATIN SMALL LETTER C WITH ACUTE

    uint32_t const cps[1] = { 0x107 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ce0), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_118)
{
    // 0108  ; [.1CE0.0020.0008][.0000.0027.0002] 
    // LATIN CAPITAL LETTER C WITH CIRCUMFLEX

    uint32_t const cps[1] = { 0x108 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ce0), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_119)
{
    // 0109  ; [.1CE0.0020.0002][.0000.0027.0002] 
    // LATIN SMALL LETTER C WITH CIRCUMFLEX

    uint32_t const cps[1] = { 0x109 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ce0), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_120)
{
    // 010A  ; [.1CE0.0020.0008][.0000.002E.0002] 
    // LATIN CAPITAL LETTER C WITH DOT ABOVE

    uint32_t const cps[1] = { 0x10a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ce0), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_121)
{
    // 010B  ; [.1CE0.0020.0002][.0000.002E.0002] 
    // LATIN SMALL LETTER C WITH DOT ABOVE

    uint32_t const cps[1] = { 0x10b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ce0), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_122)
{
    // 010C  ; [.1CE0.0020.0008][.0000.0028.0002] 
    // LATIN CAPITAL LETTER C WITH CARON

    uint32_t const cps[1] = { 0x10c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ce0), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x9), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_123)
{
    // 010D  ; [.1CE0.0020.0002][.0000.0028.0002] 
    // LATIN SMALL LETTER C WITH CARON

    uint32_t const cps[1] = { 0x10d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ce0), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x9), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_124)
{
    // 010E  ; [.1CF5.0020.0008][.0000.0028.0002] 
    // LATIN CAPITAL LETTER D WITH CARON

    uint32_t const cps[1] = { 0x10e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x9), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_125)
{
    // 010F  ; [.1CF5.0020.0002][.0000.0028.0002] 
    // LATIN SMALL LETTER D WITH CARON

    uint32_t const cps[1] = { 0x10f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x9), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_126)
{
    // 0110  ; [.1CF5.0020.0008][.0000.0039.0002] 
    // LATIN CAPITAL LETTER D WITH STROKE

    uint32_t const cps[1] = { 0x110 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x1a), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_127)
{
    // 0111  ; [.1CF5.0020.0002][.0000.0039.0002] 
    // LATIN SMALL LETTER D WITH STROKE

    uint32_t const cps[1] = { 0x111 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1a), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_128)
{
    // 0112  ; [.1D10.0020.0008][.0000.0032.0002] 
    // LATIN CAPITAL LETTER E WITH MACRON

    uint32_t const cps[1] = { 0x112 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_129)
{
    // 0113  ; [.1D10.0020.0002][.0000.0032.0002] 
    // LATIN SMALL LETTER E WITH MACRON

    uint32_t const cps[1] = { 0x113 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_130)
{
    // 0114  ; [.1D10.0020.0008][.0000.0026.0002] 
    // LATIN CAPITAL LETTER E WITH BREVE

    uint32_t const cps[1] = { 0x114 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_131)
{
    // 0115  ; [.1D10.0020.0002][.0000.0026.0002] 
    // LATIN SMALL LETTER E WITH BREVE

    uint32_t const cps[1] = { 0x115 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_132)
{
    // 0116  ; [.1D10.0020.0008][.0000.002E.0002] 
    // LATIN CAPITAL LETTER E WITH DOT ABOVE

    uint32_t const cps[1] = { 0x116 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_133)
{
    // 0117  ; [.1D10.0020.0002][.0000.002E.0002] 
    // LATIN SMALL LETTER E WITH DOT ABOVE

    uint32_t const cps[1] = { 0x117 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_134)
{
    // 0118  ; [.1D10.0020.0008][.0000.0031.0002] 
    // LATIN CAPITAL LETTER E WITH OGONEK

    uint32_t const cps[1] = { 0x118 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_135)
{
    // 0119  ; [.1D10.0020.0002][.0000.0031.0002] 
    // LATIN SMALL LETTER E WITH OGONEK

    uint32_t const cps[1] = { 0x119 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_136)
{
    // 011A  ; [.1D10.0020.0008][.0000.0028.0002] 
    // LATIN CAPITAL LETTER E WITH CARON

    uint32_t const cps[1] = { 0x11a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x9), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_137)
{
    // 011B  ; [.1D10.0020.0002][.0000.0028.0002] 
    // LATIN SMALL LETTER E WITH CARON

    uint32_t const cps[1] = { 0x11b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x9), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_138)
{
    // 011C  ; [.1D5A.0020.0008][.0000.0027.0002] 
    // LATIN CAPITAL LETTER G WITH CIRCUMFLEX

    uint32_t const cps[1] = { 0x11c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d5a), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_139)
{
    // 011D  ; [.1D5A.0020.0002][.0000.0027.0002] 
    // LATIN SMALL LETTER G WITH CIRCUMFLEX

    uint32_t const cps[1] = { 0x11d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d5a), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_140)
{
    // 011E  ; [.1D5A.0020.0008][.0000.0026.0002] 
    // LATIN CAPITAL LETTER G WITH BREVE

    uint32_t const cps[1] = { 0x11e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d5a), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_141)
{
    // 011F  ; [.1D5A.0020.0002][.0000.0026.0002] 
    // LATIN SMALL LETTER G WITH BREVE

    uint32_t const cps[1] = { 0x11f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d5a), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_142)
{
    // 0120  ; [.1D5A.0020.0008][.0000.002E.0002] 
    // LATIN CAPITAL LETTER G WITH DOT ABOVE

    uint32_t const cps[1] = { 0x120 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d5a), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_143)
{
    // 0121  ; [.1D5A.0020.0002][.0000.002E.0002] 
    // LATIN SMALL LETTER G WITH DOT ABOVE

    uint32_t const cps[1] = { 0x121 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d5a), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_144)
{
    // 0122  ; [.1D5A.0020.0008][.0000.0030.0002] 
    // LATIN CAPITAL LETTER G WITH CEDILLA

    uint32_t const cps[1] = { 0x122 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d5a), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x11), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_145)
{
    // 0123  ; [.1D5A.0020.0002][.0000.0030.0002] 
    // LATIN SMALL LETTER G WITH CEDILLA

    uint32_t const cps[1] = { 0x123 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d5a), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x11), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_146)
{
    // 0124  ; [.1D7E.0020.0008][.0000.0027.0002] 
    // LATIN CAPITAL LETTER H WITH CIRCUMFLEX

    uint32_t const cps[1] = { 0x124 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d7e), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_147)
{
    // 0125  ; [.1D7E.0020.0002][.0000.0027.0002] 
    // LATIN SMALL LETTER H WITH CIRCUMFLEX

    uint32_t const cps[1] = { 0x125 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d7e), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_148)
{
    // 0126  ; [.1D7E.0020.0008][.0000.0039.0002] 
    // LATIN CAPITAL LETTER H WITH STROKE

    uint32_t const cps[1] = { 0x126 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d7e), uint8_t(0x1), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x1a), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_001_149)
{
    // 0127  ; [.1D7E.0020.0002][.0000.0039.0002] 
    // LATIN SMALL LETTER H WITH STROKE

    uint32_t const cps[1] = { 0x127 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d7e), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1a), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

