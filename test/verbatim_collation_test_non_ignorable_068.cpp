// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_068_000)
{
    // 1F788 0041;	
    // (🞈) VERY HEAVY WHITE CIRCLE	[17C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F788, 0x0041 };
    uint32_t const ces[9] = { 0x17C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_001)
{
    // 1F788 0062;	
    // (🞈) VERY HEAVY WHITE CIRCLE	[17C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F788, 0x0062 };
    uint32_t const ces[9] = { 0x17C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_002)
{
    // 1F789 0021;	
    // (🞉) EXTREMELY HEAVY WHITE CIRCLE	[17C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F789, 0x0021 };
    uint32_t const ces[9] = { 0x17C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_003)
{
    // 1F789 003F;	
    // (🞉) EXTREMELY HEAVY WHITE CIRCLE	[17C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F789, 0x003F };
    uint32_t const ces[9] = { 0x17C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_004)
{
    // 1F789 0061;	
    // (🞉) EXTREMELY HEAVY WHITE CIRCLE	[17C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F789, 0x0061 };
    uint32_t const ces[9] = { 0x17C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_005)
{
    // 1F789 0041;	
    // (🞉) EXTREMELY HEAVY WHITE CIRCLE	[17C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F789, 0x0041 };
    uint32_t const ces[9] = { 0x17C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_006)
{
    // 1F789 0062;	
    // (🞉) EXTREMELY HEAVY WHITE CIRCLE	[17C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F789, 0x0062 };
    uint32_t const ces[9] = { 0x17C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_007)
{
    // 1F78A 0021;	
    // (🞊) WHITE CIRCLE CONTAINING BLACK SMALL CIRCLE	[17C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F78A, 0x0021 };
    uint32_t const ces[9] = { 0x17C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_008)
{
    // 1F78A 003F;	
    // (🞊) WHITE CIRCLE CONTAINING BLACK SMALL CIRCLE	[17C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F78A, 0x003F };
    uint32_t const ces[9] = { 0x17C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_009)
{
    // 1F78A 0061;	
    // (🞊) WHITE CIRCLE CONTAINING BLACK SMALL CIRCLE	[17C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F78A, 0x0061 };
    uint32_t const ces[9] = { 0x17C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_010)
{
    // 1F78A 0041;	
    // (🞊) WHITE CIRCLE CONTAINING BLACK SMALL CIRCLE	[17C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F78A, 0x0041 };
    uint32_t const ces[9] = { 0x17C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_011)
{
    // 1F78A 0062;	
    // (🞊) WHITE CIRCLE CONTAINING BLACK SMALL CIRCLE	[17C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F78A, 0x0062 };
    uint32_t const ces[9] = { 0x17C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_012)
{
    // 1F78B 0021;	
    // (🞋) ROUND TARGET	[17C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F78B, 0x0021 };
    uint32_t const ces[9] = { 0x17C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_013)
{
    // 1F78B 003F;	
    // (🞋) ROUND TARGET	[17C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F78B, 0x003F };
    uint32_t const ces[9] = { 0x17C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_014)
{
    // 1F78B 0061;	
    // (🞋) ROUND TARGET	[17C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F78B, 0x0061 };
    uint32_t const ces[9] = { 0x17C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_015)
{
    // 1F78B 0041;	
    // (🞋) ROUND TARGET	[17C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F78B, 0x0041 };
    uint32_t const ces[9] = { 0x17C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_016)
{
    // 1F78B 0062;	
    // (🞋) ROUND TARGET	[17C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F78B, 0x0062 };
    uint32_t const ces[9] = { 0x17C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_017)
{
    // 1F78C 0021;	
    // (🞌) BLACK TINY SQUARE	[17C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F78C, 0x0021 };
    uint32_t const ces[9] = { 0x17C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_018)
{
    // 1F78C 003F;	
    // (🞌) BLACK TINY SQUARE	[17C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F78C, 0x003F };
    uint32_t const ces[9] = { 0x17C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_019)
{
    // 1F78C 0061;	
    // (🞌) BLACK TINY SQUARE	[17C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F78C, 0x0061 };
    uint32_t const ces[9] = { 0x17C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_020)
{
    // 1F78C 0041;	
    // (🞌) BLACK TINY SQUARE	[17C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F78C, 0x0041 };
    uint32_t const ces[9] = { 0x17C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_021)
{
    // 1F78C 0062;	
    // (🞌) BLACK TINY SQUARE	[17C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F78C, 0x0062 };
    uint32_t const ces[9] = { 0x17C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_022)
{
    // 1F78D 0021;	
    // (🞍) BLACK SLIGHTLY SMALL SQUARE	[17C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F78D, 0x0021 };
    uint32_t const ces[9] = { 0x17C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_023)
{
    // 1F78D 003F;	
    // (🞍) BLACK SLIGHTLY SMALL SQUARE	[17C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F78D, 0x003F };
    uint32_t const ces[9] = { 0x17C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_024)
{
    // 1F78D 0061;	
    // (🞍) BLACK SLIGHTLY SMALL SQUARE	[17C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F78D, 0x0061 };
    uint32_t const ces[9] = { 0x17C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_025)
{
    // 1F78D 0041;	
    // (🞍) BLACK SLIGHTLY SMALL SQUARE	[17C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F78D, 0x0041 };
    uint32_t const ces[9] = { 0x17C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_026)
{
    // 1F78D 0062;	
    // (🞍) BLACK SLIGHTLY SMALL SQUARE	[17C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F78D, 0x0062 };
    uint32_t const ces[9] = { 0x17C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_027)
{
    // 1F78E 0021;	
    // (🞎) LIGHT WHITE SQUARE	[17C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F78E, 0x0021 };
    uint32_t const ces[9] = { 0x17C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_028)
{
    // 1F78E 003F;	
    // (🞎) LIGHT WHITE SQUARE	[17C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F78E, 0x003F };
    uint32_t const ces[9] = { 0x17C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_029)
{
    // 1F78E 0061;	
    // (🞎) LIGHT WHITE SQUARE	[17C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F78E, 0x0061 };
    uint32_t const ces[9] = { 0x17C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_030)
{
    // 1F78E 0041;	
    // (🞎) LIGHT WHITE SQUARE	[17C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F78E, 0x0041 };
    uint32_t const ces[9] = { 0x17C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_031)
{
    // 1F78E 0062;	
    // (🞎) LIGHT WHITE SQUARE	[17C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F78E, 0x0062 };
    uint32_t const ces[9] = { 0x17C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_032)
{
    // 1F78F 0021;	
    // (🞏) MEDIUM WHITE SQUARE	[17C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F78F, 0x0021 };
    uint32_t const ces[9] = { 0x17C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_033)
{
    // 1F78F 003F;	
    // (🞏) MEDIUM WHITE SQUARE	[17C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F78F, 0x003F };
    uint32_t const ces[9] = { 0x17C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_034)
{
    // 1F78F 0061;	
    // (🞏) MEDIUM WHITE SQUARE	[17C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F78F, 0x0061 };
    uint32_t const ces[9] = { 0x17C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_035)
{
    // 1F78F 0041;	
    // (🞏) MEDIUM WHITE SQUARE	[17C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F78F, 0x0041 };
    uint32_t const ces[9] = { 0x17C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_036)
{
    // 1F78F 0062;	
    // (🞏) MEDIUM WHITE SQUARE	[17C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F78F, 0x0062 };
    uint32_t const ces[9] = { 0x17C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_037)
{
    // 1F790 0021;	
    // (🞐) BOLD WHITE SQUARE	[17CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F790, 0x0021 };
    uint32_t const ces[9] = { 0x17CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_038)
{
    // 1F790 003F;	
    // (🞐) BOLD WHITE SQUARE	[17CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F790, 0x003F };
    uint32_t const ces[9] = { 0x17CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_039)
{
    // 1F790 0061;	
    // (🞐) BOLD WHITE SQUARE	[17CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F790, 0x0061 };
    uint32_t const ces[9] = { 0x17CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_040)
{
    // 1F790 0041;	
    // (🞐) BOLD WHITE SQUARE	[17CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F790, 0x0041 };
    uint32_t const ces[9] = { 0x17CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_041)
{
    // 1F790 0062;	
    // (🞐) BOLD WHITE SQUARE	[17CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F790, 0x0062 };
    uint32_t const ces[9] = { 0x17CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_042)
{
    // 1F791 0021;	
    // (🞑) HEAVY WHITE SQUARE	[17CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F791, 0x0021 };
    uint32_t const ces[9] = { 0x17CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_043)
{
    // 1F791 003F;	
    // (🞑) HEAVY WHITE SQUARE	[17CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F791, 0x003F };
    uint32_t const ces[9] = { 0x17CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_044)
{
    // 1F791 0061;	
    // (🞑) HEAVY WHITE SQUARE	[17CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F791, 0x0061 };
    uint32_t const ces[9] = { 0x17CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_045)
{
    // 1F791 0041;	
    // (🞑) HEAVY WHITE SQUARE	[17CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F791, 0x0041 };
    uint32_t const ces[9] = { 0x17CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_046)
{
    // 1F791 0062;	
    // (🞑) HEAVY WHITE SQUARE	[17CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F791, 0x0062 };
    uint32_t const ces[9] = { 0x17CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_047)
{
    // 1F792 0021;	
    // (🞒) VERY HEAVY WHITE SQUARE	[17CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F792, 0x0021 };
    uint32_t const ces[9] = { 0x17CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_048)
{
    // 1F792 003F;	
    // (🞒) VERY HEAVY WHITE SQUARE	[17CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F792, 0x003F };
    uint32_t const ces[9] = { 0x17CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_049)
{
    // 1F792 0061;	
    // (🞒) VERY HEAVY WHITE SQUARE	[17CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F792, 0x0061 };
    uint32_t const ces[9] = { 0x17CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_050)
{
    // 1F792 0041;	
    // (🞒) VERY HEAVY WHITE SQUARE	[17CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F792, 0x0041 };
    uint32_t const ces[9] = { 0x17CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_051)
{
    // 1F792 0062;	
    // (🞒) VERY HEAVY WHITE SQUARE	[17CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F792, 0x0062 };
    uint32_t const ces[9] = { 0x17CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_052)
{
    // 1F793 0021;	
    // (🞓) EXTREMELY HEAVY WHITE SQUARE	[17CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F793, 0x0021 };
    uint32_t const ces[9] = { 0x17CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_053)
{
    // 1F793 003F;	
    // (🞓) EXTREMELY HEAVY WHITE SQUARE	[17CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F793, 0x003F };
    uint32_t const ces[9] = { 0x17CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_054)
{
    // 1F793 0061;	
    // (🞓) EXTREMELY HEAVY WHITE SQUARE	[17CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F793, 0x0061 };
    uint32_t const ces[9] = { 0x17CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_055)
{
    // 1F793 0041;	
    // (🞓) EXTREMELY HEAVY WHITE SQUARE	[17CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F793, 0x0041 };
    uint32_t const ces[9] = { 0x17CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_056)
{
    // 1F793 0062;	
    // (🞓) EXTREMELY HEAVY WHITE SQUARE	[17CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F793, 0x0062 };
    uint32_t const ces[9] = { 0x17CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_057)
{
    // 1F794 0021;	
    // (🞔) WHITE SQUARE CONTAINING BLACK VERY SMALL SQUARE	[17CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F794, 0x0021 };
    uint32_t const ces[9] = { 0x17CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_058)
{
    // 1F794 003F;	
    // (🞔) WHITE SQUARE CONTAINING BLACK VERY SMALL SQUARE	[17CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F794, 0x003F };
    uint32_t const ces[9] = { 0x17CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_059)
{
    // 1F794 0061;	
    // (🞔) WHITE SQUARE CONTAINING BLACK VERY SMALL SQUARE	[17CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F794, 0x0061 };
    uint32_t const ces[9] = { 0x17CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_060)
{
    // 1F794 0041;	
    // (🞔) WHITE SQUARE CONTAINING BLACK VERY SMALL SQUARE	[17CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F794, 0x0041 };
    uint32_t const ces[9] = { 0x17CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_061)
{
    // 1F794 0062;	
    // (🞔) WHITE SQUARE CONTAINING BLACK VERY SMALL SQUARE	[17CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F794, 0x0062 };
    uint32_t const ces[9] = { 0x17CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_062)
{
    // 1F795 0021;	
    // (🞕) WHITE SQUARE CONTAINING BLACK MEDIUM SQUARE	[17CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F795, 0x0021 };
    uint32_t const ces[9] = { 0x17CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_063)
{
    // 1F795 003F;	
    // (🞕) WHITE SQUARE CONTAINING BLACK MEDIUM SQUARE	[17CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F795, 0x003F };
    uint32_t const ces[9] = { 0x17CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_064)
{
    // 1F795 0061;	
    // (🞕) WHITE SQUARE CONTAINING BLACK MEDIUM SQUARE	[17CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F795, 0x0061 };
    uint32_t const ces[9] = { 0x17CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_065)
{
    // 1F795 0041;	
    // (🞕) WHITE SQUARE CONTAINING BLACK MEDIUM SQUARE	[17CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F795, 0x0041 };
    uint32_t const ces[9] = { 0x17CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_066)
{
    // 1F795 0062;	
    // (🞕) WHITE SQUARE CONTAINING BLACK MEDIUM SQUARE	[17CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F795, 0x0062 };
    uint32_t const ces[9] = { 0x17CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_067)
{
    // 1F796 0021;	
    // (🞖) SQUARE TARGET	[17D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F796, 0x0021 };
    uint32_t const ces[9] = { 0x17D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_068)
{
    // 1F796 003F;	
    // (🞖) SQUARE TARGET	[17D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F796, 0x003F };
    uint32_t const ces[9] = { 0x17D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_069)
{
    // 1F796 0061;	
    // (🞖) SQUARE TARGET	[17D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F796, 0x0061 };
    uint32_t const ces[9] = { 0x17D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_070)
{
    // 1F796 0041;	
    // (🞖) SQUARE TARGET	[17D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F796, 0x0041 };
    uint32_t const ces[9] = { 0x17D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_071)
{
    // 1F796 0062;	
    // (🞖) SQUARE TARGET	[17D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F796, 0x0062 };
    uint32_t const ces[9] = { 0x17D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_072)
{
    // 1F797 0021;	
    // (🞗) BLACK TINY DIAMOND	[17D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F797, 0x0021 };
    uint32_t const ces[9] = { 0x17D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_073)
{
    // 1F797 003F;	
    // (🞗) BLACK TINY DIAMOND	[17D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F797, 0x003F };
    uint32_t const ces[9] = { 0x17D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_074)
{
    // 1F797 0061;	
    // (🞗) BLACK TINY DIAMOND	[17D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F797, 0x0061 };
    uint32_t const ces[9] = { 0x17D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_075)
{
    // 1F797 0041;	
    // (🞗) BLACK TINY DIAMOND	[17D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F797, 0x0041 };
    uint32_t const ces[9] = { 0x17D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_076)
{
    // 1F797 0062;	
    // (🞗) BLACK TINY DIAMOND	[17D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F797, 0x0062 };
    uint32_t const ces[9] = { 0x17D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_077)
{
    // 1F798 0021;	
    // (🞘) BLACK VERY SMALL DIAMOND	[17D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F798, 0x0021 };
    uint32_t const ces[9] = { 0x17D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_078)
{
    // 1F798 003F;	
    // (🞘) BLACK VERY SMALL DIAMOND	[17D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F798, 0x003F };
    uint32_t const ces[9] = { 0x17D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_079)
{
    // 1F798 0061;	
    // (🞘) BLACK VERY SMALL DIAMOND	[17D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F798, 0x0061 };
    uint32_t const ces[9] = { 0x17D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_080)
{
    // 1F798 0041;	
    // (🞘) BLACK VERY SMALL DIAMOND	[17D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F798, 0x0041 };
    uint32_t const ces[9] = { 0x17D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_081)
{
    // 1F798 0062;	
    // (🞘) BLACK VERY SMALL DIAMOND	[17D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F798, 0x0062 };
    uint32_t const ces[9] = { 0x17D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_082)
{
    // 1F799 0021;	
    // (🞙) BLACK MEDIUM SMALL DIAMOND	[17D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F799, 0x0021 };
    uint32_t const ces[9] = { 0x17D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_083)
{
    // 1F799 003F;	
    // (🞙) BLACK MEDIUM SMALL DIAMOND	[17D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F799, 0x003F };
    uint32_t const ces[9] = { 0x17D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_084)
{
    // 1F799 0061;	
    // (🞙) BLACK MEDIUM SMALL DIAMOND	[17D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F799, 0x0061 };
    uint32_t const ces[9] = { 0x17D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_085)
{
    // 1F799 0041;	
    // (🞙) BLACK MEDIUM SMALL DIAMOND	[17D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F799, 0x0041 };
    uint32_t const ces[9] = { 0x17D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_086)
{
    // 1F799 0062;	
    // (🞙) BLACK MEDIUM SMALL DIAMOND	[17D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F799, 0x0062 };
    uint32_t const ces[9] = { 0x17D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_087)
{
    // 1F79A 0021;	
    // (🞚) WHITE DIAMOND CONTAINING BLACK VERY SMALL DIAMOND	[17D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F79A, 0x0021 };
    uint32_t const ces[9] = { 0x17D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_088)
{
    // 1F79A 003F;	
    // (🞚) WHITE DIAMOND CONTAINING BLACK VERY SMALL DIAMOND	[17D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F79A, 0x003F };
    uint32_t const ces[9] = { 0x17D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_089)
{
    // 1F79A 0061;	
    // (🞚) WHITE DIAMOND CONTAINING BLACK VERY SMALL DIAMOND	[17D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F79A, 0x0061 };
    uint32_t const ces[9] = { 0x17D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_090)
{
    // 1F79A 0041;	
    // (🞚) WHITE DIAMOND CONTAINING BLACK VERY SMALL DIAMOND	[17D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F79A, 0x0041 };
    uint32_t const ces[9] = { 0x17D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_091)
{
    // 1F79A 0062;	
    // (🞚) WHITE DIAMOND CONTAINING BLACK VERY SMALL DIAMOND	[17D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F79A, 0x0062 };
    uint32_t const ces[9] = { 0x17D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_092)
{
    // 1F79B 0021;	
    // (🞛) WHITE DIAMOND CONTAINING BLACK MEDIUM DIAMOND	[17D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F79B, 0x0021 };
    uint32_t const ces[9] = { 0x17D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_093)
{
    // 1F79B 003F;	
    // (🞛) WHITE DIAMOND CONTAINING BLACK MEDIUM DIAMOND	[17D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F79B, 0x003F };
    uint32_t const ces[9] = { 0x17D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_094)
{
    // 1F79B 0061;	
    // (🞛) WHITE DIAMOND CONTAINING BLACK MEDIUM DIAMOND	[17D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F79B, 0x0061 };
    uint32_t const ces[9] = { 0x17D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_095)
{
    // 1F79B 0041;	
    // (🞛) WHITE DIAMOND CONTAINING BLACK MEDIUM DIAMOND	[17D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F79B, 0x0041 };
    uint32_t const ces[9] = { 0x17D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_096)
{
    // 1F79B 0062;	
    // (🞛) WHITE DIAMOND CONTAINING BLACK MEDIUM DIAMOND	[17D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F79B, 0x0062 };
    uint32_t const ces[9] = { 0x17D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_097)
{
    // 1F79C 0021;	
    // (🞜) DIAMOND TARGET	[17D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F79C, 0x0021 };
    uint32_t const ces[9] = { 0x17D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_098)
{
    // 1F79C 003F;	
    // (🞜) DIAMOND TARGET	[17D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F79C, 0x003F };
    uint32_t const ces[9] = { 0x17D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_099)
{
    // 1F79C 0061;	
    // (🞜) DIAMOND TARGET	[17D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F79C, 0x0061 };
    uint32_t const ces[9] = { 0x17D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_100)
{
    // 1F79C 0041;	
    // (🞜) DIAMOND TARGET	[17D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F79C, 0x0041 };
    uint32_t const ces[9] = { 0x17D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_101)
{
    // 1F79C 0062;	
    // (🞜) DIAMOND TARGET	[17D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F79C, 0x0062 };
    uint32_t const ces[9] = { 0x17D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_102)
{
    // 1F79D 0021;	
    // (🞝) BLACK TINY LOZENGE	[17D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F79D, 0x0021 };
    uint32_t const ces[9] = { 0x17D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_103)
{
    // 1F79D 003F;	
    // (🞝) BLACK TINY LOZENGE	[17D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F79D, 0x003F };
    uint32_t const ces[9] = { 0x17D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_104)
{
    // 1F79D 0061;	
    // (🞝) BLACK TINY LOZENGE	[17D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F79D, 0x0061 };
    uint32_t const ces[9] = { 0x17D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_105)
{
    // 1F79D 0041;	
    // (🞝) BLACK TINY LOZENGE	[17D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F79D, 0x0041 };
    uint32_t const ces[9] = { 0x17D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_106)
{
    // 1F79D 0062;	
    // (🞝) BLACK TINY LOZENGE	[17D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F79D, 0x0062 };
    uint32_t const ces[9] = { 0x17D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_107)
{
    // 1F79E 0021;	
    // (🞞) BLACK VERY SMALL LOZENGE	[17D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F79E, 0x0021 };
    uint32_t const ces[9] = { 0x17D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_108)
{
    // 1F79E 003F;	
    // (🞞) BLACK VERY SMALL LOZENGE	[17D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F79E, 0x003F };
    uint32_t const ces[9] = { 0x17D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_109)
{
    // 1F79E 0061;	
    // (🞞) BLACK VERY SMALL LOZENGE	[17D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F79E, 0x0061 };
    uint32_t const ces[9] = { 0x17D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_110)
{
    // 1F79E 0041;	
    // (🞞) BLACK VERY SMALL LOZENGE	[17D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F79E, 0x0041 };
    uint32_t const ces[9] = { 0x17D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_111)
{
    // 1F79E 0062;	
    // (🞞) BLACK VERY SMALL LOZENGE	[17D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F79E, 0x0062 };
    uint32_t const ces[9] = { 0x17D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_112)
{
    // 1F79F 0021;	
    // (🞟) BLACK MEDIUM SMALL LOZENGE	[17D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F79F, 0x0021 };
    uint32_t const ces[9] = { 0x17D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_113)
{
    // 1F79F 003F;	
    // (🞟) BLACK MEDIUM SMALL LOZENGE	[17D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F79F, 0x003F };
    uint32_t const ces[9] = { 0x17D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_114)
{
    // 1F79F 0061;	
    // (🞟) BLACK MEDIUM SMALL LOZENGE	[17D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F79F, 0x0061 };
    uint32_t const ces[9] = { 0x17D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_115)
{
    // 1F79F 0041;	
    // (🞟) BLACK MEDIUM SMALL LOZENGE	[17D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F79F, 0x0041 };
    uint32_t const ces[9] = { 0x17D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_116)
{
    // 1F79F 0062;	
    // (🞟) BLACK MEDIUM SMALL LOZENGE	[17D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F79F, 0x0062 };
    uint32_t const ces[9] = { 0x17D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_117)
{
    // 1F7A0 0021;	
    // (🞠) WHITE LOZENGE CONTAINING BLACK SMALL LOZENGE	[17DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A0, 0x0021 };
    uint32_t const ces[9] = { 0x17DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_118)
{
    // 1F7A0 003F;	
    // (🞠) WHITE LOZENGE CONTAINING BLACK SMALL LOZENGE	[17DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A0, 0x003F };
    uint32_t const ces[9] = { 0x17DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_119)
{
    // 1F7A0 0061;	
    // (🞠) WHITE LOZENGE CONTAINING BLACK SMALL LOZENGE	[17DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A0, 0x0061 };
    uint32_t const ces[9] = { 0x17DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_120)
{
    // 1F7A0 0041;	
    // (🞠) WHITE LOZENGE CONTAINING BLACK SMALL LOZENGE	[17DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7A0, 0x0041 };
    uint32_t const ces[9] = { 0x17DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_121)
{
    // 1F7A0 0062;	
    // (🞠) WHITE LOZENGE CONTAINING BLACK SMALL LOZENGE	[17DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A0, 0x0062 };
    uint32_t const ces[9] = { 0x17DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_122)
{
    // 1F7A1 0021;	
    // (🞡) THIN GREEK CROSS	[17DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A1, 0x0021 };
    uint32_t const ces[9] = { 0x17DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_123)
{
    // 1F7A1 003F;	
    // (🞡) THIN GREEK CROSS	[17DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A1, 0x003F };
    uint32_t const ces[9] = { 0x17DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_124)
{
    // 1F7A1 0061;	
    // (🞡) THIN GREEK CROSS	[17DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A1, 0x0061 };
    uint32_t const ces[9] = { 0x17DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_125)
{
    // 1F7A1 0041;	
    // (🞡) THIN GREEK CROSS	[17DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7A1, 0x0041 };
    uint32_t const ces[9] = { 0x17DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_126)
{
    // 1F7A1 0062;	
    // (🞡) THIN GREEK CROSS	[17DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A1, 0x0062 };
    uint32_t const ces[9] = { 0x17DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_127)
{
    // 1F7A2 0021;	
    // (🞢) LIGHT GREEK CROSS	[17DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A2, 0x0021 };
    uint32_t const ces[9] = { 0x17DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_128)
{
    // 1F7A2 003F;	
    // (🞢) LIGHT GREEK CROSS	[17DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A2, 0x003F };
    uint32_t const ces[9] = { 0x17DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_129)
{
    // 1F7A2 0061;	
    // (🞢) LIGHT GREEK CROSS	[17DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A2, 0x0061 };
    uint32_t const ces[9] = { 0x17DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_130)
{
    // 1F7A2 0041;	
    // (🞢) LIGHT GREEK CROSS	[17DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7A2, 0x0041 };
    uint32_t const ces[9] = { 0x17DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_131)
{
    // 1F7A2 0062;	
    // (🞢) LIGHT GREEK CROSS	[17DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A2, 0x0062 };
    uint32_t const ces[9] = { 0x17DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_132)
{
    // 1F7A3 0021;	
    // (🞣) MEDIUM GREEK CROSS	[17DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A3, 0x0021 };
    uint32_t const ces[9] = { 0x17DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_133)
{
    // 1F7A3 003F;	
    // (🞣) MEDIUM GREEK CROSS	[17DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A3, 0x003F };
    uint32_t const ces[9] = { 0x17DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_134)
{
    // 1F7A3 0061;	
    // (🞣) MEDIUM GREEK CROSS	[17DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A3, 0x0061 };
    uint32_t const ces[9] = { 0x17DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_135)
{
    // 1F7A3 0041;	
    // (🞣) MEDIUM GREEK CROSS	[17DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7A3, 0x0041 };
    uint32_t const ces[9] = { 0x17DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_136)
{
    // 1F7A3 0062;	
    // (🞣) MEDIUM GREEK CROSS	[17DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A3, 0x0062 };
    uint32_t const ces[9] = { 0x17DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_137)
{
    // 1F7A4 0021;	
    // (🞤) BOLD GREEK CROSS	[17DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A4, 0x0021 };
    uint32_t const ces[9] = { 0x17DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_138)
{
    // 1F7A4 003F;	
    // (🞤) BOLD GREEK CROSS	[17DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A4, 0x003F };
    uint32_t const ces[9] = { 0x17DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_139)
{
    // 1F7A4 0061;	
    // (🞤) BOLD GREEK CROSS	[17DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A4, 0x0061 };
    uint32_t const ces[9] = { 0x17DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_140)
{
    // 1F7A4 0041;	
    // (🞤) BOLD GREEK CROSS	[17DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7A4, 0x0041 };
    uint32_t const ces[9] = { 0x17DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_141)
{
    // 1F7A4 0062;	
    // (🞤) BOLD GREEK CROSS	[17DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A4, 0x0062 };
    uint32_t const ces[9] = { 0x17DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_142)
{
    // 1F7A5 0021;	
    // (🞥) VERY BOLD GREEK CROSS	[17DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A5, 0x0021 };
    uint32_t const ces[9] = { 0x17DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_143)
{
    // 1F7A5 003F;	
    // (🞥) VERY BOLD GREEK CROSS	[17DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A5, 0x003F };
    uint32_t const ces[9] = { 0x17DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_144)
{
    // 1F7A5 0061;	
    // (🞥) VERY BOLD GREEK CROSS	[17DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A5, 0x0061 };
    uint32_t const ces[9] = { 0x17DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_145)
{
    // 1F7A5 0041;	
    // (🞥) VERY BOLD GREEK CROSS	[17DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7A5, 0x0041 };
    uint32_t const ces[9] = { 0x17DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_146)
{
    // 1F7A5 0062;	
    // (🞥) VERY BOLD GREEK CROSS	[17DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A5, 0x0062 };
    uint32_t const ces[9] = { 0x17DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_147)
{
    // 1F7A6 0021;	
    // (🞦) VERY HEAVY GREEK CROSS	[17E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A6, 0x0021 };
    uint32_t const ces[9] = { 0x17E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_148)
{
    // 1F7A6 003F;	
    // (🞦) VERY HEAVY GREEK CROSS	[17E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A6, 0x003F };
    uint32_t const ces[9] = { 0x17E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_149)
{
    // 1F7A6 0061;	
    // (🞦) VERY HEAVY GREEK CROSS	[17E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A6, 0x0061 };
    uint32_t const ces[9] = { 0x17E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_150)
{
    // 1F7A6 0041;	
    // (🞦) VERY HEAVY GREEK CROSS	[17E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7A6, 0x0041 };
    uint32_t const ces[9] = { 0x17E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_151)
{
    // 1F7A6 0062;	
    // (🞦) VERY HEAVY GREEK CROSS	[17E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A6, 0x0062 };
    uint32_t const ces[9] = { 0x17E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_152)
{
    // 1F7A7 0021;	
    // (🞧) EXTREMELY HEAVY GREEK CROSS	[17E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A7, 0x0021 };
    uint32_t const ces[9] = { 0x17E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_153)
{
    // 1F7A7 003F;	
    // (🞧) EXTREMELY HEAVY GREEK CROSS	[17E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A7, 0x003F };
    uint32_t const ces[9] = { 0x17E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_154)
{
    // 1F7A7 0061;	
    // (🞧) EXTREMELY HEAVY GREEK CROSS	[17E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A7, 0x0061 };
    uint32_t const ces[9] = { 0x17E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_155)
{
    // 1F7A7 0041;	
    // (🞧) EXTREMELY HEAVY GREEK CROSS	[17E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7A7, 0x0041 };
    uint32_t const ces[9] = { 0x17E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_156)
{
    // 1F7A7 0062;	
    // (🞧) EXTREMELY HEAVY GREEK CROSS	[17E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A7, 0x0062 };
    uint32_t const ces[9] = { 0x17E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_157)
{
    // 1F7A8 0021;	
    // (🞨) THIN SALTIRE	[17E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A8, 0x0021 };
    uint32_t const ces[9] = { 0x17E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_158)
{
    // 1F7A8 003F;	
    // (🞨) THIN SALTIRE	[17E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A8, 0x003F };
    uint32_t const ces[9] = { 0x17E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_159)
{
    // 1F7A8 0061;	
    // (🞨) THIN SALTIRE	[17E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A8, 0x0061 };
    uint32_t const ces[9] = { 0x17E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_160)
{
    // 1F7A8 0041;	
    // (🞨) THIN SALTIRE	[17E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7A8, 0x0041 };
    uint32_t const ces[9] = { 0x17E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_161)
{
    // 1F7A8 0062;	
    // (🞨) THIN SALTIRE	[17E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A8, 0x0062 };
    uint32_t const ces[9] = { 0x17E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_162)
{
    // 1F7A9 0021;	
    // (🞩) LIGHT SALTIRE	[17E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A9, 0x0021 };
    uint32_t const ces[9] = { 0x17E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_163)
{
    // 1F7A9 003F;	
    // (🞩) LIGHT SALTIRE	[17E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A9, 0x003F };
    uint32_t const ces[9] = { 0x17E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_164)
{
    // 1F7A9 0061;	
    // (🞩) LIGHT SALTIRE	[17E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A9, 0x0061 };
    uint32_t const ces[9] = { 0x17E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_165)
{
    // 1F7A9 0041;	
    // (🞩) LIGHT SALTIRE	[17E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7A9, 0x0041 };
    uint32_t const ces[9] = { 0x17E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_166)
{
    // 1F7A9 0062;	
    // (🞩) LIGHT SALTIRE	[17E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A9, 0x0062 };
    uint32_t const ces[9] = { 0x17E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_167)
{
    // 1F7AA 0021;	
    // (🞪) MEDIUM SALTIRE	[17E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7AA, 0x0021 };
    uint32_t const ces[9] = { 0x17E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_168)
{
    // 1F7AA 003F;	
    // (🞪) MEDIUM SALTIRE	[17E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7AA, 0x003F };
    uint32_t const ces[9] = { 0x17E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_169)
{
    // 1F7AA 0061;	
    // (🞪) MEDIUM SALTIRE	[17E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7AA, 0x0061 };
    uint32_t const ces[9] = { 0x17E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_170)
{
    // 1F7AA 0041;	
    // (🞪) MEDIUM SALTIRE	[17E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7AA, 0x0041 };
    uint32_t const ces[9] = { 0x17E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_171)
{
    // 1F7AA 0062;	
    // (🞪) MEDIUM SALTIRE	[17E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7AA, 0x0062 };
    uint32_t const ces[9] = { 0x17E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_172)
{
    // 1F7AB 0021;	
    // (🞫) BOLD SALTIRE	[17E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7AB, 0x0021 };
    uint32_t const ces[9] = { 0x17E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_173)
{
    // 1F7AB 003F;	
    // (🞫) BOLD SALTIRE	[17E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7AB, 0x003F };
    uint32_t const ces[9] = { 0x17E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_174)
{
    // 1F7AB 0061;	
    // (🞫) BOLD SALTIRE	[17E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7AB, 0x0061 };
    uint32_t const ces[9] = { 0x17E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_175)
{
    // 1F7AB 0041;	
    // (🞫) BOLD SALTIRE	[17E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7AB, 0x0041 };
    uint32_t const ces[9] = { 0x17E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_176)
{
    // 1F7AB 0062;	
    // (🞫) BOLD SALTIRE	[17E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7AB, 0x0062 };
    uint32_t const ces[9] = { 0x17E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_177)
{
    // 1F7AC 0021;	
    // (🞬) HEAVY SALTIRE	[17E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7AC, 0x0021 };
    uint32_t const ces[9] = { 0x17E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_178)
{
    // 1F7AC 003F;	
    // (🞬) HEAVY SALTIRE	[17E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7AC, 0x003F };
    uint32_t const ces[9] = { 0x17E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_179)
{
    // 1F7AC 0061;	
    // (🞬) HEAVY SALTIRE	[17E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7AC, 0x0061 };
    uint32_t const ces[9] = { 0x17E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_180)
{
    // 1F7AC 0041;	
    // (🞬) HEAVY SALTIRE	[17E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7AC, 0x0041 };
    uint32_t const ces[9] = { 0x17E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_181)
{
    // 1F7AC 0062;	
    // (🞬) HEAVY SALTIRE	[17E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7AC, 0x0062 };
    uint32_t const ces[9] = { 0x17E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_182)
{
    // 1F7AD 0021;	
    // (🞭) VERY HEAVY SALTIRE	[17E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7AD, 0x0021 };
    uint32_t const ces[9] = { 0x17E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_183)
{
    // 1F7AD 003F;	
    // (🞭) VERY HEAVY SALTIRE	[17E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7AD, 0x003F };
    uint32_t const ces[9] = { 0x17E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_184)
{
    // 1F7AD 0061;	
    // (🞭) VERY HEAVY SALTIRE	[17E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7AD, 0x0061 };
    uint32_t const ces[9] = { 0x17E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_185)
{
    // 1F7AD 0041;	
    // (🞭) VERY HEAVY SALTIRE	[17E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7AD, 0x0041 };
    uint32_t const ces[9] = { 0x17E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_186)
{
    // 1F7AD 0062;	
    // (🞭) VERY HEAVY SALTIRE	[17E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7AD, 0x0062 };
    uint32_t const ces[9] = { 0x17E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_187)
{
    // 1F7AE 0021;	
    // (🞮) EXTREMELY HEAVY SALTIRE	[17E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7AE, 0x0021 };
    uint32_t const ces[9] = { 0x17E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_188)
{
    // 1F7AE 003F;	
    // (🞮) EXTREMELY HEAVY SALTIRE	[17E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7AE, 0x003F };
    uint32_t const ces[9] = { 0x17E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_189)
{
    // 1F7AE 0061;	
    // (🞮) EXTREMELY HEAVY SALTIRE	[17E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7AE, 0x0061 };
    uint32_t const ces[9] = { 0x17E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_190)
{
    // 1F7AE 0041;	
    // (🞮) EXTREMELY HEAVY SALTIRE	[17E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7AE, 0x0041 };
    uint32_t const ces[9] = { 0x17E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_191)
{
    // 1F7AE 0062;	
    // (🞮) EXTREMELY HEAVY SALTIRE	[17E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7AE, 0x0062 };
    uint32_t const ces[9] = { 0x17E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_192)
{
    // 1F7AF 0021;	
    // (🞯) LIGHT FIVE SPOKED ASTERISK	[17E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7AF, 0x0021 };
    uint32_t const ces[9] = { 0x17E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_193)
{
    // 1F7AF 003F;	
    // (🞯) LIGHT FIVE SPOKED ASTERISK	[17E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7AF, 0x003F };
    uint32_t const ces[9] = { 0x17E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_194)
{
    // 1F7AF 0061;	
    // (🞯) LIGHT FIVE SPOKED ASTERISK	[17E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7AF, 0x0061 };
    uint32_t const ces[9] = { 0x17E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_195)
{
    // 1F7AF 0041;	
    // (🞯) LIGHT FIVE SPOKED ASTERISK	[17E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7AF, 0x0041 };
    uint32_t const ces[9] = { 0x17E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_196)
{
    // 1F7AF 0062;	
    // (🞯) LIGHT FIVE SPOKED ASTERISK	[17E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7AF, 0x0062 };
    uint32_t const ces[9] = { 0x17E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_197)
{
    // 1F7B0 0021;	
    // (🞰) MEDIUM FIVE SPOKED ASTERISK	[17EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B0, 0x0021 };
    uint32_t const ces[9] = { 0x17EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_198)
{
    // 1F7B0 003F;	
    // (🞰) MEDIUM FIVE SPOKED ASTERISK	[17EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B0, 0x003F };
    uint32_t const ces[9] = { 0x17EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_199)
{
    // 1F7B0 0061;	
    // (🞰) MEDIUM FIVE SPOKED ASTERISK	[17EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B0, 0x0061 };
    uint32_t const ces[9] = { 0x17EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_200)
{
    // 1F7B0 0041;	
    // (🞰) MEDIUM FIVE SPOKED ASTERISK	[17EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7B0, 0x0041 };
    uint32_t const ces[9] = { 0x17EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_201)
{
    // 1F7B0 0062;	
    // (🞰) MEDIUM FIVE SPOKED ASTERISK	[17EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B0, 0x0062 };
    uint32_t const ces[9] = { 0x17EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_202)
{
    // 1F7B1 0021;	
    // (🞱) BOLD FIVE SPOKED ASTERISK	[17EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B1, 0x0021 };
    uint32_t const ces[9] = { 0x17EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_203)
{
    // 1F7B1 003F;	
    // (🞱) BOLD FIVE SPOKED ASTERISK	[17EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B1, 0x003F };
    uint32_t const ces[9] = { 0x17EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_204)
{
    // 1F7B1 0061;	
    // (🞱) BOLD FIVE SPOKED ASTERISK	[17EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B1, 0x0061 };
    uint32_t const ces[9] = { 0x17EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_205)
{
    // 1F7B1 0041;	
    // (🞱) BOLD FIVE SPOKED ASTERISK	[17EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7B1, 0x0041 };
    uint32_t const ces[9] = { 0x17EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_206)
{
    // 1F7B1 0062;	
    // (🞱) BOLD FIVE SPOKED ASTERISK	[17EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B1, 0x0062 };
    uint32_t const ces[9] = { 0x17EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_207)
{
    // 1F7B2 0021;	
    // (🞲) HEAVY FIVE SPOKED ASTERISK	[17EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B2, 0x0021 };
    uint32_t const ces[9] = { 0x17EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_208)
{
    // 1F7B2 003F;	
    // (🞲) HEAVY FIVE SPOKED ASTERISK	[17EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B2, 0x003F };
    uint32_t const ces[9] = { 0x17EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_209)
{
    // 1F7B2 0061;	
    // (🞲) HEAVY FIVE SPOKED ASTERISK	[17EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B2, 0x0061 };
    uint32_t const ces[9] = { 0x17EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_210)
{
    // 1F7B2 0041;	
    // (🞲) HEAVY FIVE SPOKED ASTERISK	[17EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7B2, 0x0041 };
    uint32_t const ces[9] = { 0x17EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_211)
{
    // 1F7B2 0062;	
    // (🞲) HEAVY FIVE SPOKED ASTERISK	[17EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B2, 0x0062 };
    uint32_t const ces[9] = { 0x17EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_212)
{
    // 1F7B3 0021;	
    // (🞳) VERY HEAVY FIVE SPOKED ASTERISK	[17ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B3, 0x0021 };
    uint32_t const ces[9] = { 0x17ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_213)
{
    // 1F7B3 003F;	
    // (🞳) VERY HEAVY FIVE SPOKED ASTERISK	[17ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B3, 0x003F };
    uint32_t const ces[9] = { 0x17ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_214)
{
    // 1F7B3 0061;	
    // (🞳) VERY HEAVY FIVE SPOKED ASTERISK	[17ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B3, 0x0061 };
    uint32_t const ces[9] = { 0x17ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_215)
{
    // 1F7B3 0041;	
    // (🞳) VERY HEAVY FIVE SPOKED ASTERISK	[17ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7B3, 0x0041 };
    uint32_t const ces[9] = { 0x17ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_216)
{
    // 1F7B3 0062;	
    // (🞳) VERY HEAVY FIVE SPOKED ASTERISK	[17ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B3, 0x0062 };
    uint32_t const ces[9] = { 0x17ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_217)
{
    // 1F7B4 0021;	
    // (🞴) EXTREMELY HEAVY FIVE SPOKED ASTERISK	[17EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B4, 0x0021 };
    uint32_t const ces[9] = { 0x17EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_218)
{
    // 1F7B4 003F;	
    // (🞴) EXTREMELY HEAVY FIVE SPOKED ASTERISK	[17EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B4, 0x003F };
    uint32_t const ces[9] = { 0x17EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_219)
{
    // 1F7B4 0061;	
    // (🞴) EXTREMELY HEAVY FIVE SPOKED ASTERISK	[17EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B4, 0x0061 };
    uint32_t const ces[9] = { 0x17EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_220)
{
    // 1F7B4 0041;	
    // (🞴) EXTREMELY HEAVY FIVE SPOKED ASTERISK	[17EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7B4, 0x0041 };
    uint32_t const ces[9] = { 0x17EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_221)
{
    // 1F7B4 0062;	
    // (🞴) EXTREMELY HEAVY FIVE SPOKED ASTERISK	[17EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B4, 0x0062 };
    uint32_t const ces[9] = { 0x17EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_222)
{
    // 1F7B5 0021;	
    // (🞵) LIGHT SIX SPOKED ASTERISK	[17EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B5, 0x0021 };
    uint32_t const ces[9] = { 0x17EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_223)
{
    // 1F7B5 003F;	
    // (🞵) LIGHT SIX SPOKED ASTERISK	[17EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B5, 0x003F };
    uint32_t const ces[9] = { 0x17EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_224)
{
    // 1F7B5 0061;	
    // (🞵) LIGHT SIX SPOKED ASTERISK	[17EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B5, 0x0061 };
    uint32_t const ces[9] = { 0x17EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_225)
{
    // 1F7B5 0041;	
    // (🞵) LIGHT SIX SPOKED ASTERISK	[17EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7B5, 0x0041 };
    uint32_t const ces[9] = { 0x17EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_226)
{
    // 1F7B5 0062;	
    // (🞵) LIGHT SIX SPOKED ASTERISK	[17EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B5, 0x0062 };
    uint32_t const ces[9] = { 0x17EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_227)
{
    // 1F7B6 0021;	
    // (🞶) MEDIUM SIX SPOKED ASTERISK	[17F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B6, 0x0021 };
    uint32_t const ces[9] = { 0x17F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_228)
{
    // 1F7B6 003F;	
    // (🞶) MEDIUM SIX SPOKED ASTERISK	[17F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B6, 0x003F };
    uint32_t const ces[9] = { 0x17F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_229)
{
    // 1F7B6 0061;	
    // (🞶) MEDIUM SIX SPOKED ASTERISK	[17F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B6, 0x0061 };
    uint32_t const ces[9] = { 0x17F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_230)
{
    // 1F7B6 0041;	
    // (🞶) MEDIUM SIX SPOKED ASTERISK	[17F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7B6, 0x0041 };
    uint32_t const ces[9] = { 0x17F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_231)
{
    // 1F7B6 0062;	
    // (🞶) MEDIUM SIX SPOKED ASTERISK	[17F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B6, 0x0062 };
    uint32_t const ces[9] = { 0x17F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_232)
{
    // 1F7B7 0021;	
    // (🞷) BOLD SIX SPOKED ASTERISK	[17F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B7, 0x0021 };
    uint32_t const ces[9] = { 0x17F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_233)
{
    // 1F7B7 003F;	
    // (🞷) BOLD SIX SPOKED ASTERISK	[17F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B7, 0x003F };
    uint32_t const ces[9] = { 0x17F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_234)
{
    // 1F7B7 0061;	
    // (🞷) BOLD SIX SPOKED ASTERISK	[17F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B7, 0x0061 };
    uint32_t const ces[9] = { 0x17F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_235)
{
    // 1F7B7 0041;	
    // (🞷) BOLD SIX SPOKED ASTERISK	[17F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7B7, 0x0041 };
    uint32_t const ces[9] = { 0x17F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_236)
{
    // 1F7B7 0062;	
    // (🞷) BOLD SIX SPOKED ASTERISK	[17F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B7, 0x0062 };
    uint32_t const ces[9] = { 0x17F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_237)
{
    // 1F7B8 0021;	
    // (🞸) HEAVY SIX SPOKED ASTERISK	[17F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B8, 0x0021 };
    uint32_t const ces[9] = { 0x17F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_238)
{
    // 1F7B8 003F;	
    // (🞸) HEAVY SIX SPOKED ASTERISK	[17F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B8, 0x003F };
    uint32_t const ces[9] = { 0x17F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_239)
{
    // 1F7B8 0061;	
    // (🞸) HEAVY SIX SPOKED ASTERISK	[17F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B8, 0x0061 };
    uint32_t const ces[9] = { 0x17F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_240)
{
    // 1F7B8 0041;	
    // (🞸) HEAVY SIX SPOKED ASTERISK	[17F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7B8, 0x0041 };
    uint32_t const ces[9] = { 0x17F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_241)
{
    // 1F7B8 0062;	
    // (🞸) HEAVY SIX SPOKED ASTERISK	[17F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B8, 0x0062 };
    uint32_t const ces[9] = { 0x17F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_242)
{
    // 1F7B9 0021;	
    // (🞹) VERY HEAVY SIX SPOKED ASTERISK	[17F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B9, 0x0021 };
    uint32_t const ces[9] = { 0x17F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_243)
{
    // 1F7B9 003F;	
    // (🞹) VERY HEAVY SIX SPOKED ASTERISK	[17F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B9, 0x003F };
    uint32_t const ces[9] = { 0x17F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_244)
{
    // 1F7B9 0061;	
    // (🞹) VERY HEAVY SIX SPOKED ASTERISK	[17F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B9, 0x0061 };
    uint32_t const ces[9] = { 0x17F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_245)
{
    // 1F7B9 0041;	
    // (🞹) VERY HEAVY SIX SPOKED ASTERISK	[17F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7B9, 0x0041 };
    uint32_t const ces[9] = { 0x17F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_246)
{
    // 1F7B9 0062;	
    // (🞹) VERY HEAVY SIX SPOKED ASTERISK	[17F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B9, 0x0062 };
    uint32_t const ces[9] = { 0x17F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_247)
{
    // 1F7BA 0021;	
    // (🞺) EXTREMELY HEAVY SIX SPOKED ASTERISK	[17F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7BA, 0x0021 };
    uint32_t const ces[9] = { 0x17F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_248)
{
    // 1F7BA 003F;	
    // (🞺) EXTREMELY HEAVY SIX SPOKED ASTERISK	[17F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7BA, 0x003F };
    uint32_t const ces[9] = { 0x17F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_249)
{
    // 1F7BA 0061;	
    // (🞺) EXTREMELY HEAVY SIX SPOKED ASTERISK	[17F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7BA, 0x0061 };
    uint32_t const ces[9] = { 0x17F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_250)
{
    // 1F7BA 0041;	
    // (🞺) EXTREMELY HEAVY SIX SPOKED ASTERISK	[17F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7BA, 0x0041 };
    uint32_t const ces[9] = { 0x17F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_251)
{
    // 1F7BA 0062;	
    // (🞺) EXTREMELY HEAVY SIX SPOKED ASTERISK	[17F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7BA, 0x0062 };
    uint32_t const ces[9] = { 0x17F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_252)
{
    // 1F7BB 0021;	
    // (🞻) LIGHT EIGHT SPOKED ASTERISK	[17F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7BB, 0x0021 };
    uint32_t const ces[9] = { 0x17F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_253)
{
    // 1F7BB 003F;	
    // (🞻) LIGHT EIGHT SPOKED ASTERISK	[17F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7BB, 0x003F };
    uint32_t const ces[9] = { 0x17F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_254)
{
    // 1F7BB 0061;	
    // (🞻) LIGHT EIGHT SPOKED ASTERISK	[17F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7BB, 0x0061 };
    uint32_t const ces[9] = { 0x17F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_255)
{
    // 1F7BB 0041;	
    // (🞻) LIGHT EIGHT SPOKED ASTERISK	[17F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7BB, 0x0041 };
    uint32_t const ces[9] = { 0x17F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_256)
{
    // 1F7BB 0062;	
    // (🞻) LIGHT EIGHT SPOKED ASTERISK	[17F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7BB, 0x0062 };
    uint32_t const ces[9] = { 0x17F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_257)
{
    // 1F7BC 0021;	
    // (🞼) MEDIUM EIGHT SPOKED ASTERISK	[17F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7BC, 0x0021 };
    uint32_t const ces[9] = { 0x17F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_258)
{
    // 1F7BC 003F;	
    // (🞼) MEDIUM EIGHT SPOKED ASTERISK	[17F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7BC, 0x003F };
    uint32_t const ces[9] = { 0x17F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_259)
{
    // 1F7BC 0061;	
    // (🞼) MEDIUM EIGHT SPOKED ASTERISK	[17F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7BC, 0x0061 };
    uint32_t const ces[9] = { 0x17F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_260)
{
    // 1F7BC 0041;	
    // (🞼) MEDIUM EIGHT SPOKED ASTERISK	[17F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7BC, 0x0041 };
    uint32_t const ces[9] = { 0x17F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_261)
{
    // 1F7BC 0062;	
    // (🞼) MEDIUM EIGHT SPOKED ASTERISK	[17F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7BC, 0x0062 };
    uint32_t const ces[9] = { 0x17F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_262)
{
    // 1F7BD 0021;	
    // (🞽) BOLD EIGHT SPOKED ASTERISK	[17F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7BD, 0x0021 };
    uint32_t const ces[9] = { 0x17F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_263)
{
    // 1F7BD 003F;	
    // (🞽) BOLD EIGHT SPOKED ASTERISK	[17F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7BD, 0x003F };
    uint32_t const ces[9] = { 0x17F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_264)
{
    // 1F7BD 0061;	
    // (🞽) BOLD EIGHT SPOKED ASTERISK	[17F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7BD, 0x0061 };
    uint32_t const ces[9] = { 0x17F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_265)
{
    // 1F7BD 0041;	
    // (🞽) BOLD EIGHT SPOKED ASTERISK	[17F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7BD, 0x0041 };
    uint32_t const ces[9] = { 0x17F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_266)
{
    // 1F7BD 0062;	
    // (🞽) BOLD EIGHT SPOKED ASTERISK	[17F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7BD, 0x0062 };
    uint32_t const ces[9] = { 0x17F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_267)
{
    // 1F7BE 0021;	
    // (🞾) HEAVY EIGHT SPOKED ASTERISK	[17F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7BE, 0x0021 };
    uint32_t const ces[9] = { 0x17F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_268)
{
    // 1F7BE 003F;	
    // (🞾) HEAVY EIGHT SPOKED ASTERISK	[17F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7BE, 0x003F };
    uint32_t const ces[9] = { 0x17F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_269)
{
    // 1F7BE 0061;	
    // (🞾) HEAVY EIGHT SPOKED ASTERISK	[17F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7BE, 0x0061 };
    uint32_t const ces[9] = { 0x17F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_270)
{
    // 1F7BE 0041;	
    // (🞾) HEAVY EIGHT SPOKED ASTERISK	[17F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7BE, 0x0041 };
    uint32_t const ces[9] = { 0x17F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_271)
{
    // 1F7BE 0062;	
    // (🞾) HEAVY EIGHT SPOKED ASTERISK	[17F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7BE, 0x0062 };
    uint32_t const ces[9] = { 0x17F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_272)
{
    // 1F7BF 0021;	
    // (🞿) VERY HEAVY EIGHT SPOKED ASTERISK	[17F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7BF, 0x0021 };
    uint32_t const ces[9] = { 0x17F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_273)
{
    // 1F7BF 003F;	
    // (🞿) VERY HEAVY EIGHT SPOKED ASTERISK	[17F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7BF, 0x003F };
    uint32_t const ces[9] = { 0x17F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_274)
{
    // 1F7BF 0061;	
    // (🞿) VERY HEAVY EIGHT SPOKED ASTERISK	[17F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7BF, 0x0061 };
    uint32_t const ces[9] = { 0x17F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_275)
{
    // 1F7BF 0041;	
    // (🞿) VERY HEAVY EIGHT SPOKED ASTERISK	[17F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7BF, 0x0041 };
    uint32_t const ces[9] = { 0x17F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_276)
{
    // 1F7BF 0062;	
    // (🞿) VERY HEAVY EIGHT SPOKED ASTERISK	[17F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7BF, 0x0062 };
    uint32_t const ces[9] = { 0x17F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_277)
{
    // 1F7C0 0021;	
    // (🟀) LIGHT THREE POINTED BLACK STAR	[17FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C0, 0x0021 };
    uint32_t const ces[9] = { 0x17FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_278)
{
    // 1F7C0 003F;	
    // (🟀) LIGHT THREE POINTED BLACK STAR	[17FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C0, 0x003F };
    uint32_t const ces[9] = { 0x17FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_279)
{
    // 1F7C0 0061;	
    // (🟀) LIGHT THREE POINTED BLACK STAR	[17FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C0, 0x0061 };
    uint32_t const ces[9] = { 0x17FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_280)
{
    // 1F7C0 0041;	
    // (🟀) LIGHT THREE POINTED BLACK STAR	[17FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7C0, 0x0041 };
    uint32_t const ces[9] = { 0x17FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_281)
{
    // 1F7C0 0062;	
    // (🟀) LIGHT THREE POINTED BLACK STAR	[17FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C0, 0x0062 };
    uint32_t const ces[9] = { 0x17FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_282)
{
    // 1F7C1 0021;	
    // (🟁) MEDIUM THREE POINTED BLACK STAR	[17FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C1, 0x0021 };
    uint32_t const ces[9] = { 0x17FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_283)
{
    // 1F7C1 003F;	
    // (🟁) MEDIUM THREE POINTED BLACK STAR	[17FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C1, 0x003F };
    uint32_t const ces[9] = { 0x17FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_284)
{
    // 1F7C1 0061;	
    // (🟁) MEDIUM THREE POINTED BLACK STAR	[17FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C1, 0x0061 };
    uint32_t const ces[9] = { 0x17FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_285)
{
    // 1F7C1 0041;	
    // (🟁) MEDIUM THREE POINTED BLACK STAR	[17FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7C1, 0x0041 };
    uint32_t const ces[9] = { 0x17FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_286)
{
    // 1F7C1 0062;	
    // (🟁) MEDIUM THREE POINTED BLACK STAR	[17FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C1, 0x0062 };
    uint32_t const ces[9] = { 0x17FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_287)
{
    // 1F7C2 0021;	
    // (🟂) THREE POINTED BLACK STAR	[17FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C2, 0x0021 };
    uint32_t const ces[9] = { 0x17FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_288)
{
    // 1F7C2 003F;	
    // (🟂) THREE POINTED BLACK STAR	[17FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C2, 0x003F };
    uint32_t const ces[9] = { 0x17FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_289)
{
    // 1F7C2 0061;	
    // (🟂) THREE POINTED BLACK STAR	[17FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C2, 0x0061 };
    uint32_t const ces[9] = { 0x17FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_290)
{
    // 1F7C2 0041;	
    // (🟂) THREE POINTED BLACK STAR	[17FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7C2, 0x0041 };
    uint32_t const ces[9] = { 0x17FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_291)
{
    // 1F7C2 0062;	
    // (🟂) THREE POINTED BLACK STAR	[17FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C2, 0x0062 };
    uint32_t const ces[9] = { 0x17FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_292)
{
    // 1F7C3 0021;	
    // (🟃) MEDIUM THREE POINTED PINWHEEL STAR	[17FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C3, 0x0021 };
    uint32_t const ces[9] = { 0x17FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_293)
{
    // 1F7C3 003F;	
    // (🟃) MEDIUM THREE POINTED PINWHEEL STAR	[17FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C3, 0x003F };
    uint32_t const ces[9] = { 0x17FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_294)
{
    // 1F7C3 0061;	
    // (🟃) MEDIUM THREE POINTED PINWHEEL STAR	[17FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C3, 0x0061 };
    uint32_t const ces[9] = { 0x17FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_295)
{
    // 1F7C3 0041;	
    // (🟃) MEDIUM THREE POINTED PINWHEEL STAR	[17FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7C3, 0x0041 };
    uint32_t const ces[9] = { 0x17FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_296)
{
    // 1F7C3 0062;	
    // (🟃) MEDIUM THREE POINTED PINWHEEL STAR	[17FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C3, 0x0062 };
    uint32_t const ces[9] = { 0x17FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_297)
{
    // 1F7C4 0021;	
    // (🟄) LIGHT FOUR POINTED BLACK STAR	[17FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C4, 0x0021 };
    uint32_t const ces[9] = { 0x17FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_298)
{
    // 1F7C4 003F;	
    // (🟄) LIGHT FOUR POINTED BLACK STAR	[17FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C4, 0x003F };
    uint32_t const ces[9] = { 0x17FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_299)
{
    // 1F7C4 0061;	
    // (🟄) LIGHT FOUR POINTED BLACK STAR	[17FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C4, 0x0061 };
    uint32_t const ces[9] = { 0x17FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_300)
{
    // 1F7C4 0041;	
    // (🟄) LIGHT FOUR POINTED BLACK STAR	[17FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7C4, 0x0041 };
    uint32_t const ces[9] = { 0x17FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_301)
{
    // 1F7C4 0062;	
    // (🟄) LIGHT FOUR POINTED BLACK STAR	[17FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C4, 0x0062 };
    uint32_t const ces[9] = { 0x17FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_302)
{
    // 1F7C5 0021;	
    // (🟅) MEDIUM FOUR POINTED BLACK STAR	[17FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C5, 0x0021 };
    uint32_t const ces[9] = { 0x17FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_303)
{
    // 1F7C5 003F;	
    // (🟅) MEDIUM FOUR POINTED BLACK STAR	[17FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C5, 0x003F };
    uint32_t const ces[9] = { 0x17FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_304)
{
    // 1F7C5 0061;	
    // (🟅) MEDIUM FOUR POINTED BLACK STAR	[17FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C5, 0x0061 };
    uint32_t const ces[9] = { 0x17FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_305)
{
    // 1F7C5 0041;	
    // (🟅) MEDIUM FOUR POINTED BLACK STAR	[17FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7C5, 0x0041 };
    uint32_t const ces[9] = { 0x17FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_306)
{
    // 1F7C5 0062;	
    // (🟅) MEDIUM FOUR POINTED BLACK STAR	[17FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C5, 0x0062 };
    uint32_t const ces[9] = { 0x17FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_307)
{
    // 1F7C6 0021;	
    // (🟆) FOUR POINTED BLACK STAR	[1800 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C6, 0x0021 };
    uint32_t const ces[9] = { 0x1800, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_308)
{
    // 1F7C6 003F;	
    // (🟆) FOUR POINTED BLACK STAR	[1800 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C6, 0x003F };
    uint32_t const ces[9] = { 0x1800, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_309)
{
    // 1F7C6 0061;	
    // (🟆) FOUR POINTED BLACK STAR	[1800 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C6, 0x0061 };
    uint32_t const ces[9] = { 0x1800, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_310)
{
    // 1F7C6 0041;	
    // (🟆) FOUR POINTED BLACK STAR	[1800 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7C6, 0x0041 };
    uint32_t const ces[9] = { 0x1800, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_311)
{
    // 1F7C6 0062;	
    // (🟆) FOUR POINTED BLACK STAR	[1800 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C6, 0x0062 };
    uint32_t const ces[9] = { 0x1800, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_312)
{
    // 1F7C7 0021;	
    // (🟇) MEDIUM FOUR POINTED PINWHEEL STAR	[1801 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C7, 0x0021 };
    uint32_t const ces[9] = { 0x1801, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_313)
{
    // 1F7C7 003F;	
    // (🟇) MEDIUM FOUR POINTED PINWHEEL STAR	[1801 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C7, 0x003F };
    uint32_t const ces[9] = { 0x1801, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_314)
{
    // 1F7C7 0061;	
    // (🟇) MEDIUM FOUR POINTED PINWHEEL STAR	[1801 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C7, 0x0061 };
    uint32_t const ces[9] = { 0x1801, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_315)
{
    // 1F7C7 0041;	
    // (🟇) MEDIUM FOUR POINTED PINWHEEL STAR	[1801 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7C7, 0x0041 };
    uint32_t const ces[9] = { 0x1801, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_316)
{
    // 1F7C7 0062;	
    // (🟇) MEDIUM FOUR POINTED PINWHEEL STAR	[1801 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C7, 0x0062 };
    uint32_t const ces[9] = { 0x1801, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_317)
{
    // 1F7C8 0021;	
    // (🟈) REVERSE LIGHT FOUR POINTED PINWHEEL STAR	[1802 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C8, 0x0021 };
    uint32_t const ces[9] = { 0x1802, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_318)
{
    // 1F7C8 003F;	
    // (🟈) REVERSE LIGHT FOUR POINTED PINWHEEL STAR	[1802 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C8, 0x003F };
    uint32_t const ces[9] = { 0x1802, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_319)
{
    // 1F7C8 0061;	
    // (🟈) REVERSE LIGHT FOUR POINTED PINWHEEL STAR	[1802 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C8, 0x0061 };
    uint32_t const ces[9] = { 0x1802, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_320)
{
    // 1F7C8 0041;	
    // (🟈) REVERSE LIGHT FOUR POINTED PINWHEEL STAR	[1802 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7C8, 0x0041 };
    uint32_t const ces[9] = { 0x1802, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_321)
{
    // 1F7C8 0062;	
    // (🟈) REVERSE LIGHT FOUR POINTED PINWHEEL STAR	[1802 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C8, 0x0062 };
    uint32_t const ces[9] = { 0x1802, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_322)
{
    // 1F7C9 0021;	
    // (🟉) LIGHT FIVE POINTED BLACK STAR	[1803 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C9, 0x0021 };
    uint32_t const ces[9] = { 0x1803, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_323)
{
    // 1F7C9 003F;	
    // (🟉) LIGHT FIVE POINTED BLACK STAR	[1803 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C9, 0x003F };
    uint32_t const ces[9] = { 0x1803, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_324)
{
    // 1F7C9 0061;	
    // (🟉) LIGHT FIVE POINTED BLACK STAR	[1803 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C9, 0x0061 };
    uint32_t const ces[9] = { 0x1803, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_325)
{
    // 1F7C9 0041;	
    // (🟉) LIGHT FIVE POINTED BLACK STAR	[1803 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7C9, 0x0041 };
    uint32_t const ces[9] = { 0x1803, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_326)
{
    // 1F7C9 0062;	
    // (🟉) LIGHT FIVE POINTED BLACK STAR	[1803 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C9, 0x0062 };
    uint32_t const ces[9] = { 0x1803, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_327)
{
    // 1F7CA 0021;	
    // (🟊) HEAVY FIVE POINTED BLACK STAR	[1804 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7CA, 0x0021 };
    uint32_t const ces[9] = { 0x1804, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_328)
{
    // 1F7CA 003F;	
    // (🟊) HEAVY FIVE POINTED BLACK STAR	[1804 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7CA, 0x003F };
    uint32_t const ces[9] = { 0x1804, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_329)
{
    // 1F7CA 0061;	
    // (🟊) HEAVY FIVE POINTED BLACK STAR	[1804 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7CA, 0x0061 };
    uint32_t const ces[9] = { 0x1804, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_330)
{
    // 1F7CA 0041;	
    // (🟊) HEAVY FIVE POINTED BLACK STAR	[1804 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7CA, 0x0041 };
    uint32_t const ces[9] = { 0x1804, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_331)
{
    // 1F7CA 0062;	
    // (🟊) HEAVY FIVE POINTED BLACK STAR	[1804 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7CA, 0x0062 };
    uint32_t const ces[9] = { 0x1804, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_332)
{
    // 1F7CB 0021;	
    // (🟋) MEDIUM SIX POINTED BLACK STAR	[1805 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7CB, 0x0021 };
    uint32_t const ces[9] = { 0x1805, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_333)
{
    // 1F7CB 003F;	
    // (🟋) MEDIUM SIX POINTED BLACK STAR	[1805 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7CB, 0x003F };
    uint32_t const ces[9] = { 0x1805, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_334)
{
    // 1F7CB 0061;	
    // (🟋) MEDIUM SIX POINTED BLACK STAR	[1805 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7CB, 0x0061 };
    uint32_t const ces[9] = { 0x1805, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_335)
{
    // 1F7CB 0041;	
    // (🟋) MEDIUM SIX POINTED BLACK STAR	[1805 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7CB, 0x0041 };
    uint32_t const ces[9] = { 0x1805, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_336)
{
    // 1F7CB 0062;	
    // (🟋) MEDIUM SIX POINTED BLACK STAR	[1805 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7CB, 0x0062 };
    uint32_t const ces[9] = { 0x1805, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_337)
{
    // 1F7CC 0021;	
    // (🟌) HEAVY SIX POINTED BLACK STAR	[1806 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7CC, 0x0021 };
    uint32_t const ces[9] = { 0x1806, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_338)
{
    // 1F7CC 003F;	
    // (🟌) HEAVY SIX POINTED BLACK STAR	[1806 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7CC, 0x003F };
    uint32_t const ces[9] = { 0x1806, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_339)
{
    // 1F7CC 0061;	
    // (🟌) HEAVY SIX POINTED BLACK STAR	[1806 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7CC, 0x0061 };
    uint32_t const ces[9] = { 0x1806, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_340)
{
    // 1F7CC 0041;	
    // (🟌) HEAVY SIX POINTED BLACK STAR	[1806 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7CC, 0x0041 };
    uint32_t const ces[9] = { 0x1806, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_341)
{
    // 1F7CC 0062;	
    // (🟌) HEAVY SIX POINTED BLACK STAR	[1806 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7CC, 0x0062 };
    uint32_t const ces[9] = { 0x1806, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_342)
{
    // 1F7CD 0021;	
    // (🟍) SIX POINTED PINWHEEL STAR	[1807 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7CD, 0x0021 };
    uint32_t const ces[9] = { 0x1807, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_343)
{
    // 1F7CD 003F;	
    // (🟍) SIX POINTED PINWHEEL STAR	[1807 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7CD, 0x003F };
    uint32_t const ces[9] = { 0x1807, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_344)
{
    // 1F7CD 0061;	
    // (🟍) SIX POINTED PINWHEEL STAR	[1807 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7CD, 0x0061 };
    uint32_t const ces[9] = { 0x1807, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_345)
{
    // 1F7CD 0041;	
    // (🟍) SIX POINTED PINWHEEL STAR	[1807 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7CD, 0x0041 };
    uint32_t const ces[9] = { 0x1807, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_346)
{
    // 1F7CD 0062;	
    // (🟍) SIX POINTED PINWHEEL STAR	[1807 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7CD, 0x0062 };
    uint32_t const ces[9] = { 0x1807, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_347)
{
    // 1F7CE 0021;	
    // (🟎) MEDIUM EIGHT POINTED BLACK STAR	[1808 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7CE, 0x0021 };
    uint32_t const ces[9] = { 0x1808, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_348)
{
    // 1F7CE 003F;	
    // (🟎) MEDIUM EIGHT POINTED BLACK STAR	[1808 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7CE, 0x003F };
    uint32_t const ces[9] = { 0x1808, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_349)
{
    // 1F7CE 0061;	
    // (🟎) MEDIUM EIGHT POINTED BLACK STAR	[1808 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7CE, 0x0061 };
    uint32_t const ces[9] = { 0x1808, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_350)
{
    // 1F7CE 0041;	
    // (🟎) MEDIUM EIGHT POINTED BLACK STAR	[1808 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7CE, 0x0041 };
    uint32_t const ces[9] = { 0x1808, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_351)
{
    // 1F7CE 0062;	
    // (🟎) MEDIUM EIGHT POINTED BLACK STAR	[1808 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7CE, 0x0062 };
    uint32_t const ces[9] = { 0x1808, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_352)
{
    // 1F7CF 0021;	
    // (🟏) HEAVY EIGHT POINTED BLACK STAR	[1809 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7CF, 0x0021 };
    uint32_t const ces[9] = { 0x1809, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_353)
{
    // 1F7CF 003F;	
    // (🟏) HEAVY EIGHT POINTED BLACK STAR	[1809 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7CF, 0x003F };
    uint32_t const ces[9] = { 0x1809, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_354)
{
    // 1F7CF 0061;	
    // (🟏) HEAVY EIGHT POINTED BLACK STAR	[1809 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7CF, 0x0061 };
    uint32_t const ces[9] = { 0x1809, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_355)
{
    // 1F7CF 0041;	
    // (🟏) HEAVY EIGHT POINTED BLACK STAR	[1809 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7CF, 0x0041 };
    uint32_t const ces[9] = { 0x1809, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_356)
{
    // 1F7CF 0062;	
    // (🟏) HEAVY EIGHT POINTED BLACK STAR	[1809 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7CF, 0x0062 };
    uint32_t const ces[9] = { 0x1809, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_357)
{
    // 1F7D0 0021;	
    // (🟐) VERY HEAVY EIGHT POINTED BLACK STAR	[180A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7D0, 0x0021 };
    uint32_t const ces[9] = { 0x180A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_358)
{
    // 1F7D0 003F;	
    // (🟐) VERY HEAVY EIGHT POINTED BLACK STAR	[180A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7D0, 0x003F };
    uint32_t const ces[9] = { 0x180A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_359)
{
    // 1F7D0 0061;	
    // (🟐) VERY HEAVY EIGHT POINTED BLACK STAR	[180A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7D0, 0x0061 };
    uint32_t const ces[9] = { 0x180A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_360)
{
    // 1F7D0 0041;	
    // (🟐) VERY HEAVY EIGHT POINTED BLACK STAR	[180A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7D0, 0x0041 };
    uint32_t const ces[9] = { 0x180A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_361)
{
    // 1F7D0 0062;	
    // (🟐) VERY HEAVY EIGHT POINTED BLACK STAR	[180A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7D0, 0x0062 };
    uint32_t const ces[9] = { 0x180A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_362)
{
    // 1F7D1 0021;	
    // (🟑) HEAVY EIGHT POINTED PINWHEEL STAR	[180B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7D1, 0x0021 };
    uint32_t const ces[9] = { 0x180B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_363)
{
    // 1F7D1 003F;	
    // (🟑) HEAVY EIGHT POINTED PINWHEEL STAR	[180B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7D1, 0x003F };
    uint32_t const ces[9] = { 0x180B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_364)
{
    // 1F7D1 0061;	
    // (🟑) HEAVY EIGHT POINTED PINWHEEL STAR	[180B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7D1, 0x0061 };
    uint32_t const ces[9] = { 0x180B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_365)
{
    // 1F7D1 0041;	
    // (🟑) HEAVY EIGHT POINTED PINWHEEL STAR	[180B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7D1, 0x0041 };
    uint32_t const ces[9] = { 0x180B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_366)
{
    // 1F7D1 0062;	
    // (🟑) HEAVY EIGHT POINTED PINWHEEL STAR	[180B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7D1, 0x0062 };
    uint32_t const ces[9] = { 0x180B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_367)
{
    // 1F7D2 0021;	
    // (🟒) LIGHT TWELVE POINTED BLACK STAR	[180C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7D2, 0x0021 };
    uint32_t const ces[9] = { 0x180C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_368)
{
    // 1F7D2 003F;	
    // (🟒) LIGHT TWELVE POINTED BLACK STAR	[180C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7D2, 0x003F };
    uint32_t const ces[9] = { 0x180C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_369)
{
    // 1F7D2 0061;	
    // (🟒) LIGHT TWELVE POINTED BLACK STAR	[180C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7D2, 0x0061 };
    uint32_t const ces[9] = { 0x180C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_370)
{
    // 1F7D2 0041;	
    // (🟒) LIGHT TWELVE POINTED BLACK STAR	[180C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7D2, 0x0041 };
    uint32_t const ces[9] = { 0x180C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_371)
{
    // 1F7D2 0062;	
    // (🟒) LIGHT TWELVE POINTED BLACK STAR	[180C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7D2, 0x0062 };
    uint32_t const ces[9] = { 0x180C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_372)
{
    // 1F7D3 0021;	
    // (🟓) HEAVY TWELVE POINTED BLACK STAR	[180D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7D3, 0x0021 };
    uint32_t const ces[9] = { 0x180D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_373)
{
    // 1F7D3 003F;	
    // (🟓) HEAVY TWELVE POINTED BLACK STAR	[180D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7D3, 0x003F };
    uint32_t const ces[9] = { 0x180D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_374)
{
    // 1F7D3 0061;	
    // (🟓) HEAVY TWELVE POINTED BLACK STAR	[180D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7D3, 0x0061 };
    uint32_t const ces[9] = { 0x180D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_375)
{
    // 1F7D3 0041;	
    // (🟓) HEAVY TWELVE POINTED BLACK STAR	[180D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7D3, 0x0041 };
    uint32_t const ces[9] = { 0x180D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_376)
{
    // 1F7D3 0062;	
    // (🟓) HEAVY TWELVE POINTED BLACK STAR	[180D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7D3, 0x0062 };
    uint32_t const ces[9] = { 0x180D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_377)
{
    // 1F7D4 0021;	
    // (🟔) HEAVY TWELVE POINTED PINWHEEL STAR	[180E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7D4, 0x0021 };
    uint32_t const ces[9] = { 0x180E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_378)
{
    // 1F7D4 003F;	
    // (🟔) HEAVY TWELVE POINTED PINWHEEL STAR	[180E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7D4, 0x003F };
    uint32_t const ces[9] = { 0x180E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_379)
{
    // 1F7D4 0061;	
    // (🟔) HEAVY TWELVE POINTED PINWHEEL STAR	[180E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7D4, 0x0061 };
    uint32_t const ces[9] = { 0x180E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_380)
{
    // 1F7D4 0041;	
    // (🟔) HEAVY TWELVE POINTED PINWHEEL STAR	[180E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F7D4, 0x0041 };
    uint32_t const ces[9] = { 0x180E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_381)
{
    // 1F7D4 0062;	
    // (🟔) HEAVY TWELVE POINTED PINWHEEL STAR	[180E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F7D4, 0x0062 };
    uint32_t const ces[9] = { 0x180E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_382)
{
    // 1F800 0021;	
    // (🠀) LEFTWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD	[180F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F800, 0x0021 };
    uint32_t const ces[9] = { 0x180F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_383)
{
    // 1F800 003F;	
    // (🠀) LEFTWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD	[180F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F800, 0x003F };
    uint32_t const ces[9] = { 0x180F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_384)
{
    // 1F800 0061;	
    // (🠀) LEFTWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD	[180F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F800, 0x0061 };
    uint32_t const ces[9] = { 0x180F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_385)
{
    // 1F800 0041;	
    // (🠀) LEFTWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD	[180F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F800, 0x0041 };
    uint32_t const ces[9] = { 0x180F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_386)
{
    // 1F800 0062;	
    // (🠀) LEFTWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD	[180F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F800, 0x0062 };
    uint32_t const ces[9] = { 0x180F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_387)
{
    // 1F801 0021;	
    // (🠁) UPWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD	[1810 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F801, 0x0021 };
    uint32_t const ces[9] = { 0x1810, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_388)
{
    // 1F801 003F;	
    // (🠁) UPWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD	[1810 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F801, 0x003F };
    uint32_t const ces[9] = { 0x1810, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_389)
{
    // 1F801 0061;	
    // (🠁) UPWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD	[1810 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F801, 0x0061 };
    uint32_t const ces[9] = { 0x1810, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_390)
{
    // 1F801 0041;	
    // (🠁) UPWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD	[1810 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F801, 0x0041 };
    uint32_t const ces[9] = { 0x1810, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_391)
{
    // 1F801 0062;	
    // (🠁) UPWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD	[1810 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F801, 0x0062 };
    uint32_t const ces[9] = { 0x1810, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_392)
{
    // 1F802 0021;	
    // (🠂) RIGHTWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD	[1811 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F802, 0x0021 };
    uint32_t const ces[9] = { 0x1811, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_393)
{
    // 1F802 003F;	
    // (🠂) RIGHTWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD	[1811 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F802, 0x003F };
    uint32_t const ces[9] = { 0x1811, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_394)
{
    // 1F802 0061;	
    // (🠂) RIGHTWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD	[1811 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F802, 0x0061 };
    uint32_t const ces[9] = { 0x1811, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_395)
{
    // 1F802 0041;	
    // (🠂) RIGHTWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD	[1811 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F802, 0x0041 };
    uint32_t const ces[9] = { 0x1811, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_396)
{
    // 1F802 0062;	
    // (🠂) RIGHTWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD	[1811 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F802, 0x0062 };
    uint32_t const ces[9] = { 0x1811, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_397)
{
    // 1F803 0021;	
    // (🠃) DOWNWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD	[1812 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F803, 0x0021 };
    uint32_t const ces[9] = { 0x1812, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_398)
{
    // 1F803 003F;	
    // (🠃) DOWNWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD	[1812 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F803, 0x003F };
    uint32_t const ces[9] = { 0x1812, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_399)
{
    // 1F803 0061;	
    // (🠃) DOWNWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD	[1812 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F803, 0x0061 };
    uint32_t const ces[9] = { 0x1812, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_400)
{
    // 1F803 0041;	
    // (🠃) DOWNWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD	[1812 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F803, 0x0041 };
    uint32_t const ces[9] = { 0x1812, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_401)
{
    // 1F803 0062;	
    // (🠃) DOWNWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD	[1812 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F803, 0x0062 };
    uint32_t const ces[9] = { 0x1812, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_402)
{
    // 1F804 0021;	
    // (🠄) LEFTWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD	[1813 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F804, 0x0021 };
    uint32_t const ces[9] = { 0x1813, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_403)
{
    // 1F804 003F;	
    // (🠄) LEFTWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD	[1813 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F804, 0x003F };
    uint32_t const ces[9] = { 0x1813, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_404)
{
    // 1F804 0061;	
    // (🠄) LEFTWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD	[1813 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F804, 0x0061 };
    uint32_t const ces[9] = { 0x1813, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_405)
{
    // 1F804 0041;	
    // (🠄) LEFTWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD	[1813 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F804, 0x0041 };
    uint32_t const ces[9] = { 0x1813, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_406)
{
    // 1F804 0062;	
    // (🠄) LEFTWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD	[1813 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F804, 0x0062 };
    uint32_t const ces[9] = { 0x1813, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_407)
{
    // 1F805 0021;	
    // (🠅) UPWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD	[1814 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F805, 0x0021 };
    uint32_t const ces[9] = { 0x1814, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_408)
{
    // 1F805 003F;	
    // (🠅) UPWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD	[1814 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F805, 0x003F };
    uint32_t const ces[9] = { 0x1814, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_409)
{
    // 1F805 0061;	
    // (🠅) UPWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD	[1814 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F805, 0x0061 };
    uint32_t const ces[9] = { 0x1814, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_410)
{
    // 1F805 0041;	
    // (🠅) UPWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD	[1814 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F805, 0x0041 };
    uint32_t const ces[9] = { 0x1814, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_411)
{
    // 1F805 0062;	
    // (🠅) UPWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD	[1814 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F805, 0x0062 };
    uint32_t const ces[9] = { 0x1814, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_412)
{
    // 1F806 0021;	
    // (🠆) RIGHTWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD	[1815 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F806, 0x0021 };
    uint32_t const ces[9] = { 0x1815, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_413)
{
    // 1F806 003F;	
    // (🠆) RIGHTWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD	[1815 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F806, 0x003F };
    uint32_t const ces[9] = { 0x1815, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_414)
{
    // 1F806 0061;	
    // (🠆) RIGHTWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD	[1815 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F806, 0x0061 };
    uint32_t const ces[9] = { 0x1815, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_415)
{
    // 1F806 0041;	
    // (🠆) RIGHTWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD	[1815 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F806, 0x0041 };
    uint32_t const ces[9] = { 0x1815, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_416)
{
    // 1F806 0062;	
    // (🠆) RIGHTWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD	[1815 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F806, 0x0062 };
    uint32_t const ces[9] = { 0x1815, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_417)
{
    // 1F807 0021;	
    // (🠇) DOWNWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD	[1816 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F807, 0x0021 };
    uint32_t const ces[9] = { 0x1816, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_418)
{
    // 1F807 003F;	
    // (🠇) DOWNWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD	[1816 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F807, 0x003F };
    uint32_t const ces[9] = { 0x1816, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_419)
{
    // 1F807 0061;	
    // (🠇) DOWNWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD	[1816 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F807, 0x0061 };
    uint32_t const ces[9] = { 0x1816, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_420)
{
    // 1F807 0041;	
    // (🠇) DOWNWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD	[1816 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F807, 0x0041 };
    uint32_t const ces[9] = { 0x1816, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_421)
{
    // 1F807 0062;	
    // (🠇) DOWNWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD	[1816 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F807, 0x0062 };
    uint32_t const ces[9] = { 0x1816, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_422)
{
    // 1F808 0021;	
    // (🠈) LEFTWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD	[1817 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F808, 0x0021 };
    uint32_t const ces[9] = { 0x1817, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_423)
{
    // 1F808 003F;	
    // (🠈) LEFTWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD	[1817 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F808, 0x003F };
    uint32_t const ces[9] = { 0x1817, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_424)
{
    // 1F808 0061;	
    // (🠈) LEFTWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD	[1817 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F808, 0x0061 };
    uint32_t const ces[9] = { 0x1817, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_425)
{
    // 1F808 0041;	
    // (🠈) LEFTWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD	[1817 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F808, 0x0041 };
    uint32_t const ces[9] = { 0x1817, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_426)
{
    // 1F808 0062;	
    // (🠈) LEFTWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD	[1817 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F808, 0x0062 };
    uint32_t const ces[9] = { 0x1817, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_427)
{
    // 1F809 0021;	
    // (🠉) UPWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD	[1818 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F809, 0x0021 };
    uint32_t const ces[9] = { 0x1818, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_428)
{
    // 1F809 003F;	
    // (🠉) UPWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD	[1818 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F809, 0x003F };
    uint32_t const ces[9] = { 0x1818, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_429)
{
    // 1F809 0061;	
    // (🠉) UPWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD	[1818 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F809, 0x0061 };
    uint32_t const ces[9] = { 0x1818, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_430)
{
    // 1F809 0041;	
    // (🠉) UPWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD	[1818 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F809, 0x0041 };
    uint32_t const ces[9] = { 0x1818, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_431)
{
    // 1F809 0062;	
    // (🠉) UPWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD	[1818 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F809, 0x0062 };
    uint32_t const ces[9] = { 0x1818, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_432)
{
    // 1F80A 0021;	
    // (🠊) RIGHTWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD	[1819 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F80A, 0x0021 };
    uint32_t const ces[9] = { 0x1819, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_433)
{
    // 1F80A 003F;	
    // (🠊) RIGHTWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD	[1819 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F80A, 0x003F };
    uint32_t const ces[9] = { 0x1819, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_434)
{
    // 1F80A 0061;	
    // (🠊) RIGHTWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD	[1819 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F80A, 0x0061 };
    uint32_t const ces[9] = { 0x1819, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_435)
{
    // 1F80A 0041;	
    // (🠊) RIGHTWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD	[1819 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F80A, 0x0041 };
    uint32_t const ces[9] = { 0x1819, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_436)
{
    // 1F80A 0062;	
    // (🠊) RIGHTWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD	[1819 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F80A, 0x0062 };
    uint32_t const ces[9] = { 0x1819, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_437)
{
    // 1F80B 0021;	
    // (🠋) DOWNWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD	[181A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F80B, 0x0021 };
    uint32_t const ces[9] = { 0x181A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_438)
{
    // 1F80B 003F;	
    // (🠋) DOWNWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD	[181A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F80B, 0x003F };
    uint32_t const ces[9] = { 0x181A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_439)
{
    // 1F80B 0061;	
    // (🠋) DOWNWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD	[181A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F80B, 0x0061 };
    uint32_t const ces[9] = { 0x181A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_440)
{
    // 1F80B 0041;	
    // (🠋) DOWNWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD	[181A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F80B, 0x0041 };
    uint32_t const ces[9] = { 0x181A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_441)
{
    // 1F80B 0062;	
    // (🠋) DOWNWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD	[181A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F80B, 0x0062 };
    uint32_t const ces[9] = { 0x181A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_442)
{
    // 1F810 0021;	
    // (🠐) LEFTWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD	[181B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F810, 0x0021 };
    uint32_t const ces[9] = { 0x181B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_443)
{
    // 1F810 003F;	
    // (🠐) LEFTWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD	[181B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F810, 0x003F };
    uint32_t const ces[9] = { 0x181B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_444)
{
    // 1F810 0061;	
    // (🠐) LEFTWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD	[181B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F810, 0x0061 };
    uint32_t const ces[9] = { 0x181B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_445)
{
    // 1F810 0041;	
    // (🠐) LEFTWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD	[181B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F810, 0x0041 };
    uint32_t const ces[9] = { 0x181B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_446)
{
    // 1F810 0062;	
    // (🠐) LEFTWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD	[181B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F810, 0x0062 };
    uint32_t const ces[9] = { 0x181B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_447)
{
    // 1F811 0021;	
    // (🠑) UPWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD	[181C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F811, 0x0021 };
    uint32_t const ces[9] = { 0x181C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_448)
{
    // 1F811 003F;	
    // (🠑) UPWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD	[181C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F811, 0x003F };
    uint32_t const ces[9] = { 0x181C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_449)
{
    // 1F811 0061;	
    // (🠑) UPWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD	[181C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F811, 0x0061 };
    uint32_t const ces[9] = { 0x181C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_450)
{
    // 1F811 0041;	
    // (🠑) UPWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD	[181C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F811, 0x0041 };
    uint32_t const ces[9] = { 0x181C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_451)
{
    // 1F811 0062;	
    // (🠑) UPWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD	[181C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F811, 0x0062 };
    uint32_t const ces[9] = { 0x181C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_452)
{
    // 1F812 0021;	
    // (🠒) RIGHTWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD	[181D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F812, 0x0021 };
    uint32_t const ces[9] = { 0x181D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_453)
{
    // 1F812 003F;	
    // (🠒) RIGHTWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD	[181D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F812, 0x003F };
    uint32_t const ces[9] = { 0x181D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_454)
{
    // 1F812 0061;	
    // (🠒) RIGHTWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD	[181D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F812, 0x0061 };
    uint32_t const ces[9] = { 0x181D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_455)
{
    // 1F812 0041;	
    // (🠒) RIGHTWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD	[181D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F812, 0x0041 };
    uint32_t const ces[9] = { 0x181D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_456)
{
    // 1F812 0062;	
    // (🠒) RIGHTWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD	[181D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F812, 0x0062 };
    uint32_t const ces[9] = { 0x181D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_457)
{
    // 1F813 0021;	
    // (🠓) DOWNWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD	[181E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F813, 0x0021 };
    uint32_t const ces[9] = { 0x181E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_458)
{
    // 1F813 003F;	
    // (🠓) DOWNWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD	[181E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F813, 0x003F };
    uint32_t const ces[9] = { 0x181E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_459)
{
    // 1F813 0061;	
    // (🠓) DOWNWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD	[181E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F813, 0x0061 };
    uint32_t const ces[9] = { 0x181E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_460)
{
    // 1F813 0041;	
    // (🠓) DOWNWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD	[181E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F813, 0x0041 };
    uint32_t const ces[9] = { 0x181E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_461)
{
    // 1F813 0062;	
    // (🠓) DOWNWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD	[181E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F813, 0x0062 };
    uint32_t const ces[9] = { 0x181E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_462)
{
    // 1F814 0021;	
    // (🠔) LEFTWARDS ARROW WITH EQUILATERAL ARROWHEAD	[181F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F814, 0x0021 };
    uint32_t const ces[9] = { 0x181F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_463)
{
    // 1F814 003F;	
    // (🠔) LEFTWARDS ARROW WITH EQUILATERAL ARROWHEAD	[181F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F814, 0x003F };
    uint32_t const ces[9] = { 0x181F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_464)
{
    // 1F814 0061;	
    // (🠔) LEFTWARDS ARROW WITH EQUILATERAL ARROWHEAD	[181F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F814, 0x0061 };
    uint32_t const ces[9] = { 0x181F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_465)
{
    // 1F814 0041;	
    // (🠔) LEFTWARDS ARROW WITH EQUILATERAL ARROWHEAD	[181F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F814, 0x0041 };
    uint32_t const ces[9] = { 0x181F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_466)
{
    // 1F814 0062;	
    // (🠔) LEFTWARDS ARROW WITH EQUILATERAL ARROWHEAD	[181F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F814, 0x0062 };
    uint32_t const ces[9] = { 0x181F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_467)
{
    // 1F815 0021;	
    // (🠕) UPWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1820 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F815, 0x0021 };
    uint32_t const ces[9] = { 0x1820, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_468)
{
    // 1F815 003F;	
    // (🠕) UPWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1820 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F815, 0x003F };
    uint32_t const ces[9] = { 0x1820, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_469)
{
    // 1F815 0061;	
    // (🠕) UPWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1820 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F815, 0x0061 };
    uint32_t const ces[9] = { 0x1820, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_470)
{
    // 1F815 0041;	
    // (🠕) UPWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1820 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F815, 0x0041 };
    uint32_t const ces[9] = { 0x1820, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_471)
{
    // 1F815 0062;	
    // (🠕) UPWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1820 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F815, 0x0062 };
    uint32_t const ces[9] = { 0x1820, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_472)
{
    // 1F816 0021;	
    // (🠖) RIGHTWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1821 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F816, 0x0021 };
    uint32_t const ces[9] = { 0x1821, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_473)
{
    // 1F816 003F;	
    // (🠖) RIGHTWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1821 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F816, 0x003F };
    uint32_t const ces[9] = { 0x1821, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_474)
{
    // 1F816 0061;	
    // (🠖) RIGHTWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1821 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F816, 0x0061 };
    uint32_t const ces[9] = { 0x1821, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_475)
{
    // 1F816 0041;	
    // (🠖) RIGHTWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1821 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F816, 0x0041 };
    uint32_t const ces[9] = { 0x1821, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_476)
{
    // 1F816 0062;	
    // (🠖) RIGHTWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1821 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F816, 0x0062 };
    uint32_t const ces[9] = { 0x1821, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_477)
{
    // 1F817 0021;	
    // (🠗) DOWNWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1822 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F817, 0x0021 };
    uint32_t const ces[9] = { 0x1822, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_478)
{
    // 1F817 003F;	
    // (🠗) DOWNWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1822 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F817, 0x003F };
    uint32_t const ces[9] = { 0x1822, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_479)
{
    // 1F817 0061;	
    // (🠗) DOWNWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1822 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F817, 0x0061 };
    uint32_t const ces[9] = { 0x1822, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_480)
{
    // 1F817 0041;	
    // (🠗) DOWNWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1822 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F817, 0x0041 };
    uint32_t const ces[9] = { 0x1822, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_481)
{
    // 1F817 0062;	
    // (🠗) DOWNWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1822 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F817, 0x0062 };
    uint32_t const ces[9] = { 0x1822, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_482)
{
    // 1F818 0021;	
    // (🠘) HEAVY LEFTWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1823 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F818, 0x0021 };
    uint32_t const ces[9] = { 0x1823, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_483)
{
    // 1F818 003F;	
    // (🠘) HEAVY LEFTWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1823 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F818, 0x003F };
    uint32_t const ces[9] = { 0x1823, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_484)
{
    // 1F818 0061;	
    // (🠘) HEAVY LEFTWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1823 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F818, 0x0061 };
    uint32_t const ces[9] = { 0x1823, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_485)
{
    // 1F818 0041;	
    // (🠘) HEAVY LEFTWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1823 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F818, 0x0041 };
    uint32_t const ces[9] = { 0x1823, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_486)
{
    // 1F818 0062;	
    // (🠘) HEAVY LEFTWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1823 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F818, 0x0062 };
    uint32_t const ces[9] = { 0x1823, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_487)
{
    // 1F819 0021;	
    // (🠙) HEAVY UPWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1824 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F819, 0x0021 };
    uint32_t const ces[9] = { 0x1824, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_488)
{
    // 1F819 003F;	
    // (🠙) HEAVY UPWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1824 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F819, 0x003F };
    uint32_t const ces[9] = { 0x1824, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_489)
{
    // 1F819 0061;	
    // (🠙) HEAVY UPWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1824 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F819, 0x0061 };
    uint32_t const ces[9] = { 0x1824, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_490)
{
    // 1F819 0041;	
    // (🠙) HEAVY UPWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1824 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F819, 0x0041 };
    uint32_t const ces[9] = { 0x1824, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_491)
{
    // 1F819 0062;	
    // (🠙) HEAVY UPWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1824 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F819, 0x0062 };
    uint32_t const ces[9] = { 0x1824, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_492)
{
    // 1F81A 0021;	
    // (🠚) HEAVY RIGHTWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1825 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F81A, 0x0021 };
    uint32_t const ces[9] = { 0x1825, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_493)
{
    // 1F81A 003F;	
    // (🠚) HEAVY RIGHTWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1825 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F81A, 0x003F };
    uint32_t const ces[9] = { 0x1825, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_494)
{
    // 1F81A 0061;	
    // (🠚) HEAVY RIGHTWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1825 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F81A, 0x0061 };
    uint32_t const ces[9] = { 0x1825, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_495)
{
    // 1F81A 0041;	
    // (🠚) HEAVY RIGHTWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1825 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F81A, 0x0041 };
    uint32_t const ces[9] = { 0x1825, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_496)
{
    // 1F81A 0062;	
    // (🠚) HEAVY RIGHTWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1825 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F81A, 0x0062 };
    uint32_t const ces[9] = { 0x1825, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_497)
{
    // 1F81B 0021;	
    // (🠛) HEAVY DOWNWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1826 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F81B, 0x0021 };
    uint32_t const ces[9] = { 0x1826, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_498)
{
    // 1F81B 003F;	
    // (🠛) HEAVY DOWNWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1826 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F81B, 0x003F };
    uint32_t const ces[9] = { 0x1826, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_068_499)
{
    // 1F81B 0061;	
    // (🠛) HEAVY DOWNWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1826 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F81B, 0x0061 };
    uint32_t const ces[9] = { 0x1826, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

