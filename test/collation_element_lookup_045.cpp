// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_045_000)
{
    // 1B75  ; [*0592.0020.0002] 
    // BALINESE MUSICAL SYMBOL RIGHT-HAND OPEN DAG

    uint32_t const cps[1] = { 0x1b75 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x592), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_001)
{
    // 1B76  ; [*0593.0020.0002] 
    // BALINESE MUSICAL SYMBOL RIGHT-HAND CLOSED TUK

    uint32_t const cps[1] = { 0x1b76 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x593), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_002)
{
    // 1B77  ; [*0594.0020.0002] 
    // BALINESE MUSICAL SYMBOL RIGHT-HAND CLOSED TAK

    uint32_t const cps[1] = { 0x1b77 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x594), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_003)
{
    // 1B78  ; [*0595.0020.0002] 
    // BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PANG

    uint32_t const cps[1] = { 0x1b78 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x595), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_004)
{
    // 1B79  ; [*0596.0020.0002] 
    // BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PUNG

    uint32_t const cps[1] = { 0x1b79 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x596), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_005)
{
    // 1B7A  ; [*0597.0020.0002] 
    // BALINESE MUSICAL SYMBOL LEFT-HAND CLOSED PLAK

    uint32_t const cps[1] = { 0x1b7a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x597), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_006)
{
    // 1B7B  ; [*0598.0020.0002] 
    // BALINESE MUSICAL SYMBOL LEFT-HAND CLOSED PLUK

    uint32_t const cps[1] = { 0x1b7b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x598), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_007)
{
    // 1B7C  ; [*0599.0020.0002] 
    // BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PING

    uint32_t const cps[1] = { 0x1b7c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x599), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_008)
{
    // 1B80  ; [.0000.00C4.0002] 
    // SUNDANESE SIGN PANYECEK

    uint32_t const cps[1] = { 0x1b80 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_009)
{
    // 1B81  ; [.0000.00CA.0002] 
    // SUNDANESE SIGN PANGLAYAR

    uint32_t const cps[1] = { 0x1b81 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xaa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_010)
{
    // 1B82  ; [.0000.00C5.0002] 
    // SUNDANESE SIGN PANGWISAD

    uint32_t const cps[1] = { 0x1b82 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_011)
{
    // 1B83  ; [.2D45.0020.0002] 
    // SUNDANESE LETTER A

    uint32_t const cps[1] = { 0x1b83 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d45), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_012)
{
    // 1B84  ; [.2D46.0020.0002] 
    // SUNDANESE LETTER I

    uint32_t const cps[1] = { 0x1b84 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d46), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_013)
{
    // 1B85  ; [.2D47.0020.0002] 
    // SUNDANESE LETTER U

    uint32_t const cps[1] = { 0x1b85 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d47), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_014)
{
    // 1B86  ; [.2D48.0020.0002] 
    // SUNDANESE LETTER AE

    uint32_t const cps[1] = { 0x1b86 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d48), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_015)
{
    // 1B87  ; [.2D49.0020.0002] 
    // SUNDANESE LETTER O

    uint32_t const cps[1] = { 0x1b87 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d49), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_016)
{
    // 1B88  ; [.2D4A.0020.0002] 
    // SUNDANESE LETTER E

    uint32_t const cps[1] = { 0x1b88 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d4a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_017)
{
    // 1B89  ; [.2D4B.0020.0002] 
    // SUNDANESE LETTER EU

    uint32_t const cps[1] = { 0x1b89 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d4b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_018)
{
    // 1B8A  ; [.2D4C.0020.0002] 
    // SUNDANESE LETTER KA

    uint32_t const cps[1] = { 0x1b8a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d4c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_019)
{
    // 1B8B  ; [.2D4E.0020.0002] 
    // SUNDANESE LETTER QA

    uint32_t const cps[1] = { 0x1b8b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d4e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_020)
{
    // 1B8C  ; [.2D4F.0020.0002] 
    // SUNDANESE LETTER GA

    uint32_t const cps[1] = { 0x1b8c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d4f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_021)
{
    // 1B8D  ; [.2D50.0020.0002] 
    // SUNDANESE LETTER NGA

    uint32_t const cps[1] = { 0x1b8d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d50), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_022)
{
    // 1B8E  ; [.2D51.0020.0002] 
    // SUNDANESE LETTER CA

    uint32_t const cps[1] = { 0x1b8e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d51), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_023)
{
    // 1B8F  ; [.2D52.0020.0002] 
    // SUNDANESE LETTER JA

    uint32_t const cps[1] = { 0x1b8f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d52), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_024)
{
    // 1B90  ; [.2D53.0020.0002] 
    // SUNDANESE LETTER ZA

    uint32_t const cps[1] = { 0x1b90 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d53), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_025)
{
    // 1B91  ; [.2D54.0020.0002] 
    // SUNDANESE LETTER NYA

    uint32_t const cps[1] = { 0x1b91 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d54), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_026)
{
    // 1B92  ; [.2D55.0020.0002] 
    // SUNDANESE LETTER TA

    uint32_t const cps[1] = { 0x1b92 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d55), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_027)
{
    // 1B93  ; [.2D56.0020.0002] 
    // SUNDANESE LETTER DA

    uint32_t const cps[1] = { 0x1b93 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d56), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_028)
{
    // 1B94  ; [.2D57.0020.0002] 
    // SUNDANESE LETTER NA

    uint32_t const cps[1] = { 0x1b94 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d57), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_029)
{
    // 1B95  ; [.2D58.0020.0002] 
    // SUNDANESE LETTER PA

    uint32_t const cps[1] = { 0x1b95 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d58), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_030)
{
    // 1B96  ; [.2D59.0020.0002] 
    // SUNDANESE LETTER FA

    uint32_t const cps[1] = { 0x1b96 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d59), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_031)
{
    // 1B97  ; [.2D5A.0020.0002] 
    // SUNDANESE LETTER VA

    uint32_t const cps[1] = { 0x1b97 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d5a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_032)
{
    // 1B98  ; [.2D5B.0020.0002] 
    // SUNDANESE LETTER BA

    uint32_t const cps[1] = { 0x1b98 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d5b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_033)
{
    // 1B99  ; [.2D5D.0020.0002] 
    // SUNDANESE LETTER MA

    uint32_t const cps[1] = { 0x1b99 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d5d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_034)
{
    // 1B9A  ; [.2D5F.0020.0002] 
    // SUNDANESE LETTER YA

    uint32_t const cps[1] = { 0x1b9a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d5f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_035)
{
    // 1B9B  ; [.2D61.0020.0002] 
    // SUNDANESE LETTER RA

    uint32_t const cps[1] = { 0x1b9b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d61), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_036)
{
    // 1B9C  ; [.2D64.0020.0002] 
    // SUNDANESE LETTER LA

    uint32_t const cps[1] = { 0x1b9c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d64), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_037)
{
    // 1B9D  ; [.2D67.0020.0002] 
    // SUNDANESE LETTER WA

    uint32_t const cps[1] = { 0x1b9d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d67), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_038)
{
    // 1B9E  ; [.2D69.0020.0002] 
    // SUNDANESE LETTER SA

    uint32_t const cps[1] = { 0x1b9e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d69), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_039)
{
    // 1B9F  ; [.2D6A.0020.0002] 
    // SUNDANESE LETTER XA

    uint32_t const cps[1] = { 0x1b9f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d6a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_040)
{
    // 1BA0  ; [.2D6C.0020.0002] 
    // SUNDANESE LETTER HA

    uint32_t const cps[1] = { 0x1ba0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d6c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_041)
{
    // 1BA1  ; [.2D60.0020.0002] 
    // SUNDANESE CONSONANT SIGN PAMINGKAL

    uint32_t const cps[1] = { 0x1ba1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d60), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_042)
{
    // 1BA2  ; [.2D62.0020.0002] 
    // SUNDANESE CONSONANT SIGN PANYAKRA

    uint32_t const cps[1] = { 0x1ba2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d62), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_043)
{
    // 1BA3  ; [.2D65.0020.0002] 
    // SUNDANESE CONSONANT SIGN PANYIKU

    uint32_t const cps[1] = { 0x1ba3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d65), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_044)
{
    // 1BA4  ; [.2D6D.0020.0002] 
    // SUNDANESE VOWEL SIGN PANGHULU

    uint32_t const cps[1] = { 0x1ba4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d6d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_045)
{
    // 1BA5  ; [.2D6E.0020.0002] 
    // SUNDANESE VOWEL SIGN PANYUKU

    uint32_t const cps[1] = { 0x1ba5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d6e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_046)
{
    // 1BA6  ; [.2D6F.0020.0002] 
    // SUNDANESE VOWEL SIGN PANAELAENG

    uint32_t const cps[1] = { 0x1ba6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d6f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_047)
{
    // 1BA7  ; [.2D70.0020.0002] 
    // SUNDANESE VOWEL SIGN PANOLONG

    uint32_t const cps[1] = { 0x1ba7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d70), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_048)
{
    // 1BA8  ; [.2D71.0020.0002] 
    // SUNDANESE VOWEL SIGN PAMEPET

    uint32_t const cps[1] = { 0x1ba8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d71), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_049)
{
    // 1BA9  ; [.2D72.0020.0002] 
    // SUNDANESE VOWEL SIGN PANEULEUNG

    uint32_t const cps[1] = { 0x1ba9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d72), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_050)
{
    // 1BAA  ; [.2D73.0020.0002] 
    // SUNDANESE SIGN PAMAAEH

    uint32_t const cps[1] = { 0x1baa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d73), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_051)
{
    // 1BAB  ; [.2D74.0020.0002] 
    // SUNDANESE SIGN VIRAMA

    uint32_t const cps[1] = { 0x1bab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d74), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_052)
{
    // 1BAC  ; [.2D5E.0020.0002] 
    // SUNDANESE CONSONANT SIGN PASANGAN MA

    uint32_t const cps[1] = { 0x1bac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d5e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_053)
{
    // 1BAD  ; [.2D68.0020.0002] 
    // SUNDANESE CONSONANT SIGN PASANGAN WA

    uint32_t const cps[1] = { 0x1bad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d68), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_054)
{
    // 1BAE  ; [.2D4D.0020.0002] 
    // SUNDANESE LETTER KHA

    uint32_t const cps[1] = { 0x1bae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d4d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_055)
{
    // 1BAF  ; [.2D6B.0020.0002] 
    // SUNDANESE LETTER SYA

    uint32_t const cps[1] = { 0x1baf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d6b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_056)
{
    // 1BB0  ; [.1CA3.0020.0002] 
    // SUNDANESE DIGIT ZERO

    uint32_t const cps[1] = { 0x1bb0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_057)
{
    // 1BB1  ; [.1CA4.0020.0002] 
    // SUNDANESE DIGIT ONE

    uint32_t const cps[1] = { 0x1bb1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_058)
{
    // 1BB2  ; [.1CA5.0020.0002] 
    // SUNDANESE DIGIT TWO

    uint32_t const cps[1] = { 0x1bb2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_059)
{
    // 1BB3  ; [.1CA6.0020.0002] 
    // SUNDANESE DIGIT THREE

    uint32_t const cps[1] = { 0x1bb3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_060)
{
    // 1BB4  ; [.1CA7.0020.0002] 
    // SUNDANESE DIGIT FOUR

    uint32_t const cps[1] = { 0x1bb4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_061)
{
    // 1BB5  ; [.1CA8.0020.0002] 
    // SUNDANESE DIGIT FIVE

    uint32_t const cps[1] = { 0x1bb5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_062)
{
    // 1BB6  ; [.1CA9.0020.0002] 
    // SUNDANESE DIGIT SIX

    uint32_t const cps[1] = { 0x1bb6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_063)
{
    // 1BB7  ; [.1CAA.0020.0002] 
    // SUNDANESE DIGIT SEVEN

    uint32_t const cps[1] = { 0x1bb7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_064)
{
    // 1BB8  ; [.1CAB.0020.0002] 
    // SUNDANESE DIGIT EIGHT

    uint32_t const cps[1] = { 0x1bb8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_065)
{
    // 1BB9  ; [.1CAC.0020.0002] 
    // SUNDANESE DIGIT NINE

    uint32_t const cps[1] = { 0x1bb9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_066)
{
    // 1BBA  ; [.2D45.0020.0004] 
    // SUNDANESE AVAGRAHA

    uint32_t const cps[1] = { 0x1bba };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d45), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_067)
{
    // 1BBB  ; [.2D63.0020.0002] 
    // SUNDANESE LETTER REU

    uint32_t const cps[1] = { 0x1bbb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d63), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_068)
{
    // 1BBC  ; [.2D66.0020.0002] 
    // SUNDANESE LETTER LEU

    uint32_t const cps[1] = { 0x1bbc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d66), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_069)
{
    // 1BBD  ; [.2D5C.0020.0002] 
    // SUNDANESE LETTER BHA

    uint32_t const cps[1] = { 0x1bbd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d5c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_070)
{
    // 1BBE  ; [.2D4C.0020.0019] 
    // SUNDANESE LETTER FINAL K

    uint32_t const cps[1] = { 0x1bbe };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d4c), uint8_t(0x0), uint8_t(0x19)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_071)
{
    // 1BBF  ; [.2D5D.0020.0019] 
    // SUNDANESE LETTER FINAL M

    uint32_t const cps[1] = { 0x1bbf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d5d), uint8_t(0x0), uint8_t(0x19)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_072)
{
    // 1BC0  ; [.30E8.0020.0002] 
    // BATAK LETTER A

    uint32_t const cps[1] = { 0x1bc0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30e8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_073)
{
    // 1BC1  ; [.30E8.0020.0004] 
    // BATAK LETTER SIMALUNGUN A

    uint32_t const cps[1] = { 0x1bc1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30e8), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_074)
{
    // 1BC2  ; [.30E9.0020.0002] 
    // BATAK LETTER HA

    uint32_t const cps[1] = { 0x1bc2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30e9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_075)
{
    // 1BC3  ; [.30E9.0020.0004] 
    // BATAK LETTER SIMALUNGUN HA

    uint32_t const cps[1] = { 0x1bc3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30e9), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_076)
{
    // 1BC4  ; [.30E9.0020.0004] 
    // BATAK LETTER MANDAILING HA

    uint32_t const cps[1] = { 0x1bc4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30e9), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_077)
{
    // 1BC5  ; [.30EA.0020.0002] 
    // BATAK LETTER BA

    uint32_t const cps[1] = { 0x1bc5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30ea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_078)
{
    // 1BC6  ; [.30EA.0020.0004] 
    // BATAK LETTER KARO BA

    uint32_t const cps[1] = { 0x1bc6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30ea), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_079)
{
    // 1BC7  ; [.30EB.0020.0002] 
    // BATAK LETTER PA

    uint32_t const cps[1] = { 0x1bc7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30eb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_080)
{
    // 1BC8  ; [.30EB.0020.0004] 
    // BATAK LETTER SIMALUNGUN PA

    uint32_t const cps[1] = { 0x1bc8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30eb), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_081)
{
    // 1BC9  ; [.30EC.0020.0002] 
    // BATAK LETTER NA

    uint32_t const cps[1] = { 0x1bc9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30ec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_082)
{
    // 1BCA  ; [.30EC.0020.0004] 
    // BATAK LETTER MANDAILING NA

    uint32_t const cps[1] = { 0x1bca };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30ec), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_083)
{
    // 1BCB  ; [.30ED.0020.0002] 
    // BATAK LETTER WA

    uint32_t const cps[1] = { 0x1bcb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30ed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_084)
{
    // 1BCC  ; [.30ED.0020.0004] 
    // BATAK LETTER SIMALUNGUN WA

    uint32_t const cps[1] = { 0x1bcc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30ed), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_085)
{
    // 1BCD  ; [.30ED.0020.0004] 
    // BATAK LETTER PAKPAK WA

    uint32_t const cps[1] = { 0x1bcd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30ed), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_086)
{
    // 1BCE  ; [.30EE.0020.0002] 
    // BATAK LETTER GA

    uint32_t const cps[1] = { 0x1bce };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30ee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_087)
{
    // 1BCF  ; [.30EE.0020.0004] 
    // BATAK LETTER SIMALUNGUN GA

    uint32_t const cps[1] = { 0x1bcf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30ee), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_088)
{
    // 1BD0  ; [.30EF.0020.0002] 
    // BATAK LETTER JA

    uint32_t const cps[1] = { 0x1bd0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30ef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_089)
{
    // 1BD1  ; [.30F0.0020.0002] 
    // BATAK LETTER DA

    uint32_t const cps[1] = { 0x1bd1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30f0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_090)
{
    // 1BD2  ; [.30F1.0020.0002] 
    // BATAK LETTER RA

    uint32_t const cps[1] = { 0x1bd2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30f1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_091)
{
    // 1BD3  ; [.30F1.0020.0004] 
    // BATAK LETTER SIMALUNGUN RA

    uint32_t const cps[1] = { 0x1bd3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30f1), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_092)
{
    // 1BD4  ; [.30F2.0020.0002] 
    // BATAK LETTER MA

    uint32_t const cps[1] = { 0x1bd4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30f2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_093)
{
    // 1BD5  ; [.30F2.0020.0004] 
    // BATAK LETTER SIMALUNGUN MA

    uint32_t const cps[1] = { 0x1bd5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30f2), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_094)
{
    // 1BD6  ; [.30F3.0020.0002] 
    // BATAK LETTER SOUTHERN TA

    uint32_t const cps[1] = { 0x1bd6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30f3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_095)
{
    // 1BD7  ; [.30F3.0020.0004] 
    // BATAK LETTER NORTHERN TA

    uint32_t const cps[1] = { 0x1bd7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30f3), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_096)
{
    // 1BD8  ; [.30F4.0020.0002] 
    // BATAK LETTER SA

    uint32_t const cps[1] = { 0x1bd8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30f4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_097)
{
    // 1BD9  ; [.30F4.0020.0004] 
    // BATAK LETTER SIMALUNGUN SA

    uint32_t const cps[1] = { 0x1bd9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30f4), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_098)
{
    // 1BDA  ; [.30F4.0020.0004] 
    // BATAK LETTER MANDAILING SA

    uint32_t const cps[1] = { 0x1bda };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30f4), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_099)
{
    // 1BDB  ; [.30F5.0020.0002] 
    // BATAK LETTER YA

    uint32_t const cps[1] = { 0x1bdb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30f5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_100)
{
    // 1BDC  ; [.30F5.0020.0004] 
    // BATAK LETTER SIMALUNGUN YA

    uint32_t const cps[1] = { 0x1bdc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30f5), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_101)
{
    // 1BDD  ; [.30F6.0020.0002] 
    // BATAK LETTER NGA

    uint32_t const cps[1] = { 0x1bdd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30f6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_102)
{
    // 1BDE  ; [.30F7.0020.0002] 
    // BATAK LETTER LA

    uint32_t const cps[1] = { 0x1bde };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30f7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_103)
{
    // 1BDF  ; [.30F7.0020.0004] 
    // BATAK LETTER SIMALUNGUN LA

    uint32_t const cps[1] = { 0x1bdf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30f7), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_104)
{
    // 1BE0  ; [.30F8.0020.0002] 
    // BATAK LETTER NYA

    uint32_t const cps[1] = { 0x1be0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30f8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_105)
{
    // 1BE1  ; [.30F9.0020.0002] 
    // BATAK LETTER CA

    uint32_t const cps[1] = { 0x1be1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30f9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_106)
{
    // 1BE2  ; [.30FA.0020.0002] 
    // BATAK LETTER NDA

    uint32_t const cps[1] = { 0x1be2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30fa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_107)
{
    // 1BE3  ; [.30FB.0020.0002] 
    // BATAK LETTER MBA

    uint32_t const cps[1] = { 0x1be3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30fb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_108)
{
    // 1BE4  ; [.30FC.0020.0002] 
    // BATAK LETTER I

    uint32_t const cps[1] = { 0x1be4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30fc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_109)
{
    // 1BE5  ; [.30FD.0020.0002] 
    // BATAK LETTER U

    uint32_t const cps[1] = { 0x1be5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30fd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_110)
{
    // 1BE6  ; [.0000.00C2.0002] 
    // BATAK SIGN TOMPI

    uint32_t const cps[1] = { 0x1be6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_111)
{
    // 1BE7  ; [.30FE.0020.0002] 
    // BATAK VOWEL SIGN E

    uint32_t const cps[1] = { 0x1be7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30fe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_112)
{
    // 1BE8  ; [.30FE.0020.0004] 
    // BATAK VOWEL SIGN PAKPAK E

    uint32_t const cps[1] = { 0x1be8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30fe), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_113)
{
    // 1BE9  ; [.30FF.0020.0002] 
    // BATAK VOWEL SIGN EE

    uint32_t const cps[1] = { 0x1be9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30ff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_114)
{
    // 1BEA  ; [.3100.0020.0002] 
    // BATAK VOWEL SIGN I

    uint32_t const cps[1] = { 0x1bea };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3100), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_115)
{
    // 1BEB  ; [.3100.0020.0004] 
    // BATAK VOWEL SIGN KARO I

    uint32_t const cps[1] = { 0x1beb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3100), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_116)
{
    // 1BEC  ; [.3101.0020.0002] 
    // BATAK VOWEL SIGN O

    uint32_t const cps[1] = { 0x1bec };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3101), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_117)
{
    // 1BED  ; [.3101.0020.0004] 
    // BATAK VOWEL SIGN KARO O

    uint32_t const cps[1] = { 0x1bed };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3101), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_118)
{
    // 1BEE  ; [.3102.0020.0002] 
    // BATAK VOWEL SIGN U

    uint32_t const cps[1] = { 0x1bee };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3102), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_119)
{
    // 1BEF  ; [.3102.0020.0004] 
    // BATAK VOWEL SIGN U FOR SIMALUNGUN SA

    uint32_t const cps[1] = { 0x1bef };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3102), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_120)
{
    // 1BF0  ; [.3103.0020.0002] 
    // BATAK CONSONANT SIGN NG

    uint32_t const cps[1] = { 0x1bf0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3103), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_121)
{
    // 1BF1  ; [.3104.0020.0002] 
    // BATAK CONSONANT SIGN H

    uint32_t const cps[1] = { 0x1bf1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3104), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_122)
{
    // 1BF2  ; [.3105.0020.0002] 
    // BATAK PANGOLAT

    uint32_t const cps[1] = { 0x1bf2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3105), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_123)
{
    // 1BF3  ; [.3106.0020.0002] 
    // BATAK PANONGONAN

    uint32_t const cps[1] = { 0x1bf3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3106), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_124)
{
    // 1BFC  ; [*0440.0020.0002] 
    // BATAK SYMBOL BINDU NA METEK

    uint32_t const cps[1] = { 0x1bfc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x440), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_125)
{
    // 1BFD  ; [*0441.0020.0002] 
    // BATAK SYMBOL BINDU PINARBORAS

    uint32_t const cps[1] = { 0x1bfd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x441), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_126)
{
    // 1BFE  ; [*0442.0020.0002] 
    // BATAK SYMBOL BINDU JUDUL

    uint32_t const cps[1] = { 0x1bfe };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x442), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_127)
{
    // 1BFF  ; [*0443.0020.0002] 
    // BATAK SYMBOL BINDU PANGOLAT

    uint32_t const cps[1] = { 0x1bff };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x443), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_128)
{
    // 1C00  ; [.2FDD.0020.0002] 
    // LEPCHA LETTER KA

    uint32_t const cps[1] = { 0x1c00 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2fdd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_129)
{
    // 1C01  ; [.2FDE.0020.0002] 
    // LEPCHA LETTER KLA

    uint32_t const cps[1] = { 0x1c01 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2fde), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_130)
{
    // 1C02  ; [.2FDF.0020.0002] 
    // LEPCHA LETTER KHA

    uint32_t const cps[1] = { 0x1c02 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2fdf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_131)
{
    // 1C03  ; [.2FE0.0020.0002] 
    // LEPCHA LETTER GA

    uint32_t const cps[1] = { 0x1c03 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2fe0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_132)
{
    // 1C04  ; [.2FE1.0020.0002] 
    // LEPCHA LETTER GLA

    uint32_t const cps[1] = { 0x1c04 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2fe1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_133)
{
    // 1C05  ; [.2FE2.0020.0002] 
    // LEPCHA LETTER NGA

    uint32_t const cps[1] = { 0x1c05 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2fe2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_134)
{
    // 1C06  ; [.2FE3.0020.0002] 
    // LEPCHA LETTER CA

    uint32_t const cps[1] = { 0x1c06 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2fe3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_135)
{
    // 1C07  ; [.2FE4.0020.0002] 
    // LEPCHA LETTER CHA

    uint32_t const cps[1] = { 0x1c07 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2fe4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_136)
{
    // 1C08  ; [.2FE5.0020.0002] 
    // LEPCHA LETTER JA

    uint32_t const cps[1] = { 0x1c08 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2fe5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_137)
{
    // 1C09  ; [.2FE6.0020.0002] 
    // LEPCHA LETTER NYA

    uint32_t const cps[1] = { 0x1c09 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2fe6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_138)
{
    // 1C0A  ; [.2FEA.0020.0002] 
    // LEPCHA LETTER TA

    uint32_t const cps[1] = { 0x1c0a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2fea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_139)
{
    // 1C0B  ; [.2FEB.0020.0002] 
    // LEPCHA LETTER THA

    uint32_t const cps[1] = { 0x1c0b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2feb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_140)
{
    // 1C0C  ; [.2FEC.0020.0002] 
    // LEPCHA LETTER DA

    uint32_t const cps[1] = { 0x1c0c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2fec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_141)
{
    // 1C0D  ; [.2FED.0020.0002] 
    // LEPCHA LETTER NA

    uint32_t const cps[1] = { 0x1c0d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2fed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_142)
{
    // 1C0E  ; [.2FEE.0020.0002] 
    // LEPCHA LETTER PA

    uint32_t const cps[1] = { 0x1c0e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2fee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_143)
{
    // 1C0F  ; [.2FEF.0020.0002] 
    // LEPCHA LETTER PLA

    uint32_t const cps[1] = { 0x1c0f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2fef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_144)
{
    // 1C10  ; [.2FF0.0020.0002] 
    // LEPCHA LETTER PHA

    uint32_t const cps[1] = { 0x1c10 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ff0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_145)
{
    // 1C11  ; [.2FF1.0020.0002] 
    // LEPCHA LETTER FA

    uint32_t const cps[1] = { 0x1c11 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ff1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_146)
{
    // 1C12  ; [.2FF2.0020.0002] 
    // LEPCHA LETTER FLA

    uint32_t const cps[1] = { 0x1c12 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ff2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_147)
{
    // 1C13  ; [.2FF3.0020.0002] 
    // LEPCHA LETTER BA

    uint32_t const cps[1] = { 0x1c13 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ff3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_148)
{
    // 1C14  ; [.2FF4.0020.0002] 
    // LEPCHA LETTER BLA

    uint32_t const cps[1] = { 0x1c14 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ff4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_045_149)
{
    // 1C15  ; [.2FF5.0020.0002] 
    // LEPCHA LETTER MA

    uint32_t const cps[1] = { 0x1c15 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ff5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

