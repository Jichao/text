// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_136_000)
{
    // 11407 ; [.2BB3.0020.0002] 
    // NEWA LETTER VOCALIC RR

    uint32_t const cps[1] = { 0x11407 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bb3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_001)
{
    // 11408 ; [.2BB4.0020.0002] 
    // NEWA LETTER VOCALIC L

    uint32_t const cps[1] = { 0x11408 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bb4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_002)
{
    // 11409 ; [.2BB5.0020.0002] 
    // NEWA LETTER VOCALIC LL

    uint32_t const cps[1] = { 0x11409 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bb5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_003)
{
    // 1140A ; [.2BB6.0020.0002] 
    // NEWA LETTER E

    uint32_t const cps[1] = { 0x1140a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bb6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_004)
{
    // 1140B ; [.2BB7.0020.0002] 
    // NEWA LETTER AI

    uint32_t const cps[1] = { 0x1140b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bb7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_005)
{
    // 1140C ; [.2BB8.0020.0002] 
    // NEWA LETTER O

    uint32_t const cps[1] = { 0x1140c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bb8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_006)
{
    // 1140D ; [.2BB9.0020.0002] 
    // NEWA LETTER AU

    uint32_t const cps[1] = { 0x1140d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bb9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_007)
{
    // 1140E ; [.2BBA.0020.0002] 
    // NEWA LETTER KA

    uint32_t const cps[1] = { 0x1140e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bba), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_008)
{
    // 1140F ; [.2BBB.0020.0002] 
    // NEWA LETTER KHA

    uint32_t const cps[1] = { 0x1140f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bbb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_009)
{
    // 11410 ; [.2BBC.0020.0002] 
    // NEWA LETTER GA

    uint32_t const cps[1] = { 0x11410 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bbc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_010)
{
    // 11411 ; [.2BBD.0020.0002] 
    // NEWA LETTER GHA

    uint32_t const cps[1] = { 0x11411 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bbd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_011)
{
    // 11412 ; [.2BBE.0020.0002] 
    // NEWA LETTER NGA

    uint32_t const cps[1] = { 0x11412 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bbe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_012)
{
    // 11413 ; [.2BBF.0020.0002] 
    // NEWA LETTER NGHA

    uint32_t const cps[1] = { 0x11413 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bbf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_013)
{
    // 11414 ; [.2BC0.0020.0002] 
    // NEWA LETTER CA

    uint32_t const cps[1] = { 0x11414 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bc0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_014)
{
    // 11415 ; [.2BC1.0020.0002] 
    // NEWA LETTER CHA

    uint32_t const cps[1] = { 0x11415 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bc1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_015)
{
    // 11416 ; [.2BC2.0020.0002] 
    // NEWA LETTER JA

    uint32_t const cps[1] = { 0x11416 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bc2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_016)
{
    // 11417 ; [.2BC3.0020.0002] 
    // NEWA LETTER JHA

    uint32_t const cps[1] = { 0x11417 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bc3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_017)
{
    // 11418 ; [.2BC4.0020.0002] 
    // NEWA LETTER NYA

    uint32_t const cps[1] = { 0x11418 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bc4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_018)
{
    // 11419 ; [.2BC5.0020.0002] 
    // NEWA LETTER NYHA

    uint32_t const cps[1] = { 0x11419 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bc5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_019)
{
    // 1141A ; [.2BC6.0020.0002] 
    // NEWA LETTER TTA

    uint32_t const cps[1] = { 0x1141a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bc6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_020)
{
    // 1141B ; [.2BC7.0020.0002] 
    // NEWA LETTER TTHA

    uint32_t const cps[1] = { 0x1141b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bc7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_021)
{
    // 1141C ; [.2BC8.0020.0002] 
    // NEWA LETTER DDA

    uint32_t const cps[1] = { 0x1141c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bc8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_022)
{
    // 1141D ; [.2BC9.0020.0002] 
    // NEWA LETTER DDHA

    uint32_t const cps[1] = { 0x1141d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bc9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_023)
{
    // 1141E ; [.2BCA.0020.0002] 
    // NEWA LETTER NNA

    uint32_t const cps[1] = { 0x1141e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_024)
{
    // 1141F ; [.2BCB.0020.0002] 
    // NEWA LETTER TA

    uint32_t const cps[1] = { 0x1141f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bcb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_025)
{
    // 11420 ; [.2BCC.0020.0002] 
    // NEWA LETTER THA

    uint32_t const cps[1] = { 0x11420 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bcc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_026)
{
    // 11421 ; [.2BCD.0020.0002] 
    // NEWA LETTER DA

    uint32_t const cps[1] = { 0x11421 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bcd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_027)
{
    // 11422 ; [.2BCE.0020.0002] 
    // NEWA LETTER DHA

    uint32_t const cps[1] = { 0x11422 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_028)
{
    // 11423 ; [.2BCF.0020.0002] 
    // NEWA LETTER NA

    uint32_t const cps[1] = { 0x11423 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bcf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_029)
{
    // 11424 ; [.2BD0.0020.0002] 
    // NEWA LETTER NHA

    uint32_t const cps[1] = { 0x11424 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bd0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_030)
{
    // 11425 ; [.2BD1.0020.0002] 
    // NEWA LETTER PA

    uint32_t const cps[1] = { 0x11425 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bd1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_031)
{
    // 11426 ; [.2BD2.0020.0002] 
    // NEWA LETTER PHA

    uint32_t const cps[1] = { 0x11426 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bd2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_032)
{
    // 11427 ; [.2BD3.0020.0002] 
    // NEWA LETTER BA

    uint32_t const cps[1] = { 0x11427 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bd3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_033)
{
    // 11428 ; [.2BD4.0020.0002] 
    // NEWA LETTER BHA

    uint32_t const cps[1] = { 0x11428 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bd4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_034)
{
    // 11429 ; [.2BD5.0020.0002] 
    // NEWA LETTER MA

    uint32_t const cps[1] = { 0x11429 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bd5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_035)
{
    // 1142A ; [.2BD6.0020.0002] 
    // NEWA LETTER MHA

    uint32_t const cps[1] = { 0x1142a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bd6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_036)
{
    // 1142B ; [.2BD7.0020.0002] 
    // NEWA LETTER YA

    uint32_t const cps[1] = { 0x1142b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bd7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_037)
{
    // 1142C ; [.2BD8.0020.0002] 
    // NEWA LETTER RA

    uint32_t const cps[1] = { 0x1142c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bd8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_038)
{
    // 1142D ; [.2BD9.0020.0002] 
    // NEWA LETTER RHA

    uint32_t const cps[1] = { 0x1142d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bd9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_039)
{
    // 1142E ; [.2BDA.0020.0002] 
    // NEWA LETTER LA

    uint32_t const cps[1] = { 0x1142e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bda), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_040)
{
    // 1142F ; [.2BDB.0020.0002] 
    // NEWA LETTER LHA

    uint32_t const cps[1] = { 0x1142f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bdb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_041)
{
    // 11430 ; [.2BDC.0020.0002] 
    // NEWA LETTER WA

    uint32_t const cps[1] = { 0x11430 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bdc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_042)
{
    // 11431 ; [.2BDD.0020.0002] 
    // NEWA LETTER SHA

    uint32_t const cps[1] = { 0x11431 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bdd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_043)
{
    // 11432 ; [.2BDE.0020.0002] 
    // NEWA LETTER SSA

    uint32_t const cps[1] = { 0x11432 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bde), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_044)
{
    // 11433 ; [.2BDF.0020.0002] 
    // NEWA LETTER SA

    uint32_t const cps[1] = { 0x11433 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bdf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_045)
{
    // 11434 ; [.2BE0.0020.0002] 
    // NEWA LETTER HA

    uint32_t const cps[1] = { 0x11434 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2be0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_046)
{
    // 11435 ; [.2BE3.0020.0002] 
    // NEWA VOWEL SIGN AA

    uint32_t const cps[1] = { 0x11435 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2be3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_047)
{
    // 11436 ; [.2BE4.0020.0002] 
    // NEWA VOWEL SIGN I

    uint32_t const cps[1] = { 0x11436 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2be4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_048)
{
    // 11437 ; [.2BE5.0020.0002] 
    // NEWA VOWEL SIGN II

    uint32_t const cps[1] = { 0x11437 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2be5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_049)
{
    // 11438 ; [.2BE6.0020.0002] 
    // NEWA VOWEL SIGN U

    uint32_t const cps[1] = { 0x11438 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2be6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_050)
{
    // 11439 ; [.2BE7.0020.0002] 
    // NEWA VOWEL SIGN UU

    uint32_t const cps[1] = { 0x11439 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2be7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_051)
{
    // 1143A ; [.2BE8.0020.0002] 
    // NEWA VOWEL SIGN VOCALIC R

    uint32_t const cps[1] = { 0x1143a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2be8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_052)
{
    // 1143B ; [.2BE9.0020.0002] 
    // NEWA VOWEL SIGN VOCALIC RR

    uint32_t const cps[1] = { 0x1143b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2be9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_053)
{
    // 1143C ; [.2BEA.0020.0002] 
    // NEWA VOWEL SIGN VOCALIC L

    uint32_t const cps[1] = { 0x1143c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_054)
{
    // 1143D ; [.2BEB.0020.0002] 
    // NEWA VOWEL SIGN VOCALIC LL

    uint32_t const cps[1] = { 0x1143d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2beb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_055)
{
    // 1143E ; [.2BEC.0020.0002] 
    // NEWA VOWEL SIGN E

    uint32_t const cps[1] = { 0x1143e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_056)
{
    // 1143F ; [.2BED.0020.0002] 
    // NEWA VOWEL SIGN AI

    uint32_t const cps[1] = { 0x1143f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_057)
{
    // 11440 ; [.2BEE.0020.0002] 
    // NEWA VOWEL SIGN O

    uint32_t const cps[1] = { 0x11440 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_058)
{
    // 11441 ; [.2BEF.0020.0002] 
    // NEWA VOWEL SIGN AU

    uint32_t const cps[1] = { 0x11441 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_059)
{
    // 11442 ; [.2BF0.0020.0002] 
    // NEWA SIGN VIRAMA

    uint32_t const cps[1] = { 0x11442 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bf0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_060)
{
    // 11443 ; [.0000.00C3.0002] 
    // NEWA SIGN CANDRABINDU

    uint32_t const cps[1] = { 0x11443 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_061)
{
    // 11444 ; [.0000.00C4.0002] 
    // NEWA SIGN ANUSVARA

    uint32_t const cps[1] = { 0x11444 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_062)
{
    // 11445 ; [.0000.00C5.0002] 
    // NEWA SIGN VISARGA

    uint32_t const cps[1] = { 0x11445 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_063)
{
    // 11446 ; [.0000.00C2.0002] 
    // NEWA SIGN NUKTA

    uint32_t const cps[1] = { 0x11446 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_064)
{
    // 11447 ; [.2BE1.0020.0002] 
    // NEWA SIGN AVAGRAHA

    uint32_t const cps[1] = { 0x11447 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2be1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_065)
{
    // 11448 ; [.2BE2.0020.0002] 
    // NEWA SIGN FINAL ANUSVARA

    uint32_t const cps[1] = { 0x11448 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2be2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_066)
{
    // 11449 ; [.2BAA.0020.0002] 
    // NEWA OM

    uint32_t const cps[1] = { 0x11449 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2baa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_067)
{
    // 1144A ; [.2BAB.0020.0002] 
    // NEWA SIDDHI

    uint32_t const cps[1] = { 0x1144a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_068)
{
    // 1144B ; [*02B7.0020.0002] 
    // NEWA DANDA

    uint32_t const cps[1] = { 0x1144b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2b7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_069)
{
    // 1144C ; [*02B8.0020.0002] 
    // NEWA DOUBLE DANDA

    uint32_t const cps[1] = { 0x1144c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2b8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_070)
{
    // 1144D ; [*0471.0020.0002] 
    // NEWA COMMA

    uint32_t const cps[1] = { 0x1144d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x471), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_071)
{
    // 1144E ; [*0472.0020.0002] 
    // NEWA GAP FILLER

    uint32_t const cps[1] = { 0x1144e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x472), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_072)
{
    // 1144F ; [*0473.0020.0002] 
    // NEWA ABBREVIATION SIGN

    uint32_t const cps[1] = { 0x1144f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x473), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_073)
{
    // 11450 ; [.1CA3.0020.0002] 
    // NEWA DIGIT ZERO

    uint32_t const cps[1] = { 0x11450 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_074)
{
    // 11451 ; [.1CA4.0020.0002] 
    // NEWA DIGIT ONE

    uint32_t const cps[1] = { 0x11451 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_075)
{
    // 11452 ; [.1CA5.0020.0002] 
    // NEWA DIGIT TWO

    uint32_t const cps[1] = { 0x11452 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_076)
{
    // 11453 ; [.1CA6.0020.0002] 
    // NEWA DIGIT THREE

    uint32_t const cps[1] = { 0x11453 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_077)
{
    // 11454 ; [.1CA7.0020.0002] 
    // NEWA DIGIT FOUR

    uint32_t const cps[1] = { 0x11454 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_078)
{
    // 11455 ; [.1CA8.0020.0002] 
    // NEWA DIGIT FIVE

    uint32_t const cps[1] = { 0x11455 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_079)
{
    // 11456 ; [.1CA9.0020.0002] 
    // NEWA DIGIT SIX

    uint32_t const cps[1] = { 0x11456 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_080)
{
    // 11457 ; [.1CAA.0020.0002] 
    // NEWA DIGIT SEVEN

    uint32_t const cps[1] = { 0x11457 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_081)
{
    // 11458 ; [.1CAB.0020.0002] 
    // NEWA DIGIT EIGHT

    uint32_t const cps[1] = { 0x11458 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_082)
{
    // 11459 ; [.1CAC.0020.0002] 
    // NEWA DIGIT NINE

    uint32_t const cps[1] = { 0x11459 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_083)
{
    // 1145B ; [*0474.0020.0002] 
    // NEWA PLACEHOLDER MARK

    uint32_t const cps[1] = { 0x1145b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x474), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_084)
{
    // 1145D ; [*0475.0020.0002] 
    // NEWA INSERTION SIGN

    uint32_t const cps[1] = { 0x1145d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x475), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_085)
{
    // 11480 ; [.2BF2.0020.0002] 
    // TIRHUTA ANJI

    uint32_t const cps[1] = { 0x11480 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bf2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_086)
{
    // 11481 ; [.2BF3.0020.0002] 
    // TIRHUTA LETTER A

    uint32_t const cps[1] = { 0x11481 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bf3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_087)
{
    // 11482 ; [.2BF4.0020.0002] 
    // TIRHUTA LETTER AA

    uint32_t const cps[1] = { 0x11482 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bf4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_088)
{
    // 11483 ; [.2BF5.0020.0002] 
    // TIRHUTA LETTER I

    uint32_t const cps[1] = { 0x11483 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bf5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_089)
{
    // 11484 ; [.2BF6.0020.0002] 
    // TIRHUTA LETTER II

    uint32_t const cps[1] = { 0x11484 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bf6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_090)
{
    // 11485 ; [.2BF7.0020.0002] 
    // TIRHUTA LETTER U

    uint32_t const cps[1] = { 0x11485 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bf7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_091)
{
    // 11486 ; [.2BF8.0020.0002] 
    // TIRHUTA LETTER UU

    uint32_t const cps[1] = { 0x11486 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bf8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_092)
{
    // 11487 ; [.2BF9.0020.0002] 
    // TIRHUTA LETTER VOCALIC R

    uint32_t const cps[1] = { 0x11487 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bf9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_093)
{
    // 11488 ; [.2BFA.0020.0002] 
    // TIRHUTA LETTER VOCALIC RR

    uint32_t const cps[1] = { 0x11488 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bfa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_094)
{
    // 11489 ; [.2BFB.0020.0002] 
    // TIRHUTA LETTER VOCALIC L

    uint32_t const cps[1] = { 0x11489 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bfb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_095)
{
    // 1148A ; [.2BFC.0020.0002] 
    // TIRHUTA LETTER VOCALIC LL

    uint32_t const cps[1] = { 0x1148a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bfc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_096)
{
    // 1148B ; [.2BFD.0020.0002] 
    // TIRHUTA LETTER E

    uint32_t const cps[1] = { 0x1148b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bfd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_097)
{
    // 1148C ; [.2BFE.0020.0002] 
    // TIRHUTA LETTER AI

    uint32_t const cps[1] = { 0x1148c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bfe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_098)
{
    // 1148D ; [.2BFF.0020.0002] 
    // TIRHUTA LETTER O

    uint32_t const cps[1] = { 0x1148d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_099)
{
    // 1148E ; [.2C00.0020.0002] 
    // TIRHUTA LETTER AU

    uint32_t const cps[1] = { 0x1148e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c00), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_100)
{
    // 1148F ; [.2C01.0020.0002] 
    // TIRHUTA LETTER KA

    uint32_t const cps[1] = { 0x1148f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c01), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_101)
{
    // 11490 ; [.2C02.0020.0002] 
    // TIRHUTA LETTER KHA

    uint32_t const cps[1] = { 0x11490 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c02), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_102)
{
    // 11491 ; [.2C03.0020.0002] 
    // TIRHUTA LETTER GA

    uint32_t const cps[1] = { 0x11491 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c03), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_103)
{
    // 11492 ; [.2C04.0020.0002] 
    // TIRHUTA LETTER GHA

    uint32_t const cps[1] = { 0x11492 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c04), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_104)
{
    // 11493 ; [.2C05.0020.0002] 
    // TIRHUTA LETTER NGA

    uint32_t const cps[1] = { 0x11493 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c05), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_105)
{
    // 11494 ; [.2C06.0020.0002] 
    // TIRHUTA LETTER CA

    uint32_t const cps[1] = { 0x11494 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c06), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_106)
{
    // 11495 ; [.2C07.0020.0002] 
    // TIRHUTA LETTER CHA

    uint32_t const cps[1] = { 0x11495 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c07), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_107)
{
    // 11496 ; [.2C08.0020.0002] 
    // TIRHUTA LETTER JA

    uint32_t const cps[1] = { 0x11496 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c08), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_108)
{
    // 11497 ; [.2C09.0020.0002] 
    // TIRHUTA LETTER JHA

    uint32_t const cps[1] = { 0x11497 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c09), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_109)
{
    // 11498 ; [.2C0A.0020.0002] 
    // TIRHUTA LETTER NYA

    uint32_t const cps[1] = { 0x11498 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c0a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_110)
{
    // 11499 ; [.2C0B.0020.0002] 
    // TIRHUTA LETTER TTA

    uint32_t const cps[1] = { 0x11499 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c0b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_111)
{
    // 1149A ; [.2C0C.0020.0002] 
    // TIRHUTA LETTER TTHA

    uint32_t const cps[1] = { 0x1149a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c0c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_112)
{
    // 1149B ; [.2C0D.0020.0002] 
    // TIRHUTA LETTER DDA

    uint32_t const cps[1] = { 0x1149b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c0d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_113)
{
    // 1149C ; [.2C0E.0020.0002] 
    // TIRHUTA LETTER DDHA

    uint32_t const cps[1] = { 0x1149c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c0e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_114)
{
    // 1149D ; [.2C0F.0020.0002] 
    // TIRHUTA LETTER NNA

    uint32_t const cps[1] = { 0x1149d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c0f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_115)
{
    // 1149E ; [.2C10.0020.0002] 
    // TIRHUTA LETTER TA

    uint32_t const cps[1] = { 0x1149e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c10), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_116)
{
    // 1149F ; [.2C11.0020.0002] 
    // TIRHUTA LETTER THA

    uint32_t const cps[1] = { 0x1149f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c11), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_117)
{
    // 114A0 ; [.2C12.0020.0002] 
    // TIRHUTA LETTER DA

    uint32_t const cps[1] = { 0x114a0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c12), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_118)
{
    // 114A1 ; [.2C13.0020.0002] 
    // TIRHUTA LETTER DHA

    uint32_t const cps[1] = { 0x114a1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c13), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_119)
{
    // 114A2 ; [.2C14.0020.0002] 
    // TIRHUTA LETTER NA

    uint32_t const cps[1] = { 0x114a2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c14), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_120)
{
    // 114A3 ; [.2C15.0020.0002] 
    // TIRHUTA LETTER PA

    uint32_t const cps[1] = { 0x114a3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c15), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_121)
{
    // 114A4 ; [.2C16.0020.0002] 
    // TIRHUTA LETTER PHA

    uint32_t const cps[1] = { 0x114a4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c16), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_122)
{
    // 114A5 ; [.2C17.0020.0002] 
    // TIRHUTA LETTER BA

    uint32_t const cps[1] = { 0x114a5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c17), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_123)
{
    // 114A6 ; [.2C18.0020.0002] 
    // TIRHUTA LETTER BHA

    uint32_t const cps[1] = { 0x114a6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c18), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_124)
{
    // 114A7 ; [.2C19.0020.0002] 
    // TIRHUTA LETTER MA

    uint32_t const cps[1] = { 0x114a7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c19), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_125)
{
    // 114A8 ; [.2C1A.0020.0002] 
    // TIRHUTA LETTER YA

    uint32_t const cps[1] = { 0x114a8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c1a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_126)
{
    // 114A9 ; [.2C1B.0020.0002] 
    // TIRHUTA LETTER RA

    uint32_t const cps[1] = { 0x114a9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c1b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_127)
{
    // 114AA ; [.2C1C.0020.0002] 
    // TIRHUTA LETTER LA

    uint32_t const cps[1] = { 0x114aa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c1c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_128)
{
    // 114AB ; [.2C1D.0020.0002] 
    // TIRHUTA LETTER VA

    uint32_t const cps[1] = { 0x114ab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c1d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_129)
{
    // 114AC ; [.2C1E.0020.0002] 
    // TIRHUTA LETTER SHA

    uint32_t const cps[1] = { 0x114ac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c1e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_130)
{
    // 114AD ; [.2C1F.0020.0002] 
    // TIRHUTA LETTER SSA

    uint32_t const cps[1] = { 0x114ad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c1f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_131)
{
    // 114AE ; [.2C20.0020.0002] 
    // TIRHUTA LETTER SA

    uint32_t const cps[1] = { 0x114ae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c20), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_132)
{
    // 114AF ; [.2C21.0020.0002] 
    // TIRHUTA LETTER HA

    uint32_t const cps[1] = { 0x114af };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c21), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_133)
{
    // 114B0 ; [.2C24.0020.0002] 
    // TIRHUTA VOWEL SIGN AA

    uint32_t const cps[1] = { 0x114b0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c24), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_134)
{
    // 114B1 ; [.2C25.0020.0002] 
    // TIRHUTA VOWEL SIGN I

    uint32_t const cps[1] = { 0x114b1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c25), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_135)
{
    // 114B2 ; [.2C26.0020.0002] 
    // TIRHUTA VOWEL SIGN II

    uint32_t const cps[1] = { 0x114b2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c26), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_136)
{
    // 114B3 ; [.2C27.0020.0002] 
    // TIRHUTA VOWEL SIGN U

    uint32_t const cps[1] = { 0x114b3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c27), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_137)
{
    // 114B4 ; [.2C28.0020.0002] 
    // TIRHUTA VOWEL SIGN UU

    uint32_t const cps[1] = { 0x114b4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c28), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_138)
{
    // 114B5 ; [.2C29.0020.0002] 
    // TIRHUTA VOWEL SIGN VOCALIC R

    uint32_t const cps[1] = { 0x114b5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c29), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_139)
{
    // 114B6 ; [.2C2A.0020.0002] 
    // TIRHUTA VOWEL SIGN VOCALIC RR

    uint32_t const cps[1] = { 0x114b6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c2a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_140)
{
    // 114B7 ; [.2C2B.0020.0002] 
    // TIRHUTA VOWEL SIGN VOCALIC L

    uint32_t const cps[1] = { 0x114b7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c2b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_141)
{
    // 114B8 ; [.2C2C.0020.0002] 
    // TIRHUTA VOWEL SIGN VOCALIC LL

    uint32_t const cps[1] = { 0x114b8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c2c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_142)
{
    // 114B9 ; [.2C2D.0020.0002] 
    // TIRHUTA VOWEL SIGN E

    uint32_t const cps[1] = { 0x114b9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c2d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_143)
{
    // 114B9 114B0 ; [.2C30.0020.0002] 
    // TIRHUTA VOWEL SIGN O

    uint32_t const cps[1] = { 0x114bc }; // Expands to the code points in the comment above.
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c30), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_144)
{
    // 114B9 114BA ; [.2C2F.0020.0002] 
    // TIRHUTA VOWEL SIGN AI

    uint32_t const cps[1] = { 0x114bb }; // Expands to the code points in the comment above.
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c2f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_145)
{
    // 114B9 114BD ; [.2C32.0020.0002] 
    // TIRHUTA VOWEL SIGN AU

    uint32_t const cps[1] = { 0x114be }; // Expands to the code points in the comment above.
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c32), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_146)
{
    // 114BA ; [.2C2E.0020.0002] 
    // TIRHUTA VOWEL SIGN SHORT E

    uint32_t const cps[1] = { 0x114ba };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c2e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_147)
{
    // 114BB ; [.2C2F.0020.0002] 
    // TIRHUTA VOWEL SIGN AI

    uint32_t const cps[1] = { 0x114bb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c2f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_148)
{
    // 114BC ; [.2C30.0020.0002] 
    // TIRHUTA VOWEL SIGN O

    uint32_t const cps[1] = { 0x114bc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c30), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_136_149)
{
    // 114BD ; [.2C31.0020.0002] 
    // TIRHUTA VOWEL SIGN SHORT O

    uint32_t const cps[1] = { 0x114bd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c31), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

