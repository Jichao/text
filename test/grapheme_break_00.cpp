// Warning! This file is autogenerated.
#include <boost/text/grapheme_break.hpp>

#include <gtest/gtest.h>

#include <algorithm>


TEST(grapheme, breaks_0)
{
    // ÷ 0020 ÷ 0020 ÷	
    // ÷ [0.2] SPACE (Other) ÷ [999.0] SPACE (Other) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0020 × 0308 ÷ 0020 ÷	
    // ÷ [0.2] SPACE (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] SPACE (Other) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0020 ÷ 000D ÷	
    // ÷ [0.2] SPACE (Other) ÷ [5.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x000D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0020 × 0308 ÷ 000D ÷	
    // ÷ [0.2] SPACE (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x000D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0020 ÷ 000A ÷	
    // ÷ [0.2] SPACE (Other) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0020 × 0308 ÷ 000A ÷	
    // ÷ [0.2] SPACE (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0020 ÷ 0001 ÷	
    // ÷ [0.2] SPACE (Other) ÷ [5.0] <START OF HEADING> (Control) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0001);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0020 × 0308 ÷ 0001 ÷	
    // ÷ [0.2] SPACE (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <START OF HEADING> (Control) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0001);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0020 × 0300 ÷	
    // ÷ [0.2] SPACE (Other) × [9.0] COMBINING GRAVE ACCENT (Extend) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0300);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0020 × 0308 × 0300 ÷	
    // ÷ [0.2] SPACE (Other) × [9.0] COMBINING DIAERESIS (Extend) × [9.0] COMBINING GRAVE ACCENT (Extend) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0300);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0020 ÷ 0600 ÷	
    // ÷ [0.2] SPACE (Other) ÷ [999.0] ARABIC NUMBER SIGN (Prepend) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0600);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0020 × 0308 ÷ 0600 ÷	
    // ÷ [0.2] SPACE (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] ARABIC NUMBER SIGN (Prepend) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0600);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0020 × 0903 ÷	
    // ÷ [0.2] SPACE (Other) × [9.1] DEVANAGARI SIGN VISARGA (SpacingMark) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0903);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0020 × 0308 × 0903 ÷	
    // ÷ [0.2] SPACE (Other) × [9.0] COMBINING DIAERESIS (Extend) × [9.1] DEVANAGARI SIGN VISARGA (SpacingMark) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0903);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0020 ÷ 1100 ÷	
    // ÷ [0.2] SPACE (Other) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1100);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0020 × 0308 ÷ 1100 ÷	
    // ÷ [0.2] SPACE (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1100);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0020 ÷ 1160 ÷	
    // ÷ [0.2] SPACE (Other) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1160);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0020 × 0308 ÷ 1160 ÷	
    // ÷ [0.2] SPACE (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1160);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0020 ÷ 11A8 ÷	
    // ÷ [0.2] SPACE (Other) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x11A8);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0020 × 0308 ÷ 11A8 ÷	
    // ÷ [0.2] SPACE (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x11A8);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0020 ÷ AC00 ÷	
    // ÷ [0.2] SPACE (Other) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xAC00);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0020 × 0308 ÷ AC00 ÷	
    // ÷ [0.2] SPACE (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xAC00);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0020 ÷ AC01 ÷	
    // ÷ [0.2] SPACE (Other) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xAC01);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0020 × 0308 ÷ AC01 ÷	
    // ÷ [0.2] SPACE (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0xAC01);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0020 ÷ 1F1E6 ÷	
    // ÷ [0.2] SPACE (Other) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F1E6);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0020 × 0308 ÷ 1F1E6 ÷	
    // ÷ [0.2] SPACE (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        boost::text::grapheme_break_t prev_break;

        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0020);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::grapheme_break(prev_break.fsm_, prev_break.prop_, 0x1F1E6);
        EXPECT_EQ(prev_break.break_, true);
    }

}
