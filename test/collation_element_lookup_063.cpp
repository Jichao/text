// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_063_000)
{
    // 26C7  ; [*09E5.0020.0002] 
    // BLACK SNOWMAN

    uint32_t const cps[1] = { 0x26c7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9e5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_001)
{
    // 26C8  ; [*09E6.0020.0002] 
    // THUNDER CLOUD AND RAIN

    uint32_t const cps[1] = { 0x26c8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9e6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_002)
{
    // 26C9  ; [*09E7.0020.0002] 
    // TURNED WHITE SHOGI PIECE

    uint32_t const cps[1] = { 0x26c9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9e7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_003)
{
    // 26CA  ; [*09E8.0020.0002] 
    // TURNED BLACK SHOGI PIECE

    uint32_t const cps[1] = { 0x26ca };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9e8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_004)
{
    // 26CB  ; [*09E9.0020.0002] 
    // WHITE DIAMOND IN SQUARE

    uint32_t const cps[1] = { 0x26cb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9e9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_005)
{
    // 26CC  ; [*09EA.0020.0002] 
    // CROSSING LANES

    uint32_t const cps[1] = { 0x26cc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9ea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_006)
{
    // 26CD  ; [*09EB.0020.0002] 
    // DISABLED CAR

    uint32_t const cps[1] = { 0x26cd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9eb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_007)
{
    // 26CE  ; [*09EC.0020.0002] 
    // OPHIUCHUS

    uint32_t const cps[1] = { 0x26ce };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9ec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_008)
{
    // 26CF  ; [*09ED.0020.0002] 
    // PICK

    uint32_t const cps[1] = { 0x26cf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9ed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_009)
{
    // 26D0  ; [*09EE.0020.0002] 
    // CAR SLIDING

    uint32_t const cps[1] = { 0x26d0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9ee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_010)
{
    // 26D1  ; [*09EF.0020.0002] 
    // HELMET WITH WHITE CROSS

    uint32_t const cps[1] = { 0x26d1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9ef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_011)
{
    // 26D2  ; [*09F0.0020.0002] 
    // CIRCLED CROSSING LANES

    uint32_t const cps[1] = { 0x26d2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9f0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_012)
{
    // 26D3  ; [*09F1.0020.0002] 
    // CHAINS

    uint32_t const cps[1] = { 0x26d3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9f1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_013)
{
    // 26D4  ; [*09F2.0020.0002] 
    // NO ENTRY

    uint32_t const cps[1] = { 0x26d4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9f2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_014)
{
    // 26D5  ; [*09F3.0020.0002] 
    // ALTERNATE ONE-WAY LEFT WAY TRAFFIC

    uint32_t const cps[1] = { 0x26d5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9f3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_015)
{
    // 26D6  ; [*09F4.0020.0002] 
    // BLACK TWO-WAY LEFT WAY TRAFFIC

    uint32_t const cps[1] = { 0x26d6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9f4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_016)
{
    // 26D7  ; [*09F5.0020.0002] 
    // WHITE TWO-WAY LEFT WAY TRAFFIC

    uint32_t const cps[1] = { 0x26d7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9f5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_017)
{
    // 26D8  ; [*09F6.0020.0002] 
    // BLACK LEFT LANE MERGE

    uint32_t const cps[1] = { 0x26d8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9f6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_018)
{
    // 26D9  ; [*09F7.0020.0002] 
    // WHITE LEFT LANE MERGE

    uint32_t const cps[1] = { 0x26d9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9f7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_019)
{
    // 26DA  ; [*09F8.0020.0002] 
    // DRIVE SLOW SIGN

    uint32_t const cps[1] = { 0x26da };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9f8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_020)
{
    // 26DB  ; [*09F9.0020.0002] 
    // HEAVY WHITE DOWN-POINTING TRIANGLE

    uint32_t const cps[1] = { 0x26db };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9f9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_021)
{
    // 26DC  ; [*09FA.0020.0002] 
    // LEFT CLOSED ENTRY

    uint32_t const cps[1] = { 0x26dc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9fa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_022)
{
    // 26DD  ; [*09FB.0020.0002] 
    // SQUARED SALTIRE

    uint32_t const cps[1] = { 0x26dd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9fb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_023)
{
    // 26DE  ; [*09FC.0020.0002] 
    // FALLING DIAGONAL IN WHITE CIRCLE IN BLACK SQUARE

    uint32_t const cps[1] = { 0x26de };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9fc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_024)
{
    // 26DF  ; [*09FD.0020.0002] 
    // BLACK TRUCK

    uint32_t const cps[1] = { 0x26df };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9fd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_025)
{
    // 26E0  ; [*09FE.0020.0002] 
    // RESTRICTED LEFT ENTRY-1

    uint32_t const cps[1] = { 0x26e0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9fe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_026)
{
    // 26E1  ; [*09FF.0020.0002] 
    // RESTRICTED LEFT ENTRY-2

    uint32_t const cps[1] = { 0x26e1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9ff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_027)
{
    // 26E2  ; [*0A00.0020.0002] 
    // ASTRONOMICAL SYMBOL FOR URANUS

    uint32_t const cps[1] = { 0x26e2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa00), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_028)
{
    // 26E3  ; [*0A01.0020.0002] 
    // HEAVY CIRCLE WITH STROKE AND TWO DOTS ABOVE

    uint32_t const cps[1] = { 0x26e3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa01), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_029)
{
    // 26E4  ; [*0A02.0020.0002] 
    // PENTAGRAM

    uint32_t const cps[1] = { 0x26e4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa02), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_030)
{
    // 26E5  ; [*0A03.0020.0002] 
    // RIGHT-HANDED INTERLACED PENTAGRAM

    uint32_t const cps[1] = { 0x26e5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa03), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_031)
{
    // 26E6  ; [*0A04.0020.0002] 
    // LEFT-HANDED INTERLACED PENTAGRAM

    uint32_t const cps[1] = { 0x26e6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa04), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_032)
{
    // 26E7  ; [*0A05.0020.0002] 
    // INVERTED PENTAGRAM

    uint32_t const cps[1] = { 0x26e7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa05), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_033)
{
    // 26E8  ; [*0A06.0020.0002] 
    // BLACK CROSS ON SHIELD

    uint32_t const cps[1] = { 0x26e8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa06), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_034)
{
    // 26E9  ; [*0A07.0020.0002] 
    // SHINTO SHRINE

    uint32_t const cps[1] = { 0x26e9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa07), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_035)
{
    // 26EA  ; [*0A08.0020.0002] 
    // CHURCH

    uint32_t const cps[1] = { 0x26ea };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa08), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_036)
{
    // 26EB  ; [*0A09.0020.0002] 
    // CASTLE

    uint32_t const cps[1] = { 0x26eb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa09), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_037)
{
    // 26EC  ; [*0A0A.0020.0002] 
    // HISTORIC SITE

    uint32_t const cps[1] = { 0x26ec };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa0a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_038)
{
    // 26ED  ; [*0A0B.0020.0002] 
    // GEAR WITHOUT HUB

    uint32_t const cps[1] = { 0x26ed };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa0b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_039)
{
    // 26EE  ; [*0A0C.0020.0002] 
    // GEAR WITH HANDLES

    uint32_t const cps[1] = { 0x26ee };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa0c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_040)
{
    // 26EF  ; [*0A0D.0020.0002] 
    // MAP SYMBOL FOR LIGHTHOUSE

    uint32_t const cps[1] = { 0x26ef };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa0d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_041)
{
    // 26F0  ; [*0A0E.0020.0002] 
    // MOUNTAIN

    uint32_t const cps[1] = { 0x26f0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa0e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_042)
{
    // 26F1  ; [*0A0F.0020.0002] 
    // UMBRELLA ON GROUND

    uint32_t const cps[1] = { 0x26f1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa0f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_043)
{
    // 26F2  ; [*0A10.0020.0002] 
    // FOUNTAIN

    uint32_t const cps[1] = { 0x26f2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa10), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_044)
{
    // 26F3  ; [*0A11.0020.0002] 
    // FLAG IN HOLE

    uint32_t const cps[1] = { 0x26f3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa11), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_045)
{
    // 26F4  ; [*0A12.0020.0002] 
    // FERRY

    uint32_t const cps[1] = { 0x26f4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa12), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_046)
{
    // 26F5  ; [*0A13.0020.0002] 
    // SAILBOAT

    uint32_t const cps[1] = { 0x26f5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa13), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_047)
{
    // 26F6  ; [*0A14.0020.0002] 
    // SQUARE FOUR CORNERS

    uint32_t const cps[1] = { 0x26f6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa14), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_048)
{
    // 26F7  ; [*0A15.0020.0002] 
    // SKIER

    uint32_t const cps[1] = { 0x26f7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa15), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_049)
{
    // 26F8  ; [*0A16.0020.0002] 
    // ICE SKATE

    uint32_t const cps[1] = { 0x26f8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa16), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_050)
{
    // 26F9  ; [*0A17.0020.0002] 
    // PERSON WITH BALL

    uint32_t const cps[1] = { 0x26f9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa17), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_051)
{
    // 26FA  ; [*0A18.0020.0002] 
    // TENT

    uint32_t const cps[1] = { 0x26fa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa18), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_052)
{
    // 26FB  ; [*0A19.0020.0002] 
    // JAPANESE BANK SYMBOL

    uint32_t const cps[1] = { 0x26fb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa19), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_053)
{
    // 26FC  ; [*0A1A.0020.0002] 
    // HEADSTONE GRAVEYARD SYMBOL

    uint32_t const cps[1] = { 0x26fc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa1a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_054)
{
    // 26FD  ; [*0A1B.0020.0002] 
    // FUEL PUMP

    uint32_t const cps[1] = { 0x26fd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa1b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_055)
{
    // 26FE  ; [*0A1C.0020.0002] 
    // CUP ON BLACK SQUARE

    uint32_t const cps[1] = { 0x26fe };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa1c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_056)
{
    // 26FF  ; [*0A1D.0020.0002] 
    // WHITE FLAG WITH HORIZONTAL MIDDLE BLACK STRIPE

    uint32_t const cps[1] = { 0x26ff };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa1d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_057)
{
    // 2700  ; [*0A38.0020.0002] 
    // BLACK SAFETY SCISSORS

    uint32_t const cps[1] = { 0x2700 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa38), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_058)
{
    // 2701  ; [*0A39.0020.0002] 
    // UPPER BLADE SCISSORS

    uint32_t const cps[1] = { 0x2701 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa39), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_059)
{
    // 2702  ; [*0A3A.0020.0002] 
    // BLACK SCISSORS

    uint32_t const cps[1] = { 0x2702 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa3a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_060)
{
    // 2703  ; [*0A3B.0020.0002] 
    // LOWER BLADE SCISSORS

    uint32_t const cps[1] = { 0x2703 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa3b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_061)
{
    // 2704  ; [*0A3C.0020.0002] 
    // WHITE SCISSORS

    uint32_t const cps[1] = { 0x2704 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa3c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_062)
{
    // 2705  ; [*0A3D.0020.0002] 
    // WHITE HEAVY CHECK MARK

    uint32_t const cps[1] = { 0x2705 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa3d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_063)
{
    // 2706  ; [*0A3E.0020.0002] 
    // TELEPHONE LOCATION SIGN

    uint32_t const cps[1] = { 0x2706 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa3e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_064)
{
    // 2707  ; [*0A3F.0020.0002] 
    // TAPE DRIVE

    uint32_t const cps[1] = { 0x2707 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa3f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_065)
{
    // 2708  ; [*0A40.0020.0002] 
    // AIRPLANE

    uint32_t const cps[1] = { 0x2708 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa40), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_066)
{
    // 2709  ; [*0A41.0020.0002] 
    // ENVELOPE

    uint32_t const cps[1] = { 0x2709 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa41), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_067)
{
    // 270A  ; [*0A42.0020.0002] 
    // RAISED FIST

    uint32_t const cps[1] = { 0x270a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa42), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_068)
{
    // 270B  ; [*0A43.0020.0002] 
    // RAISED HAND

    uint32_t const cps[1] = { 0x270b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa43), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_069)
{
    // 270C  ; [*0A44.0020.0002] 
    // VICTORY HAND

    uint32_t const cps[1] = { 0x270c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa44), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_070)
{
    // 270D  ; [*0A45.0020.0002] 
    // WRITING HAND

    uint32_t const cps[1] = { 0x270d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa45), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_071)
{
    // 270E  ; [*0A46.0020.0002] 
    // LOWER RIGHT PENCIL

    uint32_t const cps[1] = { 0x270e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa46), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_072)
{
    // 270F  ; [*0A47.0020.0002] 
    // PENCIL

    uint32_t const cps[1] = { 0x270f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa47), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_073)
{
    // 2710  ; [*0A48.0020.0002] 
    // UPPER RIGHT PENCIL

    uint32_t const cps[1] = { 0x2710 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa48), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_074)
{
    // 2711  ; [*0A49.0020.0002] 
    // WHITE NIB

    uint32_t const cps[1] = { 0x2711 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa49), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_075)
{
    // 2712  ; [*0A4A.0020.0002] 
    // BLACK NIB

    uint32_t const cps[1] = { 0x2712 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa4a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_076)
{
    // 2713  ; [*0A4B.0020.0002] 
    // CHECK MARK

    uint32_t const cps[1] = { 0x2713 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa4b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_077)
{
    // 2714  ; [*0A4C.0020.0002] 
    // HEAVY CHECK MARK

    uint32_t const cps[1] = { 0x2714 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa4c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_078)
{
    // 2715  ; [*0A4D.0020.0002] 
    // MULTIPLICATION X

    uint32_t const cps[1] = { 0x2715 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa4d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_079)
{
    // 2716  ; [*0A4E.0020.0002] 
    // HEAVY MULTIPLICATION X

    uint32_t const cps[1] = { 0x2716 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa4e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_080)
{
    // 2717  ; [*0A4F.0020.0002] 
    // BALLOT X

    uint32_t const cps[1] = { 0x2717 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa4f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_081)
{
    // 2718  ; [*0A50.0020.0002] 
    // HEAVY BALLOT X

    uint32_t const cps[1] = { 0x2718 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa50), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_082)
{
    // 2719  ; [*0A51.0020.0002] 
    // OUTLINED GREEK CROSS

    uint32_t const cps[1] = { 0x2719 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa51), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_083)
{
    // 271A  ; [*0A52.0020.0002] 
    // HEAVY GREEK CROSS

    uint32_t const cps[1] = { 0x271a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa52), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_084)
{
    // 271B  ; [*0A53.0020.0002] 
    // OPEN CENTRE CROSS

    uint32_t const cps[1] = { 0x271b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa53), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_085)
{
    // 271C  ; [*0A54.0020.0002] 
    // HEAVY OPEN CENTRE CROSS

    uint32_t const cps[1] = { 0x271c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa54), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_086)
{
    // 271D  ; [*0A55.0020.0002] 
    // LATIN CROSS

    uint32_t const cps[1] = { 0x271d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa55), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_087)
{
    // 271E  ; [*0A56.0020.0002] 
    // SHADOWED WHITE LATIN CROSS

    uint32_t const cps[1] = { 0x271e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa56), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_088)
{
    // 271F  ; [*0A57.0020.0002] 
    // OUTLINED LATIN CROSS

    uint32_t const cps[1] = { 0x271f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa57), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_089)
{
    // 2720  ; [*0A58.0020.0002] 
    // MALTESE CROSS

    uint32_t const cps[1] = { 0x2720 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa58), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_090)
{
    // 2721  ; [*0A59.0020.0002] 
    // STAR OF DAVID

    uint32_t const cps[1] = { 0x2721 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa59), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_091)
{
    // 2722  ; [*0A5A.0020.0002] 
    // FOUR TEARDROP-SPOKED ASTERISK

    uint32_t const cps[1] = { 0x2722 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa5a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_092)
{
    // 2723  ; [*0A5B.0020.0002] 
    // FOUR BALLOON-SPOKED ASTERISK

    uint32_t const cps[1] = { 0x2723 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa5b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_093)
{
    // 2724  ; [*0A5C.0020.0002] 
    // HEAVY FOUR BALLOON-SPOKED ASTERISK

    uint32_t const cps[1] = { 0x2724 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa5c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_094)
{
    // 2725  ; [*0A5D.0020.0002] 
    // FOUR CLUB-SPOKED ASTERISK

    uint32_t const cps[1] = { 0x2725 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa5d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_095)
{
    // 2726  ; [*0A5E.0020.0002] 
    // BLACK FOUR POINTED STAR

    uint32_t const cps[1] = { 0x2726 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa5e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_096)
{
    // 2727  ; [*0A5F.0020.0002] 
    // WHITE FOUR POINTED STAR

    uint32_t const cps[1] = { 0x2727 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa5f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_097)
{
    // 2728  ; [*0A60.0020.0002] 
    // SPARKLES

    uint32_t const cps[1] = { 0x2728 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa60), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_098)
{
    // 2729  ; [*0A61.0020.0002] 
    // STRESS OUTLINED WHITE STAR

    uint32_t const cps[1] = { 0x2729 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa61), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_099)
{
    // 272A  ; [*0A62.0020.0002] 
    // CIRCLED WHITE STAR

    uint32_t const cps[1] = { 0x272a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa62), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_100)
{
    // 272B  ; [*0A63.0020.0002] 
    // OPEN CENTRE BLACK STAR

    uint32_t const cps[1] = { 0x272b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa63), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_101)
{
    // 272C  ; [*0A64.0020.0002] 
    // BLACK CENTRE WHITE STAR

    uint32_t const cps[1] = { 0x272c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa64), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_102)
{
    // 272D  ; [*0A65.0020.0002] 
    // OUTLINED BLACK STAR

    uint32_t const cps[1] = { 0x272d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa65), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_103)
{
    // 272E  ; [*0A66.0020.0002] 
    // HEAVY OUTLINED BLACK STAR

    uint32_t const cps[1] = { 0x272e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa66), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_104)
{
    // 272F  ; [*0A67.0020.0002] 
    // PINWHEEL STAR

    uint32_t const cps[1] = { 0x272f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa67), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_105)
{
    // 2730  ; [*0A68.0020.0002] 
    // SHADOWED WHITE STAR

    uint32_t const cps[1] = { 0x2730 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa68), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_106)
{
    // 2731  ; [*0A69.0020.0002] 
    // HEAVY ASTERISK

    uint32_t const cps[1] = { 0x2731 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa69), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_107)
{
    // 2732  ; [*0A6A.0020.0002] 
    // OPEN CENTRE ASTERISK

    uint32_t const cps[1] = { 0x2732 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa6a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_108)
{
    // 2733  ; [*0A6B.0020.0002] 
    // EIGHT SPOKED ASTERISK

    uint32_t const cps[1] = { 0x2733 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa6b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_109)
{
    // 2734  ; [*0A6C.0020.0002] 
    // EIGHT POINTED BLACK STAR

    uint32_t const cps[1] = { 0x2734 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa6c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_110)
{
    // 2735  ; [*0A6D.0020.0002] 
    // EIGHT POINTED PINWHEEL STAR

    uint32_t const cps[1] = { 0x2735 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa6d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_111)
{
    // 2736  ; [*0A6E.0020.0002] 
    // SIX POINTED BLACK STAR

    uint32_t const cps[1] = { 0x2736 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa6e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_112)
{
    // 2737  ; [*0A6F.0020.0002] 
    // EIGHT POINTED RECTILINEAR BLACK STAR

    uint32_t const cps[1] = { 0x2737 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa6f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_113)
{
    // 2738  ; [*0A70.0020.0002] 
    // HEAVY EIGHT POINTED RECTILINEAR BLACK STAR

    uint32_t const cps[1] = { 0x2738 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa70), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_114)
{
    // 2739  ; [*0A71.0020.0002] 
    // TWELVE POINTED BLACK STAR

    uint32_t const cps[1] = { 0x2739 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa71), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_115)
{
    // 273A  ; [*0A72.0020.0002] 
    // SIXTEEN POINTED ASTERISK

    uint32_t const cps[1] = { 0x273a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa72), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_116)
{
    // 273B  ; [*0A73.0020.0002] 
    // TEARDROP-SPOKED ASTERISK

    uint32_t const cps[1] = { 0x273b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa73), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_117)
{
    // 273C  ; [*0A74.0020.0002] 
    // OPEN CENTRE TEARDROP-SPOKED ASTERISK

    uint32_t const cps[1] = { 0x273c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa74), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_118)
{
    // 273D  ; [*0A75.0020.0002] 
    // HEAVY TEARDROP-SPOKED ASTERISK

    uint32_t const cps[1] = { 0x273d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa75), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_119)
{
    // 273E  ; [*0A76.0020.0002] 
    // SIX PETALLED BLACK AND WHITE FLORETTE

    uint32_t const cps[1] = { 0x273e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa76), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_120)
{
    // 273F  ; [*0A77.0020.0002] 
    // BLACK FLORETTE

    uint32_t const cps[1] = { 0x273f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa77), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_121)
{
    // 2740  ; [*0A78.0020.0002] 
    // WHITE FLORETTE

    uint32_t const cps[1] = { 0x2740 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa78), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_122)
{
    // 2741  ; [*0A79.0020.0002] 
    // EIGHT PETALLED OUTLINED BLACK FLORETTE

    uint32_t const cps[1] = { 0x2741 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa79), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_123)
{
    // 2742  ; [*0A7A.0020.0002] 
    // CIRCLED OPEN CENTRE EIGHT POINTED STAR

    uint32_t const cps[1] = { 0x2742 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa7a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_124)
{
    // 2743  ; [*0A7B.0020.0002] 
    // HEAVY TEARDROP-SPOKED PINWHEEL ASTERISK

    uint32_t const cps[1] = { 0x2743 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa7b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_125)
{
    // 2744  ; [*0A7C.0020.0002] 
    // SNOWFLAKE

    uint32_t const cps[1] = { 0x2744 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa7c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_126)
{
    // 2745  ; [*0A7D.0020.0002] 
    // TIGHT TRIFOLIATE SNOWFLAKE

    uint32_t const cps[1] = { 0x2745 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa7d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_127)
{
    // 2746  ; [*0A7E.0020.0002] 
    // HEAVY CHEVRON SNOWFLAKE

    uint32_t const cps[1] = { 0x2746 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa7e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_128)
{
    // 2747  ; [*0A7F.0020.0002] 
    // SPARKLE

    uint32_t const cps[1] = { 0x2747 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa7f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_129)
{
    // 2748  ; [*0A80.0020.0002] 
    // HEAVY SPARKLE

    uint32_t const cps[1] = { 0x2748 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa80), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_130)
{
    // 2749  ; [*0A81.0020.0002] 
    // BALLOON-SPOKED ASTERISK

    uint32_t const cps[1] = { 0x2749 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa81), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_131)
{
    // 274A  ; [*0A82.0020.0002] 
    // EIGHT TEARDROP-SPOKED PROPELLER ASTERISK

    uint32_t const cps[1] = { 0x274a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa82), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_132)
{
    // 274B  ; [*0A83.0020.0002] 
    // HEAVY EIGHT TEARDROP-SPOKED PROPELLER ASTERISK

    uint32_t const cps[1] = { 0x274b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa83), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_133)
{
    // 274C  ; [*0A84.0020.0002] 
    // CROSS MARK

    uint32_t const cps[1] = { 0x274c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa84), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_134)
{
    // 274D  ; [*0A85.0020.0002] 
    // SHADOWED WHITE CIRCLE

    uint32_t const cps[1] = { 0x274d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa85), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_135)
{
    // 274E  ; [*0A86.0020.0002] 
    // NEGATIVE SQUARED CROSS MARK

    uint32_t const cps[1] = { 0x274e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa86), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_136)
{
    // 274F  ; [*0A87.0020.0002] 
    // LOWER RIGHT DROP-SHADOWED WHITE SQUARE

    uint32_t const cps[1] = { 0x274f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa87), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_137)
{
    // 2750  ; [*0A88.0020.0002] 
    // UPPER RIGHT DROP-SHADOWED WHITE SQUARE

    uint32_t const cps[1] = { 0x2750 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa88), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_138)
{
    // 2751  ; [*0A89.0020.0002] 
    // LOWER RIGHT SHADOWED WHITE SQUARE

    uint32_t const cps[1] = { 0x2751 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa89), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_139)
{
    // 2752  ; [*0A8A.0020.0002] 
    // UPPER RIGHT SHADOWED WHITE SQUARE

    uint32_t const cps[1] = { 0x2752 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa8a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_140)
{
    // 2753  ; [*0A8B.0020.0002] 
    // BLACK QUESTION MARK ORNAMENT

    uint32_t const cps[1] = { 0x2753 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_141)
{
    // 2754  ; [*0A8C.0020.0002] 
    // WHITE QUESTION MARK ORNAMENT

    uint32_t const cps[1] = { 0x2754 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_142)
{
    // 2755  ; [*0A8D.0020.0002] 
    // WHITE EXCLAMATION MARK ORNAMENT

    uint32_t const cps[1] = { 0x2755 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_143)
{
    // 2756  ; [*0A8E.0020.0002] 
    // BLACK DIAMOND MINUS WHITE X

    uint32_t const cps[1] = { 0x2756 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_144)
{
    // 2757  ; [*0A8F.0020.0002] 
    // HEAVY EXCLAMATION MARK SYMBOL

    uint32_t const cps[1] = { 0x2757 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_145)
{
    // 2758  ; [*0A90.0020.0002] 
    // LIGHT VERTICAL BAR

    uint32_t const cps[1] = { 0x2758 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa90), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_146)
{
    // 2759  ; [*0A91.0020.0002] 
    // MEDIUM VERTICAL BAR

    uint32_t const cps[1] = { 0x2759 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa91), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_147)
{
    // 275A  ; [*0A92.0020.0002] 
    // HEAVY VERTICAL BAR

    uint32_t const cps[1] = { 0x275a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa92), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_148)
{
    // 275B  ; [*0A93.0020.0002] 
    // HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT

    uint32_t const cps[1] = { 0x275b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa93), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_063_149)
{
    // 275C  ; [*0A94.0020.0002] 
    // HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT

    uint32_t const cps[1] = { 0x275c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa94), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

