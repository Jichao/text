// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_188_000)
{
    // 1E8C8 ; [.1CA5.0020.0002] 
    // MENDE KIKAKUI DIGIT TWO

    uint32_t const cps[1] = { 0x1e8c8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_001)
{
    // 1E8C9 ; [.1CA6.0020.0002] 
    // MENDE KIKAKUI DIGIT THREE

    uint32_t const cps[1] = { 0x1e8c9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_002)
{
    // 1E8CA ; [.1CA7.0020.0002] 
    // MENDE KIKAKUI DIGIT FOUR

    uint32_t const cps[1] = { 0x1e8ca };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_003)
{
    // 1E8CB ; [.1CA8.0020.0002] 
    // MENDE KIKAKUI DIGIT FIVE

    uint32_t const cps[1] = { 0x1e8cb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_004)
{
    // 1E8CC ; [.1CA9.0020.0002] 
    // MENDE KIKAKUI DIGIT SIX

    uint32_t const cps[1] = { 0x1e8cc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_005)
{
    // 1E8CD ; [.1CAA.0020.0002] 
    // MENDE KIKAKUI DIGIT SEVEN

    uint32_t const cps[1] = { 0x1e8cd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_006)
{
    // 1E8CE ; [.1CAB.0020.0002] 
    // MENDE KIKAKUI DIGIT EIGHT

    uint32_t const cps[1] = { 0x1e8ce };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_007)
{
    // 1E8CF ; [.1CAC.0020.0002] 
    // MENDE KIKAKUI DIGIT NINE

    uint32_t const cps[1] = { 0x1e8cf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_008)
{
    // 1E8D0 ; [.0000.0000.0000] 
    // MENDE KIKAKUI COMBINING NUMBER TEENS

    uint32_t const cps[1] = { 0x1e8d0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_009)
{
    // 1E8D1 ; [.0000.0000.0000] 
    // MENDE KIKAKUI COMBINING NUMBER TENS

    uint32_t const cps[1] = { 0x1e8d1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_010)
{
    // 1E8D2 ; [.0000.0000.0000] 
    // MENDE KIKAKUI COMBINING NUMBER HUNDREDS

    uint32_t const cps[1] = { 0x1e8d2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_011)
{
    // 1E8D3 ; [.0000.0000.0000] 
    // MENDE KIKAKUI COMBINING NUMBER THOUSANDS

    uint32_t const cps[1] = { 0x1e8d3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_012)
{
    // 1E8D4 ; [.0000.0000.0000] 
    // MENDE KIKAKUI COMBINING NUMBER TEN THOUSANDS

    uint32_t const cps[1] = { 0x1e8d4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_013)
{
    // 1E8D5 ; [.0000.0000.0000] 
    // MENDE KIKAKUI COMBINING NUMBER HUNDRED THOUSANDS

    uint32_t const cps[1] = { 0x1e8d5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_014)
{
    // 1E8D6 ; [.0000.0000.0000] 
    // MENDE KIKAKUI COMBINING NUMBER MILLIONS

    uint32_t const cps[1] = { 0x1e8d6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_015)
{
    // 1E900 ; [.3CEA.0020.0008] 
    // ADLAM CAPITAL LETTER ALIF

    uint32_t const cps[1] = { 0x1e900 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cea), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_016)
{
    // 1E901 ; [.3CEB.0020.0008] 
    // ADLAM CAPITAL LETTER DAALI

    uint32_t const cps[1] = { 0x1e901 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3ceb), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_017)
{
    // 1E902 ; [.3CEC.0020.0008] 
    // ADLAM CAPITAL LETTER LAAM

    uint32_t const cps[1] = { 0x1e902 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cec), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_018)
{
    // 1E903 ; [.3CED.0020.0008] 
    // ADLAM CAPITAL LETTER MIIM

    uint32_t const cps[1] = { 0x1e903 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3ced), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_019)
{
    // 1E904 ; [.3CEE.0020.0008] 
    // ADLAM CAPITAL LETTER BA

    uint32_t const cps[1] = { 0x1e904 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cee), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_020)
{
    // 1E905 ; [.3CEF.0020.0008] 
    // ADLAM CAPITAL LETTER SINNYIIYHE

    uint32_t const cps[1] = { 0x1e905 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cef), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_021)
{
    // 1E906 ; [.3CF0.0020.0008] 
    // ADLAM CAPITAL LETTER PE

    uint32_t const cps[1] = { 0x1e906 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cf0), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_022)
{
    // 1E907 ; [.3CF1.0020.0008] 
    // ADLAM CAPITAL LETTER BHE

    uint32_t const cps[1] = { 0x1e907 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cf1), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_023)
{
    // 1E908 ; [.3CF2.0020.0008] 
    // ADLAM CAPITAL LETTER RA

    uint32_t const cps[1] = { 0x1e908 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cf2), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_024)
{
    // 1E909 ; [.3CF3.0020.0008] 
    // ADLAM CAPITAL LETTER E

    uint32_t const cps[1] = { 0x1e909 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cf3), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_025)
{
    // 1E90A ; [.3CF4.0020.0008] 
    // ADLAM CAPITAL LETTER FA

    uint32_t const cps[1] = { 0x1e90a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cf4), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_026)
{
    // 1E90B ; [.3CF5.0020.0008] 
    // ADLAM CAPITAL LETTER I

    uint32_t const cps[1] = { 0x1e90b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cf5), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_027)
{
    // 1E90C ; [.3CF6.0020.0008] 
    // ADLAM CAPITAL LETTER O

    uint32_t const cps[1] = { 0x1e90c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cf6), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_028)
{
    // 1E90D ; [.3CF7.0020.0008] 
    // ADLAM CAPITAL LETTER DHA

    uint32_t const cps[1] = { 0x1e90d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cf7), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_029)
{
    // 1E90E ; [.3CF8.0020.0008] 
    // ADLAM CAPITAL LETTER YHE

    uint32_t const cps[1] = { 0x1e90e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cf8), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_030)
{
    // 1E90F ; [.3CF9.0020.0008] 
    // ADLAM CAPITAL LETTER WAW

    uint32_t const cps[1] = { 0x1e90f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cf9), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_031)
{
    // 1E910 ; [.3CFA.0020.0008] 
    // ADLAM CAPITAL LETTER NUN

    uint32_t const cps[1] = { 0x1e910 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cfa), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_032)
{
    // 1E911 ; [.3CFB.0020.0008] 
    // ADLAM CAPITAL LETTER KAF

    uint32_t const cps[1] = { 0x1e911 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cfb), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_033)
{
    // 1E912 ; [.3CFC.0020.0008] 
    // ADLAM CAPITAL LETTER YA

    uint32_t const cps[1] = { 0x1e912 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cfc), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_034)
{
    // 1E913 ; [.3CFD.0020.0008] 
    // ADLAM CAPITAL LETTER U

    uint32_t const cps[1] = { 0x1e913 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cfd), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_035)
{
    // 1E914 ; [.3CFE.0020.0008] 
    // ADLAM CAPITAL LETTER JIIM

    uint32_t const cps[1] = { 0x1e914 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cfe), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_036)
{
    // 1E915 ; [.3CFF.0020.0008] 
    // ADLAM CAPITAL LETTER CHI

    uint32_t const cps[1] = { 0x1e915 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cff), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_037)
{
    // 1E916 ; [.3D00.0020.0008] 
    // ADLAM CAPITAL LETTER HA

    uint32_t const cps[1] = { 0x1e916 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d00), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_038)
{
    // 1E917 ; [.3D01.0020.0008] 
    // ADLAM CAPITAL LETTER QAAF

    uint32_t const cps[1] = { 0x1e917 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d01), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_039)
{
    // 1E918 ; [.3D02.0020.0008] 
    // ADLAM CAPITAL LETTER GA

    uint32_t const cps[1] = { 0x1e918 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d02), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_040)
{
    // 1E919 ; [.3D03.0020.0008] 
    // ADLAM CAPITAL LETTER NYA

    uint32_t const cps[1] = { 0x1e919 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d03), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_041)
{
    // 1E91A ; [.3D04.0020.0008] 
    // ADLAM CAPITAL LETTER TU

    uint32_t const cps[1] = { 0x1e91a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d04), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_042)
{
    // 1E91B ; [.3D05.0020.0008] 
    // ADLAM CAPITAL LETTER NHA

    uint32_t const cps[1] = { 0x1e91b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d05), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_043)
{
    // 1E91C ; [.3D06.0020.0008] 
    // ADLAM CAPITAL LETTER VA

    uint32_t const cps[1] = { 0x1e91c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d06), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_044)
{
    // 1E91D ; [.3D07.0020.0008] 
    // ADLAM CAPITAL LETTER KHA

    uint32_t const cps[1] = { 0x1e91d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d07), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_045)
{
    // 1E91E ; [.3D08.0020.0008] 
    // ADLAM CAPITAL LETTER GBE

    uint32_t const cps[1] = { 0x1e91e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d08), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_046)
{
    // 1E91F ; [.3D09.0020.0008] 
    // ADLAM CAPITAL LETTER ZAL

    uint32_t const cps[1] = { 0x1e91f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d09), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_047)
{
    // 1E920 ; [.3D0A.0020.0008] 
    // ADLAM CAPITAL LETTER KPO

    uint32_t const cps[1] = { 0x1e920 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d0a), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_048)
{
    // 1E921 ; [.3D0B.0020.0008] 
    // ADLAM CAPITAL LETTER SHA

    uint32_t const cps[1] = { 0x1e921 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d0b), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_049)
{
    // 1E922 ; [.3CEA.0020.0002] 
    // ADLAM SMALL LETTER ALIF

    uint32_t const cps[1] = { 0x1e922 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_050)
{
    // 1E923 ; [.3CEB.0020.0002] 
    // ADLAM SMALL LETTER DAALI

    uint32_t const cps[1] = { 0x1e923 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3ceb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_051)
{
    // 1E924 ; [.3CEC.0020.0002] 
    // ADLAM SMALL LETTER LAAM

    uint32_t const cps[1] = { 0x1e924 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_052)
{
    // 1E925 ; [.3CED.0020.0002] 
    // ADLAM SMALL LETTER MIIM

    uint32_t const cps[1] = { 0x1e925 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3ced), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_053)
{
    // 1E926 ; [.3CEE.0020.0002] 
    // ADLAM SMALL LETTER BA

    uint32_t const cps[1] = { 0x1e926 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_054)
{
    // 1E927 ; [.3CEF.0020.0002] 
    // ADLAM SMALL LETTER SINNYIIYHE

    uint32_t const cps[1] = { 0x1e927 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_055)
{
    // 1E928 ; [.3CF0.0020.0002] 
    // ADLAM SMALL LETTER PE

    uint32_t const cps[1] = { 0x1e928 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cf0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_056)
{
    // 1E929 ; [.3CF1.0020.0002] 
    // ADLAM SMALL LETTER BHE

    uint32_t const cps[1] = { 0x1e929 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cf1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_057)
{
    // 1E92A ; [.3CF2.0020.0002] 
    // ADLAM SMALL LETTER RA

    uint32_t const cps[1] = { 0x1e92a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cf2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_058)
{
    // 1E92B ; [.3CF3.0020.0002] 
    // ADLAM SMALL LETTER E

    uint32_t const cps[1] = { 0x1e92b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cf3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_059)
{
    // 1E92C ; [.3CF4.0020.0002] 
    // ADLAM SMALL LETTER FA

    uint32_t const cps[1] = { 0x1e92c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cf4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_060)
{
    // 1E92D ; [.3CF5.0020.0002] 
    // ADLAM SMALL LETTER I

    uint32_t const cps[1] = { 0x1e92d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cf5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_061)
{
    // 1E92E ; [.3CF6.0020.0002] 
    // ADLAM SMALL LETTER O

    uint32_t const cps[1] = { 0x1e92e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cf6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_062)
{
    // 1E92F ; [.3CF7.0020.0002] 
    // ADLAM SMALL LETTER DHA

    uint32_t const cps[1] = { 0x1e92f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cf7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_063)
{
    // 1E930 ; [.3CF8.0020.0002] 
    // ADLAM SMALL LETTER YHE

    uint32_t const cps[1] = { 0x1e930 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cf8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_064)
{
    // 1E931 ; [.3CF9.0020.0002] 
    // ADLAM SMALL LETTER WAW

    uint32_t const cps[1] = { 0x1e931 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cf9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_065)
{
    // 1E932 ; [.3CFA.0020.0002] 
    // ADLAM SMALL LETTER NUN

    uint32_t const cps[1] = { 0x1e932 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cfa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_066)
{
    // 1E933 ; [.3CFB.0020.0002] 
    // ADLAM SMALL LETTER KAF

    uint32_t const cps[1] = { 0x1e933 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cfb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_067)
{
    // 1E934 ; [.3CFC.0020.0002] 
    // ADLAM SMALL LETTER YA

    uint32_t const cps[1] = { 0x1e934 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cfc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_068)
{
    // 1E935 ; [.3CFD.0020.0002] 
    // ADLAM SMALL LETTER U

    uint32_t const cps[1] = { 0x1e935 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cfd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_069)
{
    // 1E936 ; [.3CFE.0020.0002] 
    // ADLAM SMALL LETTER JIIM

    uint32_t const cps[1] = { 0x1e936 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cfe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_070)
{
    // 1E937 ; [.3CFF.0020.0002] 
    // ADLAM SMALL LETTER CHI

    uint32_t const cps[1] = { 0x1e937 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_071)
{
    // 1E938 ; [.3D00.0020.0002] 
    // ADLAM SMALL LETTER HA

    uint32_t const cps[1] = { 0x1e938 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d00), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_072)
{
    // 1E939 ; [.3D01.0020.0002] 
    // ADLAM SMALL LETTER QAAF

    uint32_t const cps[1] = { 0x1e939 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d01), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_073)
{
    // 1E93A ; [.3D02.0020.0002] 
    // ADLAM SMALL LETTER GA

    uint32_t const cps[1] = { 0x1e93a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d02), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_074)
{
    // 1E93B ; [.3D03.0020.0002] 
    // ADLAM SMALL LETTER NYA

    uint32_t const cps[1] = { 0x1e93b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d03), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_075)
{
    // 1E93C ; [.3D04.0020.0002] 
    // ADLAM SMALL LETTER TU

    uint32_t const cps[1] = { 0x1e93c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d04), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_076)
{
    // 1E93D ; [.3D05.0020.0002] 
    // ADLAM SMALL LETTER NHA

    uint32_t const cps[1] = { 0x1e93d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d05), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_077)
{
    // 1E93E ; [.3D06.0020.0002] 
    // ADLAM SMALL LETTER VA

    uint32_t const cps[1] = { 0x1e93e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d06), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_078)
{
    // 1E93F ; [.3D07.0020.0002] 
    // ADLAM SMALL LETTER KHA

    uint32_t const cps[1] = { 0x1e93f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d07), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_079)
{
    // 1E940 ; [.3D08.0020.0002] 
    // ADLAM SMALL LETTER GBE

    uint32_t const cps[1] = { 0x1e940 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d08), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_080)
{
    // 1E941 ; [.3D09.0020.0002] 
    // ADLAM SMALL LETTER ZAL

    uint32_t const cps[1] = { 0x1e941 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d09), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_081)
{
    // 1E942 ; [.3D0A.0020.0002] 
    // ADLAM SMALL LETTER KPO

    uint32_t const cps[1] = { 0x1e942 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d0a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_082)
{
    // 1E943 ; [.3D0B.0020.0002] 
    // ADLAM SMALL LETTER SHA

    uint32_t const cps[1] = { 0x1e943 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d0b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_083)
{
    // 1E944 ; [.0000.00BD.0002] 
    // ADLAM ALIF LENGTHENER

    uint32_t const cps[1] = { 0x1e944 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x9d), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_084)
{
    // 1E945 ; [.0000.00BD.0002] 
    // ADLAM VOWEL LENGTHENER

    uint32_t const cps[1] = { 0x1e945 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x9d), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_085)
{
    // 1E946 ; [.0000.00BD.0002] 
    // ADLAM GEMINATION MARK

    uint32_t const cps[1] = { 0x1e946 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x9d), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_086)
{
    // 1E947 ; [.0000.00BF.0002] 
    // ADLAM HAMZA

    uint32_t const cps[1] = { 0x1e947 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x9f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_087)
{
    // 1E948 ; [.0000.00C0.0002] 
    // ADLAM CONSONANT MODIFIER

    uint32_t const cps[1] = { 0x1e948 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_088)
{
    // 1E949 ; [.0000.00C1.0002] 
    // ADLAM GEMINATE CONSONANT MODIFIER

    uint32_t const cps[1] = { 0x1e949 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa1), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_089)
{
    // 1E94A ; [.0000.00BE.0002] 
    // ADLAM NUKTA

    uint32_t const cps[1] = { 0x1e94a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x9e), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_090)
{
    // 1E950 ; [.1CA3.0020.0002] 
    // ADLAM DIGIT ZERO

    uint32_t const cps[1] = { 0x1e950 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_091)
{
    // 1E951 ; [.1CA4.0020.0002] 
    // ADLAM DIGIT ONE

    uint32_t const cps[1] = { 0x1e951 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_092)
{
    // 1E952 ; [.1CA5.0020.0002] 
    // ADLAM DIGIT TWO

    uint32_t const cps[1] = { 0x1e952 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_093)
{
    // 1E953 ; [.1CA6.0020.0002] 
    // ADLAM DIGIT THREE

    uint32_t const cps[1] = { 0x1e953 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_094)
{
    // 1E954 ; [.1CA7.0020.0002] 
    // ADLAM DIGIT FOUR

    uint32_t const cps[1] = { 0x1e954 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_095)
{
    // 1E955 ; [.1CA8.0020.0002] 
    // ADLAM DIGIT FIVE

    uint32_t const cps[1] = { 0x1e955 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_096)
{
    // 1E956 ; [.1CA9.0020.0002] 
    // ADLAM DIGIT SIX

    uint32_t const cps[1] = { 0x1e956 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_097)
{
    // 1E957 ; [.1CAA.0020.0002] 
    // ADLAM DIGIT SEVEN

    uint32_t const cps[1] = { 0x1e957 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_098)
{
    // 1E958 ; [.1CAB.0020.0002] 
    // ADLAM DIGIT EIGHT

    uint32_t const cps[1] = { 0x1e958 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_099)
{
    // 1E959 ; [.1CAC.0020.0002] 
    // ADLAM DIGIT NINE

    uint32_t const cps[1] = { 0x1e959 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_100)
{
    // 1E95E ; [*0266.0020.0002] 
    // ADLAM INITIAL EXCLAMATION MARK

    uint32_t const cps[1] = { 0x1e95e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x266), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_101)
{
    // 1E95F ; [*0275.0020.0002] 
    // ADLAM INITIAL QUESTION MARK

    uint32_t const cps[1] = { 0x1e95f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x275), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_102)
{
    // 1EE00 ; [.2371.0020.0005] 
    // ARABIC MATHEMATICAL ALEF

    uint32_t const cps[1] = { 0x1ee00 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2371), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_103)
{
    // 1EE01 ; [.2373.0020.0005] 
    // ARABIC MATHEMATICAL BEH

    uint32_t const cps[1] = { 0x1ee01 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2373), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_104)
{
    // 1EE02 ; [.238B.0020.0005] 
    // ARABIC MATHEMATICAL JEEM

    uint32_t const cps[1] = { 0x1ee02 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x238b), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_105)
{
    // 1EE03 ; [.239D.0020.0005] 
    // ARABIC MATHEMATICAL DAL

    uint32_t const cps[1] = { 0x1ee03 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x239d), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_106)
{
    // 1EE05 ; [.241D.0020.0005] 
    // ARABIC MATHEMATICAL WAW

    uint32_t const cps[1] = { 0x1ee05 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x241d), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_107)
{
    // 1EE06 ; [.23AD.0020.0005] 
    // ARABIC MATHEMATICAL ZAIN

    uint32_t const cps[1] = { 0x1ee06 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23ad), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_108)
{
    // 1EE07 ; [.2392.0020.0005] 
    // ARABIC MATHEMATICAL HAH

    uint32_t const cps[1] = { 0x1ee07 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2392), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_109)
{
    // 1EE08 ; [.23D0.0020.0005] 
    // ARABIC MATHEMATICAL TAH

    uint32_t const cps[1] = { 0x1ee08 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23d0), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_110)
{
    // 1EE09 ; [.242C.0020.0005] 
    // ARABIC MATHEMATICAL YEH

    uint32_t const cps[1] = { 0x1ee09 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x242c), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_111)
{
    // 1EE0A ; [.23ED.0020.0005] 
    // ARABIC MATHEMATICAL KAF

    uint32_t const cps[1] = { 0x1ee0a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23ed), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_112)
{
    // 1EE0B ; [.2402.0020.0005] 
    // ARABIC MATHEMATICAL LAM

    uint32_t const cps[1] = { 0x1ee0b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2402), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_113)
{
    // 1EE0C ; [.2409.0020.0005] 
    // ARABIC MATHEMATICAL MEEM

    uint32_t const cps[1] = { 0x1ee0c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2409), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_114)
{
    // 1EE0D ; [.240D.0020.0005] 
    // ARABIC MATHEMATICAL NOON

    uint32_t const cps[1] = { 0x1ee0d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x240d), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_115)
{
    // 1EE0E ; [.23BF.0020.0005] 
    // ARABIC MATHEMATICAL SEEN

    uint32_t const cps[1] = { 0x1ee0e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23bf), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_116)
{
    // 1EE0F ; [.23D4.0020.0005] 
    // ARABIC MATHEMATICAL AIN

    uint32_t const cps[1] = { 0x1ee0f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23d4), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_117)
{
    // 1EE10 ; [.23DC.0020.0005] 
    // ARABIC MATHEMATICAL FEH

    uint32_t const cps[1] = { 0x1ee10 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23dc), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_118)
{
    // 1EE11 ; [.23CA.0020.0005] 
    // ARABIC MATHEMATICAL SAD

    uint32_t const cps[1] = { 0x1ee11 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23ca), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_119)
{
    // 1EE12 ; [.23E8.0020.0005] 
    // ARABIC MATHEMATICAL QAF

    uint32_t const cps[1] = { 0x1ee12 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23e8), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_120)
{
    // 1EE13 ; [.23AC.0020.0005] 
    // ARABIC MATHEMATICAL REH

    uint32_t const cps[1] = { 0x1ee13 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23ac), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_121)
{
    // 1EE14 ; [.23C0.0020.0005] 
    // ARABIC MATHEMATICAL SHEEN

    uint32_t const cps[1] = { 0x1ee14 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23c0), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_122)
{
    // 1EE15 ; [.2383.0020.0005] 
    // ARABIC MATHEMATICAL TEH

    uint32_t const cps[1] = { 0x1ee15 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2383), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_123)
{
    // 1EE16 ; [.2384.0020.0005] 
    // ARABIC MATHEMATICAL THEH

    uint32_t const cps[1] = { 0x1ee16 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2384), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_124)
{
    // 1EE17 ; [.2393.0020.0005] 
    // ARABIC MATHEMATICAL KHAH

    uint32_t const cps[1] = { 0x1ee17 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2393), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_125)
{
    // 1EE18 ; [.239E.0020.0005] 
    // ARABIC MATHEMATICAL THAL

    uint32_t const cps[1] = { 0x1ee18 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x239e), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_126)
{
    // 1EE19 ; [.23CB.0020.0005] 
    // ARABIC MATHEMATICAL DAD

    uint32_t const cps[1] = { 0x1ee19 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23cb), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_127)
{
    // 1EE1A ; [.23D1.0020.0005] 
    // ARABIC MATHEMATICAL ZAH

    uint32_t const cps[1] = { 0x1ee1a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23d1), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_128)
{
    // 1EE1B ; [.23D5.0020.0005] 
    // ARABIC MATHEMATICAL GHAIN

    uint32_t const cps[1] = { 0x1ee1b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23d5), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_129)
{
    // 1EE1C ; [.2372.0020.0005] 
    // ARABIC MATHEMATICAL DOTLESS BEH

    uint32_t const cps[1] = { 0x1ee1c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2372), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_130)
{
    // 1EE1D ; [.240E.0020.0005] 
    // ARABIC MATHEMATICAL DOTLESS NOON

    uint32_t const cps[1] = { 0x1ee1d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x240e), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_131)
{
    // 1EE1E ; [.23DD.0020.0005] 
    // ARABIC MATHEMATICAL DOTLESS FEH

    uint32_t const cps[1] = { 0x1ee1e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23dd), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_132)
{
    // 1EE1F ; [.23E7.0020.0005] 
    // ARABIC MATHEMATICAL DOTLESS QAF

    uint32_t const cps[1] = { 0x1ee1f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23e7), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_133)
{
    // 1EE21 ; [.2373.0020.0005] 
    // ARABIC MATHEMATICAL INITIAL BEH

    uint32_t const cps[1] = { 0x1ee21 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2373), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_134)
{
    // 1EE22 ; [.238B.0020.0005] 
    // ARABIC MATHEMATICAL INITIAL JEEM

    uint32_t const cps[1] = { 0x1ee22 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x238b), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_135)
{
    // 1EE24 ; [.2417.0020.0005] 
    // ARABIC MATHEMATICAL INITIAL HEH

    uint32_t const cps[1] = { 0x1ee24 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2417), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_136)
{
    // 1EE27 ; [.2392.0020.0005] 
    // ARABIC MATHEMATICAL INITIAL HAH

    uint32_t const cps[1] = { 0x1ee27 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2392), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_137)
{
    // 1EE29 ; [.242C.0020.0005] 
    // ARABIC MATHEMATICAL INITIAL YEH

    uint32_t const cps[1] = { 0x1ee29 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x242c), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_138)
{
    // 1EE2A ; [.23ED.0020.0005] 
    // ARABIC MATHEMATICAL INITIAL KAF

    uint32_t const cps[1] = { 0x1ee2a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23ed), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_139)
{
    // 1EE2B ; [.2402.0020.0005] 
    // ARABIC MATHEMATICAL INITIAL LAM

    uint32_t const cps[1] = { 0x1ee2b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2402), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_140)
{
    // 1EE2C ; [.2409.0020.0005] 
    // ARABIC MATHEMATICAL INITIAL MEEM

    uint32_t const cps[1] = { 0x1ee2c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2409), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_141)
{
    // 1EE2D ; [.240D.0020.0005] 
    // ARABIC MATHEMATICAL INITIAL NOON

    uint32_t const cps[1] = { 0x1ee2d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x240d), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_142)
{
    // 1EE2E ; [.23BF.0020.0005] 
    // ARABIC MATHEMATICAL INITIAL SEEN

    uint32_t const cps[1] = { 0x1ee2e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23bf), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_143)
{
    // 1EE2F ; [.23D4.0020.0005] 
    // ARABIC MATHEMATICAL INITIAL AIN

    uint32_t const cps[1] = { 0x1ee2f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23d4), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_144)
{
    // 1EE30 ; [.23DC.0020.0005] 
    // ARABIC MATHEMATICAL INITIAL FEH

    uint32_t const cps[1] = { 0x1ee30 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23dc), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_145)
{
    // 1EE31 ; [.23CA.0020.0005] 
    // ARABIC MATHEMATICAL INITIAL SAD

    uint32_t const cps[1] = { 0x1ee31 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23ca), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_146)
{
    // 1EE32 ; [.23E8.0020.0005] 
    // ARABIC MATHEMATICAL INITIAL QAF

    uint32_t const cps[1] = { 0x1ee32 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23e8), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_147)
{
    // 1EE34 ; [.23C0.0020.0005] 
    // ARABIC MATHEMATICAL INITIAL SHEEN

    uint32_t const cps[1] = { 0x1ee34 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23c0), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_148)
{
    // 1EE35 ; [.2383.0020.0005] 
    // ARABIC MATHEMATICAL INITIAL TEH

    uint32_t const cps[1] = { 0x1ee35 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2383), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_188_149)
{
    // 1EE36 ; [.2384.0020.0005] 
    // ARABIC MATHEMATICAL INITIAL THEH

    uint32_t const cps[1] = { 0x1ee36 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2384), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

