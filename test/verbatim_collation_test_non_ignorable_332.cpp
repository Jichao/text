// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_332_000)
{
    // 360A 003F;	
    // (㘊) CJK UNIFIED IDEOGRAPH-360A	[FB80 B60A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x360A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB60A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_001)
{
    // 360A 0061;	
    // (㘊) CJK UNIFIED IDEOGRAPH-360A	[FB80 B60A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x360A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB60A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_002)
{
    // 360A 0041;	
    // (㘊) CJK UNIFIED IDEOGRAPH-360A	[FB80 B60A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x360A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB60A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_003)
{
    // 360A 0062;	
    // (㘊) CJK UNIFIED IDEOGRAPH-360A	[FB80 B60A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x360A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB60A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_004)
{
    // 360B 0021;	
    // (㘋) CJK UNIFIED IDEOGRAPH-360B	[FB80 B60B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x360B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB60B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_005)
{
    // 360B 003F;	
    // (㘋) CJK UNIFIED IDEOGRAPH-360B	[FB80 B60B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x360B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB60B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_006)
{
    // 360B 0061;	
    // (㘋) CJK UNIFIED IDEOGRAPH-360B	[FB80 B60B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x360B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB60B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_007)
{
    // 360B 0041;	
    // (㘋) CJK UNIFIED IDEOGRAPH-360B	[FB80 B60B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x360B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB60B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_008)
{
    // 360B 0062;	
    // (㘋) CJK UNIFIED IDEOGRAPH-360B	[FB80 B60B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x360B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB60B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_009)
{
    // 360C 0021;	
    // (㘌) CJK UNIFIED IDEOGRAPH-360C	[FB80 B60C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x360C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB60C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_010)
{
    // 360C 003F;	
    // (㘌) CJK UNIFIED IDEOGRAPH-360C	[FB80 B60C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x360C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB60C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_011)
{
    // 360C 0061;	
    // (㘌) CJK UNIFIED IDEOGRAPH-360C	[FB80 B60C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x360C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB60C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_012)
{
    // 360C 0041;	
    // (㘌) CJK UNIFIED IDEOGRAPH-360C	[FB80 B60C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x360C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB60C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_013)
{
    // 360C 0062;	
    // (㘌) CJK UNIFIED IDEOGRAPH-360C	[FB80 B60C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x360C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB60C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_014)
{
    // 360D 0021;	
    // (㘍) CJK UNIFIED IDEOGRAPH-360D	[FB80 B60D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x360D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB60D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_015)
{
    // 360D 003F;	
    // (㘍) CJK UNIFIED IDEOGRAPH-360D	[FB80 B60D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x360D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB60D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_016)
{
    // 360D 0061;	
    // (㘍) CJK UNIFIED IDEOGRAPH-360D	[FB80 B60D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x360D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB60D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_017)
{
    // 360D 0041;	
    // (㘍) CJK UNIFIED IDEOGRAPH-360D	[FB80 B60D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x360D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB60D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_018)
{
    // 360D 0062;	
    // (㘍) CJK UNIFIED IDEOGRAPH-360D	[FB80 B60D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x360D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB60D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_019)
{
    // 360E 0021;	
    // (㘎) CJK UNIFIED IDEOGRAPH-360E	[FB80 B60E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x360E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB60E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_020)
{
    // 360E 003F;	
    // (㘎) CJK UNIFIED IDEOGRAPH-360E	[FB80 B60E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x360E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB60E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_021)
{
    // 360E 0061;	
    // (㘎) CJK UNIFIED IDEOGRAPH-360E	[FB80 B60E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x360E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB60E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_022)
{
    // 360E 0041;	
    // (㘎) CJK UNIFIED IDEOGRAPH-360E	[FB80 B60E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x360E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB60E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_023)
{
    // 360E 0062;	
    // (㘎) CJK UNIFIED IDEOGRAPH-360E	[FB80 B60E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x360E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB60E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_024)
{
    // 360F 0021;	
    // (㘏) CJK UNIFIED IDEOGRAPH-360F	[FB80 B60F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x360F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB60F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_025)
{
    // 360F 003F;	
    // (㘏) CJK UNIFIED IDEOGRAPH-360F	[FB80 B60F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x360F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB60F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_026)
{
    // 360F 0061;	
    // (㘏) CJK UNIFIED IDEOGRAPH-360F	[FB80 B60F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x360F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB60F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_027)
{
    // 360F 0041;	
    // (㘏) CJK UNIFIED IDEOGRAPH-360F	[FB80 B60F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x360F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB60F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_028)
{
    // 360F 0062;	
    // (㘏) CJK UNIFIED IDEOGRAPH-360F	[FB80 B60F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x360F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB60F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_029)
{
    // 3610 0021;	
    // (㘐) CJK UNIFIED IDEOGRAPH-3610	[FB80 B610 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3610, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB610, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_030)
{
    // 3610 003F;	
    // (㘐) CJK UNIFIED IDEOGRAPH-3610	[FB80 B610 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3610, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB610, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_031)
{
    // 3610 0061;	
    // (㘐) CJK UNIFIED IDEOGRAPH-3610	[FB80 B610 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3610, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB610, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_032)
{
    // 3610 0041;	
    // (㘐) CJK UNIFIED IDEOGRAPH-3610	[FB80 B610 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3610, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB610, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_033)
{
    // 3610 0062;	
    // (㘐) CJK UNIFIED IDEOGRAPH-3610	[FB80 B610 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3610, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB610, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_034)
{
    // 3611 0021;	
    // (㘑) CJK UNIFIED IDEOGRAPH-3611	[FB80 B611 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3611, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB611, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_035)
{
    // 3611 003F;	
    // (㘑) CJK UNIFIED IDEOGRAPH-3611	[FB80 B611 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3611, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB611, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_036)
{
    // 3611 0061;	
    // (㘑) CJK UNIFIED IDEOGRAPH-3611	[FB80 B611 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3611, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB611, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_037)
{
    // 3611 0041;	
    // (㘑) CJK UNIFIED IDEOGRAPH-3611	[FB80 B611 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3611, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB611, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_038)
{
    // 3611 0062;	
    // (㘑) CJK UNIFIED IDEOGRAPH-3611	[FB80 B611 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3611, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB611, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_039)
{
    // 3612 0021;	
    // (㘒) CJK UNIFIED IDEOGRAPH-3612	[FB80 B612 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3612, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB612, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_040)
{
    // 3612 003F;	
    // (㘒) CJK UNIFIED IDEOGRAPH-3612	[FB80 B612 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3612, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB612, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_041)
{
    // 3612 0061;	
    // (㘒) CJK UNIFIED IDEOGRAPH-3612	[FB80 B612 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3612, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB612, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_042)
{
    // 3612 0041;	
    // (㘒) CJK UNIFIED IDEOGRAPH-3612	[FB80 B612 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3612, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB612, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_043)
{
    // 3612 0062;	
    // (㘒) CJK UNIFIED IDEOGRAPH-3612	[FB80 B612 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3612, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB612, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_044)
{
    // 3613 0021;	
    // (㘓) CJK UNIFIED IDEOGRAPH-3613	[FB80 B613 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3613, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB613, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_045)
{
    // 3613 003F;	
    // (㘓) CJK UNIFIED IDEOGRAPH-3613	[FB80 B613 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3613, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB613, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_046)
{
    // 3613 0061;	
    // (㘓) CJK UNIFIED IDEOGRAPH-3613	[FB80 B613 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3613, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB613, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_047)
{
    // 3613 0041;	
    // (㘓) CJK UNIFIED IDEOGRAPH-3613	[FB80 B613 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3613, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB613, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_048)
{
    // 3613 0062;	
    // (㘓) CJK UNIFIED IDEOGRAPH-3613	[FB80 B613 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3613, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB613, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_049)
{
    // 3614 0021;	
    // (㘔) CJK UNIFIED IDEOGRAPH-3614	[FB80 B614 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3614, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB614, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_050)
{
    // 3614 003F;	
    // (㘔) CJK UNIFIED IDEOGRAPH-3614	[FB80 B614 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3614, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB614, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_051)
{
    // 3614 0061;	
    // (㘔) CJK UNIFIED IDEOGRAPH-3614	[FB80 B614 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3614, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB614, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_052)
{
    // 3614 0041;	
    // (㘔) CJK UNIFIED IDEOGRAPH-3614	[FB80 B614 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3614, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB614, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_053)
{
    // 3614 0062;	
    // (㘔) CJK UNIFIED IDEOGRAPH-3614	[FB80 B614 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3614, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB614, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_054)
{
    // 3615 0021;	
    // (㘕) CJK UNIFIED IDEOGRAPH-3615	[FB80 B615 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3615, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB615, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_055)
{
    // 3615 003F;	
    // (㘕) CJK UNIFIED IDEOGRAPH-3615	[FB80 B615 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3615, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB615, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_056)
{
    // 3615 0061;	
    // (㘕) CJK UNIFIED IDEOGRAPH-3615	[FB80 B615 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3615, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB615, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_057)
{
    // 3615 0041;	
    // (㘕) CJK UNIFIED IDEOGRAPH-3615	[FB80 B615 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3615, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB615, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_058)
{
    // 3615 0062;	
    // (㘕) CJK UNIFIED IDEOGRAPH-3615	[FB80 B615 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3615, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB615, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_059)
{
    // 3616 0021;	
    // (㘖) CJK UNIFIED IDEOGRAPH-3616	[FB80 B616 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3616, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB616, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_060)
{
    // 3616 003F;	
    // (㘖) CJK UNIFIED IDEOGRAPH-3616	[FB80 B616 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3616, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB616, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_061)
{
    // 3616 0061;	
    // (㘖) CJK UNIFIED IDEOGRAPH-3616	[FB80 B616 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3616, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB616, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_062)
{
    // 3616 0041;	
    // (㘖) CJK UNIFIED IDEOGRAPH-3616	[FB80 B616 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3616, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB616, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_063)
{
    // 3616 0062;	
    // (㘖) CJK UNIFIED IDEOGRAPH-3616	[FB80 B616 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3616, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB616, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_064)
{
    // 3617 0021;	
    // (㘗) CJK UNIFIED IDEOGRAPH-3617	[FB80 B617 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3617, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB617, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_065)
{
    // 3617 003F;	
    // (㘗) CJK UNIFIED IDEOGRAPH-3617	[FB80 B617 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3617, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB617, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_066)
{
    // 3617 0061;	
    // (㘗) CJK UNIFIED IDEOGRAPH-3617	[FB80 B617 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3617, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB617, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_067)
{
    // 3617 0041;	
    // (㘗) CJK UNIFIED IDEOGRAPH-3617	[FB80 B617 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3617, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB617, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_068)
{
    // 3617 0062;	
    // (㘗) CJK UNIFIED IDEOGRAPH-3617	[FB80 B617 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3617, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB617, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_069)
{
    // 3618 0021;	
    // (㘘) CJK UNIFIED IDEOGRAPH-3618	[FB80 B618 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3618, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB618, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_070)
{
    // 3618 003F;	
    // (㘘) CJK UNIFIED IDEOGRAPH-3618	[FB80 B618 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3618, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB618, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_071)
{
    // 3618 0061;	
    // (㘘) CJK UNIFIED IDEOGRAPH-3618	[FB80 B618 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3618, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB618, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_072)
{
    // 3618 0041;	
    // (㘘) CJK UNIFIED IDEOGRAPH-3618	[FB80 B618 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3618, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB618, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_073)
{
    // 3618 0062;	
    // (㘘) CJK UNIFIED IDEOGRAPH-3618	[FB80 B618 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3618, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB618, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_074)
{
    // 3619 0021;	
    // (㘙) CJK UNIFIED IDEOGRAPH-3619	[FB80 B619 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3619, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB619, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_075)
{
    // 3619 003F;	
    // (㘙) CJK UNIFIED IDEOGRAPH-3619	[FB80 B619 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3619, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB619, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_076)
{
    // 3619 0061;	
    // (㘙) CJK UNIFIED IDEOGRAPH-3619	[FB80 B619 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3619, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB619, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_077)
{
    // 3619 0041;	
    // (㘙) CJK UNIFIED IDEOGRAPH-3619	[FB80 B619 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3619, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB619, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_078)
{
    // 3619 0062;	
    // (㘙) CJK UNIFIED IDEOGRAPH-3619	[FB80 B619 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3619, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB619, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_079)
{
    // 361A 0021;	
    // (㘚) CJK UNIFIED IDEOGRAPH-361A	[FB80 B61A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x361A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB61A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_080)
{
    // 361A 003F;	
    // (㘚) CJK UNIFIED IDEOGRAPH-361A	[FB80 B61A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x361A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB61A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_081)
{
    // 361A 0061;	
    // (㘚) CJK UNIFIED IDEOGRAPH-361A	[FB80 B61A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x361A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB61A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_082)
{
    // 361A 0041;	
    // (㘚) CJK UNIFIED IDEOGRAPH-361A	[FB80 B61A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x361A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB61A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_083)
{
    // 361A 0062;	
    // (㘚) CJK UNIFIED IDEOGRAPH-361A	[FB80 B61A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x361A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB61A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_084)
{
    // 361B 0021;	
    // (㘛) CJK UNIFIED IDEOGRAPH-361B	[FB80 B61B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x361B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB61B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_085)
{
    // 361B 003F;	
    // (㘛) CJK UNIFIED IDEOGRAPH-361B	[FB80 B61B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x361B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB61B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_086)
{
    // 361B 0061;	
    // (㘛) CJK UNIFIED IDEOGRAPH-361B	[FB80 B61B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x361B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB61B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_087)
{
    // 361B 0041;	
    // (㘛) CJK UNIFIED IDEOGRAPH-361B	[FB80 B61B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x361B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB61B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_088)
{
    // 361B 0062;	
    // (㘛) CJK UNIFIED IDEOGRAPH-361B	[FB80 B61B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x361B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB61B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_089)
{
    // 361C 0021;	
    // (㘜) CJK UNIFIED IDEOGRAPH-361C	[FB80 B61C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x361C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB61C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_090)
{
    // 361C 003F;	
    // (㘜) CJK UNIFIED IDEOGRAPH-361C	[FB80 B61C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x361C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB61C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_091)
{
    // 361C 0061;	
    // (㘜) CJK UNIFIED IDEOGRAPH-361C	[FB80 B61C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x361C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB61C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_092)
{
    // 361C 0041;	
    // (㘜) CJK UNIFIED IDEOGRAPH-361C	[FB80 B61C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x361C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB61C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_093)
{
    // 361C 0062;	
    // (㘜) CJK UNIFIED IDEOGRAPH-361C	[FB80 B61C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x361C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB61C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_094)
{
    // 361D 0021;	
    // (㘝) CJK UNIFIED IDEOGRAPH-361D	[FB80 B61D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x361D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB61D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_095)
{
    // 361D 003F;	
    // (㘝) CJK UNIFIED IDEOGRAPH-361D	[FB80 B61D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x361D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB61D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_096)
{
    // 361D 0061;	
    // (㘝) CJK UNIFIED IDEOGRAPH-361D	[FB80 B61D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x361D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB61D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_097)
{
    // 361D 0041;	
    // (㘝) CJK UNIFIED IDEOGRAPH-361D	[FB80 B61D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x361D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB61D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_098)
{
    // 361D 0062;	
    // (㘝) CJK UNIFIED IDEOGRAPH-361D	[FB80 B61D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x361D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB61D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_099)
{
    // 361E 0021;	
    // (㘞) CJK UNIFIED IDEOGRAPH-361E	[FB80 B61E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x361E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB61E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_100)
{
    // 361E 003F;	
    // (㘞) CJK UNIFIED IDEOGRAPH-361E	[FB80 B61E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x361E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB61E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_101)
{
    // 361E 0061;	
    // (㘞) CJK UNIFIED IDEOGRAPH-361E	[FB80 B61E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x361E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB61E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_102)
{
    // 361E 0041;	
    // (㘞) CJK UNIFIED IDEOGRAPH-361E	[FB80 B61E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x361E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB61E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_103)
{
    // 361E 0062;	
    // (㘞) CJK UNIFIED IDEOGRAPH-361E	[FB80 B61E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x361E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB61E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_104)
{
    // 361F 0021;	
    // (㘟) CJK UNIFIED IDEOGRAPH-361F	[FB80 B61F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x361F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB61F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_105)
{
    // 361F 003F;	
    // (㘟) CJK UNIFIED IDEOGRAPH-361F	[FB80 B61F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x361F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB61F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_106)
{
    // 361F 0061;	
    // (㘟) CJK UNIFIED IDEOGRAPH-361F	[FB80 B61F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x361F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB61F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_107)
{
    // 361F 0041;	
    // (㘟) CJK UNIFIED IDEOGRAPH-361F	[FB80 B61F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x361F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB61F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_108)
{
    // 361F 0062;	
    // (㘟) CJK UNIFIED IDEOGRAPH-361F	[FB80 B61F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x361F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB61F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_109)
{
    // 3620 0021;	
    // (㘠) CJK UNIFIED IDEOGRAPH-3620	[FB80 B620 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3620, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB620, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_110)
{
    // 3620 003F;	
    // (㘠) CJK UNIFIED IDEOGRAPH-3620	[FB80 B620 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3620, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB620, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_111)
{
    // 3620 0061;	
    // (㘠) CJK UNIFIED IDEOGRAPH-3620	[FB80 B620 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3620, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB620, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_112)
{
    // 3620 0041;	
    // (㘠) CJK UNIFIED IDEOGRAPH-3620	[FB80 B620 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3620, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB620, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_113)
{
    // 3620 0062;	
    // (㘠) CJK UNIFIED IDEOGRAPH-3620	[FB80 B620 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3620, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB620, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_114)
{
    // 3621 0021;	
    // (㘡) CJK UNIFIED IDEOGRAPH-3621	[FB80 B621 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3621, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB621, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_115)
{
    // 3621 003F;	
    // (㘡) CJK UNIFIED IDEOGRAPH-3621	[FB80 B621 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3621, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB621, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_116)
{
    // 3621 0061;	
    // (㘡) CJK UNIFIED IDEOGRAPH-3621	[FB80 B621 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3621, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB621, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_117)
{
    // 3621 0041;	
    // (㘡) CJK UNIFIED IDEOGRAPH-3621	[FB80 B621 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3621, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB621, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_118)
{
    // 3621 0062;	
    // (㘡) CJK UNIFIED IDEOGRAPH-3621	[FB80 B621 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3621, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB621, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_119)
{
    // 3622 0021;	
    // (㘢) CJK UNIFIED IDEOGRAPH-3622	[FB80 B622 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3622, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB622, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_120)
{
    // 3622 003F;	
    // (㘢) CJK UNIFIED IDEOGRAPH-3622	[FB80 B622 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3622, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB622, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_121)
{
    // 3622 0061;	
    // (㘢) CJK UNIFIED IDEOGRAPH-3622	[FB80 B622 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3622, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB622, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_122)
{
    // 3622 0041;	
    // (㘢) CJK UNIFIED IDEOGRAPH-3622	[FB80 B622 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3622, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB622, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_123)
{
    // 3622 0062;	
    // (㘢) CJK UNIFIED IDEOGRAPH-3622	[FB80 B622 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3622, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB622, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_124)
{
    // 3623 0021;	
    // (㘣) CJK UNIFIED IDEOGRAPH-3623	[FB80 B623 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3623, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB623, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_125)
{
    // 3623 003F;	
    // (㘣) CJK UNIFIED IDEOGRAPH-3623	[FB80 B623 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3623, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB623, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_126)
{
    // 3623 0061;	
    // (㘣) CJK UNIFIED IDEOGRAPH-3623	[FB80 B623 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3623, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB623, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_127)
{
    // 3623 0041;	
    // (㘣) CJK UNIFIED IDEOGRAPH-3623	[FB80 B623 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3623, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB623, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_128)
{
    // 3623 0062;	
    // (㘣) CJK UNIFIED IDEOGRAPH-3623	[FB80 B623 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3623, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB623, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_129)
{
    // 3624 0021;	
    // (㘤) CJK UNIFIED IDEOGRAPH-3624	[FB80 B624 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3624, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB624, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_130)
{
    // 3624 003F;	
    // (㘤) CJK UNIFIED IDEOGRAPH-3624	[FB80 B624 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3624, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB624, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_131)
{
    // 3624 0061;	
    // (㘤) CJK UNIFIED IDEOGRAPH-3624	[FB80 B624 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3624, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB624, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_132)
{
    // 3624 0041;	
    // (㘤) CJK UNIFIED IDEOGRAPH-3624	[FB80 B624 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3624, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB624, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_133)
{
    // 3624 0062;	
    // (㘤) CJK UNIFIED IDEOGRAPH-3624	[FB80 B624 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3624, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB624, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_134)
{
    // 3625 0021;	
    // (㘥) CJK UNIFIED IDEOGRAPH-3625	[FB80 B625 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3625, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB625, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_135)
{
    // 3625 003F;	
    // (㘥) CJK UNIFIED IDEOGRAPH-3625	[FB80 B625 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3625, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB625, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_136)
{
    // 3625 0061;	
    // (㘥) CJK UNIFIED IDEOGRAPH-3625	[FB80 B625 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3625, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB625, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_137)
{
    // 3625 0041;	
    // (㘥) CJK UNIFIED IDEOGRAPH-3625	[FB80 B625 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3625, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB625, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_138)
{
    // 3625 0062;	
    // (㘥) CJK UNIFIED IDEOGRAPH-3625	[FB80 B625 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3625, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB625, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_139)
{
    // 3626 0021;	
    // (㘦) CJK UNIFIED IDEOGRAPH-3626	[FB80 B626 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3626, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB626, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_140)
{
    // 3626 003F;	
    // (㘦) CJK UNIFIED IDEOGRAPH-3626	[FB80 B626 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3626, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB626, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_141)
{
    // 3626 0061;	
    // (㘦) CJK UNIFIED IDEOGRAPH-3626	[FB80 B626 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3626, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB626, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_142)
{
    // 3626 0041;	
    // (㘦) CJK UNIFIED IDEOGRAPH-3626	[FB80 B626 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3626, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB626, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_143)
{
    // 3626 0062;	
    // (㘦) CJK UNIFIED IDEOGRAPH-3626	[FB80 B626 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3626, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB626, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_144)
{
    // 3627 0021;	
    // (㘧) CJK UNIFIED IDEOGRAPH-3627	[FB80 B627 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3627, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB627, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_145)
{
    // 3627 003F;	
    // (㘧) CJK UNIFIED IDEOGRAPH-3627	[FB80 B627 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3627, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB627, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_146)
{
    // 3627 0061;	
    // (㘧) CJK UNIFIED IDEOGRAPH-3627	[FB80 B627 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3627, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB627, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_147)
{
    // 3627 0041;	
    // (㘧) CJK UNIFIED IDEOGRAPH-3627	[FB80 B627 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3627, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB627, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_148)
{
    // 3627 0062;	
    // (㘧) CJK UNIFIED IDEOGRAPH-3627	[FB80 B627 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3627, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB627, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_149)
{
    // 3628 0021;	
    // (㘨) CJK UNIFIED IDEOGRAPH-3628	[FB80 B628 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3628, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB628, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_150)
{
    // 3628 003F;	
    // (㘨) CJK UNIFIED IDEOGRAPH-3628	[FB80 B628 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3628, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB628, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_151)
{
    // 3628 0061;	
    // (㘨) CJK UNIFIED IDEOGRAPH-3628	[FB80 B628 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3628, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB628, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_152)
{
    // 3628 0041;	
    // (㘨) CJK UNIFIED IDEOGRAPH-3628	[FB80 B628 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3628, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB628, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_153)
{
    // 3628 0062;	
    // (㘨) CJK UNIFIED IDEOGRAPH-3628	[FB80 B628 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3628, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB628, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_154)
{
    // 3629 0021;	
    // (㘩) CJK UNIFIED IDEOGRAPH-3629	[FB80 B629 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3629, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB629, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_155)
{
    // 3629 003F;	
    // (㘩) CJK UNIFIED IDEOGRAPH-3629	[FB80 B629 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3629, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB629, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_156)
{
    // 3629 0061;	
    // (㘩) CJK UNIFIED IDEOGRAPH-3629	[FB80 B629 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3629, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB629, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_157)
{
    // 3629 0041;	
    // (㘩) CJK UNIFIED IDEOGRAPH-3629	[FB80 B629 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3629, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB629, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_158)
{
    // 3629 0062;	
    // (㘩) CJK UNIFIED IDEOGRAPH-3629	[FB80 B629 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3629, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB629, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_159)
{
    // 362A 0021;	
    // (㘪) CJK UNIFIED IDEOGRAPH-362A	[FB80 B62A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x362A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB62A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_160)
{
    // 362A 003F;	
    // (㘪) CJK UNIFIED IDEOGRAPH-362A	[FB80 B62A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x362A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB62A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_161)
{
    // 362A 0061;	
    // (㘪) CJK UNIFIED IDEOGRAPH-362A	[FB80 B62A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x362A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB62A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_162)
{
    // 362A 0041;	
    // (㘪) CJK UNIFIED IDEOGRAPH-362A	[FB80 B62A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x362A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB62A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_163)
{
    // 362A 0062;	
    // (㘪) CJK UNIFIED IDEOGRAPH-362A	[FB80 B62A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x362A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB62A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_164)
{
    // 362B 0021;	
    // (㘫) CJK UNIFIED IDEOGRAPH-362B	[FB80 B62B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x362B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB62B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_165)
{
    // 362B 003F;	
    // (㘫) CJK UNIFIED IDEOGRAPH-362B	[FB80 B62B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x362B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB62B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_166)
{
    // 362B 0061;	
    // (㘫) CJK UNIFIED IDEOGRAPH-362B	[FB80 B62B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x362B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB62B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_167)
{
    // 362B 0041;	
    // (㘫) CJK UNIFIED IDEOGRAPH-362B	[FB80 B62B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x362B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB62B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_168)
{
    // 362B 0062;	
    // (㘫) CJK UNIFIED IDEOGRAPH-362B	[FB80 B62B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x362B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB62B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_169)
{
    // 362C 0021;	
    // (㘬) CJK UNIFIED IDEOGRAPH-362C	[FB80 B62C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x362C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB62C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_170)
{
    // 362C 003F;	
    // (㘬) CJK UNIFIED IDEOGRAPH-362C	[FB80 B62C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x362C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB62C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_171)
{
    // 362C 0061;	
    // (㘬) CJK UNIFIED IDEOGRAPH-362C	[FB80 B62C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x362C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB62C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_172)
{
    // 362C 0041;	
    // (㘬) CJK UNIFIED IDEOGRAPH-362C	[FB80 B62C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x362C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB62C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_173)
{
    // 362C 0062;	
    // (㘬) CJK UNIFIED IDEOGRAPH-362C	[FB80 B62C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x362C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB62C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_174)
{
    // 362D 0021;	
    // (㘭) CJK UNIFIED IDEOGRAPH-362D	[FB80 B62D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x362D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB62D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_175)
{
    // 362D 003F;	
    // (㘭) CJK UNIFIED IDEOGRAPH-362D	[FB80 B62D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x362D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB62D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_176)
{
    // 362D 0061;	
    // (㘭) CJK UNIFIED IDEOGRAPH-362D	[FB80 B62D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x362D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB62D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_177)
{
    // 362D 0041;	
    // (㘭) CJK UNIFIED IDEOGRAPH-362D	[FB80 B62D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x362D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB62D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_178)
{
    // 362D 0062;	
    // (㘭) CJK UNIFIED IDEOGRAPH-362D	[FB80 B62D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x362D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB62D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_179)
{
    // 362E 0021;	
    // (㘮) CJK UNIFIED IDEOGRAPH-362E	[FB80 B62E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x362E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB62E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_180)
{
    // 362E 003F;	
    // (㘮) CJK UNIFIED IDEOGRAPH-362E	[FB80 B62E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x362E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB62E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_181)
{
    // 362E 0061;	
    // (㘮) CJK UNIFIED IDEOGRAPH-362E	[FB80 B62E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x362E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB62E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_182)
{
    // 362E 0041;	
    // (㘮) CJK UNIFIED IDEOGRAPH-362E	[FB80 B62E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x362E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB62E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_183)
{
    // 362E 0062;	
    // (㘮) CJK UNIFIED IDEOGRAPH-362E	[FB80 B62E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x362E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB62E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_184)
{
    // 362F 0021;	
    // (㘯) CJK UNIFIED IDEOGRAPH-362F	[FB80 B62F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x362F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB62F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_185)
{
    // 362F 003F;	
    // (㘯) CJK UNIFIED IDEOGRAPH-362F	[FB80 B62F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x362F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB62F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_186)
{
    // 362F 0061;	
    // (㘯) CJK UNIFIED IDEOGRAPH-362F	[FB80 B62F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x362F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB62F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_187)
{
    // 362F 0041;	
    // (㘯) CJK UNIFIED IDEOGRAPH-362F	[FB80 B62F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x362F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB62F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_188)
{
    // 362F 0062;	
    // (㘯) CJK UNIFIED IDEOGRAPH-362F	[FB80 B62F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x362F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB62F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_189)
{
    // 3630 0021;	
    // (㘰) CJK UNIFIED IDEOGRAPH-3630	[FB80 B630 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3630, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB630, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_190)
{
    // 3630 003F;	
    // (㘰) CJK UNIFIED IDEOGRAPH-3630	[FB80 B630 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3630, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB630, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_191)
{
    // 3630 0061;	
    // (㘰) CJK UNIFIED IDEOGRAPH-3630	[FB80 B630 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3630, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB630, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_192)
{
    // 3630 0041;	
    // (㘰) CJK UNIFIED IDEOGRAPH-3630	[FB80 B630 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3630, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB630, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_193)
{
    // 3630 0062;	
    // (㘰) CJK UNIFIED IDEOGRAPH-3630	[FB80 B630 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3630, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB630, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_194)
{
    // 3631 0021;	
    // (㘱) CJK UNIFIED IDEOGRAPH-3631	[FB80 B631 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3631, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB631, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_195)
{
    // 3631 003F;	
    // (㘱) CJK UNIFIED IDEOGRAPH-3631	[FB80 B631 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3631, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB631, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_196)
{
    // 3631 0061;	
    // (㘱) CJK UNIFIED IDEOGRAPH-3631	[FB80 B631 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3631, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_197)
{
    // 3631 0041;	
    // (㘱) CJK UNIFIED IDEOGRAPH-3631	[FB80 B631 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3631, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_198)
{
    // 3631 0062;	
    // (㘱) CJK UNIFIED IDEOGRAPH-3631	[FB80 B631 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3631, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB631, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_199)
{
    // 3632 0021;	
    // (㘲) CJK UNIFIED IDEOGRAPH-3632	[FB80 B632 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3632, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB632, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_200)
{
    // 3632 003F;	
    // (㘲) CJK UNIFIED IDEOGRAPH-3632	[FB80 B632 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3632, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB632, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_201)
{
    // 3632 0061;	
    // (㘲) CJK UNIFIED IDEOGRAPH-3632	[FB80 B632 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3632, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB632, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_202)
{
    // 3632 0041;	
    // (㘲) CJK UNIFIED IDEOGRAPH-3632	[FB80 B632 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3632, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB632, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_203)
{
    // 3632 0062;	
    // (㘲) CJK UNIFIED IDEOGRAPH-3632	[FB80 B632 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3632, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB632, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_204)
{
    // 3633 0021;	
    // (㘳) CJK UNIFIED IDEOGRAPH-3633	[FB80 B633 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3633, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB633, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_205)
{
    // 3633 003F;	
    // (㘳) CJK UNIFIED IDEOGRAPH-3633	[FB80 B633 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3633, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB633, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_206)
{
    // 3633 0061;	
    // (㘳) CJK UNIFIED IDEOGRAPH-3633	[FB80 B633 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3633, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB633, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_207)
{
    // 3633 0041;	
    // (㘳) CJK UNIFIED IDEOGRAPH-3633	[FB80 B633 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3633, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB633, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_208)
{
    // 3633 0062;	
    // (㘳) CJK UNIFIED IDEOGRAPH-3633	[FB80 B633 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3633, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB633, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_209)
{
    // 3634 0021;	
    // (㘴) CJK UNIFIED IDEOGRAPH-3634	[FB80 B634 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3634, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB634, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_210)
{
    // 3634 003F;	
    // (㘴) CJK UNIFIED IDEOGRAPH-3634	[FB80 B634 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3634, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB634, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_211)
{
    // 3634 0061;	
    // (㘴) CJK UNIFIED IDEOGRAPH-3634	[FB80 B634 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3634, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB634, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_212)
{
    // 3634 0041;	
    // (㘴) CJK UNIFIED IDEOGRAPH-3634	[FB80 B634 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3634, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB634, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_213)
{
    // 3634 0062;	
    // (㘴) CJK UNIFIED IDEOGRAPH-3634	[FB80 B634 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3634, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB634, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_214)
{
    // 3635 0021;	
    // (㘵) CJK UNIFIED IDEOGRAPH-3635	[FB80 B635 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3635, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB635, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_215)
{
    // 3635 003F;	
    // (㘵) CJK UNIFIED IDEOGRAPH-3635	[FB80 B635 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3635, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB635, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_216)
{
    // 3635 0061;	
    // (㘵) CJK UNIFIED IDEOGRAPH-3635	[FB80 B635 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3635, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB635, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_217)
{
    // 3635 0041;	
    // (㘵) CJK UNIFIED IDEOGRAPH-3635	[FB80 B635 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3635, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB635, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_218)
{
    // 3635 0062;	
    // (㘵) CJK UNIFIED IDEOGRAPH-3635	[FB80 B635 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3635, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB635, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_219)
{
    // 3636 0021;	
    // (㘶) CJK UNIFIED IDEOGRAPH-3636	[FB80 B636 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3636, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB636, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_220)
{
    // 3636 003F;	
    // (㘶) CJK UNIFIED IDEOGRAPH-3636	[FB80 B636 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3636, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB636, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_221)
{
    // 3636 0061;	
    // (㘶) CJK UNIFIED IDEOGRAPH-3636	[FB80 B636 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3636, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB636, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_222)
{
    // 3636 0041;	
    // (㘶) CJK UNIFIED IDEOGRAPH-3636	[FB80 B636 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3636, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB636, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_223)
{
    // 3636 0062;	
    // (㘶) CJK UNIFIED IDEOGRAPH-3636	[FB80 B636 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3636, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB636, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_224)
{
    // 3637 0021;	
    // (㘷) CJK UNIFIED IDEOGRAPH-3637	[FB80 B637 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3637, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB637, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_225)
{
    // 3637 003F;	
    // (㘷) CJK UNIFIED IDEOGRAPH-3637	[FB80 B637 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3637, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB637, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_226)
{
    // 3637 0061;	
    // (㘷) CJK UNIFIED IDEOGRAPH-3637	[FB80 B637 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3637, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB637, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_227)
{
    // 3637 0041;	
    // (㘷) CJK UNIFIED IDEOGRAPH-3637	[FB80 B637 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3637, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB637, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_228)
{
    // 3637 0062;	
    // (㘷) CJK UNIFIED IDEOGRAPH-3637	[FB80 B637 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3637, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB637, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_229)
{
    // 3638 0021;	
    // (㘸) CJK UNIFIED IDEOGRAPH-3638	[FB80 B638 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3638, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB638, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_230)
{
    // 3638 003F;	
    // (㘸) CJK UNIFIED IDEOGRAPH-3638	[FB80 B638 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3638, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB638, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_231)
{
    // 3638 0061;	
    // (㘸) CJK UNIFIED IDEOGRAPH-3638	[FB80 B638 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3638, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB638, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_232)
{
    // 3638 0041;	
    // (㘸) CJK UNIFIED IDEOGRAPH-3638	[FB80 B638 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3638, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB638, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_233)
{
    // 3638 0062;	
    // (㘸) CJK UNIFIED IDEOGRAPH-3638	[FB80 B638 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3638, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB638, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_234)
{
    // 3639 0021;	
    // (㘹) CJK UNIFIED IDEOGRAPH-3639	[FB80 B639 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3639, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB639, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_235)
{
    // 3639 003F;	
    // (㘹) CJK UNIFIED IDEOGRAPH-3639	[FB80 B639 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3639, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB639, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_236)
{
    // 3639 0061;	
    // (㘹) CJK UNIFIED IDEOGRAPH-3639	[FB80 B639 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3639, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB639, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_237)
{
    // 3639 0041;	
    // (㘹) CJK UNIFIED IDEOGRAPH-3639	[FB80 B639 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3639, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB639, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_238)
{
    // 3639 0062;	
    // (㘹) CJK UNIFIED IDEOGRAPH-3639	[FB80 B639 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3639, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB639, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_239)
{
    // 363A 0021;	
    // (㘺) CJK UNIFIED IDEOGRAPH-363A	[FB80 B63A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x363A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB63A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_240)
{
    // 363A 003F;	
    // (㘺) CJK UNIFIED IDEOGRAPH-363A	[FB80 B63A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x363A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB63A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_241)
{
    // 363A 0061;	
    // (㘺) CJK UNIFIED IDEOGRAPH-363A	[FB80 B63A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x363A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB63A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_242)
{
    // 363A 0041;	
    // (㘺) CJK UNIFIED IDEOGRAPH-363A	[FB80 B63A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x363A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB63A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_243)
{
    // 363A 0062;	
    // (㘺) CJK UNIFIED IDEOGRAPH-363A	[FB80 B63A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x363A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB63A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_244)
{
    // 363B 0021;	
    // (㘻) CJK UNIFIED IDEOGRAPH-363B	[FB80 B63B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x363B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB63B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_245)
{
    // 363B 003F;	
    // (㘻) CJK UNIFIED IDEOGRAPH-363B	[FB80 B63B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x363B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB63B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_246)
{
    // 363B 0061;	
    // (㘻) CJK UNIFIED IDEOGRAPH-363B	[FB80 B63B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x363B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB63B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_247)
{
    // 363B 0041;	
    // (㘻) CJK UNIFIED IDEOGRAPH-363B	[FB80 B63B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x363B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB63B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_248)
{
    // 363B 0062;	
    // (㘻) CJK UNIFIED IDEOGRAPH-363B	[FB80 B63B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x363B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB63B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_249)
{
    // 363C 0021;	
    // (㘼) CJK UNIFIED IDEOGRAPH-363C	[FB80 B63C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x363C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB63C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_250)
{
    // 363C 003F;	
    // (㘼) CJK UNIFIED IDEOGRAPH-363C	[FB80 B63C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x363C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB63C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_251)
{
    // 363C 0061;	
    // (㘼) CJK UNIFIED IDEOGRAPH-363C	[FB80 B63C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x363C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB63C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_252)
{
    // 363C 0041;	
    // (㘼) CJK UNIFIED IDEOGRAPH-363C	[FB80 B63C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x363C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB63C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_253)
{
    // 363C 0062;	
    // (㘼) CJK UNIFIED IDEOGRAPH-363C	[FB80 B63C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x363C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB63C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_254)
{
    // 363D 0021;	
    // (㘽) CJK UNIFIED IDEOGRAPH-363D	[FB80 B63D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x363D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB63D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_255)
{
    // 363D 003F;	
    // (㘽) CJK UNIFIED IDEOGRAPH-363D	[FB80 B63D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x363D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB63D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_256)
{
    // 363D 0061;	
    // (㘽) CJK UNIFIED IDEOGRAPH-363D	[FB80 B63D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x363D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB63D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_257)
{
    // 363D 0041;	
    // (㘽) CJK UNIFIED IDEOGRAPH-363D	[FB80 B63D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x363D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB63D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_258)
{
    // 363D 0062;	
    // (㘽) CJK UNIFIED IDEOGRAPH-363D	[FB80 B63D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x363D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB63D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_259)
{
    // 363E 0021;	
    // (㘾) CJK UNIFIED IDEOGRAPH-363E	[FB80 B63E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x363E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB63E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_260)
{
    // 363E 003F;	
    // (㘾) CJK UNIFIED IDEOGRAPH-363E	[FB80 B63E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x363E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB63E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_261)
{
    // 363E 0061;	
    // (㘾) CJK UNIFIED IDEOGRAPH-363E	[FB80 B63E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x363E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB63E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_262)
{
    // 363E 0041;	
    // (㘾) CJK UNIFIED IDEOGRAPH-363E	[FB80 B63E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x363E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB63E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_263)
{
    // 363E 0062;	
    // (㘾) CJK UNIFIED IDEOGRAPH-363E	[FB80 B63E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x363E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB63E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_264)
{
    // 363F 0021;	
    // (㘿) CJK UNIFIED IDEOGRAPH-363F	[FB80 B63F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x363F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB63F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_265)
{
    // 363F 003F;	
    // (㘿) CJK UNIFIED IDEOGRAPH-363F	[FB80 B63F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x363F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB63F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_266)
{
    // 363F 0061;	
    // (㘿) CJK UNIFIED IDEOGRAPH-363F	[FB80 B63F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x363F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB63F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_267)
{
    // 363F 0041;	
    // (㘿) CJK UNIFIED IDEOGRAPH-363F	[FB80 B63F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x363F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB63F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_268)
{
    // 363F 0062;	
    // (㘿) CJK UNIFIED IDEOGRAPH-363F	[FB80 B63F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x363F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB63F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_269)
{
    // 3640 0021;	
    // (㙀) CJK UNIFIED IDEOGRAPH-3640	[FB80 B640 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3640, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB640, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_270)
{
    // 3640 003F;	
    // (㙀) CJK UNIFIED IDEOGRAPH-3640	[FB80 B640 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3640, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB640, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_271)
{
    // 3640 0061;	
    // (㙀) CJK UNIFIED IDEOGRAPH-3640	[FB80 B640 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3640, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB640, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_272)
{
    // 3640 0041;	
    // (㙀) CJK UNIFIED IDEOGRAPH-3640	[FB80 B640 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3640, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB640, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_273)
{
    // 3640 0062;	
    // (㙀) CJK UNIFIED IDEOGRAPH-3640	[FB80 B640 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3640, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB640, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_274)
{
    // 3641 0021;	
    // (㙁) CJK UNIFIED IDEOGRAPH-3641	[FB80 B641 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3641, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB641, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_275)
{
    // 3641 003F;	
    // (㙁) CJK UNIFIED IDEOGRAPH-3641	[FB80 B641 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3641, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB641, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_276)
{
    // 3641 0061;	
    // (㙁) CJK UNIFIED IDEOGRAPH-3641	[FB80 B641 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3641, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB641, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_277)
{
    // 3641 0041;	
    // (㙁) CJK UNIFIED IDEOGRAPH-3641	[FB80 B641 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3641, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB641, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_278)
{
    // 3641 0062;	
    // (㙁) CJK UNIFIED IDEOGRAPH-3641	[FB80 B641 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3641, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB641, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_279)
{
    // 3642 0021;	
    // (㙂) CJK UNIFIED IDEOGRAPH-3642	[FB80 B642 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3642, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB642, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_280)
{
    // 3642 003F;	
    // (㙂) CJK UNIFIED IDEOGRAPH-3642	[FB80 B642 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3642, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB642, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_281)
{
    // 3642 0061;	
    // (㙂) CJK UNIFIED IDEOGRAPH-3642	[FB80 B642 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3642, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB642, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_282)
{
    // 3642 0041;	
    // (㙂) CJK UNIFIED IDEOGRAPH-3642	[FB80 B642 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3642, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB642, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_283)
{
    // 3642 0062;	
    // (㙂) CJK UNIFIED IDEOGRAPH-3642	[FB80 B642 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3642, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB642, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_284)
{
    // 3643 0021;	
    // (㙃) CJK UNIFIED IDEOGRAPH-3643	[FB80 B643 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3643, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB643, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_285)
{
    // 3643 003F;	
    // (㙃) CJK UNIFIED IDEOGRAPH-3643	[FB80 B643 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3643, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB643, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_286)
{
    // 3643 0061;	
    // (㙃) CJK UNIFIED IDEOGRAPH-3643	[FB80 B643 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3643, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB643, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_287)
{
    // 3643 0041;	
    // (㙃) CJK UNIFIED IDEOGRAPH-3643	[FB80 B643 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3643, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB643, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_288)
{
    // 3643 0062;	
    // (㙃) CJK UNIFIED IDEOGRAPH-3643	[FB80 B643 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3643, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB643, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_289)
{
    // 3644 0021;	
    // (㙄) CJK UNIFIED IDEOGRAPH-3644	[FB80 B644 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3644, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB644, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_290)
{
    // 3644 003F;	
    // (㙄) CJK UNIFIED IDEOGRAPH-3644	[FB80 B644 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3644, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB644, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_291)
{
    // 3644 0061;	
    // (㙄) CJK UNIFIED IDEOGRAPH-3644	[FB80 B644 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3644, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB644, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_292)
{
    // 3644 0041;	
    // (㙄) CJK UNIFIED IDEOGRAPH-3644	[FB80 B644 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3644, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB644, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_293)
{
    // 3644 0062;	
    // (㙄) CJK UNIFIED IDEOGRAPH-3644	[FB80 B644 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3644, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB644, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_294)
{
    // 3645 0021;	
    // (㙅) CJK UNIFIED IDEOGRAPH-3645	[FB80 B645 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3645, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB645, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_295)
{
    // 3645 003F;	
    // (㙅) CJK UNIFIED IDEOGRAPH-3645	[FB80 B645 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3645, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB645, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_296)
{
    // 3645 0061;	
    // (㙅) CJK UNIFIED IDEOGRAPH-3645	[FB80 B645 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3645, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB645, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_297)
{
    // 3645 0041;	
    // (㙅) CJK UNIFIED IDEOGRAPH-3645	[FB80 B645 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3645, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB645, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_298)
{
    // 3645 0062;	
    // (㙅) CJK UNIFIED IDEOGRAPH-3645	[FB80 B645 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3645, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB645, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_299)
{
    // 3646 0021;	
    // (㙆) CJK UNIFIED IDEOGRAPH-3646	[FB80 B646 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3646, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB646, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_300)
{
    // 3646 003F;	
    // (㙆) CJK UNIFIED IDEOGRAPH-3646	[FB80 B646 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3646, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB646, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_301)
{
    // 3646 0061;	
    // (㙆) CJK UNIFIED IDEOGRAPH-3646	[FB80 B646 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3646, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB646, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_302)
{
    // 3646 0041;	
    // (㙆) CJK UNIFIED IDEOGRAPH-3646	[FB80 B646 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3646, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB646, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_303)
{
    // 3646 0062;	
    // (㙆) CJK UNIFIED IDEOGRAPH-3646	[FB80 B646 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3646, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB646, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_304)
{
    // 3647 0021;	
    // (㙇) CJK UNIFIED IDEOGRAPH-3647	[FB80 B647 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3647, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB647, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_305)
{
    // 3647 003F;	
    // (㙇) CJK UNIFIED IDEOGRAPH-3647	[FB80 B647 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3647, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB647, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_306)
{
    // 3647 0061;	
    // (㙇) CJK UNIFIED IDEOGRAPH-3647	[FB80 B647 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3647, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB647, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_307)
{
    // 3647 0041;	
    // (㙇) CJK UNIFIED IDEOGRAPH-3647	[FB80 B647 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3647, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB647, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_308)
{
    // 3647 0062;	
    // (㙇) CJK UNIFIED IDEOGRAPH-3647	[FB80 B647 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3647, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB647, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_309)
{
    // 3648 0021;	
    // (㙈) CJK UNIFIED IDEOGRAPH-3648	[FB80 B648 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3648, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB648, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_310)
{
    // 3648 003F;	
    // (㙈) CJK UNIFIED IDEOGRAPH-3648	[FB80 B648 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3648, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB648, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_311)
{
    // 3648 0061;	
    // (㙈) CJK UNIFIED IDEOGRAPH-3648	[FB80 B648 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3648, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB648, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_312)
{
    // 3648 0041;	
    // (㙈) CJK UNIFIED IDEOGRAPH-3648	[FB80 B648 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3648, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB648, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_313)
{
    // 3648 0062;	
    // (㙈) CJK UNIFIED IDEOGRAPH-3648	[FB80 B648 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3648, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB648, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_314)
{
    // 3649 0021;	
    // (㙉) CJK UNIFIED IDEOGRAPH-3649	[FB80 B649 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3649, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB649, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_315)
{
    // 3649 003F;	
    // (㙉) CJK UNIFIED IDEOGRAPH-3649	[FB80 B649 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3649, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB649, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_316)
{
    // 3649 0061;	
    // (㙉) CJK UNIFIED IDEOGRAPH-3649	[FB80 B649 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3649, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB649, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_317)
{
    // 3649 0041;	
    // (㙉) CJK UNIFIED IDEOGRAPH-3649	[FB80 B649 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3649, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB649, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_318)
{
    // 3649 0062;	
    // (㙉) CJK UNIFIED IDEOGRAPH-3649	[FB80 B649 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3649, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB649, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_319)
{
    // 364A 0021;	
    // (㙊) CJK UNIFIED IDEOGRAPH-364A	[FB80 B64A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x364A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB64A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_320)
{
    // 364A 003F;	
    // (㙊) CJK UNIFIED IDEOGRAPH-364A	[FB80 B64A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x364A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB64A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_321)
{
    // 364A 0061;	
    // (㙊) CJK UNIFIED IDEOGRAPH-364A	[FB80 B64A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x364A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB64A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_322)
{
    // 364A 0041;	
    // (㙊) CJK UNIFIED IDEOGRAPH-364A	[FB80 B64A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x364A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB64A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_323)
{
    // 364A 0062;	
    // (㙊) CJK UNIFIED IDEOGRAPH-364A	[FB80 B64A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x364A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB64A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_324)
{
    // 364B 0021;	
    // (㙋) CJK UNIFIED IDEOGRAPH-364B	[FB80 B64B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x364B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB64B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_325)
{
    // 364B 003F;	
    // (㙋) CJK UNIFIED IDEOGRAPH-364B	[FB80 B64B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x364B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB64B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_326)
{
    // 364B 0061;	
    // (㙋) CJK UNIFIED IDEOGRAPH-364B	[FB80 B64B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x364B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB64B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_327)
{
    // 364B 0041;	
    // (㙋) CJK UNIFIED IDEOGRAPH-364B	[FB80 B64B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x364B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB64B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_328)
{
    // 364B 0062;	
    // (㙋) CJK UNIFIED IDEOGRAPH-364B	[FB80 B64B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x364B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB64B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_329)
{
    // 364C 0021;	
    // (㙌) CJK UNIFIED IDEOGRAPH-364C	[FB80 B64C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x364C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB64C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_330)
{
    // 364C 003F;	
    // (㙌) CJK UNIFIED IDEOGRAPH-364C	[FB80 B64C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x364C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB64C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_331)
{
    // 364C 0061;	
    // (㙌) CJK UNIFIED IDEOGRAPH-364C	[FB80 B64C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x364C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB64C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_332)
{
    // 364C 0041;	
    // (㙌) CJK UNIFIED IDEOGRAPH-364C	[FB80 B64C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x364C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB64C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_333)
{
    // 364C 0062;	
    // (㙌) CJK UNIFIED IDEOGRAPH-364C	[FB80 B64C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x364C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB64C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_334)
{
    // 364D 0021;	
    // (㙍) CJK UNIFIED IDEOGRAPH-364D	[FB80 B64D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x364D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB64D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_335)
{
    // 364D 003F;	
    // (㙍) CJK UNIFIED IDEOGRAPH-364D	[FB80 B64D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x364D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB64D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_336)
{
    // 364D 0061;	
    // (㙍) CJK UNIFIED IDEOGRAPH-364D	[FB80 B64D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x364D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB64D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_337)
{
    // 364D 0041;	
    // (㙍) CJK UNIFIED IDEOGRAPH-364D	[FB80 B64D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x364D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB64D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_338)
{
    // 364D 0062;	
    // (㙍) CJK UNIFIED IDEOGRAPH-364D	[FB80 B64D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x364D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB64D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_339)
{
    // 364E 0021;	
    // (㙎) CJK UNIFIED IDEOGRAPH-364E	[FB80 B64E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x364E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB64E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_340)
{
    // 364E 003F;	
    // (㙎) CJK UNIFIED IDEOGRAPH-364E	[FB80 B64E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x364E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB64E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_341)
{
    // 364E 0061;	
    // (㙎) CJK UNIFIED IDEOGRAPH-364E	[FB80 B64E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x364E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB64E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_342)
{
    // 364E 0041;	
    // (㙎) CJK UNIFIED IDEOGRAPH-364E	[FB80 B64E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x364E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB64E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_343)
{
    // 364E 0062;	
    // (㙎) CJK UNIFIED IDEOGRAPH-364E	[FB80 B64E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x364E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB64E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_344)
{
    // 364F 0021;	
    // (㙏) CJK UNIFIED IDEOGRAPH-364F	[FB80 B64F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x364F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB64F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_345)
{
    // 364F 003F;	
    // (㙏) CJK UNIFIED IDEOGRAPH-364F	[FB80 B64F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x364F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB64F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_346)
{
    // 364F 0061;	
    // (㙏) CJK UNIFIED IDEOGRAPH-364F	[FB80 B64F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x364F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB64F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_347)
{
    // 364F 0041;	
    // (㙏) CJK UNIFIED IDEOGRAPH-364F	[FB80 B64F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x364F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB64F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_348)
{
    // 364F 0062;	
    // (㙏) CJK UNIFIED IDEOGRAPH-364F	[FB80 B64F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x364F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB64F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_349)
{
    // 3650 0021;	
    // (㙐) CJK UNIFIED IDEOGRAPH-3650	[FB80 B650 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3650, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB650, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_350)
{
    // 3650 003F;	
    // (㙐) CJK UNIFIED IDEOGRAPH-3650	[FB80 B650 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3650, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB650, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_351)
{
    // 3650 0061;	
    // (㙐) CJK UNIFIED IDEOGRAPH-3650	[FB80 B650 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3650, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB650, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_352)
{
    // 3650 0041;	
    // (㙐) CJK UNIFIED IDEOGRAPH-3650	[FB80 B650 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3650, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB650, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_353)
{
    // 3650 0062;	
    // (㙐) CJK UNIFIED IDEOGRAPH-3650	[FB80 B650 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3650, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB650, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_354)
{
    // 3651 0021;	
    // (㙑) CJK UNIFIED IDEOGRAPH-3651	[FB80 B651 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3651, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB651, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_355)
{
    // 3651 003F;	
    // (㙑) CJK UNIFIED IDEOGRAPH-3651	[FB80 B651 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3651, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB651, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_356)
{
    // 3651 0061;	
    // (㙑) CJK UNIFIED IDEOGRAPH-3651	[FB80 B651 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3651, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB651, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_357)
{
    // 3651 0041;	
    // (㙑) CJK UNIFIED IDEOGRAPH-3651	[FB80 B651 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3651, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB651, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_358)
{
    // 3651 0062;	
    // (㙑) CJK UNIFIED IDEOGRAPH-3651	[FB80 B651 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3651, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB651, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_359)
{
    // 3652 0021;	
    // (㙒) CJK UNIFIED IDEOGRAPH-3652	[FB80 B652 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3652, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB652, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_360)
{
    // 3652 003F;	
    // (㙒) CJK UNIFIED IDEOGRAPH-3652	[FB80 B652 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3652, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB652, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_361)
{
    // 3652 0061;	
    // (㙒) CJK UNIFIED IDEOGRAPH-3652	[FB80 B652 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3652, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB652, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_362)
{
    // 3652 0041;	
    // (㙒) CJK UNIFIED IDEOGRAPH-3652	[FB80 B652 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3652, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB652, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_363)
{
    // 3652 0062;	
    // (㙒) CJK UNIFIED IDEOGRAPH-3652	[FB80 B652 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3652, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB652, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_364)
{
    // 3653 0021;	
    // (㙓) CJK UNIFIED IDEOGRAPH-3653	[FB80 B653 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3653, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB653, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_365)
{
    // 3653 003F;	
    // (㙓) CJK UNIFIED IDEOGRAPH-3653	[FB80 B653 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3653, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB653, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_366)
{
    // 3653 0061;	
    // (㙓) CJK UNIFIED IDEOGRAPH-3653	[FB80 B653 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3653, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB653, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_367)
{
    // 3653 0041;	
    // (㙓) CJK UNIFIED IDEOGRAPH-3653	[FB80 B653 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3653, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB653, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_368)
{
    // 3653 0062;	
    // (㙓) CJK UNIFIED IDEOGRAPH-3653	[FB80 B653 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3653, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB653, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_369)
{
    // 3654 0021;	
    // (㙔) CJK UNIFIED IDEOGRAPH-3654	[FB80 B654 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3654, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB654, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_370)
{
    // 3654 003F;	
    // (㙔) CJK UNIFIED IDEOGRAPH-3654	[FB80 B654 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3654, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB654, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_371)
{
    // 3654 0061;	
    // (㙔) CJK UNIFIED IDEOGRAPH-3654	[FB80 B654 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3654, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB654, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_372)
{
    // 3654 0041;	
    // (㙔) CJK UNIFIED IDEOGRAPH-3654	[FB80 B654 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3654, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB654, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_373)
{
    // 3654 0062;	
    // (㙔) CJK UNIFIED IDEOGRAPH-3654	[FB80 B654 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3654, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB654, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_374)
{
    // 3655 0021;	
    // (㙕) CJK UNIFIED IDEOGRAPH-3655	[FB80 B655 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3655, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB655, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_375)
{
    // 3655 003F;	
    // (㙕) CJK UNIFIED IDEOGRAPH-3655	[FB80 B655 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3655, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB655, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_376)
{
    // 3655 0061;	
    // (㙕) CJK UNIFIED IDEOGRAPH-3655	[FB80 B655 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3655, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB655, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_377)
{
    // 3655 0041;	
    // (㙕) CJK UNIFIED IDEOGRAPH-3655	[FB80 B655 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3655, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB655, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_378)
{
    // 3655 0062;	
    // (㙕) CJK UNIFIED IDEOGRAPH-3655	[FB80 B655 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3655, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB655, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_379)
{
    // 3656 0021;	
    // (㙖) CJK UNIFIED IDEOGRAPH-3656	[FB80 B656 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3656, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB656, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_380)
{
    // 3656 003F;	
    // (㙖) CJK UNIFIED IDEOGRAPH-3656	[FB80 B656 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3656, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB656, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_381)
{
    // 3656 0061;	
    // (㙖) CJK UNIFIED IDEOGRAPH-3656	[FB80 B656 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3656, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB656, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_382)
{
    // 3656 0041;	
    // (㙖) CJK UNIFIED IDEOGRAPH-3656	[FB80 B656 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3656, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB656, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_383)
{
    // 3656 0062;	
    // (㙖) CJK UNIFIED IDEOGRAPH-3656	[FB80 B656 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3656, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB656, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_384)
{
    // 3657 0021;	
    // (㙗) CJK UNIFIED IDEOGRAPH-3657	[FB80 B657 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3657, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB657, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_385)
{
    // 3657 003F;	
    // (㙗) CJK UNIFIED IDEOGRAPH-3657	[FB80 B657 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3657, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB657, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_386)
{
    // 3657 0061;	
    // (㙗) CJK UNIFIED IDEOGRAPH-3657	[FB80 B657 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3657, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB657, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_387)
{
    // 3657 0041;	
    // (㙗) CJK UNIFIED IDEOGRAPH-3657	[FB80 B657 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3657, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB657, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_388)
{
    // 3657 0062;	
    // (㙗) CJK UNIFIED IDEOGRAPH-3657	[FB80 B657 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3657, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB657, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_389)
{
    // 3658 0021;	
    // (㙘) CJK UNIFIED IDEOGRAPH-3658	[FB80 B658 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3658, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB658, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_390)
{
    // 3658 003F;	
    // (㙘) CJK UNIFIED IDEOGRAPH-3658	[FB80 B658 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3658, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB658, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_391)
{
    // 3658 0061;	
    // (㙘) CJK UNIFIED IDEOGRAPH-3658	[FB80 B658 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3658, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB658, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_392)
{
    // 3658 0041;	
    // (㙘) CJK UNIFIED IDEOGRAPH-3658	[FB80 B658 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3658, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB658, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_393)
{
    // 3658 0062;	
    // (㙘) CJK UNIFIED IDEOGRAPH-3658	[FB80 B658 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3658, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB658, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_394)
{
    // 3659 0021;	
    // (㙙) CJK UNIFIED IDEOGRAPH-3659	[FB80 B659 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3659, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB659, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_395)
{
    // 3659 003F;	
    // (㙙) CJK UNIFIED IDEOGRAPH-3659	[FB80 B659 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3659, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB659, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_396)
{
    // 3659 0061;	
    // (㙙) CJK UNIFIED IDEOGRAPH-3659	[FB80 B659 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3659, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB659, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_397)
{
    // 3659 0041;	
    // (㙙) CJK UNIFIED IDEOGRAPH-3659	[FB80 B659 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3659, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB659, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_398)
{
    // 3659 0062;	
    // (㙙) CJK UNIFIED IDEOGRAPH-3659	[FB80 B659 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3659, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB659, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_399)
{
    // 365A 0021;	
    // (㙚) CJK UNIFIED IDEOGRAPH-365A	[FB80 B65A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x365A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB65A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_400)
{
    // 365A 003F;	
    // (㙚) CJK UNIFIED IDEOGRAPH-365A	[FB80 B65A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x365A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB65A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_401)
{
    // 365A 0061;	
    // (㙚) CJK UNIFIED IDEOGRAPH-365A	[FB80 B65A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x365A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB65A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_402)
{
    // 365A 0041;	
    // (㙚) CJK UNIFIED IDEOGRAPH-365A	[FB80 B65A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x365A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB65A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_403)
{
    // 365A 0062;	
    // (㙚) CJK UNIFIED IDEOGRAPH-365A	[FB80 B65A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x365A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB65A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_404)
{
    // 365B 0021;	
    // (㙛) CJK UNIFIED IDEOGRAPH-365B	[FB80 B65B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x365B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB65B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_405)
{
    // 365B 003F;	
    // (㙛) CJK UNIFIED IDEOGRAPH-365B	[FB80 B65B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x365B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB65B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_406)
{
    // 365B 0061;	
    // (㙛) CJK UNIFIED IDEOGRAPH-365B	[FB80 B65B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x365B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB65B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_407)
{
    // 365B 0041;	
    // (㙛) CJK UNIFIED IDEOGRAPH-365B	[FB80 B65B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x365B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB65B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_408)
{
    // 365B 0062;	
    // (㙛) CJK UNIFIED IDEOGRAPH-365B	[FB80 B65B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x365B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB65B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_409)
{
    // 365C 0021;	
    // (㙜) CJK UNIFIED IDEOGRAPH-365C	[FB80 B65C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x365C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB65C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_410)
{
    // 365C 003F;	
    // (㙜) CJK UNIFIED IDEOGRAPH-365C	[FB80 B65C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x365C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB65C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_411)
{
    // 365C 0061;	
    // (㙜) CJK UNIFIED IDEOGRAPH-365C	[FB80 B65C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x365C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB65C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_412)
{
    // 365C 0041;	
    // (㙜) CJK UNIFIED IDEOGRAPH-365C	[FB80 B65C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x365C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB65C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_413)
{
    // 365C 0062;	
    // (㙜) CJK UNIFIED IDEOGRAPH-365C	[FB80 B65C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x365C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB65C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_414)
{
    // 365D 0021;	
    // (㙝) CJK UNIFIED IDEOGRAPH-365D	[FB80 B65D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x365D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB65D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_415)
{
    // 365D 003F;	
    // (㙝) CJK UNIFIED IDEOGRAPH-365D	[FB80 B65D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x365D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB65D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_416)
{
    // 365D 0061;	
    // (㙝) CJK UNIFIED IDEOGRAPH-365D	[FB80 B65D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x365D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB65D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_417)
{
    // 365D 0041;	
    // (㙝) CJK UNIFIED IDEOGRAPH-365D	[FB80 B65D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x365D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB65D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_418)
{
    // 365D 0062;	
    // (㙝) CJK UNIFIED IDEOGRAPH-365D	[FB80 B65D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x365D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB65D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_419)
{
    // 365E 0021;	
    // (㙞) CJK UNIFIED IDEOGRAPH-365E	[FB80 B65E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x365E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB65E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_420)
{
    // 365E 003F;	
    // (㙞) CJK UNIFIED IDEOGRAPH-365E	[FB80 B65E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x365E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB65E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_421)
{
    // 365E 0061;	
    // (㙞) CJK UNIFIED IDEOGRAPH-365E	[FB80 B65E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x365E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB65E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_422)
{
    // 365E 0041;	
    // (㙞) CJK UNIFIED IDEOGRAPH-365E	[FB80 B65E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x365E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB65E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_423)
{
    // 365E 0062;	
    // (㙞) CJK UNIFIED IDEOGRAPH-365E	[FB80 B65E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x365E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB65E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_424)
{
    // 365F 0021;	
    // (㙟) CJK UNIFIED IDEOGRAPH-365F	[FB80 B65F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x365F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB65F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_425)
{
    // 365F 003F;	
    // (㙟) CJK UNIFIED IDEOGRAPH-365F	[FB80 B65F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x365F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB65F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_426)
{
    // 365F 0061;	
    // (㙟) CJK UNIFIED IDEOGRAPH-365F	[FB80 B65F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x365F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB65F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_427)
{
    // 365F 0041;	
    // (㙟) CJK UNIFIED IDEOGRAPH-365F	[FB80 B65F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x365F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB65F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_428)
{
    // 365F 0062;	
    // (㙟) CJK UNIFIED IDEOGRAPH-365F	[FB80 B65F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x365F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB65F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_429)
{
    // 3660 0021;	
    // (㙠) CJK UNIFIED IDEOGRAPH-3660	[FB80 B660 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3660, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB660, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_430)
{
    // 3660 003F;	
    // (㙠) CJK UNIFIED IDEOGRAPH-3660	[FB80 B660 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3660, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB660, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_431)
{
    // 3660 0061;	
    // (㙠) CJK UNIFIED IDEOGRAPH-3660	[FB80 B660 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3660, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB660, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_432)
{
    // 3660 0041;	
    // (㙠) CJK UNIFIED IDEOGRAPH-3660	[FB80 B660 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3660, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB660, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_433)
{
    // 3660 0062;	
    // (㙠) CJK UNIFIED IDEOGRAPH-3660	[FB80 B660 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3660, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB660, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_434)
{
    // 3661 0021;	
    // (㙡) CJK UNIFIED IDEOGRAPH-3661	[FB80 B661 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3661, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB661, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_435)
{
    // 3661 003F;	
    // (㙡) CJK UNIFIED IDEOGRAPH-3661	[FB80 B661 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3661, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB661, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_436)
{
    // 3661 0061;	
    // (㙡) CJK UNIFIED IDEOGRAPH-3661	[FB80 B661 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3661, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB661, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_437)
{
    // 3661 0041;	
    // (㙡) CJK UNIFIED IDEOGRAPH-3661	[FB80 B661 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3661, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB661, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_438)
{
    // 3661 0062;	
    // (㙡) CJK UNIFIED IDEOGRAPH-3661	[FB80 B661 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3661, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB661, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_439)
{
    // 3662 0021;	
    // (㙢) CJK UNIFIED IDEOGRAPH-3662	[FB80 B662 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3662, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB662, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_440)
{
    // 3662 003F;	
    // (㙢) CJK UNIFIED IDEOGRAPH-3662	[FB80 B662 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3662, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB662, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_441)
{
    // 3662 0061;	
    // (㙢) CJK UNIFIED IDEOGRAPH-3662	[FB80 B662 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3662, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB662, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_442)
{
    // 3662 0041;	
    // (㙢) CJK UNIFIED IDEOGRAPH-3662	[FB80 B662 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3662, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB662, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_443)
{
    // 3662 0062;	
    // (㙢) CJK UNIFIED IDEOGRAPH-3662	[FB80 B662 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3662, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB662, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_444)
{
    // 3663 0021;	
    // (㙣) CJK UNIFIED IDEOGRAPH-3663	[FB80 B663 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3663, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB663, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_445)
{
    // 3663 003F;	
    // (㙣) CJK UNIFIED IDEOGRAPH-3663	[FB80 B663 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3663, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB663, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_446)
{
    // 3663 0061;	
    // (㙣) CJK UNIFIED IDEOGRAPH-3663	[FB80 B663 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3663, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB663, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_447)
{
    // 3663 0041;	
    // (㙣) CJK UNIFIED IDEOGRAPH-3663	[FB80 B663 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3663, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB663, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_448)
{
    // 3663 0062;	
    // (㙣) CJK UNIFIED IDEOGRAPH-3663	[FB80 B663 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3663, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB663, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_449)
{
    // 3664 0021;	
    // (㙤) CJK UNIFIED IDEOGRAPH-3664	[FB80 B664 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3664, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB664, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_450)
{
    // 3664 003F;	
    // (㙤) CJK UNIFIED IDEOGRAPH-3664	[FB80 B664 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3664, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB664, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_451)
{
    // 3664 0061;	
    // (㙤) CJK UNIFIED IDEOGRAPH-3664	[FB80 B664 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3664, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB664, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_452)
{
    // 3664 0041;	
    // (㙤) CJK UNIFIED IDEOGRAPH-3664	[FB80 B664 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3664, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB664, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_453)
{
    // 3664 0062;	
    // (㙤) CJK UNIFIED IDEOGRAPH-3664	[FB80 B664 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3664, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB664, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_454)
{
    // 3665 0021;	
    // (㙥) CJK UNIFIED IDEOGRAPH-3665	[FB80 B665 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3665, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB665, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_455)
{
    // 3665 003F;	
    // (㙥) CJK UNIFIED IDEOGRAPH-3665	[FB80 B665 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3665, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB665, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_456)
{
    // 3665 0061;	
    // (㙥) CJK UNIFIED IDEOGRAPH-3665	[FB80 B665 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3665, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB665, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_457)
{
    // 3665 0041;	
    // (㙥) CJK UNIFIED IDEOGRAPH-3665	[FB80 B665 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3665, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB665, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_458)
{
    // 3665 0062;	
    // (㙥) CJK UNIFIED IDEOGRAPH-3665	[FB80 B665 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3665, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB665, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_459)
{
    // 3666 0021;	
    // (㙦) CJK UNIFIED IDEOGRAPH-3666	[FB80 B666 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3666, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB666, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_460)
{
    // 3666 003F;	
    // (㙦) CJK UNIFIED IDEOGRAPH-3666	[FB80 B666 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3666, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB666, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_461)
{
    // 3666 0061;	
    // (㙦) CJK UNIFIED IDEOGRAPH-3666	[FB80 B666 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3666, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB666, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_462)
{
    // 3666 0041;	
    // (㙦) CJK UNIFIED IDEOGRAPH-3666	[FB80 B666 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3666, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB666, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_463)
{
    // 3666 0062;	
    // (㙦) CJK UNIFIED IDEOGRAPH-3666	[FB80 B666 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3666, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB666, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_464)
{
    // 3667 0021;	
    // (㙧) CJK UNIFIED IDEOGRAPH-3667	[FB80 B667 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3667, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB667, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_465)
{
    // 3667 003F;	
    // (㙧) CJK UNIFIED IDEOGRAPH-3667	[FB80 B667 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3667, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB667, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_466)
{
    // 3667 0061;	
    // (㙧) CJK UNIFIED IDEOGRAPH-3667	[FB80 B667 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3667, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB667, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_467)
{
    // 3667 0041;	
    // (㙧) CJK UNIFIED IDEOGRAPH-3667	[FB80 B667 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3667, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB667, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_468)
{
    // 3667 0062;	
    // (㙧) CJK UNIFIED IDEOGRAPH-3667	[FB80 B667 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3667, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB667, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_469)
{
    // 3668 0021;	
    // (㙨) CJK UNIFIED IDEOGRAPH-3668	[FB80 B668 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3668, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB668, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_470)
{
    // 3668 003F;	
    // (㙨) CJK UNIFIED IDEOGRAPH-3668	[FB80 B668 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3668, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB668, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_471)
{
    // 3668 0061;	
    // (㙨) CJK UNIFIED IDEOGRAPH-3668	[FB80 B668 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3668, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB668, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_472)
{
    // 3668 0041;	
    // (㙨) CJK UNIFIED IDEOGRAPH-3668	[FB80 B668 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3668, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB668, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_473)
{
    // 3668 0062;	
    // (㙨) CJK UNIFIED IDEOGRAPH-3668	[FB80 B668 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3668, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB668, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_474)
{
    // 3669 0021;	
    // (㙩) CJK UNIFIED IDEOGRAPH-3669	[FB80 B669 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3669, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB669, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_475)
{
    // 3669 003F;	
    // (㙩) CJK UNIFIED IDEOGRAPH-3669	[FB80 B669 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3669, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB669, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_476)
{
    // 3669 0061;	
    // (㙩) CJK UNIFIED IDEOGRAPH-3669	[FB80 B669 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3669, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB669, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_477)
{
    // 3669 0041;	
    // (㙩) CJK UNIFIED IDEOGRAPH-3669	[FB80 B669 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3669, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB669, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_478)
{
    // 3669 0062;	
    // (㙩) CJK UNIFIED IDEOGRAPH-3669	[FB80 B669 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3669, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB669, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_479)
{
    // 366A 0021;	
    // (㙪) CJK UNIFIED IDEOGRAPH-366A	[FB80 B66A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x366A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB66A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_480)
{
    // 366A 003F;	
    // (㙪) CJK UNIFIED IDEOGRAPH-366A	[FB80 B66A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x366A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB66A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_481)
{
    // 366A 0061;	
    // (㙪) CJK UNIFIED IDEOGRAPH-366A	[FB80 B66A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x366A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB66A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_482)
{
    // 366A 0041;	
    // (㙪) CJK UNIFIED IDEOGRAPH-366A	[FB80 B66A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x366A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB66A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_483)
{
    // 366A 0062;	
    // (㙪) CJK UNIFIED IDEOGRAPH-366A	[FB80 B66A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x366A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB66A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_484)
{
    // 366B 0021;	
    // (㙫) CJK UNIFIED IDEOGRAPH-366B	[FB80 B66B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x366B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB66B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_485)
{
    // 366B 003F;	
    // (㙫) CJK UNIFIED IDEOGRAPH-366B	[FB80 B66B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x366B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB66B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_486)
{
    // 366B 0061;	
    // (㙫) CJK UNIFIED IDEOGRAPH-366B	[FB80 B66B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x366B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB66B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_487)
{
    // 366B 0041;	
    // (㙫) CJK UNIFIED IDEOGRAPH-366B	[FB80 B66B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x366B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB66B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_488)
{
    // 366B 0062;	
    // (㙫) CJK UNIFIED IDEOGRAPH-366B	[FB80 B66B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x366B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB66B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_489)
{
    // 366C 0021;	
    // (㙬) CJK UNIFIED IDEOGRAPH-366C	[FB80 B66C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x366C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB66C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_490)
{
    // 366C 003F;	
    // (㙬) CJK UNIFIED IDEOGRAPH-366C	[FB80 B66C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x366C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB66C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_491)
{
    // 366C 0061;	
    // (㙬) CJK UNIFIED IDEOGRAPH-366C	[FB80 B66C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x366C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB66C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_492)
{
    // 366C 0041;	
    // (㙬) CJK UNIFIED IDEOGRAPH-366C	[FB80 B66C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x366C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB66C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_493)
{
    // 366C 0062;	
    // (㙬) CJK UNIFIED IDEOGRAPH-366C	[FB80 B66C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x366C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB66C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_494)
{
    // 366D 0021;	
    // (㙭) CJK UNIFIED IDEOGRAPH-366D	[FB80 B66D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x366D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB66D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_495)
{
    // 366D 003F;	
    // (㙭) CJK UNIFIED IDEOGRAPH-366D	[FB80 B66D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x366D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB66D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_496)
{
    // 366D 0061;	
    // (㙭) CJK UNIFIED IDEOGRAPH-366D	[FB80 B66D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x366D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB66D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_497)
{
    // 366D 0041;	
    // (㙭) CJK UNIFIED IDEOGRAPH-366D	[FB80 B66D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x366D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB66D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_498)
{
    // 366D 0062;	
    // (㙭) CJK UNIFIED IDEOGRAPH-366D	[FB80 B66D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x366D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB66D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_332_499)
{
    // 366E 0021;	
    // (㙮) CJK UNIFIED IDEOGRAPH-366E	[FB80 B66E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x366E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB66E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

