// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_104_000)
{
    // AB5E  ; [.1DED.0020.0014] 
    // MODIFIER LETTER SMALL L WITH MIDDLE TILDE

    uint32_t const cps[1] = { 0xab5e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ded), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_001)
{
    // AB5F  ; [.1F2D.0020.0014] 
    // MODIFIER LETTER SMALL U WITH LEFT HOOK

    uint32_t const cps[1] = { 0xab5f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f2d), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_002)
{
    // AB60  ; [.1FC1.0020.0002] 
    // LATIN SMALL LETTER SAKHA YAT

    uint32_t const cps[1] = { 0xab60 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1fc1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_003)
{
    // AB61  ; [.1FC2.0020.0002] 
    // LATIN SMALL LETTER IOTIFIED E

    uint32_t const cps[1] = { 0xab61 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1fc2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_004)
{
    // AB62  ; [.1E5E.0020.0002] 
    // LATIN SMALL LETTER OPEN OE

    uint32_t const cps[1] = { 0xab62 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e5e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_005)
{
    // AB63  ; [.1FC3.0020.0002] 
    // LATIN SMALL LETTER UO

    uint32_t const cps[1] = { 0xab63 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1fc3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_006)
{
    // AB64  ; [.1CC5.0020.0002] 
    // LATIN SMALL LETTER INVERTED ALPHA

    uint32_t const cps[1] = { 0xab64 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cc5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_007)
{
    // AB65  ; [.2048.0020.0002] 
    // GREEK LETTER SMALL CAPITAL OMEGA

    uint32_t const cps[1] = { 0xab65 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2048), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_008)
{
    // AB70  ; [.3496.0020.0002] 
    // CHEROKEE SMALL LETTER A

    uint32_t const cps[1] = { 0xab70 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3496), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_009)
{
    // AB71  ; [.3497.0020.0002] 
    // CHEROKEE SMALL LETTER E

    uint32_t const cps[1] = { 0xab71 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3497), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_010)
{
    // AB72  ; [.3498.0020.0002] 
    // CHEROKEE SMALL LETTER I

    uint32_t const cps[1] = { 0xab72 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3498), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_011)
{
    // AB73  ; [.3499.0020.0002] 
    // CHEROKEE SMALL LETTER O

    uint32_t const cps[1] = { 0xab73 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3499), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_012)
{
    // AB74  ; [.349A.0020.0002] 
    // CHEROKEE SMALL LETTER U

    uint32_t const cps[1] = { 0xab74 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x349a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_013)
{
    // AB75  ; [.349B.0020.0002] 
    // CHEROKEE SMALL LETTER V

    uint32_t const cps[1] = { 0xab75 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x349b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_014)
{
    // AB76  ; [.349C.0020.0002] 
    // CHEROKEE SMALL LETTER GA

    uint32_t const cps[1] = { 0xab76 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x349c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_015)
{
    // AB77  ; [.349D.0020.0002] 
    // CHEROKEE SMALL LETTER KA

    uint32_t const cps[1] = { 0xab77 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x349d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_016)
{
    // AB78  ; [.349E.0020.0002] 
    // CHEROKEE SMALL LETTER GE

    uint32_t const cps[1] = { 0xab78 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x349e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_017)
{
    // AB79  ; [.349F.0020.0002] 
    // CHEROKEE SMALL LETTER GI

    uint32_t const cps[1] = { 0xab79 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x349f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_018)
{
    // AB7A  ; [.34A0.0020.0002] 
    // CHEROKEE SMALL LETTER GO

    uint32_t const cps[1] = { 0xab7a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34a0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_019)
{
    // AB7B  ; [.34A1.0020.0002] 
    // CHEROKEE SMALL LETTER GU

    uint32_t const cps[1] = { 0xab7b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34a1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_020)
{
    // AB7C  ; [.34A2.0020.0002] 
    // CHEROKEE SMALL LETTER GV

    uint32_t const cps[1] = { 0xab7c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34a2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_021)
{
    // AB7D  ; [.34A3.0020.0002] 
    // CHEROKEE SMALL LETTER HA

    uint32_t const cps[1] = { 0xab7d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34a3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_022)
{
    // AB7E  ; [.34A4.0020.0002] 
    // CHEROKEE SMALL LETTER HE

    uint32_t const cps[1] = { 0xab7e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34a4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_023)
{
    // AB7F  ; [.34A5.0020.0002] 
    // CHEROKEE SMALL LETTER HI

    uint32_t const cps[1] = { 0xab7f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34a5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_024)
{
    // AB80  ; [.34A6.0020.0002] 
    // CHEROKEE SMALL LETTER HO

    uint32_t const cps[1] = { 0xab80 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34a6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_025)
{
    // AB81  ; [.34A7.0020.0002] 
    // CHEROKEE SMALL LETTER HU

    uint32_t const cps[1] = { 0xab81 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34a7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_026)
{
    // AB82  ; [.34A8.0020.0002] 
    // CHEROKEE SMALL LETTER HV

    uint32_t const cps[1] = { 0xab82 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34a8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_027)
{
    // AB83  ; [.34A9.0020.0002] 
    // CHEROKEE SMALL LETTER LA

    uint32_t const cps[1] = { 0xab83 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34a9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_028)
{
    // AB84  ; [.34AA.0020.0002] 
    // CHEROKEE SMALL LETTER LE

    uint32_t const cps[1] = { 0xab84 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34aa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_029)
{
    // AB85  ; [.34AB.0020.0002] 
    // CHEROKEE SMALL LETTER LI

    uint32_t const cps[1] = { 0xab85 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34ab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_030)
{
    // AB86  ; [.34AC.0020.0002] 
    // CHEROKEE SMALL LETTER LO

    uint32_t const cps[1] = { 0xab86 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34ac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_031)
{
    // AB87  ; [.34AD.0020.0002] 
    // CHEROKEE SMALL LETTER LU

    uint32_t const cps[1] = { 0xab87 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34ad), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_032)
{
    // AB88  ; [.34AE.0020.0002] 
    // CHEROKEE SMALL LETTER LV

    uint32_t const cps[1] = { 0xab88 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34ae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_033)
{
    // AB89  ; [.34AF.0020.0002] 
    // CHEROKEE SMALL LETTER MA

    uint32_t const cps[1] = { 0xab89 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34af), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_034)
{
    // AB8A  ; [.34B0.0020.0002] 
    // CHEROKEE SMALL LETTER ME

    uint32_t const cps[1] = { 0xab8a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34b0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_035)
{
    // AB8B  ; [.34B1.0020.0002] 
    // CHEROKEE SMALL LETTER MI

    uint32_t const cps[1] = { 0xab8b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34b1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_036)
{
    // AB8C  ; [.34B2.0020.0002] 
    // CHEROKEE SMALL LETTER MO

    uint32_t const cps[1] = { 0xab8c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34b2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_037)
{
    // AB8D  ; [.34B3.0020.0002] 
    // CHEROKEE SMALL LETTER MU

    uint32_t const cps[1] = { 0xab8d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34b3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_038)
{
    // AB8E  ; [.34B4.0020.0002] 
    // CHEROKEE SMALL LETTER NA

    uint32_t const cps[1] = { 0xab8e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34b4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_039)
{
    // AB8F  ; [.34B5.0020.0002] 
    // CHEROKEE SMALL LETTER HNA

    uint32_t const cps[1] = { 0xab8f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34b5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_040)
{
    // AB90  ; [.34B6.0020.0002] 
    // CHEROKEE SMALL LETTER NAH

    uint32_t const cps[1] = { 0xab90 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34b6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_041)
{
    // AB91  ; [.34B7.0020.0002] 
    // CHEROKEE SMALL LETTER NE

    uint32_t const cps[1] = { 0xab91 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34b7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_042)
{
    // AB92  ; [.34B8.0020.0002] 
    // CHEROKEE SMALL LETTER NI

    uint32_t const cps[1] = { 0xab92 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34b8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_043)
{
    // AB93  ; [.34B9.0020.0002] 
    // CHEROKEE SMALL LETTER NO

    uint32_t const cps[1] = { 0xab93 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34b9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_044)
{
    // AB94  ; [.34BA.0020.0002] 
    // CHEROKEE SMALL LETTER NU

    uint32_t const cps[1] = { 0xab94 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34ba), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_045)
{
    // AB95  ; [.34BB.0020.0002] 
    // CHEROKEE SMALL LETTER NV

    uint32_t const cps[1] = { 0xab95 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34bb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_046)
{
    // AB96  ; [.34BC.0020.0002] 
    // CHEROKEE SMALL LETTER QUA

    uint32_t const cps[1] = { 0xab96 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34bc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_047)
{
    // AB97  ; [.34BD.0020.0002] 
    // CHEROKEE SMALL LETTER QUE

    uint32_t const cps[1] = { 0xab97 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34bd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_048)
{
    // AB98  ; [.34BE.0020.0002] 
    // CHEROKEE SMALL LETTER QUI

    uint32_t const cps[1] = { 0xab98 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34be), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_049)
{
    // AB99  ; [.34BF.0020.0002] 
    // CHEROKEE SMALL LETTER QUO

    uint32_t const cps[1] = { 0xab99 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34bf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_050)
{
    // AB9A  ; [.34C0.0020.0002] 
    // CHEROKEE SMALL LETTER QUU

    uint32_t const cps[1] = { 0xab9a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34c0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_051)
{
    // AB9B  ; [.34C1.0020.0002] 
    // CHEROKEE SMALL LETTER QUV

    uint32_t const cps[1] = { 0xab9b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34c1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_052)
{
    // AB9C  ; [.34C2.0020.0002] 
    // CHEROKEE SMALL LETTER SA

    uint32_t const cps[1] = { 0xab9c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34c2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_053)
{
    // AB9D  ; [.34C3.0020.0002] 
    // CHEROKEE SMALL LETTER S

    uint32_t const cps[1] = { 0xab9d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34c3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_054)
{
    // AB9E  ; [.34C4.0020.0002] 
    // CHEROKEE SMALL LETTER SE

    uint32_t const cps[1] = { 0xab9e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34c4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_055)
{
    // AB9F  ; [.34C5.0020.0002] 
    // CHEROKEE SMALL LETTER SI

    uint32_t const cps[1] = { 0xab9f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34c5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_056)
{
    // ABA0  ; [.34C6.0020.0002] 
    // CHEROKEE SMALL LETTER SO

    uint32_t const cps[1] = { 0xaba0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34c6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_057)
{
    // ABA1  ; [.34C7.0020.0002] 
    // CHEROKEE SMALL LETTER SU

    uint32_t const cps[1] = { 0xaba1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_058)
{
    // ABA2  ; [.34C8.0020.0002] 
    // CHEROKEE SMALL LETTER SV

    uint32_t const cps[1] = { 0xaba2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_059)
{
    // ABA3  ; [.34C9.0020.0002] 
    // CHEROKEE SMALL LETTER DA

    uint32_t const cps[1] = { 0xaba3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_060)
{
    // ABA4  ; [.34CA.0020.0002] 
    // CHEROKEE SMALL LETTER TA

    uint32_t const cps[1] = { 0xaba4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34ca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_061)
{
    // ABA5  ; [.34CB.0020.0002] 
    // CHEROKEE SMALL LETTER DE

    uint32_t const cps[1] = { 0xaba5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34cb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_062)
{
    // ABA6  ; [.34CC.0020.0002] 
    // CHEROKEE SMALL LETTER TE

    uint32_t const cps[1] = { 0xaba6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_063)
{
    // ABA7  ; [.34CD.0020.0002] 
    // CHEROKEE SMALL LETTER DI

    uint32_t const cps[1] = { 0xaba7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34cd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_064)
{
    // ABA8  ; [.34CE.0020.0002] 
    // CHEROKEE SMALL LETTER TI

    uint32_t const cps[1] = { 0xaba8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34ce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_065)
{
    // ABA9  ; [.34CF.0020.0002] 
    // CHEROKEE SMALL LETTER DO

    uint32_t const cps[1] = { 0xaba9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34cf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_066)
{
    // ABAA  ; [.34D0.0020.0002] 
    // CHEROKEE SMALL LETTER DU

    uint32_t const cps[1] = { 0xabaa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34d0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_067)
{
    // ABAB  ; [.34D1.0020.0002] 
    // CHEROKEE SMALL LETTER DV

    uint32_t const cps[1] = { 0xabab };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34d1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_068)
{
    // ABAC  ; [.34D2.0020.0002] 
    // CHEROKEE SMALL LETTER DLA

    uint32_t const cps[1] = { 0xabac };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34d2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_069)
{
    // ABAD  ; [.34D3.0020.0002] 
    // CHEROKEE SMALL LETTER TLA

    uint32_t const cps[1] = { 0xabad };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34d3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_070)
{
    // ABAE  ; [.34D4.0020.0002] 
    // CHEROKEE SMALL LETTER TLE

    uint32_t const cps[1] = { 0xabae };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34d4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_071)
{
    // ABAF  ; [.34D5.0020.0002] 
    // CHEROKEE SMALL LETTER TLI

    uint32_t const cps[1] = { 0xabaf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34d5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_072)
{
    // ABB0  ; [.34D6.0020.0002] 
    // CHEROKEE SMALL LETTER TLO

    uint32_t const cps[1] = { 0xabb0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34d6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_073)
{
    // ABB1  ; [.34D7.0020.0002] 
    // CHEROKEE SMALL LETTER TLU

    uint32_t const cps[1] = { 0xabb1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_074)
{
    // ABB2  ; [.34D8.0020.0002] 
    // CHEROKEE SMALL LETTER TLV

    uint32_t const cps[1] = { 0xabb2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34d8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_075)
{
    // ABB3  ; [.34D9.0020.0002] 
    // CHEROKEE SMALL LETTER TSA

    uint32_t const cps[1] = { 0xabb3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34d9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_076)
{
    // ABB4  ; [.34DA.0020.0002] 
    // CHEROKEE SMALL LETTER TSE

    uint32_t const cps[1] = { 0xabb4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34da), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_077)
{
    // ABB5  ; [.34DB.0020.0002] 
    // CHEROKEE SMALL LETTER TSI

    uint32_t const cps[1] = { 0xabb5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34db), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_078)
{
    // ABB6  ; [.34DC.0020.0002] 
    // CHEROKEE SMALL LETTER TSO

    uint32_t const cps[1] = { 0xabb6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34dc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_079)
{
    // ABB7  ; [.34DD.0020.0002] 
    // CHEROKEE SMALL LETTER TSU

    uint32_t const cps[1] = { 0xabb7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34dd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_080)
{
    // ABB8  ; [.34DE.0020.0002] 
    // CHEROKEE SMALL LETTER TSV

    uint32_t const cps[1] = { 0xabb8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34de), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_081)
{
    // ABB9  ; [.34DF.0020.0002] 
    // CHEROKEE SMALL LETTER WA

    uint32_t const cps[1] = { 0xabb9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34df), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_082)
{
    // ABBA  ; [.34E0.0020.0002] 
    // CHEROKEE SMALL LETTER WE

    uint32_t const cps[1] = { 0xabba };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34e0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_083)
{
    // ABBB  ; [.34E1.0020.0002] 
    // CHEROKEE SMALL LETTER WI

    uint32_t const cps[1] = { 0xabbb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34e1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_084)
{
    // ABBC  ; [.34E2.0020.0002] 
    // CHEROKEE SMALL LETTER WO

    uint32_t const cps[1] = { 0xabbc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34e2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_085)
{
    // ABBD  ; [.34E3.0020.0002] 
    // CHEROKEE SMALL LETTER WU

    uint32_t const cps[1] = { 0xabbd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34e3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_086)
{
    // ABBE  ; [.34E4.0020.0002] 
    // CHEROKEE SMALL LETTER WV

    uint32_t const cps[1] = { 0xabbe };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34e4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_087)
{
    // ABBF  ; [.34E5.0020.0002] 
    // CHEROKEE SMALL LETTER YA

    uint32_t const cps[1] = { 0xabbf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34e5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_088)
{
    // ABC0  ; [.2990.0020.0002] 
    // MEETEI MAYEK LETTER KOK

    uint32_t const cps[1] = { 0xabc0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2990), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_089)
{
    // ABC1  ; [.2991.0020.0002] 
    // MEETEI MAYEK LETTER SAM

    uint32_t const cps[1] = { 0xabc1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2991), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_090)
{
    // ABC2  ; [.2992.0020.0002] 
    // MEETEI MAYEK LETTER LAI

    uint32_t const cps[1] = { 0xabc2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2992), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_091)
{
    // ABC3  ; [.2993.0020.0002] 
    // MEETEI MAYEK LETTER MIT

    uint32_t const cps[1] = { 0xabc3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2993), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_092)
{
    // ABC4  ; [.2994.0020.0002] 
    // MEETEI MAYEK LETTER PA

    uint32_t const cps[1] = { 0xabc4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2994), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_093)
{
    // ABC5  ; [.2995.0020.0002] 
    // MEETEI MAYEK LETTER NA

    uint32_t const cps[1] = { 0xabc5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2995), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_094)
{
    // ABC6  ; [.2996.0020.0002] 
    // MEETEI MAYEK LETTER CHIL

    uint32_t const cps[1] = { 0xabc6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2996), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_095)
{
    // ABC7  ; [.2997.0020.0002] 
    // MEETEI MAYEK LETTER TIL

    uint32_t const cps[1] = { 0xabc7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2997), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_096)
{
    // ABC8  ; [.2998.0020.0002] 
    // MEETEI MAYEK LETTER KHOU

    uint32_t const cps[1] = { 0xabc8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2998), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_097)
{
    // ABC9  ; [.2999.0020.0002] 
    // MEETEI MAYEK LETTER NGOU

    uint32_t const cps[1] = { 0xabc9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2999), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_098)
{
    // ABCA  ; [.299A.0020.0002] 
    // MEETEI MAYEK LETTER THOU

    uint32_t const cps[1] = { 0xabca };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x299a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_099)
{
    // ABCB  ; [.299B.0020.0002] 
    // MEETEI MAYEK LETTER WAI

    uint32_t const cps[1] = { 0xabcb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x299b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_100)
{
    // ABCC  ; [.299C.0020.0002] 
    // MEETEI MAYEK LETTER YANG

    uint32_t const cps[1] = { 0xabcc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x299c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_101)
{
    // ABCD  ; [.299D.0020.0002] 
    // MEETEI MAYEK LETTER HUK

    uint32_t const cps[1] = { 0xabcd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x299d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_102)
{
    // ABCE  ; [.299E.0020.0002] 
    // MEETEI MAYEK LETTER UN

    uint32_t const cps[1] = { 0xabce };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x299e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_103)
{
    // ABCF  ; [.299F.0020.0002] 
    // MEETEI MAYEK LETTER I

    uint32_t const cps[1] = { 0xabcf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x299f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_104)
{
    // ABD0  ; [.29A0.0020.0002] 
    // MEETEI MAYEK LETTER PHAM

    uint32_t const cps[1] = { 0xabd0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29a0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_105)
{
    // ABD1  ; [.29A1.0020.0002] 
    // MEETEI MAYEK LETTER ATIYA

    uint32_t const cps[1] = { 0xabd1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29a1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_106)
{
    // ABD2  ; [.29A2.0020.0002] 
    // MEETEI MAYEK LETTER GOK

    uint32_t const cps[1] = { 0xabd2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29a2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_107)
{
    // ABD3  ; [.29A3.0020.0002] 
    // MEETEI MAYEK LETTER JHAM

    uint32_t const cps[1] = { 0xabd3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29a3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_108)
{
    // ABD4  ; [.29A4.0020.0002] 
    // MEETEI MAYEK LETTER RAI

    uint32_t const cps[1] = { 0xabd4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29a4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_109)
{
    // ABD5  ; [.29A5.0020.0002] 
    // MEETEI MAYEK LETTER BA

    uint32_t const cps[1] = { 0xabd5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29a5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_110)
{
    // ABD6  ; [.29A6.0020.0002] 
    // MEETEI MAYEK LETTER JIL

    uint32_t const cps[1] = { 0xabd6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29a6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_111)
{
    // ABD7  ; [.29A7.0020.0002] 
    // MEETEI MAYEK LETTER DIL

    uint32_t const cps[1] = { 0xabd7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29a7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_112)
{
    // ABD8  ; [.29A8.0020.0002] 
    // MEETEI MAYEK LETTER GHOU

    uint32_t const cps[1] = { 0xabd8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29a8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_113)
{
    // ABD9  ; [.29A9.0020.0002] 
    // MEETEI MAYEK LETTER DHOU

    uint32_t const cps[1] = { 0xabd9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29a9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_114)
{
    // ABDA  ; [.29AA.0020.0002] 
    // MEETEI MAYEK LETTER BHAM

    uint32_t const cps[1] = { 0xabda };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29aa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_115)
{
    // ABDB  ; [.29C4.0020.0002] 
    // MEETEI MAYEK LETTER KOK LONSUM

    uint32_t const cps[1] = { 0xabdb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29c4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_116)
{
    // ABDC  ; [.29C5.0020.0002] 
    // MEETEI MAYEK LETTER LAI LONSUM

    uint32_t const cps[1] = { 0xabdc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29c5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_117)
{
    // ABDD  ; [.29C6.0020.0002] 
    // MEETEI MAYEK LETTER MIT LONSUM

    uint32_t const cps[1] = { 0xabdd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29c6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_118)
{
    // ABDE  ; [.29C7.0020.0002] 
    // MEETEI MAYEK LETTER PA LONSUM

    uint32_t const cps[1] = { 0xabde };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_119)
{
    // ABDF  ; [.29C8.0020.0002] 
    // MEETEI MAYEK LETTER NA LONSUM

    uint32_t const cps[1] = { 0xabdf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_120)
{
    // ABE0  ; [.29C9.0020.0002] 
    // MEETEI MAYEK LETTER TIL LONSUM

    uint32_t const cps[1] = { 0xabe0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_121)
{
    // ABE1  ; [.29CA.0020.0002] 
    // MEETEI MAYEK LETTER NGOU LONSUM

    uint32_t const cps[1] = { 0xabe1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29ca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_122)
{
    // ABE2  ; [.29CB.0020.0002] 
    // MEETEI MAYEK LETTER I LONSUM

    uint32_t const cps[1] = { 0xabe2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29cb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_123)
{
    // ABE3  ; [.29B6.0020.0002] 
    // MEETEI MAYEK VOWEL SIGN ONAP

    uint32_t const cps[1] = { 0xabe3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29b6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_124)
{
    // ABE4  ; [.29B7.0020.0002] 
    // MEETEI MAYEK VOWEL SIGN INAP

    uint32_t const cps[1] = { 0xabe4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29b7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_125)
{
    // ABE5  ; [.29B8.0020.0002] 
    // MEETEI MAYEK VOWEL SIGN ANAP

    uint32_t const cps[1] = { 0xabe5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29b8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_126)
{
    // ABE6  ; [.29B9.0020.0002] 
    // MEETEI MAYEK VOWEL SIGN YENAP

    uint32_t const cps[1] = { 0xabe6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29b9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_127)
{
    // ABE7  ; [.29BA.0020.0002] 
    // MEETEI MAYEK VOWEL SIGN SOUNAP

    uint32_t const cps[1] = { 0xabe7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29ba), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_128)
{
    // ABE8  ; [.29BB.0020.0002] 
    // MEETEI MAYEK VOWEL SIGN UNAP

    uint32_t const cps[1] = { 0xabe8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29bb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_129)
{
    // ABE9  ; [.29BC.0020.0002] 
    // MEETEI MAYEK VOWEL SIGN CHEINAP

    uint32_t const cps[1] = { 0xabe9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29bc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_130)
{
    // ABEA  ; [.29BD.0020.0002] 
    // MEETEI MAYEK VOWEL SIGN NUNG

    uint32_t const cps[1] = { 0xabea };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29bd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_131)
{
    // ABEB  ; [*02AA.0020.0002] 
    // MEETEI MAYEK CHEIKHEI

    uint32_t const cps[1] = { 0xabeb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2aa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_132)
{
    // ABEC  ; [.0000.00CB.0002] 
    // MEETEI MAYEK LUM IYEK

    uint32_t const cps[1] = { 0xabec };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xab), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_133)
{
    // ABED  ; [.29CC.0020.0002] 
    // MEETEI MAYEK APUN IYEK

    uint32_t const cps[1] = { 0xabed };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x29cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_134)
{
    // ABF0  ; [.1CA3.0020.0002] 
    // MEETEI MAYEK DIGIT ZERO

    uint32_t const cps[1] = { 0xabf0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_135)
{
    // ABF1  ; [.1CA4.0020.0002] 
    // MEETEI MAYEK DIGIT ONE

    uint32_t const cps[1] = { 0xabf1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_136)
{
    // ABF2  ; [.1CA5.0020.0002] 
    // MEETEI MAYEK DIGIT TWO

    uint32_t const cps[1] = { 0xabf2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_137)
{
    // ABF3  ; [.1CA6.0020.0002] 
    // MEETEI MAYEK DIGIT THREE

    uint32_t const cps[1] = { 0xabf3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_138)
{
    // ABF4  ; [.1CA7.0020.0002] 
    // MEETEI MAYEK DIGIT FOUR

    uint32_t const cps[1] = { 0xabf4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_139)
{
    // ABF5  ; [.1CA8.0020.0002] 
    // MEETEI MAYEK DIGIT FIVE

    uint32_t const cps[1] = { 0xabf5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_140)
{
    // ABF6  ; [.1CA9.0020.0002] 
    // MEETEI MAYEK DIGIT SIX

    uint32_t const cps[1] = { 0xabf6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_141)
{
    // ABF7  ; [.1CAA.0020.0002] 
    // MEETEI MAYEK DIGIT SEVEN

    uint32_t const cps[1] = { 0xabf7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_142)
{
    // ABF8  ; [.1CAB.0020.0002] 
    // MEETEI MAYEK DIGIT EIGHT

    uint32_t const cps[1] = { 0xabf8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_143)
{
    // ABF9  ; [.1CAC.0020.0002] 
    // MEETEI MAYEK DIGIT NINE

    uint32_t const cps[1] = { 0xabf9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_144)
{
    // D7B0  ; [.3DD1.0020.0002] 
    // HANGUL JUNGSEONG O-YEO

    uint32_t const cps[1] = { 0xd7b0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3dd1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_145)
{
    // D7B1  ; [.3DD2.0020.0002] 
    // HANGUL JUNGSEONG O-O-I

    uint32_t const cps[1] = { 0xd7b1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3dd2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_146)
{
    // D7B2  ; [.3DD3.0020.0002] 
    // HANGUL JUNGSEONG YO-A

    uint32_t const cps[1] = { 0xd7b2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3dd3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_147)
{
    // D7B3  ; [.3DD4.0020.0002] 
    // HANGUL JUNGSEONG YO-AE

    uint32_t const cps[1] = { 0xd7b3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3dd4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_148)
{
    // D7B4  ; [.3DD5.0020.0002] 
    // HANGUL JUNGSEONG YO-EO

    uint32_t const cps[1] = { 0xd7b4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3dd5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_104_149)
{
    // D7B5  ; [.3DD6.0020.0002] 
    // HANGUL JUNGSEONG U-YEO

    uint32_t const cps[1] = { 0xd7b5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3dd6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

