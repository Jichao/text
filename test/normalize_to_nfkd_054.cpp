// Warning! This file is autogenerated.
#include <boost/text/normalize.hpp>
#include <boost/text/utility.hpp>

#include <gtest/gtest.h>

#include <algorithm>



TEST(normalization, nfkd_054_000)
{
    // CCC0;CCC0;110E 1166 11B3;CCC0;110E 1166 11B3; 
    // (쳀; 쳀; 쳀; 쳀; 쳀; ) HANGUL SYLLABLE CELS
    {
        std::array<uint32_t, 1> const source = {{ 0xCCC0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1166, 0x11B3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_001)
{
    // CCC1;CCC1;110E 1166 11B4;CCC1;110E 1166 11B4; 
    // (쳁; 쳁; 쳁; 쳁; 쳁; ) HANGUL SYLLABLE CELT
    {
        std::array<uint32_t, 1> const source = {{ 0xCCC1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1166, 0x11B4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_002)
{
    // CCC2;CCC2;110E 1166 11B5;CCC2;110E 1166 11B5; 
    // (쳂; 쳂; 쳂; 쳂; 쳂; ) HANGUL SYLLABLE CELP
    {
        std::array<uint32_t, 1> const source = {{ 0xCCC2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1166, 0x11B5 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_003)
{
    // CCC3;CCC3;110E 1166 11B6;CCC3;110E 1166 11B6; 
    // (쳃; 쳃; 쳃; 쳃; 쳃; ) HANGUL SYLLABLE CELH
    {
        std::array<uint32_t, 1> const source = {{ 0xCCC3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1166, 0x11B6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_004)
{
    // CCC4;CCC4;110E 1166 11B7;CCC4;110E 1166 11B7; 
    // (쳄; 쳄; 쳄; 쳄; 쳄; ) HANGUL SYLLABLE CEM
    {
        std::array<uint32_t, 1> const source = {{ 0xCCC4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1166, 0x11B7 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_005)
{
    // CCC5;CCC5;110E 1166 11B8;CCC5;110E 1166 11B8; 
    // (쳅; 쳅; 쳅; 쳅; 쳅; ) HANGUL SYLLABLE CEB
    {
        std::array<uint32_t, 1> const source = {{ 0xCCC5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1166, 0x11B8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_006)
{
    // CCC6;CCC6;110E 1166 11B9;CCC6;110E 1166 11B9; 
    // (쳆; 쳆; 쳆; 쳆; 쳆; ) HANGUL SYLLABLE CEBS
    {
        std::array<uint32_t, 1> const source = {{ 0xCCC6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1166, 0x11B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_007)
{
    // CCC7;CCC7;110E 1166 11BA;CCC7;110E 1166 11BA; 
    // (쳇; 쳇; 쳇; 쳇; 쳇; ) HANGUL SYLLABLE CES
    {
        std::array<uint32_t, 1> const source = {{ 0xCCC7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1166, 0x11BA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_008)
{
    // CCC8;CCC8;110E 1166 11BB;CCC8;110E 1166 11BB; 
    // (쳈; 쳈; 쳈; 쳈; 쳈; ) HANGUL SYLLABLE CESS
    {
        std::array<uint32_t, 1> const source = {{ 0xCCC8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1166, 0x11BB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_009)
{
    // CCC9;CCC9;110E 1166 11BC;CCC9;110E 1166 11BC; 
    // (쳉; 쳉; 쳉; 쳉; 쳉; ) HANGUL SYLLABLE CENG
    {
        std::array<uint32_t, 1> const source = {{ 0xCCC9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1166, 0x11BC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_010)
{
    // CCCA;CCCA;110E 1166 11BD;CCCA;110E 1166 11BD; 
    // (쳊; 쳊; 쳊; 쳊; 쳊; ) HANGUL SYLLABLE CEJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCCCA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1166, 0x11BD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_011)
{
    // CCCB;CCCB;110E 1166 11BE;CCCB;110E 1166 11BE; 
    // (쳋; 쳋; 쳋; 쳋; 쳋; ) HANGUL SYLLABLE CEC
    {
        std::array<uint32_t, 1> const source = {{ 0xCCCB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1166, 0x11BE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_012)
{
    // CCCC;CCCC;110E 1166 11BF;CCCC;110E 1166 11BF; 
    // (쳌; 쳌; 쳌; 쳌; 쳌; ) HANGUL SYLLABLE CEK
    {
        std::array<uint32_t, 1> const source = {{ 0xCCCC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1166, 0x11BF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_013)
{
    // CCCD;CCCD;110E 1166 11C0;CCCD;110E 1166 11C0; 
    // (쳍; 쳍; 쳍; 쳍; 쳍; ) HANGUL SYLLABLE CET
    {
        std::array<uint32_t, 1> const source = {{ 0xCCCD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1166, 0x11C0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_014)
{
    // CCCE;CCCE;110E 1166 11C1;CCCE;110E 1166 11C1; 
    // (쳎; 쳎; 쳎; 쳎; 쳎; ) HANGUL SYLLABLE CEP
    {
        std::array<uint32_t, 1> const source = {{ 0xCCCE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1166, 0x11C1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_015)
{
    // CCCF;CCCF;110E 1166 11C2;CCCF;110E 1166 11C2; 
    // (쳏; 쳏; 쳏; 쳏; 쳏; ) HANGUL SYLLABLE CEH
    {
        std::array<uint32_t, 1> const source = {{ 0xCCCF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1166, 0x11C2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_016)
{
    // CCD0;CCD0;110E 1167;CCD0;110E 1167; 
    // (쳐; 쳐; 쳐; 쳐; 쳐; ) HANGUL SYLLABLE CYEO
    {
        std::array<uint32_t, 1> const source = {{ 0xCCD0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x110E, 0x1167 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_017)
{
    // CCD1;CCD1;110E 1167 11A8;CCD1;110E 1167 11A8; 
    // (쳑; 쳑; 쳑; 쳑; 쳑; ) HANGUL SYLLABLE CYEOG
    {
        std::array<uint32_t, 1> const source = {{ 0xCCD1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11A8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_018)
{
    // CCD2;CCD2;110E 1167 11A9;CCD2;110E 1167 11A9; 
    // (쳒; 쳒; 쳒; 쳒; 쳒; ) HANGUL SYLLABLE CYEOGG
    {
        std::array<uint32_t, 1> const source = {{ 0xCCD2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11A9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_019)
{
    // CCD3;CCD3;110E 1167 11AA;CCD3;110E 1167 11AA; 
    // (쳓; 쳓; 쳓; 쳓; 쳓; ) HANGUL SYLLABLE CYEOGS
    {
        std::array<uint32_t, 1> const source = {{ 0xCCD3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11AA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_020)
{
    // CCD4;CCD4;110E 1167 11AB;CCD4;110E 1167 11AB; 
    // (쳔; 쳔; 쳔; 쳔; 쳔; ) HANGUL SYLLABLE CYEON
    {
        std::array<uint32_t, 1> const source = {{ 0xCCD4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11AB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_021)
{
    // CCD5;CCD5;110E 1167 11AC;CCD5;110E 1167 11AC; 
    // (쳕; 쳕; 쳕; 쳕; 쳕; ) HANGUL SYLLABLE CYEONJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCCD5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11AC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_022)
{
    // CCD6;CCD6;110E 1167 11AD;CCD6;110E 1167 11AD; 
    // (쳖; 쳖; 쳖; 쳖; 쳖; ) HANGUL SYLLABLE CYEONH
    {
        std::array<uint32_t, 1> const source = {{ 0xCCD6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11AD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_023)
{
    // CCD7;CCD7;110E 1167 11AE;CCD7;110E 1167 11AE; 
    // (쳗; 쳗; 쳗; 쳗; 쳗; ) HANGUL SYLLABLE CYEOD
    {
        std::array<uint32_t, 1> const source = {{ 0xCCD7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11AE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_024)
{
    // CCD8;CCD8;110E 1167 11AF;CCD8;110E 1167 11AF; 
    // (쳘; 쳘; 쳘; 쳘; 쳘; ) HANGUL SYLLABLE CYEOL
    {
        std::array<uint32_t, 1> const source = {{ 0xCCD8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11AF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_025)
{
    // CCD9;CCD9;110E 1167 11B0;CCD9;110E 1167 11B0; 
    // (쳙; 쳙; 쳙; 쳙; 쳙; ) HANGUL SYLLABLE CYEOLG
    {
        std::array<uint32_t, 1> const source = {{ 0xCCD9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11B0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_026)
{
    // CCDA;CCDA;110E 1167 11B1;CCDA;110E 1167 11B1; 
    // (쳚; 쳚; 쳚; 쳚; 쳚; ) HANGUL SYLLABLE CYEOLM
    {
        std::array<uint32_t, 1> const source = {{ 0xCCDA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11B1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_027)
{
    // CCDB;CCDB;110E 1167 11B2;CCDB;110E 1167 11B2; 
    // (쳛; 쳛; 쳛; 쳛; 쳛; ) HANGUL SYLLABLE CYEOLB
    {
        std::array<uint32_t, 1> const source = {{ 0xCCDB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11B2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_028)
{
    // CCDC;CCDC;110E 1167 11B3;CCDC;110E 1167 11B3; 
    // (쳜; 쳜; 쳜; 쳜; 쳜; ) HANGUL SYLLABLE CYEOLS
    {
        std::array<uint32_t, 1> const source = {{ 0xCCDC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11B3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_029)
{
    // CCDD;CCDD;110E 1167 11B4;CCDD;110E 1167 11B4; 
    // (쳝; 쳝; 쳝; 쳝; 쳝; ) HANGUL SYLLABLE CYEOLT
    {
        std::array<uint32_t, 1> const source = {{ 0xCCDD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11B4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_030)
{
    // CCDE;CCDE;110E 1167 11B5;CCDE;110E 1167 11B5; 
    // (쳞; 쳞; 쳞; 쳞; 쳞; ) HANGUL SYLLABLE CYEOLP
    {
        std::array<uint32_t, 1> const source = {{ 0xCCDE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11B5 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_031)
{
    // CCDF;CCDF;110E 1167 11B6;CCDF;110E 1167 11B6; 
    // (쳟; 쳟; 쳟; 쳟; 쳟; ) HANGUL SYLLABLE CYEOLH
    {
        std::array<uint32_t, 1> const source = {{ 0xCCDF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11B6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_032)
{
    // CCE0;CCE0;110E 1167 11B7;CCE0;110E 1167 11B7; 
    // (쳠; 쳠; 쳠; 쳠; 쳠; ) HANGUL SYLLABLE CYEOM
    {
        std::array<uint32_t, 1> const source = {{ 0xCCE0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11B7 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_033)
{
    // CCE1;CCE1;110E 1167 11B8;CCE1;110E 1167 11B8; 
    // (쳡; 쳡; 쳡; 쳡; 쳡; ) HANGUL SYLLABLE CYEOB
    {
        std::array<uint32_t, 1> const source = {{ 0xCCE1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11B8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_034)
{
    // CCE2;CCE2;110E 1167 11B9;CCE2;110E 1167 11B9; 
    // (쳢; 쳢; 쳢; 쳢; 쳢; ) HANGUL SYLLABLE CYEOBS
    {
        std::array<uint32_t, 1> const source = {{ 0xCCE2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_035)
{
    // CCE3;CCE3;110E 1167 11BA;CCE3;110E 1167 11BA; 
    // (쳣; 쳣; 쳣; 쳣; 쳣; ) HANGUL SYLLABLE CYEOS
    {
        std::array<uint32_t, 1> const source = {{ 0xCCE3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11BA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_036)
{
    // CCE4;CCE4;110E 1167 11BB;CCE4;110E 1167 11BB; 
    // (쳤; 쳤; 쳤; 쳤; 쳤; ) HANGUL SYLLABLE CYEOSS
    {
        std::array<uint32_t, 1> const source = {{ 0xCCE4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11BB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_037)
{
    // CCE5;CCE5;110E 1167 11BC;CCE5;110E 1167 11BC; 
    // (쳥; 쳥; 쳥; 쳥; 쳥; ) HANGUL SYLLABLE CYEONG
    {
        std::array<uint32_t, 1> const source = {{ 0xCCE5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11BC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_038)
{
    // CCE6;CCE6;110E 1167 11BD;CCE6;110E 1167 11BD; 
    // (쳦; 쳦; 쳦; 쳦; 쳦; ) HANGUL SYLLABLE CYEOJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCCE6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11BD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_039)
{
    // CCE7;CCE7;110E 1167 11BE;CCE7;110E 1167 11BE; 
    // (쳧; 쳧; 쳧; 쳧; 쳧; ) HANGUL SYLLABLE CYEOC
    {
        std::array<uint32_t, 1> const source = {{ 0xCCE7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11BE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_040)
{
    // CCE8;CCE8;110E 1167 11BF;CCE8;110E 1167 11BF; 
    // (쳨; 쳨; 쳨; 쳨; 쳨; ) HANGUL SYLLABLE CYEOK
    {
        std::array<uint32_t, 1> const source = {{ 0xCCE8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11BF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_041)
{
    // CCE9;CCE9;110E 1167 11C0;CCE9;110E 1167 11C0; 
    // (쳩; 쳩; 쳩; 쳩; 쳩; ) HANGUL SYLLABLE CYEOT
    {
        std::array<uint32_t, 1> const source = {{ 0xCCE9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11C0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_042)
{
    // CCEA;CCEA;110E 1167 11C1;CCEA;110E 1167 11C1; 
    // (쳪; 쳪; 쳪; 쳪; 쳪; ) HANGUL SYLLABLE CYEOP
    {
        std::array<uint32_t, 1> const source = {{ 0xCCEA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11C1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_043)
{
    // CCEB;CCEB;110E 1167 11C2;CCEB;110E 1167 11C2; 
    // (쳫; 쳫; 쳫; 쳫; 쳫; ) HANGUL SYLLABLE CYEOH
    {
        std::array<uint32_t, 1> const source = {{ 0xCCEB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1167, 0x11C2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_044)
{
    // CCEC;CCEC;110E 1168;CCEC;110E 1168; 
    // (쳬; 쳬; 쳬; 쳬; 쳬; ) HANGUL SYLLABLE CYE
    {
        std::array<uint32_t, 1> const source = {{ 0xCCEC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x110E, 0x1168 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_045)
{
    // CCED;CCED;110E 1168 11A8;CCED;110E 1168 11A8; 
    // (쳭; 쳭; 쳭; 쳭; 쳭; ) HANGUL SYLLABLE CYEG
    {
        std::array<uint32_t, 1> const source = {{ 0xCCED }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11A8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_046)
{
    // CCEE;CCEE;110E 1168 11A9;CCEE;110E 1168 11A9; 
    // (쳮; 쳮; 쳮; 쳮; 쳮; ) HANGUL SYLLABLE CYEGG
    {
        std::array<uint32_t, 1> const source = {{ 0xCCEE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11A9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_047)
{
    // CCEF;CCEF;110E 1168 11AA;CCEF;110E 1168 11AA; 
    // (쳯; 쳯; 쳯; 쳯; 쳯; ) HANGUL SYLLABLE CYEGS
    {
        std::array<uint32_t, 1> const source = {{ 0xCCEF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11AA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_048)
{
    // CCF0;CCF0;110E 1168 11AB;CCF0;110E 1168 11AB; 
    // (쳰; 쳰; 쳰; 쳰; 쳰; ) HANGUL SYLLABLE CYEN
    {
        std::array<uint32_t, 1> const source = {{ 0xCCF0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11AB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_049)
{
    // CCF1;CCF1;110E 1168 11AC;CCF1;110E 1168 11AC; 
    // (쳱; 쳱; 쳱; 쳱; 쳱; ) HANGUL SYLLABLE CYENJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCCF1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11AC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_050)
{
    // CCF2;CCF2;110E 1168 11AD;CCF2;110E 1168 11AD; 
    // (쳲; 쳲; 쳲; 쳲; 쳲; ) HANGUL SYLLABLE CYENH
    {
        std::array<uint32_t, 1> const source = {{ 0xCCF2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11AD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_051)
{
    // CCF3;CCF3;110E 1168 11AE;CCF3;110E 1168 11AE; 
    // (쳳; 쳳; 쳳; 쳳; 쳳; ) HANGUL SYLLABLE CYED
    {
        std::array<uint32_t, 1> const source = {{ 0xCCF3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11AE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_052)
{
    // CCF4;CCF4;110E 1168 11AF;CCF4;110E 1168 11AF; 
    // (쳴; 쳴; 쳴; 쳴; 쳴; ) HANGUL SYLLABLE CYEL
    {
        std::array<uint32_t, 1> const source = {{ 0xCCF4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11AF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_053)
{
    // CCF5;CCF5;110E 1168 11B0;CCF5;110E 1168 11B0; 
    // (쳵; 쳵; 쳵; 쳵; 쳵; ) HANGUL SYLLABLE CYELG
    {
        std::array<uint32_t, 1> const source = {{ 0xCCF5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11B0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_054)
{
    // CCF6;CCF6;110E 1168 11B1;CCF6;110E 1168 11B1; 
    // (쳶; 쳶; 쳶; 쳶; 쳶; ) HANGUL SYLLABLE CYELM
    {
        std::array<uint32_t, 1> const source = {{ 0xCCF6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11B1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_055)
{
    // CCF7;CCF7;110E 1168 11B2;CCF7;110E 1168 11B2; 
    // (쳷; 쳷; 쳷; 쳷; 쳷; ) HANGUL SYLLABLE CYELB
    {
        std::array<uint32_t, 1> const source = {{ 0xCCF7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11B2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_056)
{
    // CCF8;CCF8;110E 1168 11B3;CCF8;110E 1168 11B3; 
    // (쳸; 쳸; 쳸; 쳸; 쳸; ) HANGUL SYLLABLE CYELS
    {
        std::array<uint32_t, 1> const source = {{ 0xCCF8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11B3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_057)
{
    // CCF9;CCF9;110E 1168 11B4;CCF9;110E 1168 11B4; 
    // (쳹; 쳹; 쳹; 쳹; 쳹; ) HANGUL SYLLABLE CYELT
    {
        std::array<uint32_t, 1> const source = {{ 0xCCF9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11B4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_058)
{
    // CCFA;CCFA;110E 1168 11B5;CCFA;110E 1168 11B5; 
    // (쳺; 쳺; 쳺; 쳺; 쳺; ) HANGUL SYLLABLE CYELP
    {
        std::array<uint32_t, 1> const source = {{ 0xCCFA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11B5 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_059)
{
    // CCFB;CCFB;110E 1168 11B6;CCFB;110E 1168 11B6; 
    // (쳻; 쳻; 쳻; 쳻; 쳻; ) HANGUL SYLLABLE CYELH
    {
        std::array<uint32_t, 1> const source = {{ 0xCCFB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11B6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_060)
{
    // CCFC;CCFC;110E 1168 11B7;CCFC;110E 1168 11B7; 
    // (쳼; 쳼; 쳼; 쳼; 쳼; ) HANGUL SYLLABLE CYEM
    {
        std::array<uint32_t, 1> const source = {{ 0xCCFC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11B7 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_061)
{
    // CCFD;CCFD;110E 1168 11B8;CCFD;110E 1168 11B8; 
    // (쳽; 쳽; 쳽; 쳽; 쳽; ) HANGUL SYLLABLE CYEB
    {
        std::array<uint32_t, 1> const source = {{ 0xCCFD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11B8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_062)
{
    // CCFE;CCFE;110E 1168 11B9;CCFE;110E 1168 11B9; 
    // (쳾; 쳾; 쳾; 쳾; 쳾; ) HANGUL SYLLABLE CYEBS
    {
        std::array<uint32_t, 1> const source = {{ 0xCCFE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_063)
{
    // CCFF;CCFF;110E 1168 11BA;CCFF;110E 1168 11BA; 
    // (쳿; 쳿; 쳿; 쳿; 쳿; ) HANGUL SYLLABLE CYES
    {
        std::array<uint32_t, 1> const source = {{ 0xCCFF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11BA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_064)
{
    // CD00;CD00;110E 1168 11BB;CD00;110E 1168 11BB; 
    // (촀; 촀; 촀; 촀; 촀; ) HANGUL SYLLABLE CYESS
    {
        std::array<uint32_t, 1> const source = {{ 0xCD00 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11BB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_065)
{
    // CD01;CD01;110E 1168 11BC;CD01;110E 1168 11BC; 
    // (촁; 촁; 촁; 촁; 촁; ) HANGUL SYLLABLE CYENG
    {
        std::array<uint32_t, 1> const source = {{ 0xCD01 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11BC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_066)
{
    // CD02;CD02;110E 1168 11BD;CD02;110E 1168 11BD; 
    // (촂; 촂; 촂; 촂; 촂; ) HANGUL SYLLABLE CYEJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCD02 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11BD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_067)
{
    // CD03;CD03;110E 1168 11BE;CD03;110E 1168 11BE; 
    // (촃; 촃; 촃; 촃; 촃; ) HANGUL SYLLABLE CYEC
    {
        std::array<uint32_t, 1> const source = {{ 0xCD03 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11BE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_068)
{
    // CD04;CD04;110E 1168 11BF;CD04;110E 1168 11BF; 
    // (촄; 촄; 촄; 촄; 촄; ) HANGUL SYLLABLE CYEK
    {
        std::array<uint32_t, 1> const source = {{ 0xCD04 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11BF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_069)
{
    // CD05;CD05;110E 1168 11C0;CD05;110E 1168 11C0; 
    // (촅; 촅; 촅; 촅; 촅; ) HANGUL SYLLABLE CYET
    {
        std::array<uint32_t, 1> const source = {{ 0xCD05 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11C0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_070)
{
    // CD06;CD06;110E 1168 11C1;CD06;110E 1168 11C1; 
    // (촆; 촆; 촆; 촆; 촆; ) HANGUL SYLLABLE CYEP
    {
        std::array<uint32_t, 1> const source = {{ 0xCD06 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11C1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_071)
{
    // CD07;CD07;110E 1168 11C2;CD07;110E 1168 11C2; 
    // (촇; 촇; 촇; 촇; 촇; ) HANGUL SYLLABLE CYEH
    {
        std::array<uint32_t, 1> const source = {{ 0xCD07 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1168, 0x11C2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_072)
{
    // CD08;CD08;110E 1169;CD08;110E 1169; 
    // (초; 초; 초; 초; 초; ) HANGUL SYLLABLE CO
    {
        std::array<uint32_t, 1> const source = {{ 0xCD08 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x110E, 0x1169 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_073)
{
    // CD09;CD09;110E 1169 11A8;CD09;110E 1169 11A8; 
    // (촉; 촉; 촉; 촉; 촉; ) HANGUL SYLLABLE COG
    {
        std::array<uint32_t, 1> const source = {{ 0xCD09 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11A8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_074)
{
    // CD0A;CD0A;110E 1169 11A9;CD0A;110E 1169 11A9; 
    // (촊; 촊; 촊; 촊; 촊; ) HANGUL SYLLABLE COGG
    {
        std::array<uint32_t, 1> const source = {{ 0xCD0A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11A9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_075)
{
    // CD0B;CD0B;110E 1169 11AA;CD0B;110E 1169 11AA; 
    // (촋; 촋; 촋; 촋; 촋; ) HANGUL SYLLABLE COGS
    {
        std::array<uint32_t, 1> const source = {{ 0xCD0B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11AA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_076)
{
    // CD0C;CD0C;110E 1169 11AB;CD0C;110E 1169 11AB; 
    // (촌; 촌; 촌; 촌; 촌; ) HANGUL SYLLABLE CON
    {
        std::array<uint32_t, 1> const source = {{ 0xCD0C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11AB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_077)
{
    // CD0D;CD0D;110E 1169 11AC;CD0D;110E 1169 11AC; 
    // (촍; 촍; 촍; 촍; 촍; ) HANGUL SYLLABLE CONJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCD0D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11AC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_078)
{
    // CD0E;CD0E;110E 1169 11AD;CD0E;110E 1169 11AD; 
    // (촎; 촎; 촎; 촎; 촎; ) HANGUL SYLLABLE CONH
    {
        std::array<uint32_t, 1> const source = {{ 0xCD0E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11AD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_079)
{
    // CD0F;CD0F;110E 1169 11AE;CD0F;110E 1169 11AE; 
    // (촏; 촏; 촏; 촏; 촏; ) HANGUL SYLLABLE COD
    {
        std::array<uint32_t, 1> const source = {{ 0xCD0F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11AE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_080)
{
    // CD10;CD10;110E 1169 11AF;CD10;110E 1169 11AF; 
    // (촐; 촐; 촐; 촐; 촐; ) HANGUL SYLLABLE COL
    {
        std::array<uint32_t, 1> const source = {{ 0xCD10 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11AF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_081)
{
    // CD11;CD11;110E 1169 11B0;CD11;110E 1169 11B0; 
    // (촑; 촑; 촑; 촑; 촑; ) HANGUL SYLLABLE COLG
    {
        std::array<uint32_t, 1> const source = {{ 0xCD11 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11B0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_082)
{
    // CD12;CD12;110E 1169 11B1;CD12;110E 1169 11B1; 
    // (촒; 촒; 촒; 촒; 촒; ) HANGUL SYLLABLE COLM
    {
        std::array<uint32_t, 1> const source = {{ 0xCD12 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11B1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_083)
{
    // CD13;CD13;110E 1169 11B2;CD13;110E 1169 11B2; 
    // (촓; 촓; 촓; 촓; 촓; ) HANGUL SYLLABLE COLB
    {
        std::array<uint32_t, 1> const source = {{ 0xCD13 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11B2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_084)
{
    // CD14;CD14;110E 1169 11B3;CD14;110E 1169 11B3; 
    // (촔; 촔; 촔; 촔; 촔; ) HANGUL SYLLABLE COLS
    {
        std::array<uint32_t, 1> const source = {{ 0xCD14 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11B3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_085)
{
    // CD15;CD15;110E 1169 11B4;CD15;110E 1169 11B4; 
    // (촕; 촕; 촕; 촕; 촕; ) HANGUL SYLLABLE COLT
    {
        std::array<uint32_t, 1> const source = {{ 0xCD15 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11B4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_086)
{
    // CD16;CD16;110E 1169 11B5;CD16;110E 1169 11B5; 
    // (촖; 촖; 촖; 촖; 촖; ) HANGUL SYLLABLE COLP
    {
        std::array<uint32_t, 1> const source = {{ 0xCD16 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11B5 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_087)
{
    // CD17;CD17;110E 1169 11B6;CD17;110E 1169 11B6; 
    // (촗; 촗; 촗; 촗; 촗; ) HANGUL SYLLABLE COLH
    {
        std::array<uint32_t, 1> const source = {{ 0xCD17 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11B6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_088)
{
    // CD18;CD18;110E 1169 11B7;CD18;110E 1169 11B7; 
    // (촘; 촘; 촘; 촘; 촘; ) HANGUL SYLLABLE COM
    {
        std::array<uint32_t, 1> const source = {{ 0xCD18 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11B7 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_089)
{
    // CD19;CD19;110E 1169 11B8;CD19;110E 1169 11B8; 
    // (촙; 촙; 촙; 촙; 촙; ) HANGUL SYLLABLE COB
    {
        std::array<uint32_t, 1> const source = {{ 0xCD19 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11B8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_090)
{
    // CD1A;CD1A;110E 1169 11B9;CD1A;110E 1169 11B9; 
    // (촚; 촚; 촚; 촚; 촚; ) HANGUL SYLLABLE COBS
    {
        std::array<uint32_t, 1> const source = {{ 0xCD1A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_091)
{
    // CD1B;CD1B;110E 1169 11BA;CD1B;110E 1169 11BA; 
    // (촛; 촛; 촛; 촛; 촛; ) HANGUL SYLLABLE COS
    {
        std::array<uint32_t, 1> const source = {{ 0xCD1B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11BA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_092)
{
    // CD1C;CD1C;110E 1169 11BB;CD1C;110E 1169 11BB; 
    // (촜; 촜; 촜; 촜; 촜; ) HANGUL SYLLABLE COSS
    {
        std::array<uint32_t, 1> const source = {{ 0xCD1C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11BB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_093)
{
    // CD1D;CD1D;110E 1169 11BC;CD1D;110E 1169 11BC; 
    // (총; 총; 총; 총; 총; ) HANGUL SYLLABLE CONG
    {
        std::array<uint32_t, 1> const source = {{ 0xCD1D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11BC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_094)
{
    // CD1E;CD1E;110E 1169 11BD;CD1E;110E 1169 11BD; 
    // (촞; 촞; 촞; 촞; 촞; ) HANGUL SYLLABLE COJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCD1E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11BD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_095)
{
    // CD1F;CD1F;110E 1169 11BE;CD1F;110E 1169 11BE; 
    // (촟; 촟; 촟; 촟; 촟; ) HANGUL SYLLABLE COC
    {
        std::array<uint32_t, 1> const source = {{ 0xCD1F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11BE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_096)
{
    // CD20;CD20;110E 1169 11BF;CD20;110E 1169 11BF; 
    // (촠; 촠; 촠; 촠; 촠; ) HANGUL SYLLABLE COK
    {
        std::array<uint32_t, 1> const source = {{ 0xCD20 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11BF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_097)
{
    // CD21;CD21;110E 1169 11C0;CD21;110E 1169 11C0; 
    // (촡; 촡; 촡; 촡; 촡; ) HANGUL SYLLABLE COT
    {
        std::array<uint32_t, 1> const source = {{ 0xCD21 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11C0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_098)
{
    // CD22;CD22;110E 1169 11C1;CD22;110E 1169 11C1; 
    // (촢; 촢; 촢; 촢; 촢; ) HANGUL SYLLABLE COP
    {
        std::array<uint32_t, 1> const source = {{ 0xCD22 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11C1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_099)
{
    // CD23;CD23;110E 1169 11C2;CD23;110E 1169 11C2; 
    // (촣; 촣; 촣; 촣; 촣; ) HANGUL SYLLABLE COH
    {
        std::array<uint32_t, 1> const source = {{ 0xCD23 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x1169, 0x11C2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_100)
{
    // CD24;CD24;110E 116A;CD24;110E 116A; 
    // (촤; 촤; 촤; 촤; 촤; ) HANGUL SYLLABLE CWA
    {
        std::array<uint32_t, 1> const source = {{ 0xCD24 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x110E, 0x116A }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_101)
{
    // CD25;CD25;110E 116A 11A8;CD25;110E 116A 11A8; 
    // (촥; 촥; 촥; 촥; 촥; ) HANGUL SYLLABLE CWAG
    {
        std::array<uint32_t, 1> const source = {{ 0xCD25 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11A8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_102)
{
    // CD26;CD26;110E 116A 11A9;CD26;110E 116A 11A9; 
    // (촦; 촦; 촦; 촦; 촦; ) HANGUL SYLLABLE CWAGG
    {
        std::array<uint32_t, 1> const source = {{ 0xCD26 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11A9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_103)
{
    // CD27;CD27;110E 116A 11AA;CD27;110E 116A 11AA; 
    // (촧; 촧; 촧; 촧; 촧; ) HANGUL SYLLABLE CWAGS
    {
        std::array<uint32_t, 1> const source = {{ 0xCD27 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11AA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_104)
{
    // CD28;CD28;110E 116A 11AB;CD28;110E 116A 11AB; 
    // (촨; 촨; 촨; 촨; 촨; ) HANGUL SYLLABLE CWAN
    {
        std::array<uint32_t, 1> const source = {{ 0xCD28 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11AB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_105)
{
    // CD29;CD29;110E 116A 11AC;CD29;110E 116A 11AC; 
    // (촩; 촩; 촩; 촩; 촩; ) HANGUL SYLLABLE CWANJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCD29 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11AC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_106)
{
    // CD2A;CD2A;110E 116A 11AD;CD2A;110E 116A 11AD; 
    // (촪; 촪; 촪; 촪; 촪; ) HANGUL SYLLABLE CWANH
    {
        std::array<uint32_t, 1> const source = {{ 0xCD2A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11AD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_107)
{
    // CD2B;CD2B;110E 116A 11AE;CD2B;110E 116A 11AE; 
    // (촫; 촫; 촫; 촫; 촫; ) HANGUL SYLLABLE CWAD
    {
        std::array<uint32_t, 1> const source = {{ 0xCD2B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11AE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_108)
{
    // CD2C;CD2C;110E 116A 11AF;CD2C;110E 116A 11AF; 
    // (촬; 촬; 촬; 촬; 촬; ) HANGUL SYLLABLE CWAL
    {
        std::array<uint32_t, 1> const source = {{ 0xCD2C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11AF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_109)
{
    // CD2D;CD2D;110E 116A 11B0;CD2D;110E 116A 11B0; 
    // (촭; 촭; 촭; 촭; 촭; ) HANGUL SYLLABLE CWALG
    {
        std::array<uint32_t, 1> const source = {{ 0xCD2D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11B0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_110)
{
    // CD2E;CD2E;110E 116A 11B1;CD2E;110E 116A 11B1; 
    // (촮; 촮; 촮; 촮; 촮; ) HANGUL SYLLABLE CWALM
    {
        std::array<uint32_t, 1> const source = {{ 0xCD2E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11B1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_111)
{
    // CD2F;CD2F;110E 116A 11B2;CD2F;110E 116A 11B2; 
    // (촯; 촯; 촯; 촯; 촯; ) HANGUL SYLLABLE CWALB
    {
        std::array<uint32_t, 1> const source = {{ 0xCD2F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11B2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_112)
{
    // CD30;CD30;110E 116A 11B3;CD30;110E 116A 11B3; 
    // (촰; 촰; 촰; 촰; 촰; ) HANGUL SYLLABLE CWALS
    {
        std::array<uint32_t, 1> const source = {{ 0xCD30 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11B3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_113)
{
    // CD31;CD31;110E 116A 11B4;CD31;110E 116A 11B4; 
    // (촱; 촱; 촱; 촱; 촱; ) HANGUL SYLLABLE CWALT
    {
        std::array<uint32_t, 1> const source = {{ 0xCD31 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11B4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_114)
{
    // CD32;CD32;110E 116A 11B5;CD32;110E 116A 11B5; 
    // (촲; 촲; 촲; 촲; 촲; ) HANGUL SYLLABLE CWALP
    {
        std::array<uint32_t, 1> const source = {{ 0xCD32 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11B5 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_115)
{
    // CD33;CD33;110E 116A 11B6;CD33;110E 116A 11B6; 
    // (촳; 촳; 촳; 촳; 촳; ) HANGUL SYLLABLE CWALH
    {
        std::array<uint32_t, 1> const source = {{ 0xCD33 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11B6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_116)
{
    // CD34;CD34;110E 116A 11B7;CD34;110E 116A 11B7; 
    // (촴; 촴; 촴; 촴; 촴; ) HANGUL SYLLABLE CWAM
    {
        std::array<uint32_t, 1> const source = {{ 0xCD34 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11B7 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_117)
{
    // CD35;CD35;110E 116A 11B8;CD35;110E 116A 11B8; 
    // (촵; 촵; 촵; 촵; 촵; ) HANGUL SYLLABLE CWAB
    {
        std::array<uint32_t, 1> const source = {{ 0xCD35 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11B8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_118)
{
    // CD36;CD36;110E 116A 11B9;CD36;110E 116A 11B9; 
    // (촶; 촶; 촶; 촶; 촶; ) HANGUL SYLLABLE CWABS
    {
        std::array<uint32_t, 1> const source = {{ 0xCD36 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_119)
{
    // CD37;CD37;110E 116A 11BA;CD37;110E 116A 11BA; 
    // (촷; 촷; 촷; 촷; 촷; ) HANGUL SYLLABLE CWAS
    {
        std::array<uint32_t, 1> const source = {{ 0xCD37 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11BA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_120)
{
    // CD38;CD38;110E 116A 11BB;CD38;110E 116A 11BB; 
    // (촸; 촸; 촸; 촸; 촸; ) HANGUL SYLLABLE CWASS
    {
        std::array<uint32_t, 1> const source = {{ 0xCD38 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11BB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_121)
{
    // CD39;CD39;110E 116A 11BC;CD39;110E 116A 11BC; 
    // (촹; 촹; 촹; 촹; 촹; ) HANGUL SYLLABLE CWANG
    {
        std::array<uint32_t, 1> const source = {{ 0xCD39 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11BC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_122)
{
    // CD3A;CD3A;110E 116A 11BD;CD3A;110E 116A 11BD; 
    // (촺; 촺; 촺; 촺; 촺; ) HANGUL SYLLABLE CWAJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCD3A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11BD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_123)
{
    // CD3B;CD3B;110E 116A 11BE;CD3B;110E 116A 11BE; 
    // (촻; 촻; 촻; 촻; 촻; ) HANGUL SYLLABLE CWAC
    {
        std::array<uint32_t, 1> const source = {{ 0xCD3B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11BE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_124)
{
    // CD3C;CD3C;110E 116A 11BF;CD3C;110E 116A 11BF; 
    // (촼; 촼; 촼; 촼; 촼; ) HANGUL SYLLABLE CWAK
    {
        std::array<uint32_t, 1> const source = {{ 0xCD3C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11BF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_125)
{
    // CD3D;CD3D;110E 116A 11C0;CD3D;110E 116A 11C0; 
    // (촽; 촽; 촽; 촽; 촽; ) HANGUL SYLLABLE CWAT
    {
        std::array<uint32_t, 1> const source = {{ 0xCD3D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11C0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_126)
{
    // CD3E;CD3E;110E 116A 11C1;CD3E;110E 116A 11C1; 
    // (촾; 촾; 촾; 촾; 촾; ) HANGUL SYLLABLE CWAP
    {
        std::array<uint32_t, 1> const source = {{ 0xCD3E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11C1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_127)
{
    // CD3F;CD3F;110E 116A 11C2;CD3F;110E 116A 11C2; 
    // (촿; 촿; 촿; 촿; 촿; ) HANGUL SYLLABLE CWAH
    {
        std::array<uint32_t, 1> const source = {{ 0xCD3F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116A, 0x11C2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_128)
{
    // CD40;CD40;110E 116B;CD40;110E 116B; 
    // (쵀; 쵀; 쵀; 쵀; 쵀; ) HANGUL SYLLABLE CWAE
    {
        std::array<uint32_t, 1> const source = {{ 0xCD40 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x110E, 0x116B }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_129)
{
    // CD41;CD41;110E 116B 11A8;CD41;110E 116B 11A8; 
    // (쵁; 쵁; 쵁; 쵁; 쵁; ) HANGUL SYLLABLE CWAEG
    {
        std::array<uint32_t, 1> const source = {{ 0xCD41 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11A8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_130)
{
    // CD42;CD42;110E 116B 11A9;CD42;110E 116B 11A9; 
    // (쵂; 쵂; 쵂; 쵂; 쵂; ) HANGUL SYLLABLE CWAEGG
    {
        std::array<uint32_t, 1> const source = {{ 0xCD42 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11A9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_131)
{
    // CD43;CD43;110E 116B 11AA;CD43;110E 116B 11AA; 
    // (쵃; 쵃; 쵃; 쵃; 쵃; ) HANGUL SYLLABLE CWAEGS
    {
        std::array<uint32_t, 1> const source = {{ 0xCD43 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11AA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_132)
{
    // CD44;CD44;110E 116B 11AB;CD44;110E 116B 11AB; 
    // (쵄; 쵄; 쵄; 쵄; 쵄; ) HANGUL SYLLABLE CWAEN
    {
        std::array<uint32_t, 1> const source = {{ 0xCD44 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11AB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_133)
{
    // CD45;CD45;110E 116B 11AC;CD45;110E 116B 11AC; 
    // (쵅; 쵅; 쵅; 쵅; 쵅; ) HANGUL SYLLABLE CWAENJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCD45 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11AC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_134)
{
    // CD46;CD46;110E 116B 11AD;CD46;110E 116B 11AD; 
    // (쵆; 쵆; 쵆; 쵆; 쵆; ) HANGUL SYLLABLE CWAENH
    {
        std::array<uint32_t, 1> const source = {{ 0xCD46 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11AD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_135)
{
    // CD47;CD47;110E 116B 11AE;CD47;110E 116B 11AE; 
    // (쵇; 쵇; 쵇; 쵇; 쵇; ) HANGUL SYLLABLE CWAED
    {
        std::array<uint32_t, 1> const source = {{ 0xCD47 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11AE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_136)
{
    // CD48;CD48;110E 116B 11AF;CD48;110E 116B 11AF; 
    // (쵈; 쵈; 쵈; 쵈; 쵈; ) HANGUL SYLLABLE CWAEL
    {
        std::array<uint32_t, 1> const source = {{ 0xCD48 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11AF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_137)
{
    // CD49;CD49;110E 116B 11B0;CD49;110E 116B 11B0; 
    // (쵉; 쵉; 쵉; 쵉; 쵉; ) HANGUL SYLLABLE CWAELG
    {
        std::array<uint32_t, 1> const source = {{ 0xCD49 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11B0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_138)
{
    // CD4A;CD4A;110E 116B 11B1;CD4A;110E 116B 11B1; 
    // (쵊; 쵊; 쵊; 쵊; 쵊; ) HANGUL SYLLABLE CWAELM
    {
        std::array<uint32_t, 1> const source = {{ 0xCD4A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11B1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_139)
{
    // CD4B;CD4B;110E 116B 11B2;CD4B;110E 116B 11B2; 
    // (쵋; 쵋; 쵋; 쵋; 쵋; ) HANGUL SYLLABLE CWAELB
    {
        std::array<uint32_t, 1> const source = {{ 0xCD4B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11B2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_140)
{
    // CD4C;CD4C;110E 116B 11B3;CD4C;110E 116B 11B3; 
    // (쵌; 쵌; 쵌; 쵌; 쵌; ) HANGUL SYLLABLE CWAELS
    {
        std::array<uint32_t, 1> const source = {{ 0xCD4C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11B3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_141)
{
    // CD4D;CD4D;110E 116B 11B4;CD4D;110E 116B 11B4; 
    // (쵍; 쵍; 쵍; 쵍; 쵍; ) HANGUL SYLLABLE CWAELT
    {
        std::array<uint32_t, 1> const source = {{ 0xCD4D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11B4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_142)
{
    // CD4E;CD4E;110E 116B 11B5;CD4E;110E 116B 11B5; 
    // (쵎; 쵎; 쵎; 쵎; 쵎; ) HANGUL SYLLABLE CWAELP
    {
        std::array<uint32_t, 1> const source = {{ 0xCD4E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11B5 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_143)
{
    // CD4F;CD4F;110E 116B 11B6;CD4F;110E 116B 11B6; 
    // (쵏; 쵏; 쵏; 쵏; 쵏; ) HANGUL SYLLABLE CWAELH
    {
        std::array<uint32_t, 1> const source = {{ 0xCD4F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11B6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_144)
{
    // CD50;CD50;110E 116B 11B7;CD50;110E 116B 11B7; 
    // (쵐; 쵐; 쵐; 쵐; 쵐; ) HANGUL SYLLABLE CWAEM
    {
        std::array<uint32_t, 1> const source = {{ 0xCD50 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11B7 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_145)
{
    // CD51;CD51;110E 116B 11B8;CD51;110E 116B 11B8; 
    // (쵑; 쵑; 쵑; 쵑; 쵑; ) HANGUL SYLLABLE CWAEB
    {
        std::array<uint32_t, 1> const source = {{ 0xCD51 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11B8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_146)
{
    // CD52;CD52;110E 116B 11B9;CD52;110E 116B 11B9; 
    // (쵒; 쵒; 쵒; 쵒; 쵒; ) HANGUL SYLLABLE CWAEBS
    {
        std::array<uint32_t, 1> const source = {{ 0xCD52 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_147)
{
    // CD53;CD53;110E 116B 11BA;CD53;110E 116B 11BA; 
    // (쵓; 쵓; 쵓; 쵓; 쵓; ) HANGUL SYLLABLE CWAES
    {
        std::array<uint32_t, 1> const source = {{ 0xCD53 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11BA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_148)
{
    // CD54;CD54;110E 116B 11BB;CD54;110E 116B 11BB; 
    // (쵔; 쵔; 쵔; 쵔; 쵔; ) HANGUL SYLLABLE CWAESS
    {
        std::array<uint32_t, 1> const source = {{ 0xCD54 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11BB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_149)
{
    // CD55;CD55;110E 116B 11BC;CD55;110E 116B 11BC; 
    // (쵕; 쵕; 쵕; 쵕; 쵕; ) HANGUL SYLLABLE CWAENG
    {
        std::array<uint32_t, 1> const source = {{ 0xCD55 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11BC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_150)
{
    // CD56;CD56;110E 116B 11BD;CD56;110E 116B 11BD; 
    // (쵖; 쵖; 쵖; 쵖; 쵖; ) HANGUL SYLLABLE CWAEJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCD56 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11BD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_151)
{
    // CD57;CD57;110E 116B 11BE;CD57;110E 116B 11BE; 
    // (쵗; 쵗; 쵗; 쵗; 쵗; ) HANGUL SYLLABLE CWAEC
    {
        std::array<uint32_t, 1> const source = {{ 0xCD57 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11BE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_152)
{
    // CD58;CD58;110E 116B 11BF;CD58;110E 116B 11BF; 
    // (쵘; 쵘; 쵘; 쵘; 쵘; ) HANGUL SYLLABLE CWAEK
    {
        std::array<uint32_t, 1> const source = {{ 0xCD58 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11BF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_153)
{
    // CD59;CD59;110E 116B 11C0;CD59;110E 116B 11C0; 
    // (쵙; 쵙; 쵙; 쵙; 쵙; ) HANGUL SYLLABLE CWAET
    {
        std::array<uint32_t, 1> const source = {{ 0xCD59 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11C0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_154)
{
    // CD5A;CD5A;110E 116B 11C1;CD5A;110E 116B 11C1; 
    // (쵚; 쵚; 쵚; 쵚; 쵚; ) HANGUL SYLLABLE CWAEP
    {
        std::array<uint32_t, 1> const source = {{ 0xCD5A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11C1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_155)
{
    // CD5B;CD5B;110E 116B 11C2;CD5B;110E 116B 11C2; 
    // (쵛; 쵛; 쵛; 쵛; 쵛; ) HANGUL SYLLABLE CWAEH
    {
        std::array<uint32_t, 1> const source = {{ 0xCD5B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116B, 0x11C2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_156)
{
    // CD5C;CD5C;110E 116C;CD5C;110E 116C; 
    // (최; 최; 최; 최; 최; ) HANGUL SYLLABLE COE
    {
        std::array<uint32_t, 1> const source = {{ 0xCD5C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x110E, 0x116C }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_157)
{
    // CD5D;CD5D;110E 116C 11A8;CD5D;110E 116C 11A8; 
    // (쵝; 쵝; 쵝; 쵝; 쵝; ) HANGUL SYLLABLE COEG
    {
        std::array<uint32_t, 1> const source = {{ 0xCD5D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11A8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_158)
{
    // CD5E;CD5E;110E 116C 11A9;CD5E;110E 116C 11A9; 
    // (쵞; 쵞; 쵞; 쵞; 쵞; ) HANGUL SYLLABLE COEGG
    {
        std::array<uint32_t, 1> const source = {{ 0xCD5E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11A9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_159)
{
    // CD5F;CD5F;110E 116C 11AA;CD5F;110E 116C 11AA; 
    // (쵟; 쵟; 쵟; 쵟; 쵟; ) HANGUL SYLLABLE COEGS
    {
        std::array<uint32_t, 1> const source = {{ 0xCD5F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11AA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_160)
{
    // CD60;CD60;110E 116C 11AB;CD60;110E 116C 11AB; 
    // (쵠; 쵠; 쵠; 쵠; 쵠; ) HANGUL SYLLABLE COEN
    {
        std::array<uint32_t, 1> const source = {{ 0xCD60 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11AB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_161)
{
    // CD61;CD61;110E 116C 11AC;CD61;110E 116C 11AC; 
    // (쵡; 쵡; 쵡; 쵡; 쵡; ) HANGUL SYLLABLE COENJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCD61 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11AC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_162)
{
    // CD62;CD62;110E 116C 11AD;CD62;110E 116C 11AD; 
    // (쵢; 쵢; 쵢; 쵢; 쵢; ) HANGUL SYLLABLE COENH
    {
        std::array<uint32_t, 1> const source = {{ 0xCD62 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11AD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_163)
{
    // CD63;CD63;110E 116C 11AE;CD63;110E 116C 11AE; 
    // (쵣; 쵣; 쵣; 쵣; 쵣; ) HANGUL SYLLABLE COED
    {
        std::array<uint32_t, 1> const source = {{ 0xCD63 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11AE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_164)
{
    // CD64;CD64;110E 116C 11AF;CD64;110E 116C 11AF; 
    // (쵤; 쵤; 쵤; 쵤; 쵤; ) HANGUL SYLLABLE COEL
    {
        std::array<uint32_t, 1> const source = {{ 0xCD64 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11AF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_165)
{
    // CD65;CD65;110E 116C 11B0;CD65;110E 116C 11B0; 
    // (쵥; 쵥; 쵥; 쵥; 쵥; ) HANGUL SYLLABLE COELG
    {
        std::array<uint32_t, 1> const source = {{ 0xCD65 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11B0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_166)
{
    // CD66;CD66;110E 116C 11B1;CD66;110E 116C 11B1; 
    // (쵦; 쵦; 쵦; 쵦; 쵦; ) HANGUL SYLLABLE COELM
    {
        std::array<uint32_t, 1> const source = {{ 0xCD66 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11B1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_167)
{
    // CD67;CD67;110E 116C 11B2;CD67;110E 116C 11B2; 
    // (쵧; 쵧; 쵧; 쵧; 쵧; ) HANGUL SYLLABLE COELB
    {
        std::array<uint32_t, 1> const source = {{ 0xCD67 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11B2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_168)
{
    // CD68;CD68;110E 116C 11B3;CD68;110E 116C 11B3; 
    // (쵨; 쵨; 쵨; 쵨; 쵨; ) HANGUL SYLLABLE COELS
    {
        std::array<uint32_t, 1> const source = {{ 0xCD68 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11B3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_169)
{
    // CD69;CD69;110E 116C 11B4;CD69;110E 116C 11B4; 
    // (쵩; 쵩; 쵩; 쵩; 쵩; ) HANGUL SYLLABLE COELT
    {
        std::array<uint32_t, 1> const source = {{ 0xCD69 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11B4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_170)
{
    // CD6A;CD6A;110E 116C 11B5;CD6A;110E 116C 11B5; 
    // (쵪; 쵪; 쵪; 쵪; 쵪; ) HANGUL SYLLABLE COELP
    {
        std::array<uint32_t, 1> const source = {{ 0xCD6A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11B5 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_171)
{
    // CD6B;CD6B;110E 116C 11B6;CD6B;110E 116C 11B6; 
    // (쵫; 쵫; 쵫; 쵫; 쵫; ) HANGUL SYLLABLE COELH
    {
        std::array<uint32_t, 1> const source = {{ 0xCD6B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11B6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_172)
{
    // CD6C;CD6C;110E 116C 11B7;CD6C;110E 116C 11B7; 
    // (쵬; 쵬; 쵬; 쵬; 쵬; ) HANGUL SYLLABLE COEM
    {
        std::array<uint32_t, 1> const source = {{ 0xCD6C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11B7 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_173)
{
    // CD6D;CD6D;110E 116C 11B8;CD6D;110E 116C 11B8; 
    // (쵭; 쵭; 쵭; 쵭; 쵭; ) HANGUL SYLLABLE COEB
    {
        std::array<uint32_t, 1> const source = {{ 0xCD6D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11B8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_174)
{
    // CD6E;CD6E;110E 116C 11B9;CD6E;110E 116C 11B9; 
    // (쵮; 쵮; 쵮; 쵮; 쵮; ) HANGUL SYLLABLE COEBS
    {
        std::array<uint32_t, 1> const source = {{ 0xCD6E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_175)
{
    // CD6F;CD6F;110E 116C 11BA;CD6F;110E 116C 11BA; 
    // (쵯; 쵯; 쵯; 쵯; 쵯; ) HANGUL SYLLABLE COES
    {
        std::array<uint32_t, 1> const source = {{ 0xCD6F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11BA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_176)
{
    // CD70;CD70;110E 116C 11BB;CD70;110E 116C 11BB; 
    // (쵰; 쵰; 쵰; 쵰; 쵰; ) HANGUL SYLLABLE COESS
    {
        std::array<uint32_t, 1> const source = {{ 0xCD70 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11BB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_177)
{
    // CD71;CD71;110E 116C 11BC;CD71;110E 116C 11BC; 
    // (쵱; 쵱; 쵱; 쵱; 쵱; ) HANGUL SYLLABLE COENG
    {
        std::array<uint32_t, 1> const source = {{ 0xCD71 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11BC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_178)
{
    // CD72;CD72;110E 116C 11BD;CD72;110E 116C 11BD; 
    // (쵲; 쵲; 쵲; 쵲; 쵲; ) HANGUL SYLLABLE COEJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCD72 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11BD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_179)
{
    // CD73;CD73;110E 116C 11BE;CD73;110E 116C 11BE; 
    // (쵳; 쵳; 쵳; 쵳; 쵳; ) HANGUL SYLLABLE COEC
    {
        std::array<uint32_t, 1> const source = {{ 0xCD73 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11BE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_180)
{
    // CD74;CD74;110E 116C 11BF;CD74;110E 116C 11BF; 
    // (쵴; 쵴; 쵴; 쵴; 쵴; ) HANGUL SYLLABLE COEK
    {
        std::array<uint32_t, 1> const source = {{ 0xCD74 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11BF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_181)
{
    // CD75;CD75;110E 116C 11C0;CD75;110E 116C 11C0; 
    // (쵵; 쵵; 쵵; 쵵; 쵵; ) HANGUL SYLLABLE COET
    {
        std::array<uint32_t, 1> const source = {{ 0xCD75 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11C0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_182)
{
    // CD76;CD76;110E 116C 11C1;CD76;110E 116C 11C1; 
    // (쵶; 쵶; 쵶; 쵶; 쵶; ) HANGUL SYLLABLE COEP
    {
        std::array<uint32_t, 1> const source = {{ 0xCD76 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11C1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_183)
{
    // CD77;CD77;110E 116C 11C2;CD77;110E 116C 11C2; 
    // (쵷; 쵷; 쵷; 쵷; 쵷; ) HANGUL SYLLABLE COEH
    {
        std::array<uint32_t, 1> const source = {{ 0xCD77 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116C, 0x11C2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_184)
{
    // CD78;CD78;110E 116D;CD78;110E 116D; 
    // (쵸; 쵸; 쵸; 쵸; 쵸; ) HANGUL SYLLABLE CYO
    {
        std::array<uint32_t, 1> const source = {{ 0xCD78 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x110E, 0x116D }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_185)
{
    // CD79;CD79;110E 116D 11A8;CD79;110E 116D 11A8; 
    // (쵹; 쵹; 쵹; 쵹; 쵹; ) HANGUL SYLLABLE CYOG
    {
        std::array<uint32_t, 1> const source = {{ 0xCD79 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116D, 0x11A8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_186)
{
    // CD7A;CD7A;110E 116D 11A9;CD7A;110E 116D 11A9; 
    // (쵺; 쵺; 쵺; 쵺; 쵺; ) HANGUL SYLLABLE CYOGG
    {
        std::array<uint32_t, 1> const source = {{ 0xCD7A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116D, 0x11A9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_187)
{
    // CD7B;CD7B;110E 116D 11AA;CD7B;110E 116D 11AA; 
    // (쵻; 쵻; 쵻; 쵻; 쵻; ) HANGUL SYLLABLE CYOGS
    {
        std::array<uint32_t, 1> const source = {{ 0xCD7B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116D, 0x11AA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_188)
{
    // CD7C;CD7C;110E 116D 11AB;CD7C;110E 116D 11AB; 
    // (쵼; 쵼; 쵼; 쵼; 쵼; ) HANGUL SYLLABLE CYON
    {
        std::array<uint32_t, 1> const source = {{ 0xCD7C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116D, 0x11AB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_189)
{
    // CD7D;CD7D;110E 116D 11AC;CD7D;110E 116D 11AC; 
    // (쵽; 쵽; 쵽; 쵽; 쵽; ) HANGUL SYLLABLE CYONJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCD7D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116D, 0x11AC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_190)
{
    // CD7E;CD7E;110E 116D 11AD;CD7E;110E 116D 11AD; 
    // (쵾; 쵾; 쵾; 쵾; 쵾; ) HANGUL SYLLABLE CYONH
    {
        std::array<uint32_t, 1> const source = {{ 0xCD7E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116D, 0x11AD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_191)
{
    // CD7F;CD7F;110E 116D 11AE;CD7F;110E 116D 11AE; 
    // (쵿; 쵿; 쵿; 쵿; 쵿; ) HANGUL SYLLABLE CYOD
    {
        std::array<uint32_t, 1> const source = {{ 0xCD7F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116D, 0x11AE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_192)
{
    // CD80;CD80;110E 116D 11AF;CD80;110E 116D 11AF; 
    // (춀; 춀; 춀; 춀; 춀; ) HANGUL SYLLABLE CYOL
    {
        std::array<uint32_t, 1> const source = {{ 0xCD80 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116D, 0x11AF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_193)
{
    // CD81;CD81;110E 116D 11B0;CD81;110E 116D 11B0; 
    // (춁; 춁; 춁; 춁; 춁; ) HANGUL SYLLABLE CYOLG
    {
        std::array<uint32_t, 1> const source = {{ 0xCD81 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116D, 0x11B0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_194)
{
    // CD82;CD82;110E 116D 11B1;CD82;110E 116D 11B1; 
    // (춂; 춂; 춂; 춂; 춂; ) HANGUL SYLLABLE CYOLM
    {
        std::array<uint32_t, 1> const source = {{ 0xCD82 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116D, 0x11B1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_195)
{
    // CD83;CD83;110E 116D 11B2;CD83;110E 116D 11B2; 
    // (춃; 춃; 춃; 춃; 춃; ) HANGUL SYLLABLE CYOLB
    {
        std::array<uint32_t, 1> const source = {{ 0xCD83 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116D, 0x11B2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_196)
{
    // CD84;CD84;110E 116D 11B3;CD84;110E 116D 11B3; 
    // (춄; 춄; 춄; 춄; 춄; ) HANGUL SYLLABLE CYOLS
    {
        std::array<uint32_t, 1> const source = {{ 0xCD84 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116D, 0x11B3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_197)
{
    // CD85;CD85;110E 116D 11B4;CD85;110E 116D 11B4; 
    // (춅; 춅; 춅; 춅; 춅; ) HANGUL SYLLABLE CYOLT
    {
        std::array<uint32_t, 1> const source = {{ 0xCD85 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116D, 0x11B4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_198)
{
    // CD86;CD86;110E 116D 11B5;CD86;110E 116D 11B5; 
    // (춆; 춆; 춆; 춆; 춆; ) HANGUL SYLLABLE CYOLP
    {
        std::array<uint32_t, 1> const source = {{ 0xCD86 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116D, 0x11B5 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_054_199)
{
    // CD87;CD87;110E 116D 11B6;CD87;110E 116D 11B6; 
    // (춇; 춇; 춇; 춇; 춇; ) HANGUL SYLLABLE CYOLH
    {
        std::array<uint32_t, 1> const source = {{ 0xCD87 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x110E, 0x116D, 0x11B6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


