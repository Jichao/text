
// Warning! This file is autogenerated.
#include <boost/text/collation_table.hpp>
#include <boost/text/collate.hpp>
#include <boost/text/save_load_table.hpp>
#include <boost/text/data/all.hpp>

#include <boost/filesystem.hpp>

#include <gtest/gtest.h>

using namespace boost::text;

auto const error = [](string const & s) { std::cout << s; };
auto const warning = [](string const & s) {};

collation_table make_save_load_table()
{
    if (!exists(boost::filesystem::path("my_standard.table"))) {
        string const table_str(data::my::standard_collation_tailoring());
        collation_table table = tailored_collation_table(
            table_str,
            "my::standard_collation_tailoring()", error, warning);
        save_table(table, "my_standard.table.0");
        boost::filesystem::rename("my_standard.table.0", "my_standard.table");
    }
    return load_table("my_standard.table");
}
collation_table const & table()
{
    static collation_table retval = make_save_load_table();
    return retval;
}
TEST(tailoring, my_standard_000_001)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x108c),
        std::vector<uint32_t>(1, 0x1037),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1037),
        std::vector<uint32_t>(1, 0x1038),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1038),
        std::vector<uint32_t>{0x1037, 0x1038},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x102c),
        std::vector<uint32_t>(1, 0x102b),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x102c),
        std::vector<uint32_t>(1, 0x102b),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1032),
        std::vector<uint32_t>{0x1031, 0x102c},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c},
        std::vector<uint32_t>{0x1031, 0x102b},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c},
        std::vector<uint32_t>{0x1031, 0x102b},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b},
        std::vector<uint32_t>{0x1031, 0x102c, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1034),
        std::vector<uint32_t>(1, 0x1036),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1036),
        std::vector<uint32_t>{0x102d, 0x102f},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f},
        std::vector<uint32_t>{0x1000, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1000, 0x1039},
        std::vector<uint32_t>{0x1000, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1000, 0x1039},
        std::vector<uint32_t>{0x1000, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1000, 0x103a},
        std::vector<uint32_t>{0x102c, 0x1000, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1000, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1000, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1000, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1000, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1000, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1000, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1000, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1000, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1000, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1000, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1000, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1000, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1000, 0x103a},
        std::vector<uint32_t>{0x102d, 0x1000, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1000, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1000, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1000, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1000, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1000, 0x103a},
        std::vector<uint32_t>{0x102f, 0x1000, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1000, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1000, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1000, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1000, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1000, 0x103a},
        std::vector<uint32_t>{0x1031, 0x1000, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1000, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1000, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1000, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1000, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1000, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1000, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1000, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1000, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1000, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1000, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1000, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1000, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1000, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1000, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1000, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1000, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1000, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1000, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1000, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1000, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1000, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1000, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1000, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1000, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1000, 0x103a},
        std::vector<uint32_t>{0x1001, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1001, 0x1039},
        std::vector<uint32_t>{0x1001, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1001, 0x1039},
        std::vector<uint32_t>{0x1001, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1001, 0x103a},
        std::vector<uint32_t>{0x102c, 0x1001, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1001, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1001, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1001, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1001, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1001, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1001, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1001, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1001, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1001, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1001, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1001, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1001, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1001, 0x103a},
        std::vector<uint32_t>{0x102d, 0x1001, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1001, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1001, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1001, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1001, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1001, 0x103a},
        std::vector<uint32_t>{0x102f, 0x1001, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1001, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1001, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1001, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1001, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1001, 0x103a},
        std::vector<uint32_t>{0x1031, 0x1001, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1001, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1001, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1001, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1001, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1001, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1001, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1001, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1001, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1001, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1001, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1001, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1001, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1001, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1001, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1001, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1001, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1001, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1001, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1001, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1001, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1001, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1001, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1001, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1001, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1001, 0x103a},
        std::vector<uint32_t>{0x1002, 0x1039},
        table(), collation_strength::primary),
        -1);
}

TEST(tailoring, my_standard_000_002)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1002, 0x1039},
        std::vector<uint32_t>{0x1002, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1002, 0x1039},
        std::vector<uint32_t>{0x1002, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1002, 0x103a},
        std::vector<uint32_t>{0x102c, 0x1002, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1002, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1002, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1002, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1002, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1002, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1002, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1002, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1002, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1002, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1002, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1002, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1002, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1002, 0x103a},
        std::vector<uint32_t>{0x102d, 0x1002, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1002, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1002, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1002, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1002, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1002, 0x103a},
        std::vector<uint32_t>{0x102f, 0x1002, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1002, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1002, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1002, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1002, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1002, 0x103a},
        std::vector<uint32_t>{0x1031, 0x1002, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1002, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1002, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1002, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1002, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1002, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1002, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1002, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1002, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1002, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1002, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1002, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1002, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1002, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1002, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1002, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1002, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1002, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1002, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1002, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1002, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1002, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1002, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1002, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1002, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1002, 0x103a},
        std::vector<uint32_t>{0x1003, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1003, 0x1039},
        std::vector<uint32_t>{0x1003, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1003, 0x1039},
        std::vector<uint32_t>{0x1003, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1003, 0x103a},
        std::vector<uint32_t>{0x102c, 0x1003, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1003, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1003, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1003, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1003, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1003, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1003, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1003, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1003, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1003, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1003, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1003, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1003, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1003, 0x103a},
        std::vector<uint32_t>{0x102d, 0x1003, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1003, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1003, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1003, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1003, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1003, 0x103a},
        std::vector<uint32_t>{0x102f, 0x1003, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1003, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1003, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1003, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1003, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1003, 0x103a},
        std::vector<uint32_t>{0x1031, 0x1003, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1003, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1003, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1003, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1003, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1003, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1003, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1003, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1003, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1003, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1003, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1003, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1003, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1003, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1003, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1003, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1003, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1003, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1003, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1003, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1003, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1003, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1003, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1003, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1003, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1003, 0x103a},
        std::vector<uint32_t>{0x1004, 0x103a, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1004, 0x103a, 0x1039},
        std::vector<uint32_t>{0x1004, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1004, 0x103a, 0x1039},
        std::vector<uint32_t>{0x1004, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1004, 0x103a},
        std::vector<uint32_t>{0x102c, 0x1004, 0x103a, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1004, 0x103a, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1004, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1004, 0x103a, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1004, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1004, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1004, 0x103a, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1004, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1004, 0x103a, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1004, 0x103a, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1004, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1004, 0x103a, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1004, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1004, 0x103a},
        std::vector<uint32_t>{0x102d, 0x1004, 0x103a, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1004, 0x103a, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1004, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1004, 0x103a, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1004, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1004, 0x103a},
        std::vector<uint32_t>{0x102f, 0x1004, 0x103a, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1004, 0x103a, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1004, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1004, 0x103a, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1004, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1004, 0x103a},
        std::vector<uint32_t>{0x1031, 0x1004, 0x103a, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1004, 0x103a, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1004, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1004, 0x103a, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1004, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1004, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1004, 0x103a, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1004, 0x103a, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1004, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1004, 0x103a, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1004, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1004, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1004, 0x103a, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1004, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1004, 0x103a, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1004, 0x103a, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1004, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1004, 0x103a, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1004, 0x103a},
        table(), collation_strength::primary),
        0);
}

TEST(tailoring, my_standard_000_003)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1004, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1004, 0x103a, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1004, 0x103a, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1004, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1004, 0x103a, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1004, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1004, 0x103a},
        std::vector<uint32_t>{0x1005, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1005, 0x1039},
        std::vector<uint32_t>{0x1005, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1005, 0x1039},
        std::vector<uint32_t>{0x1005, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1005, 0x103a},
        std::vector<uint32_t>{0x102c, 0x1005, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1005, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1005, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1005, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1005, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1005, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1005, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1005, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1005, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1005, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1005, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1005, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1005, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1005, 0x103a},
        std::vector<uint32_t>{0x102d, 0x1005, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1005, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1005, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1005, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1005, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1005, 0x103a},
        std::vector<uint32_t>{0x102f, 0x1005, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1005, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1005, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1005, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1005, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1005, 0x103a},
        std::vector<uint32_t>{0x1031, 0x1005, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1005, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1005, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1005, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1005, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1005, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1005, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1005, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1005, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1005, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1005, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1005, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1005, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1005, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1005, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1005, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1005, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1005, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1005, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1005, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1005, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1005, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1005, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1005, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1005, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1005, 0x103a},
        std::vector<uint32_t>{0x1006, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1006, 0x1039},
        std::vector<uint32_t>{0x1006, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1006, 0x1039},
        std::vector<uint32_t>{0x1006, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1006, 0x103a},
        std::vector<uint32_t>{0x102c, 0x1006, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1006, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1006, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1006, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1006, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1006, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1006, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1006, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1006, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1006, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1006, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1006, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1006, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1006, 0x103a},
        std::vector<uint32_t>{0x102d, 0x1006, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1006, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1006, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1006, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1006, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1006, 0x103a},
        std::vector<uint32_t>{0x102f, 0x1006, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1006, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1006, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1006, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1006, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1006, 0x103a},
        std::vector<uint32_t>{0x1031, 0x1006, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1006, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1006, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1006, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1006, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1006, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1006, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1006, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1006, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1006, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1006, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1006, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1006, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1006, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1006, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1006, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1006, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1006, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1006, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1006, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1006, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1006, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1006, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1006, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1006, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1006, 0x103a},
        std::vector<uint32_t>{0x1007, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1007, 0x1039},
        std::vector<uint32_t>{0x1007, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1007, 0x1039},
        std::vector<uint32_t>{0x1007, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1007, 0x103a},
        std::vector<uint32_t>{0x102c, 0x1007, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1007, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1007, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1007, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1007, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1007, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1007, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1007, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1007, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1007, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1007, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1007, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1007, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1007, 0x103a},
        std::vector<uint32_t>{0x102d, 0x1007, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1007, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1007, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1007, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1007, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1007, 0x103a},
        std::vector<uint32_t>{0x102f, 0x1007, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1007, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1007, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1007, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1007, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1007, 0x103a},
        std::vector<uint32_t>{0x1031, 0x1007, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1007, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1007, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1007, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1007, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1007, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1007, 0x1039},
        table(), collation_strength::primary),
        -1);
}

TEST(tailoring, my_standard_000_004)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1007, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1007, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1007, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1007, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1007, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1007, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1007, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1007, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1007, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1007, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1007, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1007, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1007, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1007, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1007, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1007, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1007, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1007, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1007, 0x103a},
        std::vector<uint32_t>{0x1008, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1008, 0x103a},
        std::vector<uint32_t>{0x102c, 0x1008, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1008, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1008, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1008, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1008, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1008, 0x103a},
        std::vector<uint32_t>{0x102d, 0x1008, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1008, 0x103a},
        std::vector<uint32_t>{0x102f, 0x1008, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1008, 0x103a},
        std::vector<uint32_t>{0x1031, 0x1008, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1008, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1008, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1008, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1008, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1008, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1008, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1008, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1008, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1008, 0x103a},
        std::vector<uint32_t>{0x1009, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1009, 0x1039},
        std::vector<uint32_t>{0x1009, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1009, 0x1039},
        std::vector<uint32_t>{0x1009, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1009, 0x103a},
        std::vector<uint32_t>{0x102c, 0x1009, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1009, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1009, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1009, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1009, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1009, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1009, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1009, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1009, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1009, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1009, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1009, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1009, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1009, 0x103a},
        std::vector<uint32_t>{0x102d, 0x1009, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1009, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1009, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1009, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1009, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1009, 0x103a},
        std::vector<uint32_t>{0x102f, 0x1009, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1009, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1009, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1009, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1009, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1009, 0x103a},
        std::vector<uint32_t>{0x1031, 0x1009, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1009, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1009, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1009, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1009, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1009, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1009, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1009, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1009, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1009, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1009, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1009, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1009, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1009, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1009, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1009, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1009, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1009, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1009, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1009, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1009, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1009, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1009, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1009, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1009, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1009, 0x103a},
        std::vector<uint32_t>{0x100a, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x100a, 0x1039},
        std::vector<uint32_t>{0x100a, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x100a, 0x1039},
        std::vector<uint32_t>{0x100a, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x100a, 0x103a},
        std::vector<uint32_t>{0x102c, 0x100a, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x100a, 0x1039},
        std::vector<uint32_t>{0x102c, 0x100a, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x100a, 0x1039},
        std::vector<uint32_t>{0x102c, 0x100a, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x100a, 0x103a},
        std::vector<uint32_t>{0x102b, 0x100a, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x100a, 0x103a},
        std::vector<uint32_t>{0x102b, 0x100a, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x100a, 0x1039},
        std::vector<uint32_t>{0x102b, 0x100a, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x100a, 0x1039},
        std::vector<uint32_t>{0x102b, 0x100a, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x100a, 0x103a},
        std::vector<uint32_t>{0x102d, 0x100a, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x100a, 0x1039},
        std::vector<uint32_t>{0x102d, 0x100a, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x100a, 0x1039},
        std::vector<uint32_t>{0x102d, 0x100a, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x100a, 0x103a},
        std::vector<uint32_t>{0x102f, 0x100a, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x100a, 0x1039},
        std::vector<uint32_t>{0x102f, 0x100a, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x100a, 0x1039},
        std::vector<uint32_t>{0x102f, 0x100a, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x100a, 0x103a},
        std::vector<uint32_t>{0x1031, 0x100a, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x100a, 0x1039},
        std::vector<uint32_t>{0x1031, 0x100a, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x100a, 0x1039},
        std::vector<uint32_t>{0x1031, 0x100a, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x100a, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x100a, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x100a, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x100a, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x100a, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x100a, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x100a, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x100a, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x100a, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x100a, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x100a, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x100a, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x100a, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x100a, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x100a, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x100a, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x100a, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x100a, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x100a, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x100a, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x100a, 0x103a},
        std::vector<uint32_t>{0x100b, 0x1039},
        table(), collation_strength::primary),
        -1);
}

TEST(tailoring, my_standard_000_005)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x100b, 0x1039},
        std::vector<uint32_t>{0x100b, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x100b, 0x1039},
        std::vector<uint32_t>{0x100b, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x100b, 0x103a},
        std::vector<uint32_t>{0x102c, 0x100b, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x100b, 0x1039},
        std::vector<uint32_t>{0x102c, 0x100b, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x100b, 0x1039},
        std::vector<uint32_t>{0x102c, 0x100b, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x100b, 0x103a},
        std::vector<uint32_t>{0x102b, 0x100b, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x100b, 0x103a},
        std::vector<uint32_t>{0x102b, 0x100b, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x100b, 0x1039},
        std::vector<uint32_t>{0x102b, 0x100b, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x100b, 0x1039},
        std::vector<uint32_t>{0x102b, 0x100b, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x100b, 0x103a},
        std::vector<uint32_t>{0x102d, 0x100b, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x100b, 0x1039},
        std::vector<uint32_t>{0x102d, 0x100b, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x100b, 0x1039},
        std::vector<uint32_t>{0x102d, 0x100b, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x100b, 0x103a},
        std::vector<uint32_t>{0x102f, 0x100b, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x100b, 0x1039},
        std::vector<uint32_t>{0x102f, 0x100b, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x100b, 0x1039},
        std::vector<uint32_t>{0x102f, 0x100b, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x100b, 0x103a},
        std::vector<uint32_t>{0x1031, 0x100b, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x100b, 0x1039},
        std::vector<uint32_t>{0x1031, 0x100b, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x100b, 0x1039},
        std::vector<uint32_t>{0x1031, 0x100b, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x100b, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x100b, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x100b, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x100b, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x100b, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x100b, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x100b, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x100b, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x100b, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x100b, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x100b, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x100b, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x100b, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x100b, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x100b, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x100b, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x100b, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x100b, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x100b, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x100b, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x100b, 0x103a},
        std::vector<uint32_t>{0x100c, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x100c, 0x1039},
        std::vector<uint32_t>{0x100c, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x100c, 0x1039},
        std::vector<uint32_t>{0x100c, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x100c, 0x103a},
        std::vector<uint32_t>{0x102c, 0x100c, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x100c, 0x1039},
        std::vector<uint32_t>{0x102c, 0x100c, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x100c, 0x1039},
        std::vector<uint32_t>{0x102c, 0x100c, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x100c, 0x103a},
        std::vector<uint32_t>{0x102b, 0x100c, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x100c, 0x103a},
        std::vector<uint32_t>{0x102b, 0x100c, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x100c, 0x1039},
        std::vector<uint32_t>{0x102b, 0x100c, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x100c, 0x1039},
        std::vector<uint32_t>{0x102b, 0x100c, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x100c, 0x103a},
        std::vector<uint32_t>{0x102d, 0x100c, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x100c, 0x1039},
        std::vector<uint32_t>{0x102d, 0x100c, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x100c, 0x1039},
        std::vector<uint32_t>{0x102d, 0x100c, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x100c, 0x103a},
        std::vector<uint32_t>{0x102f, 0x100c, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x100c, 0x1039},
        std::vector<uint32_t>{0x102f, 0x100c, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x100c, 0x1039},
        std::vector<uint32_t>{0x102f, 0x100c, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x100c, 0x103a},
        std::vector<uint32_t>{0x1031, 0x100c, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x100c, 0x1039},
        std::vector<uint32_t>{0x1031, 0x100c, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x100c, 0x1039},
        std::vector<uint32_t>{0x1031, 0x100c, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x100c, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x100c, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x100c, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x100c, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x100c, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x100c, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x100c, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x100c, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x100c, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x100c, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x100c, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x100c, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x100c, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x100c, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x100c, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x100c, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x100c, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x100c, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x100c, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x100c, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x100c, 0x103a},
        std::vector<uint32_t>{0x100d, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x100d, 0x1039},
        std::vector<uint32_t>{0x100d, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x100d, 0x1039},
        std::vector<uint32_t>{0x100d, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x100d, 0x103a},
        std::vector<uint32_t>{0x102c, 0x100d, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x100d, 0x1039},
        std::vector<uint32_t>{0x102c, 0x100d, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x100d, 0x1039},
        std::vector<uint32_t>{0x102c, 0x100d, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x100d, 0x103a},
        std::vector<uint32_t>{0x102b, 0x100d, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x100d, 0x103a},
        std::vector<uint32_t>{0x102b, 0x100d, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x100d, 0x1039},
        std::vector<uint32_t>{0x102b, 0x100d, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x100d, 0x1039},
        std::vector<uint32_t>{0x102b, 0x100d, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x100d, 0x103a},
        std::vector<uint32_t>{0x102d, 0x100d, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x100d, 0x1039},
        std::vector<uint32_t>{0x102d, 0x100d, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x100d, 0x1039},
        std::vector<uint32_t>{0x102d, 0x100d, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x100d, 0x103a},
        std::vector<uint32_t>{0x102f, 0x100d, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x100d, 0x1039},
        std::vector<uint32_t>{0x102f, 0x100d, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x100d, 0x1039},
        std::vector<uint32_t>{0x102f, 0x100d, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x100d, 0x103a},
        std::vector<uint32_t>{0x1031, 0x100d, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x100d, 0x1039},
        std::vector<uint32_t>{0x1031, 0x100d, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x100d, 0x1039},
        std::vector<uint32_t>{0x1031, 0x100d, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x100d, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x100d, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x100d, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x100d, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x100d, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x100d, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x100d, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x100d, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x100d, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x100d, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x100d, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x100d, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x100d, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x100d, 0x103a},
        table(), collation_strength::primary),
        0);
}

TEST(tailoring, my_standard_000_006)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x100d, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x100d, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x100d, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x100d, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x100d, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x100d, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x100d, 0x103a},
        std::vector<uint32_t>{0x100e, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x100e, 0x1039},
        std::vector<uint32_t>{0x100e, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x100e, 0x1039},
        std::vector<uint32_t>{0x100e, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x100e, 0x103a},
        std::vector<uint32_t>{0x102c, 0x100e, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x100e, 0x1039},
        std::vector<uint32_t>{0x102c, 0x100e, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x100e, 0x1039},
        std::vector<uint32_t>{0x102c, 0x100e, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x100e, 0x103a},
        std::vector<uint32_t>{0x102b, 0x100e, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x100e, 0x103a},
        std::vector<uint32_t>{0x102b, 0x100e, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x100e, 0x1039},
        std::vector<uint32_t>{0x102b, 0x100e, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x100e, 0x1039},
        std::vector<uint32_t>{0x102b, 0x100e, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x100e, 0x103a},
        std::vector<uint32_t>{0x102d, 0x100e, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x100e, 0x1039},
        std::vector<uint32_t>{0x102d, 0x100e, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x100e, 0x1039},
        std::vector<uint32_t>{0x102d, 0x100e, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x100e, 0x103a},
        std::vector<uint32_t>{0x102f, 0x100e, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x100e, 0x1039},
        std::vector<uint32_t>{0x102f, 0x100e, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x100e, 0x1039},
        std::vector<uint32_t>{0x102f, 0x100e, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x100e, 0x103a},
        std::vector<uint32_t>{0x1031, 0x100e, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x100e, 0x1039},
        std::vector<uint32_t>{0x1031, 0x100e, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x100e, 0x1039},
        std::vector<uint32_t>{0x1031, 0x100e, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x100e, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x100e, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x100e, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x100e, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x100e, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x100e, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x100e, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x100e, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x100e, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x100e, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x100e, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x100e, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x100e, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x100e, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x100e, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x100e, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x100e, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x100e, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x100e, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x100e, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x100e, 0x103a},
        std::vector<uint32_t>{0x100f, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x100f, 0x1039},
        std::vector<uint32_t>{0x100f, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x100f, 0x1039},
        std::vector<uint32_t>{0x100f, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x100f, 0x103a},
        std::vector<uint32_t>{0x102c, 0x100f, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x100f, 0x1039},
        std::vector<uint32_t>{0x102c, 0x100f, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x100f, 0x1039},
        std::vector<uint32_t>{0x102c, 0x100f, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x100f, 0x103a},
        std::vector<uint32_t>{0x102b, 0x100f, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x100f, 0x103a},
        std::vector<uint32_t>{0x102b, 0x100f, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x100f, 0x1039},
        std::vector<uint32_t>{0x102b, 0x100f, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x100f, 0x1039},
        std::vector<uint32_t>{0x102b, 0x100f, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x100f, 0x103a},
        std::vector<uint32_t>{0x102d, 0x100f, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x100f, 0x1039},
        std::vector<uint32_t>{0x102d, 0x100f, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x100f, 0x1039},
        std::vector<uint32_t>{0x102d, 0x100f, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x100f, 0x103a},
        std::vector<uint32_t>{0x102f, 0x100f, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x100f, 0x1039},
        std::vector<uint32_t>{0x102f, 0x100f, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x100f, 0x1039},
        std::vector<uint32_t>{0x102f, 0x100f, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x100f, 0x103a},
        std::vector<uint32_t>{0x1031, 0x100f, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x100f, 0x1039},
        std::vector<uint32_t>{0x1031, 0x100f, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x100f, 0x1039},
        std::vector<uint32_t>{0x1031, 0x100f, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x100f, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x100f, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x100f, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x100f, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x100f, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x100f, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x100f, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x100f, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x100f, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x100f, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x100f, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x100f, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x100f, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x100f, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x100f, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x100f, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x100f, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x100f, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x100f, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x100f, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x100f, 0x103a},
        std::vector<uint32_t>{0x1010, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1010, 0x1039},
        std::vector<uint32_t>{0x1010, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1010, 0x1039},
        std::vector<uint32_t>{0x1010, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1010, 0x103a},
        std::vector<uint32_t>{0x102c, 0x1010, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1010, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1010, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1010, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1010, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1010, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1010, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1010, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1010, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1010, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1010, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1010, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1010, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1010, 0x103a},
        std::vector<uint32_t>{0x102d, 0x1010, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1010, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1010, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1010, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1010, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1010, 0x103a},
        std::vector<uint32_t>{0x102f, 0x1010, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1010, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1010, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1010, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1010, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1010, 0x103a},
        std::vector<uint32_t>{0x1031, 0x1010, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1010, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1010, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1010, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1010, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1010, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1010, 0x1039},
        table(), collation_strength::primary),
        -1);
}

TEST(tailoring, my_standard_000_007)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1010, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1010, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1010, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1010, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1010, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1010, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1010, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1010, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1010, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1010, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1010, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1010, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1010, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1010, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1010, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1010, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1010, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1010, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1010, 0x103a},
        std::vector<uint32_t>{0x1011, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1011, 0x1039},
        std::vector<uint32_t>{0x1011, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1011, 0x1039},
        std::vector<uint32_t>{0x1011, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1011, 0x103a},
        std::vector<uint32_t>{0x102c, 0x1011, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1011, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1011, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1011, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1011, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1011, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1011, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1011, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1011, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1011, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1011, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1011, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1011, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1011, 0x103a},
        std::vector<uint32_t>{0x102d, 0x1011, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1011, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1011, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1011, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1011, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1011, 0x103a},
        std::vector<uint32_t>{0x102f, 0x1011, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1011, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1011, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1011, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1011, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1011, 0x103a},
        std::vector<uint32_t>{0x1031, 0x1011, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1011, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1011, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1011, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1011, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1011, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1011, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1011, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1011, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1011, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1011, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1011, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1011, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1011, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1011, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1011, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1011, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1011, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1011, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1011, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1011, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1011, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1011, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1011, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1011, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1011, 0x103a},
        std::vector<uint32_t>{0x1012, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1012, 0x1039},
        std::vector<uint32_t>{0x1012, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1012, 0x1039},
        std::vector<uint32_t>{0x1012, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1012, 0x103a},
        std::vector<uint32_t>{0x102c, 0x1012, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1012, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1012, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1012, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1012, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1012, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1012, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1012, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1012, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1012, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1012, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1012, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1012, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1012, 0x103a},
        std::vector<uint32_t>{0x102d, 0x1012, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1012, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1012, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1012, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1012, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1012, 0x103a},
        std::vector<uint32_t>{0x102f, 0x1012, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1012, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1012, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1012, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1012, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1012, 0x103a},
        std::vector<uint32_t>{0x1031, 0x1012, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1012, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1012, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1012, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1012, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1012, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1012, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1012, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1012, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1012, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1012, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1012, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1012, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1012, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1012, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1012, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1012, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1012, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1012, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1012, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1012, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1012, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1012, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1012, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1012, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1012, 0x103a},
        std::vector<uint32_t>{0x1013, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1013, 0x1039},
        std::vector<uint32_t>{0x1013, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1013, 0x1039},
        std::vector<uint32_t>{0x1013, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1013, 0x103a},
        std::vector<uint32_t>{0x102c, 0x1013, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1013, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1013, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1013, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1013, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1013, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1013, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1013, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1013, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1013, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1013, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1013, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1013, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1013, 0x103a},
        std::vector<uint32_t>{0x102d, 0x1013, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1013, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1013, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1013, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1013, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1013, 0x103a},
        std::vector<uint32_t>{0x102f, 0x1013, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1013, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1013, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1013, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1013, 0x103a},
        table(), collation_strength::primary),
        0);
}

TEST(tailoring, my_standard_000_008)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1013, 0x103a},
        std::vector<uint32_t>{0x1031, 0x1013, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1013, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1013, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1013, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1013, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1013, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1013, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1013, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1013, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1013, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1013, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1013, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1013, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1013, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1013, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1013, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1013, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1013, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1013, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1013, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1013, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1013, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1013, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1013, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1013, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1013, 0x103a},
        std::vector<uint32_t>{0x1014, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1014, 0x1039},
        std::vector<uint32_t>{0x1014, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1014, 0x1039},
        std::vector<uint32_t>{0x1014, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1014, 0x103a},
        std::vector<uint32_t>{0x102c, 0x1014, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1014, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1014, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1014, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1014, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1014, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1014, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1014, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1014, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1014, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1014, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1014, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1014, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1014, 0x103a},
        std::vector<uint32_t>{0x102d, 0x1014, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1014, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1014, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1014, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1014, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1014, 0x103a},
        std::vector<uint32_t>{0x102f, 0x1014, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1014, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1014, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1014, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1014, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1014, 0x103a},
        std::vector<uint32_t>{0x1031, 0x1014, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1014, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1014, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1014, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1014, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1014, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1014, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1014, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1014, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1014, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1014, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1014, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1014, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1014, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1014, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1014, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1014, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1014, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1014, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1014, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1014, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1014, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1014, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1014, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1014, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1014, 0x103a},
        std::vector<uint32_t>{0x1015, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1015, 0x1039},
        std::vector<uint32_t>{0x1015, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1015, 0x1039},
        std::vector<uint32_t>{0x1015, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1015, 0x103a},
        std::vector<uint32_t>{0x102c, 0x1015, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1015, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1015, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1015, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1015, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1015, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1015, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1015, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1015, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1015, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1015, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1015, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1015, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1015, 0x103a},
        std::vector<uint32_t>{0x102d, 0x1015, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1015, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1015, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1015, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1015, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1015, 0x103a},
        std::vector<uint32_t>{0x102f, 0x1015, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1015, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1015, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1015, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1015, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1015, 0x103a},
        std::vector<uint32_t>{0x1031, 0x1015, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1015, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1015, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1015, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1015, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1015, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1015, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1015, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1015, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1015, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1015, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1015, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1015, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1015, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1015, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1015, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1015, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1015, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1015, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1015, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1015, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1015, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1015, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1015, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1015, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1015, 0x103a},
        std::vector<uint32_t>{0x1016, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1016, 0x1039},
        std::vector<uint32_t>{0x1016, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1016, 0x1039},
        std::vector<uint32_t>{0x1016, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1016, 0x103a},
        std::vector<uint32_t>{0x102c, 0x1016, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1016, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1016, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1016, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1016, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1016, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1016, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1016, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1016, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1016, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1016, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1016, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1016, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1016, 0x103a},
        std::vector<uint32_t>{0x102d, 0x1016, 0x1039},
        table(), collation_strength::primary),
        -1);
}

TEST(tailoring, my_standard_000_009)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1016, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1016, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1016, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1016, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1016, 0x103a},
        std::vector<uint32_t>{0x102f, 0x1016, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1016, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1016, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1016, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1016, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1016, 0x103a},
        std::vector<uint32_t>{0x1031, 0x1016, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1016, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1016, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1016, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1016, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1016, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1016, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1016, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1016, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1016, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1016, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1016, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1016, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1016, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1016, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1016, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1016, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1016, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1016, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1016, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1016, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1016, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1016, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1016, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1016, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1016, 0x103a},
        std::vector<uint32_t>{0x1017, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1017, 0x1039},
        std::vector<uint32_t>{0x1017, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1017, 0x1039},
        std::vector<uint32_t>{0x1017, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1017, 0x103a},
        std::vector<uint32_t>{0x102c, 0x1017, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1017, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1017, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1017, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1017, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1017, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1017, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1017, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1017, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1017, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1017, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1017, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1017, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1017, 0x103a},
        std::vector<uint32_t>{0x102d, 0x1017, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1017, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1017, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1017, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1017, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1017, 0x103a},
        std::vector<uint32_t>{0x102f, 0x1017, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1017, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1017, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1017, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1017, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1017, 0x103a},
        std::vector<uint32_t>{0x1031, 0x1017, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1017, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1017, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1017, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1017, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1017, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1017, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1017, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1017, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1017, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1017, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1017, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1017, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1017, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1017, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1017, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1017, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1017, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1017, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1017, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1017, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1017, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1017, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1017, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1017, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1017, 0x103a},
        std::vector<uint32_t>{0x1018, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1018, 0x1039},
        std::vector<uint32_t>{0x1018, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1018, 0x1039},
        std::vector<uint32_t>{0x1018, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1018, 0x103a},
        std::vector<uint32_t>{0x102c, 0x1018, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1018, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1018, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1018, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1018, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1018, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1018, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1018, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1018, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1018, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1018, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1018, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1018, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1018, 0x103a},
        std::vector<uint32_t>{0x102d, 0x1018, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1018, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1018, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1018, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1018, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1018, 0x103a},
        std::vector<uint32_t>{0x102f, 0x1018, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1018, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1018, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1018, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1018, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1018, 0x103a},
        std::vector<uint32_t>{0x1031, 0x1018, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1018, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1018, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1018, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1018, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1018, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1018, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1018, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1018, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1018, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1018, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1018, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1018, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1018, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1018, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1018, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1018, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1018, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1018, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1018, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1018, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1018, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1018, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1018, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1018, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1018, 0x103a},
        std::vector<uint32_t>{0x1019, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1019, 0x1039},
        std::vector<uint32_t>{0x1019, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1019, 0x1039},
        std::vector<uint32_t>{0x1019, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1019, 0x103a},
        std::vector<uint32_t>{0x102c, 0x1019, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1019, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1019, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1019, 0x1039},
        std::vector<uint32_t>{0x102c, 0x1019, 0x103a},
        table(), collation_strength::primary),
        0);
}

TEST(tailoring, my_standard_000_010)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1019, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1019, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1019, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1019, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1019, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1019, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1019, 0x1039},
        std::vector<uint32_t>{0x102b, 0x1019, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1019, 0x103a},
        std::vector<uint32_t>{0x102d, 0x1019, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1019, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1019, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1019, 0x1039},
        std::vector<uint32_t>{0x102d, 0x1019, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1019, 0x103a},
        std::vector<uint32_t>{0x102f, 0x1019, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1019, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1019, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1019, 0x1039},
        std::vector<uint32_t>{0x102f, 0x1019, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1019, 0x103a},
        std::vector<uint32_t>{0x1031, 0x1019, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1019, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1019, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1019, 0x1039},
        std::vector<uint32_t>{0x1031, 0x1019, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1019, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1019, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1019, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1019, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1019, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1019, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1019, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1019, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1019, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1019, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1019, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1019, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1019, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1019, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1019, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1019, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1019, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1019, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1019, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1019, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1019, 0x103a},
        std::vector<uint32_t>{0x101a, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x101a, 0x1039},
        std::vector<uint32_t>{0x101a, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x101a, 0x1039},
        std::vector<uint32_t>{0x101a, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x101a, 0x103a},
        std::vector<uint32_t>{0x102c, 0x101a, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x101a, 0x1039},
        std::vector<uint32_t>{0x102c, 0x101a, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x101a, 0x1039},
        std::vector<uint32_t>{0x102c, 0x101a, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x101a, 0x103a},
        std::vector<uint32_t>{0x102b, 0x101a, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x101a, 0x103a},
        std::vector<uint32_t>{0x102b, 0x101a, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x101a, 0x1039},
        std::vector<uint32_t>{0x102b, 0x101a, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x101a, 0x1039},
        std::vector<uint32_t>{0x102b, 0x101a, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x101a, 0x103a},
        std::vector<uint32_t>{0x102d, 0x101a, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x101a, 0x1039},
        std::vector<uint32_t>{0x102d, 0x101a, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x101a, 0x1039},
        std::vector<uint32_t>{0x102d, 0x101a, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x101a, 0x103a},
        std::vector<uint32_t>{0x102f, 0x101a, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x101a, 0x1039},
        std::vector<uint32_t>{0x102f, 0x101a, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x101a, 0x1039},
        std::vector<uint32_t>{0x102f, 0x101a, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x101a, 0x103a},
        std::vector<uint32_t>{0x1031, 0x101a, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x101a, 0x1039},
        std::vector<uint32_t>{0x1031, 0x101a, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x101a, 0x1039},
        std::vector<uint32_t>{0x1031, 0x101a, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x101a, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x101a, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x101a, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x101a, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x101a, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x101a, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x101a, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x101a, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x101a, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x101a, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x101a, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x101a, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x101a, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x101a, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x101a, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x101a, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x101a, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x101a, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x101a, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x101a, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x101a, 0x103a},
        std::vector<uint32_t>{0x101b, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x101b, 0x1039},
        std::vector<uint32_t>{0x101b, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x101b, 0x1039},
        std::vector<uint32_t>{0x101b, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x101b, 0x103a},
        std::vector<uint32_t>{0x102c, 0x101b, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x101b, 0x1039},
        std::vector<uint32_t>{0x102c, 0x101b, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x101b, 0x1039},
        std::vector<uint32_t>{0x102c, 0x101b, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x101b, 0x103a},
        std::vector<uint32_t>{0x102b, 0x101b, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x101b, 0x103a},
        std::vector<uint32_t>{0x102b, 0x101b, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x101b, 0x1039},
        std::vector<uint32_t>{0x102b, 0x101b, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x101b, 0x1039},
        std::vector<uint32_t>{0x102b, 0x101b, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x101b, 0x103a},
        std::vector<uint32_t>{0x102d, 0x101b, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x101b, 0x1039},
        std::vector<uint32_t>{0x102d, 0x101b, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x101b, 0x1039},
        std::vector<uint32_t>{0x102d, 0x101b, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x101b, 0x103a},
        std::vector<uint32_t>{0x102f, 0x101b, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x101b, 0x1039},
        std::vector<uint32_t>{0x102f, 0x101b, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x101b, 0x1039},
        std::vector<uint32_t>{0x102f, 0x101b, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x101b, 0x103a},
        std::vector<uint32_t>{0x1031, 0x101b, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x101b, 0x1039},
        std::vector<uint32_t>{0x1031, 0x101b, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x101b, 0x1039},
        std::vector<uint32_t>{0x1031, 0x101b, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x101b, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x101b, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x101b, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x101b, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x101b, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x101b, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x101b, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x101b, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x101b, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x101b, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x101b, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x101b, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x101b, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x101b, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x101b, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x101b, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x101b, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x101b, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x101b, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x101b, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x101b, 0x103a},
        std::vector<uint32_t>{0x101c, 0x1039},
        table(), collation_strength::primary),
        -1);
}

TEST(tailoring, my_standard_000_011)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x101c, 0x1039},
        std::vector<uint32_t>{0x101c, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x101c, 0x1039},
        std::vector<uint32_t>{0x101c, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x101c, 0x103a},
        std::vector<uint32_t>{0x102c, 0x101c, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x101c, 0x1039},
        std::vector<uint32_t>{0x102c, 0x101c, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x101c, 0x1039},
        std::vector<uint32_t>{0x102c, 0x101c, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x101c, 0x103a},
        std::vector<uint32_t>{0x102b, 0x101c, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x101c, 0x103a},
        std::vector<uint32_t>{0x102b, 0x101c, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x101c, 0x1039},
        std::vector<uint32_t>{0x102b, 0x101c, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x101c, 0x1039},
        std::vector<uint32_t>{0x102b, 0x101c, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x101c, 0x103a},
        std::vector<uint32_t>{0x102d, 0x101c, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x101c, 0x1039},
        std::vector<uint32_t>{0x102d, 0x101c, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x101c, 0x1039},
        std::vector<uint32_t>{0x102d, 0x101c, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x101c, 0x103a},
        std::vector<uint32_t>{0x102f, 0x101c, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x101c, 0x1039},
        std::vector<uint32_t>{0x102f, 0x101c, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x101c, 0x1039},
        std::vector<uint32_t>{0x102f, 0x101c, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x101c, 0x103a},
        std::vector<uint32_t>{0x1031, 0x101c, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x101c, 0x1039},
        std::vector<uint32_t>{0x1031, 0x101c, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x101c, 0x1039},
        std::vector<uint32_t>{0x1031, 0x101c, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x101c, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x101c, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x101c, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x101c, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x101c, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x101c, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x101c, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x101c, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x101c, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x101c, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x101c, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x101c, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x101c, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x101c, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x101c, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x101c, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x101c, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x101c, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x101c, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x101c, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x101c, 0x103a},
        std::vector<uint32_t>{0x101d, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x101d, 0x103a},
        std::vector<uint32_t>{0x102c, 0x101d, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x101d, 0x103a},
        std::vector<uint32_t>{0x102b, 0x101d, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x101d, 0x103a},
        std::vector<uint32_t>{0x102b, 0x101d, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x101d, 0x103a},
        std::vector<uint32_t>{0x102d, 0x101d, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x101d, 0x103a},
        std::vector<uint32_t>{0x102f, 0x101d, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x101d, 0x103a},
        std::vector<uint32_t>{0x1031, 0x101d, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x101d, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x101d, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x101d, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x101d, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x101d, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x101d, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x101d, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x101d, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x101d, 0x103a},
        std::vector<uint32_t>{0x101e, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x101e, 0x1039},
        std::vector<uint32_t>{0x101e, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x101e, 0x1039},
        std::vector<uint32_t>{0x101e, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x101e, 0x103a},
        std::vector<uint32_t>{0x102c, 0x101e, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x101e, 0x1039},
        std::vector<uint32_t>{0x102c, 0x101e, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x101e, 0x1039},
        std::vector<uint32_t>{0x102c, 0x101e, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x101e, 0x103a},
        std::vector<uint32_t>{0x102b, 0x101e, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x101e, 0x103a},
        std::vector<uint32_t>{0x102b, 0x101e, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x101e, 0x1039},
        std::vector<uint32_t>{0x102b, 0x101e, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x101e, 0x1039},
        std::vector<uint32_t>{0x102b, 0x101e, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x101e, 0x103a},
        std::vector<uint32_t>{0x102d, 0x101e, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x101e, 0x1039},
        std::vector<uint32_t>{0x102d, 0x101e, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x101e, 0x1039},
        std::vector<uint32_t>{0x102d, 0x101e, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x101e, 0x103a},
        std::vector<uint32_t>{0x102f, 0x101e, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x101e, 0x1039},
        std::vector<uint32_t>{0x102f, 0x101e, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x101e, 0x1039},
        std::vector<uint32_t>{0x102f, 0x101e, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x101e, 0x103a},
        std::vector<uint32_t>{0x1031, 0x101e, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x101e, 0x1039},
        std::vector<uint32_t>{0x1031, 0x101e, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x101e, 0x1039},
        std::vector<uint32_t>{0x1031, 0x101e, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x101e, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x101e, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x101e, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x101e, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x101e, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x101e, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x101e, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x101e, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x101e, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x101e, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x101e, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x101e, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x101e, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x101e, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x101e, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x101e, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x101e, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x101e, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x101e, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x101e, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x101e, 0x103a},
        std::vector<uint32_t>{0x101f, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x101f, 0x1039},
        std::vector<uint32_t>{0x101f, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x101f, 0x1039},
        std::vector<uint32_t>{0x101f, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x101f, 0x103a},
        std::vector<uint32_t>{0x102c, 0x101f, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x101f, 0x1039},
        std::vector<uint32_t>{0x102c, 0x101f, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x101f, 0x1039},
        std::vector<uint32_t>{0x102c, 0x101f, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x101f, 0x103a},
        std::vector<uint32_t>{0x102b, 0x101f, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x101f, 0x103a},
        std::vector<uint32_t>{0x102b, 0x101f, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x101f, 0x1039},
        std::vector<uint32_t>{0x102b, 0x101f, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x101f, 0x1039},
        std::vector<uint32_t>{0x102b, 0x101f, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x101f, 0x103a},
        std::vector<uint32_t>{0x102d, 0x101f, 0x1039},
        table(), collation_strength::primary),
        -1);
}

TEST(tailoring, my_standard_000_012)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x101f, 0x1039},
        std::vector<uint32_t>{0x102d, 0x101f, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x101f, 0x1039},
        std::vector<uint32_t>{0x102d, 0x101f, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x101f, 0x103a},
        std::vector<uint32_t>{0x102f, 0x101f, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x101f, 0x1039},
        std::vector<uint32_t>{0x102f, 0x101f, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x101f, 0x1039},
        std::vector<uint32_t>{0x102f, 0x101f, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x101f, 0x103a},
        std::vector<uint32_t>{0x1031, 0x101f, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x101f, 0x1039},
        std::vector<uint32_t>{0x1031, 0x101f, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x101f, 0x1039},
        std::vector<uint32_t>{0x1031, 0x101f, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x101f, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x101f, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x101f, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x101f, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x101f, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102c, 0x101f, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x101f, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x101f, 0x1039},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x101f, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x101f, 0x1039},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x101f, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x101f, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x101f, 0x1039},
        std::vector<uint32_t>{0x1031, 0x102b, 0x101f, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x101f, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x101f, 0x1039},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x101f, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x101f, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x101f, 0x1039},
        std::vector<uint32_t>{0x102d, 0x102f, 0x101f, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x101f, 0x103a},
        std::vector<uint32_t>{0x1020, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1020, 0x103a},
        std::vector<uint32_t>{0x102c, 0x1020, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1020, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1020, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1020, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1020, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1020, 0x103a},
        std::vector<uint32_t>{0x102d, 0x1020, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1020, 0x103a},
        std::vector<uint32_t>{0x102f, 0x1020, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1020, 0x103a},
        std::vector<uint32_t>{0x1031, 0x1020, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1020, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1020, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1020, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1020, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1020, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1020, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1020, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1020, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1020, 0x103a},
        std::vector<uint32_t>{0x1021, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x103a},
        std::vector<uint32_t>{0x102c, 0x1021, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1021, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1021, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102c, 0x1021, 0x103a},
        std::vector<uint32_t>{0x102b, 0x1021, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102b, 0x1021, 0x103a},
        std::vector<uint32_t>{0x102d, 0x1021, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1021, 0x103a},
        std::vector<uint32_t>{0x102f, 0x1021, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1021, 0x103a},
        std::vector<uint32_t>{0x1031, 0x1021, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x1021, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102c, 0x1021, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1021, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1021, 0x103a},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102c, 0x1021, 0x103a},
        std::vector<uint32_t>{0x1031, 0x102b, 0x1021, 0x103a},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1031, 0x102b, 0x1021, 0x103a},
        std::vector<uint32_t>{0x102d, 0x102f, 0x1021, 0x103a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x102f, 0x1021, 0x103a},
        std::vector<uint32_t>(1, 0x105e),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x105e),
        std::vector<uint32_t>(1, 0x105f),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x105f),
        std::vector<uint32_t>(1, 0x103b),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x103b),
        std::vector<uint32_t>(1, 0x103c),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x103c),
        std::vector<uint32_t>(1, 0x1060),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1060),
        std::vector<uint32_t>(1, 0x103d),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x103d),
        std::vector<uint32_t>(1, 0x1082),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1082),
        std::vector<uint32_t>(1, 0x103e),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x103e),
        std::vector<uint32_t>{0x103b, 0x103d},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x103b, 0x103d},
        std::vector<uint32_t>{0x103c, 0x103d},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x103c, 0x103d},
        std::vector<uint32_t>{0x103b, 0x103e},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x103b, 0x103e},
        std::vector<uint32_t>{0x103c, 0x103e},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x103c, 0x103e},
        std::vector<uint32_t>{0x103d, 0x103e},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x103d, 0x103e},
        std::vector<uint32_t>{0x103b, 0x103d, 0x103e},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x103b, 0x103d, 0x103e},
        std::vector<uint32_t>{0x103c, 0x103d, 0x103e},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d},
        std::vector<uint32_t>(1, 0x1023),
        table(), collation_strength::tertiary),
        -1);
#if 0 // This test it optional.
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d},
        std::vector<uint32_t>(1, 0x1023),
        table(), collation_strength::secondary),
        0);
#endif
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102e},
        std::vector<uint32_t>(1, 0x1024),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102e},
        std::vector<uint32_t>(1, 0x1024),
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f},
        std::vector<uint32_t>(1, 0x1025),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f},
        std::vector<uint32_t>(1, 0x1025),
        table(), collation_strength::secondary),
        0);
}

TEST(tailoring, my_standard_000_013)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1030},
        std::vector<uint32_t>(1, 0x1026),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1030},
        std::vector<uint32_t>(1, 0x1026),
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031},
        std::vector<uint32_t>(1, 0x1027),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031},
        std::vector<uint32_t>(1, 0x1027),
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1027),
        std::vector<uint32_t>(1, 0x1028),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1027),
        std::vector<uint32_t>(1, 0x1028),
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c},
        std::vector<uint32_t>(1, 0x1029),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c},
        std::vector<uint32_t>(1, 0x1029),
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x103a},
        std::vector<uint32_t>(1, 0x102a),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x103a},
        std::vector<uint32_t>(1, 0x102a),
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1019, 0x103a},
        std::vector<uint32_t>{0x102d, 0x1036},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1036},
        std::vector<uint32_t>{0x102d, 0x1019, 0x103a, 0x1037},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1019, 0x103a, 0x1037},
        std::vector<uint32_t>{0x102d, 0x1036, 0x1037},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1036, 0x1037},
        std::vector<uint32_t>{0x102d, 0x1019, 0x103a, 0x1038},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102d, 0x1019, 0x103a, 0x1038},
        std::vector<uint32_t>{0x102d, 0x1036, 0x1038},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1019, 0x103a},
        std::vector<uint32_t>{0x102f, 0x1036},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1036},
        std::vector<uint32_t>{0x102f, 0x1019, 0x103a, 0x1037},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1019, 0x103a, 0x1037},
        std::vector<uint32_t>{0x102f, 0x1036, 0x1037},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1036, 0x1037},
        std::vector<uint32_t>{0x102f, 0x1019, 0x103a, 0x1038},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x102f, 0x1019, 0x103a, 0x1038},
        std::vector<uint32_t>{0x102f, 0x1036, 0x1038},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1036},
        std::vector<uint32_t>{0x1025, 0x102f, 0x1036},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1036},
        std::vector<uint32_t>{0x1025, 0x102f, 0x1036},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1000, 0x1039},
        std::vector<uint32_t>{0x1023, 0x1000, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1000, 0x1039},
        std::vector<uint32_t>{0x1023, 0x1000, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1000, 0x103a},
        std::vector<uint32_t>{0x1023, 0x1000, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1000, 0x103a},
        std::vector<uint32_t>{0x1023, 0x1000, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1000, 0x1039},
        std::vector<uint32_t>{0x1025, 0x1000, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1000, 0x1039},
        std::vector<uint32_t>{0x1025, 0x1000, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1000, 0x103a},
        std::vector<uint32_t>{0x1025, 0x1000, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1000, 0x103a},
        std::vector<uint32_t>{0x1025, 0x1000, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1000, 0x1039},
        std::vector<uint32_t>{0x1027, 0x1000, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1000, 0x1039},
        std::vector<uint32_t>{0x1027, 0x1000, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1000, 0x103a},
        std::vector<uint32_t>{0x1027, 0x1000, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1000, 0x103a},
        std::vector<uint32_t>{0x1027, 0x1000, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1000, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1000, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1000, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1000, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1000, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1000, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1000, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1000, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1000, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1000, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1000, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1000, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1000, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1000, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1000, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1000, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1001, 0x1039},
        std::vector<uint32_t>{0x1023, 0x1001, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1001, 0x1039},
        std::vector<uint32_t>{0x1023, 0x1001, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1001, 0x103a},
        std::vector<uint32_t>{0x1023, 0x1001, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1001, 0x103a},
        std::vector<uint32_t>{0x1023, 0x1001, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1001, 0x1039},
        std::vector<uint32_t>{0x1025, 0x1001, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1001, 0x1039},
        std::vector<uint32_t>{0x1025, 0x1001, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1001, 0x103a},
        std::vector<uint32_t>{0x1025, 0x1001, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1001, 0x103a},
        std::vector<uint32_t>{0x1025, 0x1001, 0x103a},
        table(), collation_strength::secondary),
        0);
}

TEST(tailoring, my_standard_000_014)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1001, 0x1039},
        std::vector<uint32_t>{0x1027, 0x1001, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1001, 0x1039},
        std::vector<uint32_t>{0x1027, 0x1001, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1001, 0x103a},
        std::vector<uint32_t>{0x1027, 0x1001, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1001, 0x103a},
        std::vector<uint32_t>{0x1027, 0x1001, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1001, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1001, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1001, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1001, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1001, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1001, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1001, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1001, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1001, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1001, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1001, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1001, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1001, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1001, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1001, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1001, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1002, 0x1039},
        std::vector<uint32_t>{0x1023, 0x1002, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1002, 0x1039},
        std::vector<uint32_t>{0x1023, 0x1002, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1002, 0x103a},
        std::vector<uint32_t>{0x1023, 0x1002, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1002, 0x103a},
        std::vector<uint32_t>{0x1023, 0x1002, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1002, 0x1039},
        std::vector<uint32_t>{0x1025, 0x1002, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1002, 0x1039},
        std::vector<uint32_t>{0x1025, 0x1002, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1002, 0x103a},
        std::vector<uint32_t>{0x1025, 0x1002, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1002, 0x103a},
        std::vector<uint32_t>{0x1025, 0x1002, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1002, 0x1039},
        std::vector<uint32_t>{0x1027, 0x1002, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1002, 0x1039},
        std::vector<uint32_t>{0x1027, 0x1002, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1002, 0x103a},
        std::vector<uint32_t>{0x1027, 0x1002, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1002, 0x103a},
        std::vector<uint32_t>{0x1027, 0x1002, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1002, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1002, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1002, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1002, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1002, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1002, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1002, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1002, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1002, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1002, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1002, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1002, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1002, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1002, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1002, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1002, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1003, 0x1039},
        std::vector<uint32_t>{0x1023, 0x1003, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1003, 0x1039},
        std::vector<uint32_t>{0x1023, 0x1003, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1003, 0x103a},
        std::vector<uint32_t>{0x1023, 0x1003, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1003, 0x103a},
        std::vector<uint32_t>{0x1023, 0x1003, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1003, 0x1039},
        std::vector<uint32_t>{0x1025, 0x1003, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1003, 0x1039},
        std::vector<uint32_t>{0x1025, 0x1003, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1003, 0x103a},
        std::vector<uint32_t>{0x1025, 0x1003, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1003, 0x103a},
        std::vector<uint32_t>{0x1025, 0x1003, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1003, 0x1039},
        std::vector<uint32_t>{0x1027, 0x1003, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1003, 0x1039},
        std::vector<uint32_t>{0x1027, 0x1003, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1003, 0x103a},
        std::vector<uint32_t>{0x1027, 0x1003, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1003, 0x103a},
        std::vector<uint32_t>{0x1027, 0x1003, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1003, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1003, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1003, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1003, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1003, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1003, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1003, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1003, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1003, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1003, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1003, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1003, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1003, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1003, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1003, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1003, 0x103a},
        table(), collation_strength::secondary),
        0);
}

TEST(tailoring, my_standard_000_015)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1004, 0x1039},
        std::vector<uint32_t>{0x1023, 0x1004, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1004, 0x1039},
        std::vector<uint32_t>{0x1023, 0x1004, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1004, 0x103a},
        std::vector<uint32_t>{0x1023, 0x1004, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1004, 0x103a},
        std::vector<uint32_t>{0x1023, 0x1004, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1004, 0x1039},
        std::vector<uint32_t>{0x1025, 0x1004, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1004, 0x1039},
        std::vector<uint32_t>{0x1025, 0x1004, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1004, 0x103a},
        std::vector<uint32_t>{0x1025, 0x1004, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1004, 0x103a},
        std::vector<uint32_t>{0x1025, 0x1004, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1004, 0x1039},
        std::vector<uint32_t>{0x1027, 0x1004, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1004, 0x1039},
        std::vector<uint32_t>{0x1027, 0x1004, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1004, 0x103a},
        std::vector<uint32_t>{0x1027, 0x1004, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1004, 0x103a},
        std::vector<uint32_t>{0x1027, 0x1004, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1004, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1004, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1004, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1004, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1004, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1004, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1004, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1004, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1004, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1004, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1004, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1004, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1004, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1004, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1004, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1004, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1005, 0x1039},
        std::vector<uint32_t>{0x1023, 0x1005, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1005, 0x1039},
        std::vector<uint32_t>{0x1023, 0x1005, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1005, 0x103a},
        std::vector<uint32_t>{0x1023, 0x1005, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1005, 0x103a},
        std::vector<uint32_t>{0x1023, 0x1005, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1005, 0x1039},
        std::vector<uint32_t>{0x1025, 0x1005, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1005, 0x1039},
        std::vector<uint32_t>{0x1025, 0x1005, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1005, 0x103a},
        std::vector<uint32_t>{0x1025, 0x1005, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1005, 0x103a},
        std::vector<uint32_t>{0x1025, 0x1005, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1005, 0x1039},
        std::vector<uint32_t>{0x1027, 0x1005, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1005, 0x1039},
        std::vector<uint32_t>{0x1027, 0x1005, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1005, 0x103a},
        std::vector<uint32_t>{0x1027, 0x1005, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1005, 0x103a},
        std::vector<uint32_t>{0x1027, 0x1005, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1005, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1005, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1005, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1005, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1005, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1005, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1005, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1005, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1005, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1005, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1005, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1005, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1005, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1005, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1005, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1005, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1006, 0x1039},
        std::vector<uint32_t>{0x1023, 0x1006, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1006, 0x1039},
        std::vector<uint32_t>{0x1023, 0x1006, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1006, 0x103a},
        std::vector<uint32_t>{0x1023, 0x1006, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1006, 0x103a},
        std::vector<uint32_t>{0x1023, 0x1006, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1006, 0x1039},
        std::vector<uint32_t>{0x1025, 0x1006, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1006, 0x1039},
        std::vector<uint32_t>{0x1025, 0x1006, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1006, 0x103a},
        std::vector<uint32_t>{0x1025, 0x1006, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1006, 0x103a},
        std::vector<uint32_t>{0x1025, 0x1006, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1006, 0x1039},
        std::vector<uint32_t>{0x1027, 0x1006, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1006, 0x1039},
        std::vector<uint32_t>{0x1027, 0x1006, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1006, 0x103a},
        std::vector<uint32_t>{0x1027, 0x1006, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1006, 0x103a},
        std::vector<uint32_t>{0x1027, 0x1006, 0x103a},
        table(), collation_strength::secondary),
        0);
}

TEST(tailoring, my_standard_000_016)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1006, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1006, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1006, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1006, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1006, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1006, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1006, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1006, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1006, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1006, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1006, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1006, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1006, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1006, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1006, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1006, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1007, 0x1039},
        std::vector<uint32_t>{0x1023, 0x1007, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1007, 0x1039},
        std::vector<uint32_t>{0x1023, 0x1007, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1007, 0x103a},
        std::vector<uint32_t>{0x1023, 0x1007, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1007, 0x103a},
        std::vector<uint32_t>{0x1023, 0x1007, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1007, 0x1039},
        std::vector<uint32_t>{0x1025, 0x1007, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1007, 0x1039},
        std::vector<uint32_t>{0x1025, 0x1007, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1007, 0x103a},
        std::vector<uint32_t>{0x1025, 0x1007, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1007, 0x103a},
        std::vector<uint32_t>{0x1025, 0x1007, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1007, 0x1039},
        std::vector<uint32_t>{0x1027, 0x1007, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1007, 0x1039},
        std::vector<uint32_t>{0x1027, 0x1007, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1007, 0x103a},
        std::vector<uint32_t>{0x1027, 0x1007, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1007, 0x103a},
        std::vector<uint32_t>{0x1027, 0x1007, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1007, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1007, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1007, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1007, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1007, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1007, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1007, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1007, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1007, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1007, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1007, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1007, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1007, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1007, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1007, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1007, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1009, 0x1039},
        std::vector<uint32_t>{0x1023, 0x1009, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1009, 0x1039},
        std::vector<uint32_t>{0x1023, 0x1009, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1009, 0x103a},
        std::vector<uint32_t>{0x1023, 0x1009, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1009, 0x103a},
        std::vector<uint32_t>{0x1023, 0x1009, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1009, 0x1039},
        std::vector<uint32_t>{0x1025, 0x1009, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1009, 0x1039},
        std::vector<uint32_t>{0x1025, 0x1009, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1009, 0x103a},
        std::vector<uint32_t>{0x1025, 0x1009, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1009, 0x103a},
        std::vector<uint32_t>{0x1025, 0x1009, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1009, 0x1039},
        std::vector<uint32_t>{0x1027, 0x1009, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1009, 0x1039},
        std::vector<uint32_t>{0x1027, 0x1009, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1009, 0x103a},
        std::vector<uint32_t>{0x1027, 0x1009, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1009, 0x103a},
        std::vector<uint32_t>{0x1027, 0x1009, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1009, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1009, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1009, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1009, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1009, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1009, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1009, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1009, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1009, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1009, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1009, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1009, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1009, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1009, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1009, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1009, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x100a, 0x1039},
        std::vector<uint32_t>{0x1023, 0x100a, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x100a, 0x1039},
        std::vector<uint32_t>{0x1023, 0x100a, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x100a, 0x103a},
        std::vector<uint32_t>{0x1023, 0x100a, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x100a, 0x103a},
        std::vector<uint32_t>{0x1023, 0x100a, 0x103a},
        table(), collation_strength::secondary),
        0);
}

TEST(tailoring, my_standard_000_017)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x100a, 0x1039},
        std::vector<uint32_t>{0x1025, 0x100a, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x100a, 0x1039},
        std::vector<uint32_t>{0x1025, 0x100a, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x100a, 0x103a},
        std::vector<uint32_t>{0x1025, 0x100a, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x100a, 0x103a},
        std::vector<uint32_t>{0x1025, 0x100a, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x100a, 0x1039},
        std::vector<uint32_t>{0x1027, 0x100a, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x100a, 0x1039},
        std::vector<uint32_t>{0x1027, 0x100a, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x100a, 0x103a},
        std::vector<uint32_t>{0x1027, 0x100a, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x100a, 0x103a},
        std::vector<uint32_t>{0x1027, 0x100a, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100a, 0x1039},
        std::vector<uint32_t>{0x1029, 0x100a, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100a, 0x1039},
        std::vector<uint32_t>{0x1029, 0x100a, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100a, 0x103a},
        std::vector<uint32_t>{0x1029, 0x100a, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100a, 0x103a},
        std::vector<uint32_t>{0x1029, 0x100a, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100a, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x100a, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100a, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x100a, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100a, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x100a, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100a, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x100a, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x100b, 0x1039},
        std::vector<uint32_t>{0x1023, 0x100b, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x100b, 0x1039},
        std::vector<uint32_t>{0x1023, 0x100b, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x100b, 0x103a},
        std::vector<uint32_t>{0x1023, 0x100b, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x100b, 0x103a},
        std::vector<uint32_t>{0x1023, 0x100b, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x100b, 0x1039},
        std::vector<uint32_t>{0x1025, 0x100b, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x100b, 0x1039},
        std::vector<uint32_t>{0x1025, 0x100b, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x100b, 0x103a},
        std::vector<uint32_t>{0x1025, 0x100b, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x100b, 0x103a},
        std::vector<uint32_t>{0x1025, 0x100b, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x100b, 0x1039},
        std::vector<uint32_t>{0x1027, 0x100b, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x100b, 0x1039},
        std::vector<uint32_t>{0x1027, 0x100b, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x100b, 0x103a},
        std::vector<uint32_t>{0x1027, 0x100b, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x100b, 0x103a},
        std::vector<uint32_t>{0x1027, 0x100b, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100b, 0x1039},
        std::vector<uint32_t>{0x1029, 0x100b, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100b, 0x1039},
        std::vector<uint32_t>{0x1029, 0x100b, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100b, 0x103a},
        std::vector<uint32_t>{0x1029, 0x100b, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100b, 0x103a},
        std::vector<uint32_t>{0x1029, 0x100b, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100b, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x100b, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100b, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x100b, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100b, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x100b, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100b, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x100b, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x100c, 0x1039},
        std::vector<uint32_t>{0x1023, 0x100c, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x100c, 0x1039},
        std::vector<uint32_t>{0x1023, 0x100c, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x100c, 0x103a},
        std::vector<uint32_t>{0x1023, 0x100c, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x100c, 0x103a},
        std::vector<uint32_t>{0x1023, 0x100c, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x100c, 0x1039},
        std::vector<uint32_t>{0x1025, 0x100c, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x100c, 0x1039},
        std::vector<uint32_t>{0x1025, 0x100c, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x100c, 0x103a},
        std::vector<uint32_t>{0x1025, 0x100c, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x100c, 0x103a},
        std::vector<uint32_t>{0x1025, 0x100c, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x100c, 0x1039},
        std::vector<uint32_t>{0x1027, 0x100c, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x100c, 0x1039},
        std::vector<uint32_t>{0x1027, 0x100c, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x100c, 0x103a},
        std::vector<uint32_t>{0x1027, 0x100c, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x100c, 0x103a},
        std::vector<uint32_t>{0x1027, 0x100c, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100c, 0x1039},
        std::vector<uint32_t>{0x1029, 0x100c, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100c, 0x1039},
        std::vector<uint32_t>{0x1029, 0x100c, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100c, 0x103a},
        std::vector<uint32_t>{0x1029, 0x100c, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100c, 0x103a},
        std::vector<uint32_t>{0x1029, 0x100c, 0x103a},
        table(), collation_strength::secondary),
        0);
}

TEST(tailoring, my_standard_000_018)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100c, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x100c, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100c, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x100c, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100c, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x100c, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100c, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x100c, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x100d, 0x1039},
        std::vector<uint32_t>{0x1023, 0x100d, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x100d, 0x1039},
        std::vector<uint32_t>{0x1023, 0x100d, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x100d, 0x103a},
        std::vector<uint32_t>{0x1023, 0x100d, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x100d, 0x103a},
        std::vector<uint32_t>{0x1023, 0x100d, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x100d, 0x1039},
        std::vector<uint32_t>{0x1025, 0x100d, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x100d, 0x1039},
        std::vector<uint32_t>{0x1025, 0x100d, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x100d, 0x103a},
        std::vector<uint32_t>{0x1025, 0x100d, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x100d, 0x103a},
        std::vector<uint32_t>{0x1025, 0x100d, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x100d, 0x1039},
        std::vector<uint32_t>{0x1027, 0x100d, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x100d, 0x1039},
        std::vector<uint32_t>{0x1027, 0x100d, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x100d, 0x103a},
        std::vector<uint32_t>{0x1027, 0x100d, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x100d, 0x103a},
        std::vector<uint32_t>{0x1027, 0x100d, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100d, 0x1039},
        std::vector<uint32_t>{0x1029, 0x100d, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100d, 0x1039},
        std::vector<uint32_t>{0x1029, 0x100d, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100d, 0x103a},
        std::vector<uint32_t>{0x1029, 0x100d, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100d, 0x103a},
        std::vector<uint32_t>{0x1029, 0x100d, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100d, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x100d, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100d, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x100d, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100d, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x100d, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100d, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x100d, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x100e, 0x1039},
        std::vector<uint32_t>{0x1023, 0x100e, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x100e, 0x1039},
        std::vector<uint32_t>{0x1023, 0x100e, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x100e, 0x103a},
        std::vector<uint32_t>{0x1023, 0x100e, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x100e, 0x103a},
        std::vector<uint32_t>{0x1023, 0x100e, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x100e, 0x1039},
        std::vector<uint32_t>{0x1025, 0x100e, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x100e, 0x1039},
        std::vector<uint32_t>{0x1025, 0x100e, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x100e, 0x103a},
        std::vector<uint32_t>{0x1025, 0x100e, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x100e, 0x103a},
        std::vector<uint32_t>{0x1025, 0x100e, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x100e, 0x1039},
        std::vector<uint32_t>{0x1027, 0x100e, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x100e, 0x1039},
        std::vector<uint32_t>{0x1027, 0x100e, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x100e, 0x103a},
        std::vector<uint32_t>{0x1027, 0x100e, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x100e, 0x103a},
        std::vector<uint32_t>{0x1027, 0x100e, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100e, 0x1039},
        std::vector<uint32_t>{0x1029, 0x100e, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100e, 0x1039},
        std::vector<uint32_t>{0x1029, 0x100e, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100e, 0x103a},
        std::vector<uint32_t>{0x1029, 0x100e, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100e, 0x103a},
        std::vector<uint32_t>{0x1029, 0x100e, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100e, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x100e, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100e, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x100e, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100e, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x100e, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100e, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x100e, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x100f, 0x1039},
        std::vector<uint32_t>{0x1023, 0x100f, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x100f, 0x1039},
        std::vector<uint32_t>{0x1023, 0x100f, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x100f, 0x103a},
        std::vector<uint32_t>{0x1023, 0x100f, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x100f, 0x103a},
        std::vector<uint32_t>{0x1023, 0x100f, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x100f, 0x1039},
        std::vector<uint32_t>{0x1025, 0x100f, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x100f, 0x1039},
        std::vector<uint32_t>{0x1025, 0x100f, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x100f, 0x103a},
        std::vector<uint32_t>{0x1025, 0x100f, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x100f, 0x103a},
        std::vector<uint32_t>{0x1025, 0x100f, 0x103a},
        table(), collation_strength::secondary),
        0);
}

TEST(tailoring, my_standard_000_019)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x100f, 0x1039},
        std::vector<uint32_t>{0x1027, 0x100f, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x100f, 0x1039},
        std::vector<uint32_t>{0x1027, 0x100f, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x100f, 0x103a},
        std::vector<uint32_t>{0x1027, 0x100f, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x100f, 0x103a},
        std::vector<uint32_t>{0x1027, 0x100f, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100f, 0x1039},
        std::vector<uint32_t>{0x1029, 0x100f, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100f, 0x1039},
        std::vector<uint32_t>{0x1029, 0x100f, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100f, 0x103a},
        std::vector<uint32_t>{0x1029, 0x100f, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100f, 0x103a},
        std::vector<uint32_t>{0x1029, 0x100f, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100f, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x100f, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100f, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x100f, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100f, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x100f, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x100f, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x100f, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1010, 0x1039},
        std::vector<uint32_t>{0x1023, 0x1010, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1010, 0x1039},
        std::vector<uint32_t>{0x1023, 0x1010, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1010, 0x103a},
        std::vector<uint32_t>{0x1023, 0x1010, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1010, 0x103a},
        std::vector<uint32_t>{0x1023, 0x1010, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1010, 0x1039},
        std::vector<uint32_t>{0x1025, 0x1010, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1010, 0x1039},
        std::vector<uint32_t>{0x1025, 0x1010, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1010, 0x103a},
        std::vector<uint32_t>{0x1025, 0x1010, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1010, 0x103a},
        std::vector<uint32_t>{0x1025, 0x1010, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1010, 0x1039},
        std::vector<uint32_t>{0x1027, 0x1010, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1010, 0x1039},
        std::vector<uint32_t>{0x1027, 0x1010, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1010, 0x103a},
        std::vector<uint32_t>{0x1027, 0x1010, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1010, 0x103a},
        std::vector<uint32_t>{0x1027, 0x1010, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1010, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1010, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1010, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1010, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1010, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1010, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1010, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1010, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1010, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1010, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1010, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1010, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1010, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1010, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1010, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1010, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1011, 0x1039},
        std::vector<uint32_t>{0x1023, 0x1011, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1011, 0x1039},
        std::vector<uint32_t>{0x1023, 0x1011, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1011, 0x103a},
        std::vector<uint32_t>{0x1023, 0x1011, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102d, 0x1011, 0x103a},
        std::vector<uint32_t>{0x1023, 0x1011, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1011, 0x1039},
        std::vector<uint32_t>{0x1025, 0x1011, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1011, 0x1039},
        std::vector<uint32_t>{0x1025, 0x1011, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1011, 0x103a},
        std::vector<uint32_t>{0x1025, 0x1011, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x102f, 0x1011, 0x103a},
        std::vector<uint32_t>{0x1025, 0x1011, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1011, 0x1039},
        std::vector<uint32_t>{0x1027, 0x1011, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1011, 0x1039},
        std::vector<uint32_t>{0x1027, 0x1011, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1011, 0x103a},
        std::vector<uint32_t>{0x1027, 0x1011, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x1011, 0x103a},
        std::vector<uint32_t>{0x1027, 0x1011, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1011, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1011, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1011, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1011, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1011, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1011, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1011, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1011, 0x103a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1011, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1011, 0x1039},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1011, 0x1039},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1011, 0x1039},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1011, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1011, 0x103a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1021, 0x1031, 0x102c, 0x1011, 0x103a},
        std::vector<uint32_t>{0x1029, 0x1031, 0x102c, 0x1011, 0x103a},
        table(), collation_strength::secondary),
        0);
}

