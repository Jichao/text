// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_322_000)
{
    // F9F9 003F;	
    // (粒) CJK COMPATIBILITY IDEOGRAPH-F9F9	[FB40 FC92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9F9, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFC92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_001)
{
    // F9F9 0061;	
    // (粒) CJK COMPATIBILITY IDEOGRAPH-F9F9	[FB40 FC92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9F9, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFC92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_002)
{
    // F9F9 0041;	
    // (粒) CJK COMPATIBILITY IDEOGRAPH-F9F9	[FB40 FC92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9F9, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFC92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_003)
{
    // F9F9 0062;	
    // (粒) CJK COMPATIBILITY IDEOGRAPH-F9F9	[FB40 FC92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9F9, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFC92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_004)
{
    // FA1D 0021;	
    // (精) CJK COMPATIBILITY IDEOGRAPH-FA1D	[FB40 FCBE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA1D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFCBE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_005)
{
    // FA1D 003F;	
    // (精) CJK COMPATIBILITY IDEOGRAPH-FA1D	[FB40 FCBE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA1D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFCBE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_006)
{
    // FA1D 0061;	
    // (精) CJK COMPATIBILITY IDEOGRAPH-FA1D	[FB40 FCBE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA1D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFCBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_007)
{
    // FA1D 0041;	
    // (精) CJK COMPATIBILITY IDEOGRAPH-FA1D	[FB40 FCBE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA1D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFCBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_008)
{
    // FA1D 0062;	
    // (精) CJK COMPATIBILITY IDEOGRAPH-FA1D	[FB40 FCBE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA1D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFCBE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_009)
{
    // 2F966 0021;	
    // (糒) CJK COMPATIBILITY IDEOGRAPH-2F966	[FB40 FCD2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F966, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFCD2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_010)
{
    // 2F966 003F;	
    // (糒) CJK COMPATIBILITY IDEOGRAPH-2F966	[FB40 FCD2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F966, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFCD2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_011)
{
    // 2F966 0061;	
    // (糒) CJK COMPATIBILITY IDEOGRAPH-2F966	[FB40 FCD2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F966, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFCD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_012)
{
    // 2F966 0041;	
    // (糒) CJK COMPATIBILITY IDEOGRAPH-2F966	[FB40 FCD2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F966, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFCD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_013)
{
    // 2F966 0062;	
    // (糒) CJK COMPATIBILITY IDEOGRAPH-2F966	[FB40 FCD2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F966, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFCD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_014)
{
    // FA03 0021;	
    // (糖) CJK COMPATIBILITY IDEOGRAPH-FA03	[FB40 FCD6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA03, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFCD6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_015)
{
    // FA03 003F;	
    // (糖) CJK COMPATIBILITY IDEOGRAPH-FA03	[FB40 FCD6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA03, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFCD6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_016)
{
    // FA03 0061;	
    // (糖) CJK COMPATIBILITY IDEOGRAPH-FA03	[FB40 FCD6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA03, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFCD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_017)
{
    // FA03 0041;	
    // (糖) CJK COMPATIBILITY IDEOGRAPH-FA03	[FB40 FCD6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA03, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFCD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_018)
{
    // FA03 0062;	
    // (糖) CJK COMPATIBILITY IDEOGRAPH-FA03	[FB40 FCD6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA03, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFCD6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_019)
{
    // 2F969 0021;	
    // (糣) CJK COMPATIBILITY IDEOGRAPH-2F969	[FB40 FCE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F969, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFCE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_020)
{
    // 2F969 003F;	
    // (糣) CJK COMPATIBILITY IDEOGRAPH-2F969	[FB40 FCE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F969, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFCE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_021)
{
    // 2F969 0061;	
    // (糣) CJK COMPATIBILITY IDEOGRAPH-2F969	[FB40 FCE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F969, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFCE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_022)
{
    // 2F969 0041;	
    // (糣) CJK COMPATIBILITY IDEOGRAPH-2F969	[FB40 FCE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F969, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFCE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_023)
{
    // 2F969 0062;	
    // (糣) CJK COMPATIBILITY IDEOGRAPH-2F969	[FB40 FCE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F969, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFCE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_024)
{
    // F97B 0021;	
    // (糧) CJK COMPATIBILITY IDEOGRAPH-F97B	[FB40 FCE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF97B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFCE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_025)
{
    // F97B 003F;	
    // (糧) CJK COMPATIBILITY IDEOGRAPH-F97B	[FB40 FCE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF97B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFCE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_026)
{
    // F97B 0061;	
    // (糧) CJK COMPATIBILITY IDEOGRAPH-F97B	[FB40 FCE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF97B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFCE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_027)
{
    // F97B 0041;	
    // (糧) CJK COMPATIBILITY IDEOGRAPH-F97B	[FB40 FCE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF97B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFCE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_028)
{
    // F97B 0062;	
    // (糧) CJK COMPATIBILITY IDEOGRAPH-F97B	[FB40 FCE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF97B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFCE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_029)
{
    // 2F968 0021;	
    // (糨) CJK COMPATIBILITY IDEOGRAPH-2F968	[FB40 FCE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F968, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFCE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_030)
{
    // 2F968 003F;	
    // (糨) CJK COMPATIBILITY IDEOGRAPH-2F968	[FB40 FCE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F968, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFCE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_031)
{
    // 2F968 0061;	
    // (糨) CJK COMPATIBILITY IDEOGRAPH-2F968	[FB40 FCE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F968, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFCE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_032)
{
    // 2F968 0041;	
    // (糨) CJK COMPATIBILITY IDEOGRAPH-2F968	[FB40 FCE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F968, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFCE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_033)
{
    // 2F968 0062;	
    // (糨) CJK COMPATIBILITY IDEOGRAPH-2F968	[FB40 FCE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F968, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFCE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_034)
{
    // 2F77 0021;	
    // (⽷) KANGXI RADICAL SILK	[FB40 FCF8 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F77, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFCF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_035)
{
    // 2F77 003F;	
    // (⽷) KANGXI RADICAL SILK	[FB40 FCF8 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F77, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFCF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_036)
{
    // 2F77 0061;	
    // (⽷) KANGXI RADICAL SILK	[FB40 FCF8 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F77, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFCF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_037)
{
    // 2F77 0041;	
    // (⽷) KANGXI RADICAL SILK	[FB40 FCF8 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F77, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFCF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_038)
{
    // 2F77 0062;	
    // (⽷) KANGXI RADICAL SILK	[FB40 FCF8 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F77, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFCF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_039)
{
    // 2EAF 0021;	
    // (⺯) CJK RADICAL SILK	[FB40 FCF9 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EAF, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFCF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_040)
{
    // 2EAF 003F;	
    // (⺯) CJK RADICAL SILK	[FB40 FCF9 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EAF, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFCF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_041)
{
    // 2EAF 0061;	
    // (⺯) CJK RADICAL SILK	[FB40 FCF9 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EAF, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFCF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_042)
{
    // 2EAF 0041;	
    // (⺯) CJK RADICAL SILK	[FB40 FCF9 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EAF, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFCF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_043)
{
    // 2EAF 0062;	
    // (⺯) CJK RADICAL SILK	[FB40 FCF9 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EAF, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFCF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_044)
{
    // 2F96A 0021;	
    // (紀) CJK COMPATIBILITY IDEOGRAPH-2F96A	[FB40 FD00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F96A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFD00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_045)
{
    // 2F96A 003F;	
    // (紀) CJK COMPATIBILITY IDEOGRAPH-2F96A	[FB40 FD00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F96A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFD00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_046)
{
    // 2F96A 0061;	
    // (紀) CJK COMPATIBILITY IDEOGRAPH-2F96A	[FB40 FD00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F96A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFD00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_047)
{
    // 2F96A 0041;	
    // (紀) CJK COMPATIBILITY IDEOGRAPH-2F96A	[FB40 FD00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F96A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFD00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_048)
{
    // 2F96A 0062;	
    // (紀) CJK COMPATIBILITY IDEOGRAPH-2F96A	[FB40 FD00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F96A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFD00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_049)
{
    // F9CF 0021;	
    // (紐) CJK COMPATIBILITY IDEOGRAPH-F9CF	[FB40 FD10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9CF, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFD10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_050)
{
    // F9CF 003F;	
    // (紐) CJK COMPATIBILITY IDEOGRAPH-F9CF	[FB40 FD10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9CF, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFD10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_051)
{
    // F9CF 0061;	
    // (紐) CJK COMPATIBILITY IDEOGRAPH-F9CF	[FB40 FD10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9CF, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFD10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_052)
{
    // F9CF 0041;	
    // (紐) CJK COMPATIBILITY IDEOGRAPH-F9CF	[FB40 FD10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9CF, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFD10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_053)
{
    // F9CF 0062;	
    // (紐) CJK COMPATIBILITY IDEOGRAPH-F9CF	[FB40 FD10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9CF, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFD10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_054)
{
    // F96A 0021;	
    // (索) CJK COMPATIBILITY IDEOGRAPH-F96A	[FB40 FD22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF96A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFD22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_055)
{
    // F96A 003F;	
    // (索) CJK COMPATIBILITY IDEOGRAPH-F96A	[FB40 FD22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF96A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFD22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_056)
{
    // F96A 0061;	
    // (索) CJK COMPATIBILITY IDEOGRAPH-F96A	[FB40 FD22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF96A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFD22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_057)
{
    // F96A 0041;	
    // (索) CJK COMPATIBILITY IDEOGRAPH-F96A	[FB40 FD22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF96A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFD22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_058)
{
    // F96A 0062;	
    // (索) CJK COMPATIBILITY IDEOGRAPH-F96A	[FB40 FD22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF96A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFD22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_059)
{
    // F94F 0021;	
    // (累) CJK COMPATIBILITY IDEOGRAPH-F94F	[FB40 FD2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF94F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFD2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_060)
{
    // F94F 003F;	
    // (累) CJK COMPATIBILITY IDEOGRAPH-F94F	[FB40 FD2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF94F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFD2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_061)
{
    // F94F 0061;	
    // (累) CJK COMPATIBILITY IDEOGRAPH-F94F	[FB40 FD2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF94F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFD2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_062)
{
    // F94F 0041;	
    // (累) CJK COMPATIBILITY IDEOGRAPH-F94F	[FB40 FD2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF94F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFD2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_063)
{
    // F94F 0062;	
    // (累) CJK COMPATIBILITY IDEOGRAPH-F94F	[FB40 FD2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF94F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFD2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_064)
{
    // 1F221 0021;	
    // (🈡) SQUARED CJK UNIFIED IDEOGRAPH-7D42	[FB40 FD42 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F221, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFD42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_065)
{
    // 1F221 003F;	
    // (🈡) SQUARED CJK UNIFIED IDEOGRAPH-7D42	[FB40 FD42 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F221, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFD42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_066)
{
    // 1F221 0061;	
    // (🈡) SQUARED CJK UNIFIED IDEOGRAPH-7D42	[FB40 FD42 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F221, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFD42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_067)
{
    // 1F221 0041;	
    // (🈡) SQUARED CJK UNIFIED IDEOGRAPH-7D42	[FB40 FD42 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F221, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFD42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_068)
{
    // 1F221 0062;	
    // (🈡) SQUARED CJK UNIFIED IDEOGRAPH-7D42	[FB40 FD42 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F221, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFD42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_069)
{
    // FAAF 0021;	
    // (絛) CJK COMPATIBILITY IDEOGRAPH-FAAF	[FB40 FD5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAAF, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFD5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_070)
{
    // FAAF 003F;	
    // (絛) CJK COMPATIBILITY IDEOGRAPH-FAAF	[FB40 FD5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAAF, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFD5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_071)
{
    // FAAF 0061;	
    // (絛) CJK COMPATIBILITY IDEOGRAPH-FAAF	[FB40 FD5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAAF, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFD5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_072)
{
    // FAAF 0041;	
    // (絛) CJK COMPATIBILITY IDEOGRAPH-FAAF	[FB40 FD5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFAAF, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFD5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_073)
{
    // FAAF 0062;	
    // (絛) CJK COMPATIBILITY IDEOGRAPH-FAAF	[FB40 FD5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAAF, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFD5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_074)
{
    // 2F96C 0021;	
    // (絣) CJK COMPATIBILITY IDEOGRAPH-2F96C	[FB40 FD63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F96C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFD63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_075)
{
    // 2F96C 003F;	
    // (絣) CJK COMPATIBILITY IDEOGRAPH-2F96C	[FB40 FD63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F96C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFD63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_076)
{
    // 2F96C 0061;	
    // (絣) CJK COMPATIBILITY IDEOGRAPH-2F96C	[FB40 FD63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F96C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFD63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_077)
{
    // 2F96C 0041;	
    // (絣) CJK COMPATIBILITY IDEOGRAPH-2F96C	[FB40 FD63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F96C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFD63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_078)
{
    // 2F96C 0062;	
    // (絣) CJK COMPATIBILITY IDEOGRAPH-2F96C	[FB40 FD63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F96C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFD63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_079)
{
    // F93D 0021;	
    // (綠) CJK COMPATIBILITY IDEOGRAPH-F93D	[FB40 FDA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF93D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFDA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_080)
{
    // F93D 003F;	
    // (綠) CJK COMPATIBILITY IDEOGRAPH-F93D	[FB40 FDA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF93D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFDA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_081)
{
    // F93D 0061;	
    // (綠) CJK COMPATIBILITY IDEOGRAPH-F93D	[FB40 FDA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF93D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFDA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_082)
{
    // F93D 0041;	
    // (綠) CJK COMPATIBILITY IDEOGRAPH-F93D	[FB40 FDA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF93D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFDA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_083)
{
    // F93D 0062;	
    // (綠) CJK COMPATIBILITY IDEOGRAPH-F93D	[FB40 FDA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF93D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFDA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_084)
{
    // F957 0021;	
    // (綾) CJK COMPATIBILITY IDEOGRAPH-F957	[FB40 FDBE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF957, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFDBE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_085)
{
    // F957 003F;	
    // (綾) CJK COMPATIBILITY IDEOGRAPH-F957	[FB40 FDBE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF957, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFDBE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_086)
{
    // F957 0061;	
    // (綾) CJK COMPATIBILITY IDEOGRAPH-F957	[FB40 FDBE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF957, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFDBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_087)
{
    // F957 0041;	
    // (綾) CJK COMPATIBILITY IDEOGRAPH-F957	[FB40 FDBE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF957, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFDBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_088)
{
    // F957 0062;	
    // (綾) CJK COMPATIBILITY IDEOGRAPH-F957	[FB40 FDBE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF957, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFDBE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_089)
{
    // 2F96E 0021;	
    // (緇) CJK COMPATIBILITY IDEOGRAPH-2F96E	[FB40 FDC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F96E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFDC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_090)
{
    // 2F96E 003F;	
    // (緇) CJK COMPATIBILITY IDEOGRAPH-2F96E	[FB40 FDC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F96E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFDC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_091)
{
    // 2F96E 0061;	
    // (緇) CJK COMPATIBILITY IDEOGRAPH-2F96E	[FB40 FDC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F96E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFDC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_092)
{
    // 2F96E 0041;	
    // (緇) CJK COMPATIBILITY IDEOGRAPH-2F96E	[FB40 FDC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F96E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFDC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_093)
{
    // 2F96E 0062;	
    // (緇) CJK COMPATIBILITY IDEOGRAPH-2F96E	[FB40 FDC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F96E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFDC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_094)
{
    // F996 0021;	
    // (練) CJK COMPATIBILITY IDEOGRAPH-F996	[FB40 FDF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF996, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFDF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_095)
{
    // FA57 0021;	
    // (練) CJK COMPATIBILITY IDEOGRAPH-FA57	[FB40 FDF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA57, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFDF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_096)
{
    // FAB0 0021;	
    // (練) CJK COMPATIBILITY IDEOGRAPH-FAB0	[FB40 FDF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB0, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFDF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_097)
{
    // F996 003F;	
    // (練) CJK COMPATIBILITY IDEOGRAPH-F996	[FB40 FDF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF996, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFDF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_098)
{
    // FA57 003F;	
    // (練) CJK COMPATIBILITY IDEOGRAPH-FA57	[FB40 FDF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA57, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFDF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_099)
{
    // FAB0 003F;	
    // (練) CJK COMPATIBILITY IDEOGRAPH-FAB0	[FB40 FDF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB0, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFDF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_100)
{
    // F996 0061;	
    // (練) CJK COMPATIBILITY IDEOGRAPH-F996	[FB40 FDF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF996, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFDF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_101)
{
    // FA57 0061;	
    // (練) CJK COMPATIBILITY IDEOGRAPH-FA57	[FB40 FDF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA57, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFDF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_102)
{
    // FAB0 0061;	
    // (練) CJK COMPATIBILITY IDEOGRAPH-FAB0	[FB40 FDF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB0, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFDF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_103)
{
    // F996 0041;	
    // (練) CJK COMPATIBILITY IDEOGRAPH-F996	[FB40 FDF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF996, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFDF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_104)
{
    // FA57 0041;	
    // (練) CJK COMPATIBILITY IDEOGRAPH-FA57	[FB40 FDF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA57, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFDF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_105)
{
    // FAB0 0041;	
    // (練) CJK COMPATIBILITY IDEOGRAPH-FAB0	[FB40 FDF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFAB0, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFDF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_106)
{
    // F996 0062;	
    // (練) CJK COMPATIBILITY IDEOGRAPH-F996	[FB40 FDF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF996, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFDF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_107)
{
    // FA57 0062;	
    // (練) CJK COMPATIBILITY IDEOGRAPH-FA57	[FB40 FDF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA57, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFDF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_108)
{
    // FAB0 0062;	
    // (練) CJK COMPATIBILITY IDEOGRAPH-FAB0	[FB40 FDF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB0, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFDF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_109)
{
    // 2F96F 0021;	
    // (縂) CJK COMPATIBILITY IDEOGRAPH-2F96F	[FB40 FE02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F96F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFE02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_110)
{
    // 2F96F 003F;	
    // (縂) CJK COMPATIBILITY IDEOGRAPH-2F96F	[FB40 FE02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F96F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFE02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_111)
{
    // 2F96F 0061;	
    // (縂) CJK COMPATIBILITY IDEOGRAPH-2F96F	[FB40 FE02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F96F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFE02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_112)
{
    // 2F96F 0041;	
    // (縂) CJK COMPATIBILITY IDEOGRAPH-2F96F	[FB40 FE02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F96F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFE02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_113)
{
    // 2F96F 0062;	
    // (縂) CJK COMPATIBILITY IDEOGRAPH-2F96F	[FB40 FE02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F96F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFE02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_114)
{
    // FA58 0021;	
    // (縉) CJK COMPATIBILITY IDEOGRAPH-FA58	[FB40 FE09 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA58, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFE09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_115)
{
    // FA58 003F;	
    // (縉) CJK COMPATIBILITY IDEOGRAPH-FA58	[FB40 FE09 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA58, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFE09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_116)
{
    // FA58 0061;	
    // (縉) CJK COMPATIBILITY IDEOGRAPH-FA58	[FB40 FE09 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA58, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFE09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_117)
{
    // FA58 0041;	
    // (縉) CJK COMPATIBILITY IDEOGRAPH-FA58	[FB40 FE09 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA58, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFE09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_118)
{
    // FA58 0062;	
    // (縉) CJK COMPATIBILITY IDEOGRAPH-FA58	[FB40 FE09 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA58, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFE09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_119)
{
    // F950 0021;	
    // (縷) CJK COMPATIBILITY IDEOGRAPH-F950	[FB40 FE37 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF950, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFE37, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_120)
{
    // F950 003F;	
    // (縷) CJK COMPATIBILITY IDEOGRAPH-F950	[FB40 FE37 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF950, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFE37, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_121)
{
    // F950 0061;	
    // (縷) CJK COMPATIBILITY IDEOGRAPH-F950	[FB40 FE37 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF950, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFE37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_122)
{
    // F950 0041;	
    // (縷) CJK COMPATIBILITY IDEOGRAPH-F950	[FB40 FE37 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF950, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFE37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_123)
{
    // F950 0062;	
    // (縷) CJK COMPATIBILITY IDEOGRAPH-F950	[FB40 FE37 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF950, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFE37, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_124)
{
    // FA59 0021;	
    // (繁) CJK COMPATIBILITY IDEOGRAPH-FA59	[FB40 FE41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA59, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFE41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_125)
{
    // FA59 003F;	
    // (繁) CJK COMPATIBILITY IDEOGRAPH-FA59	[FB40 FE41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA59, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFE41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_126)
{
    // FA59 0061;	
    // (繁) CJK COMPATIBILITY IDEOGRAPH-FA59	[FB40 FE41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA59, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFE41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_127)
{
    // FA59 0041;	
    // (繁) CJK COMPATIBILITY IDEOGRAPH-FA59	[FB40 FE41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA59, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFE41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_128)
{
    // FA59 0062;	
    // (繁) CJK COMPATIBILITY IDEOGRAPH-FA59	[FB40 FE41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA59, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFE41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_129)
{
    // 2F970 0021;	
    // (繅) CJK COMPATIBILITY IDEOGRAPH-2F970	[FB40 FE45 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F970, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFE45, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_130)
{
    // 2F970 003F;	
    // (繅) CJK COMPATIBILITY IDEOGRAPH-2F970	[FB40 FE45 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F970, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFE45, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_131)
{
    // 2F970 0061;	
    // (繅) CJK COMPATIBILITY IDEOGRAPH-2F970	[FB40 FE45 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F970, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFE45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_132)
{
    // 2F970 0041;	
    // (繅) CJK COMPATIBILITY IDEOGRAPH-2F970	[FB40 FE45 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F970, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFE45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_133)
{
    // 2F970 0062;	
    // (繅) CJK COMPATIBILITY IDEOGRAPH-2F970	[FB40 FE45 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F970, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFE45, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_134)
{
    // 2EB0 0021;	
    // (⺰) CJK RADICAL C-SIMPLIFIED SILK	[FB40 FE9F 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EB0, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFE9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_135)
{
    // 2EB0 003F;	
    // (⺰) CJK RADICAL C-SIMPLIFIED SILK	[FB40 FE9F 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EB0, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFE9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_136)
{
    // 2EB0 0061;	
    // (⺰) CJK RADICAL C-SIMPLIFIED SILK	[FB40 FE9F 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EB0, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFE9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_137)
{
    // 2EB0 0041;	
    // (⺰) CJK RADICAL C-SIMPLIFIED SILK	[FB40 FE9F 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EB0, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFE9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_138)
{
    // 2EB0 0062;	
    // (⺰) CJK RADICAL C-SIMPLIFIED SILK	[FB40 FE9F 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EB0, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFE9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_139)
{
    // 2F78 0021;	
    // (⽸) KANGXI RADICAL JAR	[FB40 FF36 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F78, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFF36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_140)
{
    // 2F78 003F;	
    // (⽸) KANGXI RADICAL JAR	[FB40 FF36 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F78, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFF36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_141)
{
    // 2F78 0061;	
    // (⽸) KANGXI RADICAL JAR	[FB40 FF36 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F78, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFF36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_142)
{
    // 2F78 0041;	
    // (⽸) KANGXI RADICAL JAR	[FB40 FF36 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F78, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFF36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_143)
{
    // 2F78 0062;	
    // (⽸) KANGXI RADICAL JAR	[FB40 FF36 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F78, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFF36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_144)
{
    // FAB1 0021;	
    // (缾) CJK COMPATIBILITY IDEOGRAPH-FAB1	[FB40 FF3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB1, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFF3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_145)
{
    // FAB1 003F;	
    // (缾) CJK COMPATIBILITY IDEOGRAPH-FAB1	[FB40 FF3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB1, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFF3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_146)
{
    // FAB1 0061;	
    // (缾) CJK COMPATIBILITY IDEOGRAPH-FAB1	[FB40 FF3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB1, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFF3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_147)
{
    // FAB1 0041;	
    // (缾) CJK COMPATIBILITY IDEOGRAPH-FAB1	[FB40 FF3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFAB1, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFF3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_148)
{
    // FAB1 0062;	
    // (缾) CJK COMPATIBILITY IDEOGRAPH-FAB1	[FB40 FF3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB1, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFF3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_149)
{
    // 2F79 0021;	
    // (⽹) KANGXI RADICAL NET	[FB40 FF51 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F79, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFF51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_150)
{
    // 2F79 003F;	
    // (⽹) KANGXI RADICAL NET	[FB40 FF51 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F79, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFF51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_151)
{
    // 2F79 0061;	
    // (⽹) KANGXI RADICAL NET	[FB40 FF51 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F79, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFF51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_152)
{
    // 2F79 0041;	
    // (⽹) KANGXI RADICAL NET	[FB40 FF51 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F79, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFF51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_153)
{
    // 2F79 0062;	
    // (⽹) KANGXI RADICAL NET	[FB40 FF51 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F79, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFF51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_154)
{
    // 2EB2 0021;	
    // (⺲) CJK RADICAL NET TWO	[FB40 FF52 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EB2, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFF52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_155)
{
    // 2EB5 0021;	
    // (⺵) CJK RADICAL MESH	[FB40 FF52 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EB5, 0x0021 };
    uint32_t const ces[12] = { 0xFB40, 0xFF52, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_156)
{
    // 2EB2 003F;	
    // (⺲) CJK RADICAL NET TWO	[FB40 FF52 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EB2, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFF52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_157)
{
    // 2EB5 003F;	
    // (⺵) CJK RADICAL MESH	[FB40 FF52 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EB5, 0x003F };
    uint32_t const ces[12] = { 0xFB40, 0xFF52, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_158)
{
    // 2EB2 0061;	
    // (⺲) CJK RADICAL NET TWO	[FB40 FF52 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EB2, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFF52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_159)
{
    // 2EB2 0041;	
    // (⺲) CJK RADICAL NET TWO	[FB40 FF52 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EB2, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFF52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_160)
{
    // 2EB5 0061;	
    // (⺵) CJK RADICAL MESH	[FB40 FF52 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EB5, 0x0061 };
    uint32_t const ces[12] = { 0xFB40, 0xFF52, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_161)
{
    // 2EB5 0041;	
    // (⺵) CJK RADICAL MESH	[FB40 FF52 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2EB5, 0x0041 };
    uint32_t const ces[12] = { 0xFB40, 0xFF52, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_162)
{
    // 2EB2 0062;	
    // (⺲) CJK RADICAL NET TWO	[FB40 FF52 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EB2, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFF52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_163)
{
    // 2EB5 0062;	
    // (⺵) CJK RADICAL MESH	[FB40 FF52 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EB5, 0x0062 };
    uint32_t const ces[12] = { 0xFB40, 0xFF52, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_164)
{
    // 2EB1 0021;	
    // (⺱) CJK RADICAL NET ONE	[FB40 FF53 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EB1, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFF53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_165)
{
    // 2EB3 0021;	
    // (⺳) CJK RADICAL NET THREE	[FB40 FF53 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EB3, 0x0021 };
    uint32_t const ces[12] = { 0xFB40, 0xFF53, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_166)
{
    // 2EB4 0021;	
    // (⺴) CJK RADICAL NET FOUR	[FB40 FF53 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EB4, 0x0021 };
    uint32_t const ces[12] = { 0xFB40, 0xFF53, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_167)
{
    // 2EB1 003F;	
    // (⺱) CJK RADICAL NET ONE	[FB40 FF53 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EB1, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFF53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_168)
{
    // 2EB3 003F;	
    // (⺳) CJK RADICAL NET THREE	[FB40 FF53 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EB3, 0x003F };
    uint32_t const ces[12] = { 0xFB40, 0xFF53, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_169)
{
    // 2EB4 003F;	
    // (⺴) CJK RADICAL NET FOUR	[FB40 FF53 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EB4, 0x003F };
    uint32_t const ces[12] = { 0xFB40, 0xFF53, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_170)
{
    // 2EB1 0061;	
    // (⺱) CJK RADICAL NET ONE	[FB40 FF53 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EB1, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFF53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_171)
{
    // 2EB1 0041;	
    // (⺱) CJK RADICAL NET ONE	[FB40 FF53 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EB1, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFF53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_172)
{
    // 2EB3 0061;	
    // (⺳) CJK RADICAL NET THREE	[FB40 FF53 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EB3, 0x0061 };
    uint32_t const ces[12] = { 0xFB40, 0xFF53, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_173)
{
    // 2EB3 0041;	
    // (⺳) CJK RADICAL NET THREE	[FB40 FF53 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2EB3, 0x0041 };
    uint32_t const ces[12] = { 0xFB40, 0xFF53, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_174)
{
    // 2EB4 0061;	
    // (⺴) CJK RADICAL NET FOUR	[FB40 FF53 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EB4, 0x0061 };
    uint32_t const ces[12] = { 0xFB40, 0xFF53, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_175)
{
    // 2EB4 0041;	
    // (⺴) CJK RADICAL NET FOUR	[FB40 FF53 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2EB4, 0x0041 };
    uint32_t const ces[12] = { 0xFB40, 0xFF53, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_176)
{
    // 2EB1 0062;	
    // (⺱) CJK RADICAL NET ONE	[FB40 FF53 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EB1, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFF53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_177)
{
    // 2EB3 0062;	
    // (⺳) CJK RADICAL NET THREE	[FB40 FF53 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EB3, 0x0062 };
    uint32_t const ces[12] = { 0xFB40, 0xFF53, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_178)
{
    // 2EB4 0062;	
    // (⺴) CJK RADICAL NET FOUR	[FB40 FF53 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EB4, 0x0062 };
    uint32_t const ces[12] = { 0xFB40, 0xFF53, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_179)
{
    // FA5A 0021;	
    // (署) CJK COMPATIBILITY IDEOGRAPH-FA5A	[FB40 FF72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA5A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFF72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_180)
{
    // FA5A 003F;	
    // (署) CJK COMPATIBILITY IDEOGRAPH-FA5A	[FB40 FF72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA5A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFF72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_181)
{
    // FA5A 0061;	
    // (署) CJK COMPATIBILITY IDEOGRAPH-FA5A	[FB40 FF72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA5A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFF72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_182)
{
    // FA5A 0041;	
    // (署) CJK COMPATIBILITY IDEOGRAPH-FA5A	[FB40 FF72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA5A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFF72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_183)
{
    // FA5A 0062;	
    // (署) CJK COMPATIBILITY IDEOGRAPH-FA5A	[FB40 FF72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA5A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFF72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_184)
{
    // F9E6 0021;	
    // (罹) CJK COMPATIBILITY IDEOGRAPH-F9E6	[FB40 FF79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E6, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFF79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_185)
{
    // F9E6 003F;	
    // (罹) CJK COMPATIBILITY IDEOGRAPH-F9E6	[FB40 FF79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E6, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFF79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_186)
{
    // F9E6 0061;	
    // (罹) CJK COMPATIBILITY IDEOGRAPH-F9E6	[FB40 FF79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E6, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFF79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_187)
{
    // F9E6 0041;	
    // (罹) CJK COMPATIBILITY IDEOGRAPH-F9E6	[FB40 FF79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9E6, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFF79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_188)
{
    // F9E6 0062;	
    // (罹) CJK COMPATIBILITY IDEOGRAPH-F9E6	[FB40 FF79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E6, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFF79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_189)
{
    // 2F976 0021;	
    // (罺) CJK COMPATIBILITY IDEOGRAPH-2F976	[FB40 FF7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F976, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFF7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_190)
{
    // 2F976 003F;	
    // (罺) CJK COMPATIBILITY IDEOGRAPH-2F976	[FB40 FF7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F976, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFF7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_191)
{
    // 2F976 0061;	
    // (罺) CJK COMPATIBILITY IDEOGRAPH-2F976	[FB40 FF7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F976, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFF7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_192)
{
    // 2F976 0041;	
    // (罺) CJK COMPATIBILITY IDEOGRAPH-2F976	[FB40 FF7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F976, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFF7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_193)
{
    // 2F976 0062;	
    // (罺) CJK COMPATIBILITY IDEOGRAPH-2F976	[FB40 FF7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F976, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFF7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_194)
{
    // F90F 0021;	
    // (羅) CJK COMPATIBILITY IDEOGRAPH-F90F	[FB40 FF85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF90F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFF85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_195)
{
    // F90F 003F;	
    // (羅) CJK COMPATIBILITY IDEOGRAPH-F90F	[FB40 FF85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF90F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFF85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_196)
{
    // F90F 0061;	
    // (羅) CJK COMPATIBILITY IDEOGRAPH-F90F	[FB40 FF85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF90F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFF85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_197)
{
    // F90F 0041;	
    // (羅) CJK COMPATIBILITY IDEOGRAPH-F90F	[FB40 FF85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF90F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFF85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_198)
{
    // F90F 0062;	
    // (羅) CJK COMPATIBILITY IDEOGRAPH-F90F	[FB40 FF85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF90F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFF85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_199)
{
    // 2F7A 0021;	
    // (⽺) KANGXI RADICAL SHEEP	[FB40 FF8A 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F7A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFF8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_200)
{
    // 2EB6 0021;	
    // (⺶) CJK RADICAL SHEEP	[FB40 FF8A 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EB6, 0x0021 };
    uint32_t const ces[12] = { 0xFB40, 0xFF8A, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_201)
{
    // 2EB7 0021;	
    // (⺷) CJK RADICAL RAM	[FB40 FF8A 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EB7, 0x0021 };
    uint32_t const ces[12] = { 0xFB40, 0xFF8A, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_202)
{
    // 2F7A 003F;	
    // (⽺) KANGXI RADICAL SHEEP	[FB40 FF8A 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F7A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFF8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_203)
{
    // 2EB6 003F;	
    // (⺶) CJK RADICAL SHEEP	[FB40 FF8A 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EB6, 0x003F };
    uint32_t const ces[12] = { 0xFB40, 0xFF8A, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_204)
{
    // 2EB7 003F;	
    // (⺷) CJK RADICAL RAM	[FB40 FF8A 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EB7, 0x003F };
    uint32_t const ces[12] = { 0xFB40, 0xFF8A, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_205)
{
    // 2F7A 0061;	
    // (⽺) KANGXI RADICAL SHEEP	[FB40 FF8A 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F7A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFF8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_206)
{
    // 2F7A 0041;	
    // (⽺) KANGXI RADICAL SHEEP	[FB40 FF8A 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F7A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFF8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_207)
{
    // 2EB6 0061;	
    // (⺶) CJK RADICAL SHEEP	[FB40 FF8A 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EB6, 0x0061 };
    uint32_t const ces[12] = { 0xFB40, 0xFF8A, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_208)
{
    // 2EB6 0041;	
    // (⺶) CJK RADICAL SHEEP	[FB40 FF8A 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2EB6, 0x0041 };
    uint32_t const ces[12] = { 0xFB40, 0xFF8A, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_209)
{
    // 2EB7 0061;	
    // (⺷) CJK RADICAL RAM	[FB40 FF8A 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EB7, 0x0061 };
    uint32_t const ces[12] = { 0xFB40, 0xFF8A, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_210)
{
    // 2EB7 0041;	
    // (⺷) CJK RADICAL RAM	[FB40 FF8A 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2EB7, 0x0041 };
    uint32_t const ces[12] = { 0xFB40, 0xFF8A, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_211)
{
    // 2F7A 0062;	
    // (⽺) KANGXI RADICAL SHEEP	[FB40 FF8A 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F7A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFF8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_212)
{
    // 2EB6 0062;	
    // (⺶) CJK RADICAL SHEEP	[FB40 FF8A 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EB6, 0x0062 };
    uint32_t const ces[12] = { 0xFB40, 0xFF8A, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_213)
{
    // 2EB7 0062;	
    // (⺷) CJK RADICAL RAM	[FB40 FF8A 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EB7, 0x0062 };
    uint32_t const ces[12] = { 0xFB40, 0xFF8A, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_214)
{
    // 2EB8 0021;	
    // (⺸) CJK RADICAL EWE	[FB40 FF8B 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EB8, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFF8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_215)
{
    // 2EB8 003F;	
    // (⺸) CJK RADICAL EWE	[FB40 FF8B 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EB8, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFF8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_216)
{
    // 2EB8 0061;	
    // (⺸) CJK RADICAL EWE	[FB40 FF8B 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EB8, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFF8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_217)
{
    // 2EB8 0041;	
    // (⺸) CJK RADICAL EWE	[FB40 FF8B 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EB8, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFF8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_218)
{
    // 2EB8 0062;	
    // (⺸) CJK RADICAL EWE	[FB40 FF8B 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EB8, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFF8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_219)
{
    // 2F978 0021;	
    // (羕) CJK COMPATIBILITY IDEOGRAPH-2F978	[FB40 FF95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F978, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFF95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_220)
{
    // 2F978 003F;	
    // (羕) CJK COMPATIBILITY IDEOGRAPH-2F978	[FB40 FF95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F978, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFF95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_221)
{
    // 2F978 0061;	
    // (羕) CJK COMPATIBILITY IDEOGRAPH-2F978	[FB40 FF95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F978, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFF95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_222)
{
    // 2F978 0041;	
    // (羕) CJK COMPATIBILITY IDEOGRAPH-2F978	[FB40 FF95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F978, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFF95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_223)
{
    // 2F978 0062;	
    // (羕) CJK COMPATIBILITY IDEOGRAPH-2F978	[FB40 FF95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F978, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFF95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_224)
{
    // F9AF 0021;	
    // (羚) CJK COMPATIBILITY IDEOGRAPH-F9AF	[FB40 FF9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9AF, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFF9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_225)
{
    // F9AF 003F;	
    // (羚) CJK COMPATIBILITY IDEOGRAPH-F9AF	[FB40 FF9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9AF, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFF9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_226)
{
    // F9AF 0061;	
    // (羚) CJK COMPATIBILITY IDEOGRAPH-F9AF	[FB40 FF9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9AF, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFF9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_227)
{
    // F9AF 0041;	
    // (羚) CJK COMPATIBILITY IDEOGRAPH-F9AF	[FB40 FF9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9AF, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFF9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_228)
{
    // F9AF 0062;	
    // (羚) CJK COMPATIBILITY IDEOGRAPH-F9AF	[FB40 FF9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9AF, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFF9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_229)
{
    // FA1E 0021;	
    // (羽) CJK COMPATIBILITY IDEOGRAPH-FA1E	[FB40 FFBD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA1E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFFBD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_230)
{
    // 2F7B 0021;	
    // (⽻) KANGXI RADICAL FEATHER	[FB40 FFBD 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F7B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFFBD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_231)
{
    // FA1E 003F;	
    // (羽) CJK COMPATIBILITY IDEOGRAPH-FA1E	[FB40 FFBD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA1E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFFBD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_232)
{
    // 2F7B 003F;	
    // (⽻) KANGXI RADICAL FEATHER	[FB40 FFBD 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F7B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFFBD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_233)
{
    // FA1E 0061;	
    // (羽) CJK COMPATIBILITY IDEOGRAPH-FA1E	[FB40 FFBD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA1E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFFBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_234)
{
    // FA1E 0041;	
    // (羽) CJK COMPATIBILITY IDEOGRAPH-FA1E	[FB40 FFBD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA1E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFFBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_235)
{
    // 2F7B 0061;	
    // (⽻) KANGXI RADICAL FEATHER	[FB40 FFBD 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F7B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFFBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_236)
{
    // 2F7B 0041;	
    // (⽻) KANGXI RADICAL FEATHER	[FB40 FFBD 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F7B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFFBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_237)
{
    // FA1E 0062;	
    // (羽) CJK COMPATIBILITY IDEOGRAPH-FA1E	[FB40 FFBD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA1E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFFBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_238)
{
    // 2F7B 0062;	
    // (⽻) KANGXI RADICAL FEATHER	[FB40 FFBD 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F7B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFFBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_239)
{
    // 2F979 0021;	
    // (翺) CJK COMPATIBILITY IDEOGRAPH-2F979	[FB40 FFFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F979, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xFFFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_240)
{
    // 2F979 003F;	
    // (翺) CJK COMPATIBILITY IDEOGRAPH-2F979	[FB40 FFFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F979, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xFFFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_241)
{
    // 2F979 0061;	
    // (翺) CJK COMPATIBILITY IDEOGRAPH-2F979	[FB40 FFFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F979, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xFFFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_242)
{
    // 2F979 0041;	
    // (翺) CJK COMPATIBILITY IDEOGRAPH-2F979	[FB40 FFFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F979, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xFFFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_243)
{
    // 2F979 0062;	
    // (翺) CJK COMPATIBILITY IDEOGRAPH-2F979	[FB40 FFFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F979, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xFFFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_244)
{
    // F934 0021;	
    // (老) CJK COMPATIBILITY IDEOGRAPH-F934	[FB41 8001 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF934, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8001, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_245)
{
    // 2F7C 0021;	
    // (⽼) KANGXI RADICAL OLD	[FB41 8001 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F7C, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8001, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_246)
{
    // F934 003F;	
    // (老) CJK COMPATIBILITY IDEOGRAPH-F934	[FB41 8001 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF934, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8001, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_247)
{
    // 2F7C 003F;	
    // (⽼) KANGXI RADICAL OLD	[FB41 8001 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F7C, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8001, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_248)
{
    // F934 0061;	
    // (老) CJK COMPATIBILITY IDEOGRAPH-F934	[FB41 8001 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF934, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_249)
{
    // F934 0041;	
    // (老) CJK COMPATIBILITY IDEOGRAPH-F934	[FB41 8001 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF934, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_250)
{
    // 2F7C 0061;	
    // (⽼) KANGXI RADICAL OLD	[FB41 8001 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F7C, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_251)
{
    // 2F7C 0041;	
    // (⽼) KANGXI RADICAL OLD	[FB41 8001 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F7C, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_252)
{
    // F934 0062;	
    // (老) CJK COMPATIBILITY IDEOGRAPH-F934	[FB41 8001 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF934, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8001, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_253)
{
    // 2F7C 0062;	
    // (⽼) KANGXI RADICAL OLD	[FB41 8001 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F7C, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8001, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_254)
{
    // 2EB9 0021;	
    // (⺹) CJK RADICAL OLD	[FB41 8002 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EB9, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8002, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_255)
{
    // 2EB9 003F;	
    // (⺹) CJK RADICAL OLD	[FB41 8002 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EB9, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8002, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_256)
{
    // 2EB9 0061;	
    // (⺹) CJK RADICAL OLD	[FB41 8002 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EB9, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_257)
{
    // 2EB9 0041;	
    // (⺹) CJK RADICAL OLD	[FB41 8002 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EB9, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_258)
{
    // 2EB9 0062;	
    // (⺹) CJK RADICAL OLD	[FB41 8002 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EB9, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8002, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_259)
{
    // FA5B 0021;	
    // (者) CJK COMPATIBILITY IDEOGRAPH-FA5B	[FB41 8005 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA5B, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8005, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_260)
{
    // FAB2 0021;	
    // (者) CJK COMPATIBILITY IDEOGRAPH-FAB2	[FB41 8005 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB2, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8005, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_261)
{
    // 2F97A 0021;	
    // (者) CJK COMPATIBILITY IDEOGRAPH-2F97A	[FB41 8005 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F97A, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8005, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_262)
{
    // FA5B 003F;	
    // (者) CJK COMPATIBILITY IDEOGRAPH-FA5B	[FB41 8005 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA5B, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8005, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_263)
{
    // FAB2 003F;	
    // (者) CJK COMPATIBILITY IDEOGRAPH-FAB2	[FB41 8005 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB2, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8005, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_264)
{
    // 2F97A 003F;	
    // (者) CJK COMPATIBILITY IDEOGRAPH-2F97A	[FB41 8005 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F97A, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8005, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_265)
{
    // FA5B 0061;	
    // (者) CJK COMPATIBILITY IDEOGRAPH-FA5B	[FB41 8005 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA5B, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8005, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_266)
{
    // FAB2 0061;	
    // (者) CJK COMPATIBILITY IDEOGRAPH-FAB2	[FB41 8005 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB2, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8005, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_267)
{
    // 2F97A 0061;	
    // (者) CJK COMPATIBILITY IDEOGRAPH-2F97A	[FB41 8005 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F97A, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8005, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_268)
{
    // FA5B 0041;	
    // (者) CJK COMPATIBILITY IDEOGRAPH-FA5B	[FB41 8005 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA5B, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8005, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_269)
{
    // FAB2 0041;	
    // (者) CJK COMPATIBILITY IDEOGRAPH-FAB2	[FB41 8005 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFAB2, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8005, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_270)
{
    // 2F97A 0041;	
    // (者) CJK COMPATIBILITY IDEOGRAPH-2F97A	[FB41 8005 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F97A, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8005, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_271)
{
    // FA5B 0062;	
    // (者) CJK COMPATIBILITY IDEOGRAPH-FA5B	[FB41 8005 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA5B, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8005, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_272)
{
    // FAB2 0062;	
    // (者) CJK COMPATIBILITY IDEOGRAPH-FAB2	[FB41 8005 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB2, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8005, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_273)
{
    // 2F97A 0062;	
    // (者) CJK COMPATIBILITY IDEOGRAPH-2F97A	[FB41 8005 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F97A, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8005, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_274)
{
    // 2F7D 0021;	
    // (⽽) KANGXI RADICAL AND	[FB41 800C 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F7D, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x800C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_275)
{
    // 2F7D 003F;	
    // (⽽) KANGXI RADICAL AND	[FB41 800C 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F7D, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x800C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_276)
{
    // 2F7D 0061;	
    // (⽽) KANGXI RADICAL AND	[FB41 800C 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F7D, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x800C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_277)
{
    // 2F7D 0041;	
    // (⽽) KANGXI RADICAL AND	[FB41 800C 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F7D, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x800C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_278)
{
    // 2F7D 0062;	
    // (⽽) KANGXI RADICAL AND	[FB41 800C 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F7D, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x800C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_279)
{
    // 2F7E 0021;	
    // (⽾) KANGXI RADICAL PLOW	[FB41 8012 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F7E, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8012, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_280)
{
    // 2F7E 003F;	
    // (⽾) KANGXI RADICAL PLOW	[FB41 8012 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F7E, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8012, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_281)
{
    // 2F7E 0061;	
    // (⽾) KANGXI RADICAL PLOW	[FB41 8012 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F7E, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8012, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_282)
{
    // 2F7E 0041;	
    // (⽾) KANGXI RADICAL PLOW	[FB41 8012 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F7E, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8012, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_283)
{
    // 2F7E 0062;	
    // (⽾) KANGXI RADICAL PLOW	[FB41 8012 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F7E, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8012, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_284)
{
    // 2F7F 0021;	
    // (⽿) KANGXI RADICAL EAR	[FB41 8033 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F7F, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8033, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_285)
{
    // 2F7F 003F;	
    // (⽿) KANGXI RADICAL EAR	[FB41 8033 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F7F, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8033, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_286)
{
    // 2F7F 0061;	
    // (⽿) KANGXI RADICAL EAR	[FB41 8033 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F7F, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_287)
{
    // 2F7F 0041;	
    // (⽿) KANGXI RADICAL EAR	[FB41 8033 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F7F, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_288)
{
    // 2F7F 0062;	
    // (⽿) KANGXI RADICAL EAR	[FB41 8033 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F7F, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8033, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_289)
{
    // F9B0 0021;	
    // (聆) CJK COMPATIBILITY IDEOGRAPH-F9B0	[FB41 8046 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9B0, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8046, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_290)
{
    // F9B0 003F;	
    // (聆) CJK COMPATIBILITY IDEOGRAPH-F9B0	[FB41 8046 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9B0, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8046, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_291)
{
    // F9B0 0061;	
    // (聆) CJK COMPATIBILITY IDEOGRAPH-F9B0	[FB41 8046 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9B0, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8046, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_292)
{
    // F9B0 0041;	
    // (聆) CJK COMPATIBILITY IDEOGRAPH-F9B0	[FB41 8046 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9B0, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8046, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_293)
{
    // F9B0 0062;	
    // (聆) CJK COMPATIBILITY IDEOGRAPH-F9B0	[FB41 8046 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9B0, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8046, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_294)
{
    // 2F97D 0021;	
    // (聠) CJK COMPATIBILITY IDEOGRAPH-2F97D	[FB41 8060 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F97D, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8060, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_295)
{
    // 2F97D 003F;	
    // (聠) CJK COMPATIBILITY IDEOGRAPH-2F97D	[FB41 8060 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F97D, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8060, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_296)
{
    // 2F97D 0061;	
    // (聠) CJK COMPATIBILITY IDEOGRAPH-2F97D	[FB41 8060 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F97D, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8060, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_297)
{
    // 2F97D 0041;	
    // (聠) CJK COMPATIBILITY IDEOGRAPH-2F97D	[FB41 8060 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F97D, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8060, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_298)
{
    // 2F97D 0062;	
    // (聠) CJK COMPATIBILITY IDEOGRAPH-2F97D	[FB41 8060 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F97D, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8060, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_299)
{
    // F997 0021;	
    // (聯) CJK COMPATIBILITY IDEOGRAPH-F997	[FB41 806F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF997, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x806F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_300)
{
    // F997 003F;	
    // (聯) CJK COMPATIBILITY IDEOGRAPH-F997	[FB41 806F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF997, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x806F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_301)
{
    // F997 0061;	
    // (聯) CJK COMPATIBILITY IDEOGRAPH-F997	[FB41 806F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF997, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x806F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_302)
{
    // F997 0041;	
    // (聯) CJK COMPATIBILITY IDEOGRAPH-F997	[FB41 806F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF997, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x806F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_303)
{
    // F997 0062;	
    // (聯) CJK COMPATIBILITY IDEOGRAPH-F997	[FB41 806F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF997, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x806F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_304)
{
    // 2F97F 0021;	
    // (聰) CJK COMPATIBILITY IDEOGRAPH-2F97F	[FB41 8070 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F97F, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8070, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_305)
{
    // 2F97F 003F;	
    // (聰) CJK COMPATIBILITY IDEOGRAPH-2F97F	[FB41 8070 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F97F, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8070, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_306)
{
    // 2F97F 0061;	
    // (聰) CJK COMPATIBILITY IDEOGRAPH-2F97F	[FB41 8070 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F97F, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8070, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_307)
{
    // 2F97F 0041;	
    // (聰) CJK COMPATIBILITY IDEOGRAPH-2F97F	[FB41 8070 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F97F, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8070, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_308)
{
    // 2F97F 0062;	
    // (聰) CJK COMPATIBILITY IDEOGRAPH-2F97F	[FB41 8070 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F97F, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8070, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_309)
{
    // F945 0021;	
    // (聾) CJK COMPATIBILITY IDEOGRAPH-F945	[FB41 807E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF945, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x807E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_310)
{
    // F945 003F;	
    // (聾) CJK COMPATIBILITY IDEOGRAPH-F945	[FB41 807E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF945, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x807E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_311)
{
    // F945 0061;	
    // (聾) CJK COMPATIBILITY IDEOGRAPH-F945	[FB41 807E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF945, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x807E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_312)
{
    // F945 0041;	
    // (聾) CJK COMPATIBILITY IDEOGRAPH-F945	[FB41 807E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF945, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x807E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_313)
{
    // F945 0062;	
    // (聾) CJK COMPATIBILITY IDEOGRAPH-F945	[FB41 807E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF945, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x807E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_314)
{
    // 2F80 0021;	
    // (⾀) KANGXI RADICAL BRUSH	[FB41 807F 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F80, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x807F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_315)
{
    // 2EBB 0021;	
    // (⺻) CJK RADICAL BRUSH TWO	[FB41 807F 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EBB, 0x0021 };
    uint32_t const ces[12] = { 0xFB41, 0x807F, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_316)
{
    // 2F80 003F;	
    // (⾀) KANGXI RADICAL BRUSH	[FB41 807F 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F80, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x807F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_317)
{
    // 2EBB 003F;	
    // (⺻) CJK RADICAL BRUSH TWO	[FB41 807F 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EBB, 0x003F };
    uint32_t const ces[12] = { 0xFB41, 0x807F, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_318)
{
    // 2F80 0061;	
    // (⾀) KANGXI RADICAL BRUSH	[FB41 807F 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F80, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x807F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_319)
{
    // 2F80 0041;	
    // (⾀) KANGXI RADICAL BRUSH	[FB41 807F 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F80, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x807F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_320)
{
    // 2EBB 0061;	
    // (⺻) CJK RADICAL BRUSH TWO	[FB41 807F 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EBB, 0x0061 };
    uint32_t const ces[12] = { 0xFB41, 0x807F, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_321)
{
    // 2EBB 0041;	
    // (⺻) CJK RADICAL BRUSH TWO	[FB41 807F 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2EBB, 0x0041 };
    uint32_t const ces[12] = { 0xFB41, 0x807F, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_322)
{
    // 2F80 0062;	
    // (⾀) KANGXI RADICAL BRUSH	[FB41 807F 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F80, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x807F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_323)
{
    // 2EBB 0062;	
    // (⺻) CJK RADICAL BRUSH TWO	[FB41 807F 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EBB, 0x0062 };
    uint32_t const ces[12] = { 0xFB41, 0x807F, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_324)
{
    // 2EBA 0021;	
    // (⺺) CJK RADICAL BRUSH ONE	[FB41 8080 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EBA, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8080, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_325)
{
    // 2EBA 003F;	
    // (⺺) CJK RADICAL BRUSH ONE	[FB41 8080 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EBA, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8080, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_326)
{
    // 2EBA 0061;	
    // (⺺) CJK RADICAL BRUSH ONE	[FB41 8080 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EBA, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8080, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_327)
{
    // 2EBA 0041;	
    // (⺺) CJK RADICAL BRUSH ONE	[FB41 8080 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EBA, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8080, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_328)
{
    // 2EBA 0062;	
    // (⺺) CJK RADICAL BRUSH ONE	[FB41 8080 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EBA, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8080, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_329)
{
    // 2F81 0021;	
    // (⾁) KANGXI RADICAL MEAT	[FB41 8089 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F81, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8089, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_330)
{
    // 2EBC 0021;	
    // (⺼) CJK RADICAL MEAT	[FB41 8089 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EBC, 0x0021 };
    uint32_t const ces[12] = { 0xFB41, 0x8089, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_331)
{
    // 2F81 003F;	
    // (⾁) KANGXI RADICAL MEAT	[FB41 8089 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F81, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8089, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_332)
{
    // 2EBC 003F;	
    // (⺼) CJK RADICAL MEAT	[FB41 8089 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EBC, 0x003F };
    uint32_t const ces[12] = { 0xFB41, 0x8089, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_333)
{
    // 2F81 0061;	
    // (⾁) KANGXI RADICAL MEAT	[FB41 8089 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F81, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8089, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_334)
{
    // 2F81 0041;	
    // (⾁) KANGXI RADICAL MEAT	[FB41 8089 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F81, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8089, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_335)
{
    // 2EBC 0061;	
    // (⺼) CJK RADICAL MEAT	[FB41 8089 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EBC, 0x0061 };
    uint32_t const ces[12] = { 0xFB41, 0x8089, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_336)
{
    // 2EBC 0041;	
    // (⺼) CJK RADICAL MEAT	[FB41 8089 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2EBC, 0x0041 };
    uint32_t const ces[12] = { 0xFB41, 0x8089, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_337)
{
    // 2F81 0062;	
    // (⾁) KANGXI RADICAL MEAT	[FB41 8089 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F81, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8089, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_338)
{
    // 2EBC 0062;	
    // (⺼) CJK RADICAL MEAT	[FB41 8089 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EBC, 0x0062 };
    uint32_t const ces[12] = { 0xFB41, 0x8089, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_339)
{
    // F953 0021;	
    // (肋) CJK COMPATIBILITY IDEOGRAPH-F953	[FB41 808B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF953, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x808B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_340)
{
    // F953 003F;	
    // (肋) CJK COMPATIBILITY IDEOGRAPH-F953	[FB41 808B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF953, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x808B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_341)
{
    // F953 0061;	
    // (肋) CJK COMPATIBILITY IDEOGRAPH-F953	[FB41 808B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF953, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x808B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_342)
{
    // F953 0041;	
    // (肋) CJK COMPATIBILITY IDEOGRAPH-F953	[FB41 808B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF953, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x808B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_343)
{
    // F953 0062;	
    // (肋) CJK COMPATIBILITY IDEOGRAPH-F953	[FB41 808B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF953, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x808B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_344)
{
    // 2F8D6 0021;	
    // (肭) CJK COMPATIBILITY IDEOGRAPH-2F8D6	[FB41 80AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D6, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x80AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_345)
{
    // 2F8D6 003F;	
    // (肭) CJK COMPATIBILITY IDEOGRAPH-2F8D6	[FB41 80AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D6, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x80AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_346)
{
    // 2F8D6 0061;	
    // (肭) CJK COMPATIBILITY IDEOGRAPH-2F8D6	[FB41 80AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D6, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x80AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_347)
{
    // 2F8D6 0041;	
    // (肭) CJK COMPATIBILITY IDEOGRAPH-2F8D6	[FB41 80AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8D6, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x80AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_348)
{
    // 2F8D6 0062;	
    // (肭) CJK COMPATIBILITY IDEOGRAPH-2F8D6	[FB41 80AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D6, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x80AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_349)
{
    // 2F982 0021;	
    // (育) CJK COMPATIBILITY IDEOGRAPH-2F982	[FB41 80B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F982, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x80B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_350)
{
    // 2F982 003F;	
    // (育) CJK COMPATIBILITY IDEOGRAPH-2F982	[FB41 80B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F982, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x80B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_351)
{
    // 2F982 0061;	
    // (育) CJK COMPATIBILITY IDEOGRAPH-2F982	[FB41 80B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F982, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x80B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_352)
{
    // 2F982 0041;	
    // (育) CJK COMPATIBILITY IDEOGRAPH-2F982	[FB41 80B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F982, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x80B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_353)
{
    // 2F982 0062;	
    // (育) CJK COMPATIBILITY IDEOGRAPH-2F982	[FB41 80B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F982, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x80B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_354)
{
    // 2F983 0021;	
    // (脃) CJK COMPATIBILITY IDEOGRAPH-2F983	[FB41 8103 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F983, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8103, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_355)
{
    // 2F983 003F;	
    // (脃) CJK COMPATIBILITY IDEOGRAPH-2F983	[FB41 8103 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F983, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8103, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_356)
{
    // 2F983 0061;	
    // (脃) CJK COMPATIBILITY IDEOGRAPH-2F983	[FB41 8103 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F983, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8103, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_357)
{
    // 2F983 0041;	
    // (脃) CJK COMPATIBILITY IDEOGRAPH-2F983	[FB41 8103 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F983, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8103, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_358)
{
    // 2F983 0062;	
    // (脃) CJK COMPATIBILITY IDEOGRAPH-2F983	[FB41 8103 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F983, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8103, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_359)
{
    // 2F985 0021;	
    // (脾) CJK COMPATIBILITY IDEOGRAPH-2F985	[FB41 813E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F985, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x813E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_360)
{
    // 2F985 003F;	
    // (脾) CJK COMPATIBILITY IDEOGRAPH-2F985	[FB41 813E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F985, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x813E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_361)
{
    // 2F985 0061;	
    // (脾) CJK COMPATIBILITY IDEOGRAPH-2F985	[FB41 813E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F985, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x813E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_362)
{
    // 2F985 0041;	
    // (脾) CJK COMPATIBILITY IDEOGRAPH-2F985	[FB41 813E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F985, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x813E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_363)
{
    // 2F985 0062;	
    // (脾) CJK COMPATIBILITY IDEOGRAPH-2F985	[FB41 813E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F985, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x813E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_364)
{
    // F926 0021;	
    // (臘) CJK COMPATIBILITY IDEOGRAPH-F926	[FB41 81D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF926, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x81D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_365)
{
    // F926 003F;	
    // (臘) CJK COMPATIBILITY IDEOGRAPH-F926	[FB41 81D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF926, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x81D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_366)
{
    // F926 0061;	
    // (臘) CJK COMPATIBILITY IDEOGRAPH-F926	[FB41 81D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF926, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x81D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_367)
{
    // F926 0041;	
    // (臘) CJK COMPATIBILITY IDEOGRAPH-F926	[FB41 81D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF926, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x81D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_368)
{
    // F926 0062;	
    // (臘) CJK COMPATIBILITY IDEOGRAPH-F926	[FB41 81D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF926, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x81D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_369)
{
    // 2F82 0021;	
    // (⾂) KANGXI RADICAL MINISTER	[FB41 81E3 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F82, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x81E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_370)
{
    // 2F82 003F;	
    // (⾂) KANGXI RADICAL MINISTER	[FB41 81E3 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F82, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x81E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_371)
{
    // 2F82 0061;	
    // (⾂) KANGXI RADICAL MINISTER	[FB41 81E3 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F82, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x81E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_372)
{
    // 2F82 0041;	
    // (⾂) KANGXI RADICAL MINISTER	[FB41 81E3 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F82, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x81E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_373)
{
    // 2F82 0062;	
    // (⾂) KANGXI RADICAL MINISTER	[FB41 81E3 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F82, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x81E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_374)
{
    // F9F6 0021;	
    // (臨) CJK COMPATIBILITY IDEOGRAPH-F9F6	[FB41 81E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9F6, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x81E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_375)
{
    // F9F6 003F;	
    // (臨) CJK COMPATIBILITY IDEOGRAPH-F9F6	[FB41 81E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9F6, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x81E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_376)
{
    // F9F6 0061;	
    // (臨) CJK COMPATIBILITY IDEOGRAPH-F9F6	[FB41 81E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9F6, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x81E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_377)
{
    // F9F6 0041;	
    // (臨) CJK COMPATIBILITY IDEOGRAPH-F9F6	[FB41 81E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9F6, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x81E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_378)
{
    // F9F6 0062;	
    // (臨) CJK COMPATIBILITY IDEOGRAPH-F9F6	[FB41 81E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9F6, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x81E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_379)
{
    // 2F83 0021;	
    // (⾃) KANGXI RADICAL SELF	[FB41 81EA 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F83, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x81EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_380)
{
    // 2F83 003F;	
    // (⾃) KANGXI RADICAL SELF	[FB41 81EA 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F83, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x81EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_381)
{
    // 2F83 0061;	
    // (⾃) KANGXI RADICAL SELF	[FB41 81EA 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F83, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x81EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_382)
{
    // 2F83 0041;	
    // (⾃) KANGXI RADICAL SELF	[FB41 81EA 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F83, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x81EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_383)
{
    // 2F83 0062;	
    // (⾃) KANGXI RADICAL SELF	[FB41 81EA 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F83, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x81EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_384)
{
    // FA5C 0021;	
    // (臭) CJK COMPATIBILITY IDEOGRAPH-FA5C	[FB41 81ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA5C, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x81ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_385)
{
    // FA5C 003F;	
    // (臭) CJK COMPATIBILITY IDEOGRAPH-FA5C	[FB41 81ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA5C, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x81ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_386)
{
    // FA5C 0061;	
    // (臭) CJK COMPATIBILITY IDEOGRAPH-FA5C	[FB41 81ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA5C, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x81ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_387)
{
    // FA5C 0041;	
    // (臭) CJK COMPATIBILITY IDEOGRAPH-FA5C	[FB41 81ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA5C, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x81ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_388)
{
    // FA5C 0062;	
    // (臭) CJK COMPATIBILITY IDEOGRAPH-FA5C	[FB41 81ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA5C, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x81ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_389)
{
    // 2F84 0021;	
    // (⾄) KANGXI RADICAL ARRIVE	[FB41 81F3 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F84, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x81F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_390)
{
    // 2F84 003F;	
    // (⾄) KANGXI RADICAL ARRIVE	[FB41 81F3 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F84, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x81F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_391)
{
    // 2F84 0061;	
    // (⾄) KANGXI RADICAL ARRIVE	[FB41 81F3 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F84, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x81F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_392)
{
    // 2F84 0041;	
    // (⾄) KANGXI RADICAL ARRIVE	[FB41 81F3 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F84, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x81F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_393)
{
    // 2F84 0062;	
    // (⾄) KANGXI RADICAL ARRIVE	[FB41 81F3 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F84, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x81F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_394)
{
    // 2F85 0021;	
    // (⾅) KANGXI RADICAL MORTAR	[FB41 81FC 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F85, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x81FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_395)
{
    // 2EBD 0021;	
    // (⺽) CJK RADICAL MORTAR	[FB41 81FC 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EBD, 0x0021 };
    uint32_t const ces[12] = { 0xFB41, 0x81FC, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_396)
{
    // 2F85 003F;	
    // (⾅) KANGXI RADICAL MORTAR	[FB41 81FC 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F85, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x81FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_397)
{
    // 2EBD 003F;	
    // (⺽) CJK RADICAL MORTAR	[FB41 81FC 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EBD, 0x003F };
    uint32_t const ces[12] = { 0xFB41, 0x81FC, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_398)
{
    // 2F85 0061;	
    // (⾅) KANGXI RADICAL MORTAR	[FB41 81FC 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F85, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x81FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_399)
{
    // 2F85 0041;	
    // (⾅) KANGXI RADICAL MORTAR	[FB41 81FC 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F85, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x81FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_400)
{
    // 2EBD 0061;	
    // (⺽) CJK RADICAL MORTAR	[FB41 81FC 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EBD, 0x0061 };
    uint32_t const ces[12] = { 0xFB41, 0x81FC, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_401)
{
    // 2EBD 0041;	
    // (⺽) CJK RADICAL MORTAR	[FB41 81FC 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2EBD, 0x0041 };
    uint32_t const ces[12] = { 0xFB41, 0x81FC, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_402)
{
    // 2F85 0062;	
    // (⾅) KANGXI RADICAL MORTAR	[FB41 81FC 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F85, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x81FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_403)
{
    // 2EBD 0062;	
    // (⺽) CJK RADICAL MORTAR	[FB41 81FC 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EBD, 0x0062 };
    uint32_t const ces[12] = { 0xFB41, 0x81FC, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_404)
{
    // 2F893 0021;	
    // (舁) CJK COMPATIBILITY IDEOGRAPH-2F893	[FB41 8201 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F893, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8201, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_405)
{
    // 2F98B 0021;	
    // (舁) CJK COMPATIBILITY IDEOGRAPH-2F98B	[FB41 8201 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F98B, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8201, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_406)
{
    // 2F893 003F;	
    // (舁) CJK COMPATIBILITY IDEOGRAPH-2F893	[FB41 8201 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F893, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8201, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_407)
{
    // 2F98B 003F;	
    // (舁) CJK COMPATIBILITY IDEOGRAPH-2F98B	[FB41 8201 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F98B, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8201, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_408)
{
    // 2F893 0061;	
    // (舁) CJK COMPATIBILITY IDEOGRAPH-2F893	[FB41 8201 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F893, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8201, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_409)
{
    // 2F98B 0061;	
    // (舁) CJK COMPATIBILITY IDEOGRAPH-2F98B	[FB41 8201 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F98B, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8201, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_410)
{
    // 2F893 0041;	
    // (舁) CJK COMPATIBILITY IDEOGRAPH-2F893	[FB41 8201 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F893, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8201, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_411)
{
    // 2F98B 0041;	
    // (舁) CJK COMPATIBILITY IDEOGRAPH-2F98B	[FB41 8201 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F98B, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8201, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_412)
{
    // 2F893 0062;	
    // (舁) CJK COMPATIBILITY IDEOGRAPH-2F893	[FB41 8201 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F893, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8201, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_413)
{
    // 2F98B 0062;	
    // (舁) CJK COMPATIBILITY IDEOGRAPH-2F98B	[FB41 8201 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F98B, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8201, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_414)
{
    // 2F98C 0021;	
    // (舄) CJK COMPATIBILITY IDEOGRAPH-2F98C	[FB41 8204 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F98C, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8204, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_415)
{
    // 2F98C 003F;	
    // (舄) CJK COMPATIBILITY IDEOGRAPH-2F98C	[FB41 8204 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F98C, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8204, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_416)
{
    // 2F98C 0061;	
    // (舄) CJK COMPATIBILITY IDEOGRAPH-2F98C	[FB41 8204 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F98C, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8204, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_417)
{
    // 2F98C 0041;	
    // (舄) CJK COMPATIBILITY IDEOGRAPH-2F98C	[FB41 8204 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F98C, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8204, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_418)
{
    // 2F98C 0062;	
    // (舄) CJK COMPATIBILITY IDEOGRAPH-2F98C	[FB41 8204 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F98C, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8204, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_419)
{
    // 2F86 0021;	
    // (⾆) KANGXI RADICAL TONGUE	[FB41 820C 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F86, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x820C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_420)
{
    // 2F86 003F;	
    // (⾆) KANGXI RADICAL TONGUE	[FB41 820C 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F86, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x820C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_421)
{
    // 2F86 0061;	
    // (⾆) KANGXI RADICAL TONGUE	[FB41 820C 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F86, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x820C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_422)
{
    // 2F86 0041;	
    // (⾆) KANGXI RADICAL TONGUE	[FB41 820C 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F86, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x820C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_423)
{
    // 2F86 0062;	
    // (⾆) KANGXI RADICAL TONGUE	[FB41 820C 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F86, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x820C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_424)
{
    // FA6D 0021;	
    // (舘) CJK COMPATIBILITY IDEOGRAPH-FA6D	[FB41 8218 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA6D, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8218, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_425)
{
    // FA6D 003F;	
    // (舘) CJK COMPATIBILITY IDEOGRAPH-FA6D	[FB41 8218 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA6D, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8218, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_426)
{
    // FA6D 0061;	
    // (舘) CJK COMPATIBILITY IDEOGRAPH-FA6D	[FB41 8218 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA6D, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8218, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_427)
{
    // FA6D 0041;	
    // (舘) CJK COMPATIBILITY IDEOGRAPH-FA6D	[FB41 8218 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA6D, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8218, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_428)
{
    // FA6D 0062;	
    // (舘) CJK COMPATIBILITY IDEOGRAPH-FA6D	[FB41 8218 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA6D, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8218, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_429)
{
    // 2F87 0021;	
    // (⾇) KANGXI RADICAL OPPOSE	[FB41 821B 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F87, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x821B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_430)
{
    // 2F87 003F;	
    // (⾇) KANGXI RADICAL OPPOSE	[FB41 821B 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F87, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x821B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_431)
{
    // 2F87 0061;	
    // (⾇) KANGXI RADICAL OPPOSE	[FB41 821B 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F87, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x821B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_432)
{
    // 2F87 0041;	
    // (⾇) KANGXI RADICAL OPPOSE	[FB41 821B 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F87, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x821B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_433)
{
    // 2F87 0062;	
    // (⾇) KANGXI RADICAL OPPOSE	[FB41 821B 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F87, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x821B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_434)
{
    // 2F88 0021;	
    // (⾈) KANGXI RADICAL BOAT	[FB41 821F 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F88, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x821F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_435)
{
    // 2F88 003F;	
    // (⾈) KANGXI RADICAL BOAT	[FB41 821F 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F88, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x821F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_436)
{
    // 2F88 0061;	
    // (⾈) KANGXI RADICAL BOAT	[FB41 821F 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F88, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x821F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_437)
{
    // 2F88 0041;	
    // (⾈) KANGXI RADICAL BOAT	[FB41 821F 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F88, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x821F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_438)
{
    // 2F88 0062;	
    // (⾈) KANGXI RADICAL BOAT	[FB41 821F 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F88, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x821F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_439)
{
    // 2F89 0021;	
    // (⾉) KANGXI RADICAL STOPPING	[FB41 826E 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F89, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x826E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_440)
{
    // 2F89 003F;	
    // (⾉) KANGXI RADICAL STOPPING	[FB41 826E 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F89, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x826E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_441)
{
    // 2F89 0061;	
    // (⾉) KANGXI RADICAL STOPPING	[FB41 826E 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F89, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x826E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_442)
{
    // 2F89 0041;	
    // (⾉) KANGXI RADICAL STOPPING	[FB41 826E 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F89, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x826E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_443)
{
    // 2F89 0062;	
    // (⾉) KANGXI RADICAL STOPPING	[FB41 826E 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F89, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x826E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_444)
{
    // F97C 0021;	
    // (良) CJK COMPATIBILITY IDEOGRAPH-F97C	[FB41 826F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF97C, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x826F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_445)
{
    // F97C 003F;	
    // (良) CJK COMPATIBILITY IDEOGRAPH-F97C	[FB41 826F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF97C, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x826F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_446)
{
    // F97C 0061;	
    // (良) CJK COMPATIBILITY IDEOGRAPH-F97C	[FB41 826F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF97C, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x826F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_447)
{
    // F97C 0041;	
    // (良) CJK COMPATIBILITY IDEOGRAPH-F97C	[FB41 826F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF97C, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x826F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_448)
{
    // F97C 0062;	
    // (良) CJK COMPATIBILITY IDEOGRAPH-F97C	[FB41 826F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF97C, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x826F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_449)
{
    // 2F8A 0021;	
    // (⾊) KANGXI RADICAL COLOR	[FB41 8272 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F8A, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8272, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_450)
{
    // 2F8A 003F;	
    // (⾊) KANGXI RADICAL COLOR	[FB41 8272 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F8A, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8272, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_451)
{
    // 2F8A 0061;	
    // (⾊) KANGXI RADICAL COLOR	[FB41 8272 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F8A, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8272, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_452)
{
    // 2F8A 0041;	
    // (⾊) KANGXI RADICAL COLOR	[FB41 8272 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F8A, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8272, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_453)
{
    // 2F8A 0062;	
    // (⾊) KANGXI RADICAL COLOR	[FB41 8272 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F8A, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8272, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_454)
{
    // 2F8B 0021;	
    // (⾋) KANGXI RADICAL GRASS	[FB41 8278 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F8B, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8278, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_455)
{
    // 2F8B 003F;	
    // (⾋) KANGXI RADICAL GRASS	[FB41 8278 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F8B, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8278, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_456)
{
    // 2F8B 0061;	
    // (⾋) KANGXI RADICAL GRASS	[FB41 8278 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F8B, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_457)
{
    // 2F8B 0041;	
    // (⾋) KANGXI RADICAL GRASS	[FB41 8278 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F8B, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_458)
{
    // 2F8B 0062;	
    // (⾋) KANGXI RADICAL GRASS	[FB41 8278 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F8B, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8278, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_459)
{
    // FA5D 0021;	
    // (艹) CJK COMPATIBILITY IDEOGRAPH-FA5D	[FB41 8279 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA5D, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8279, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_460)
{
    // FA5E 0021;	
    // (艹) CJK COMPATIBILITY IDEOGRAPH-FA5E	[FB41 8279 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA5E, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8279, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_461)
{
    // 2EBE 0021;	
    // (⺾) CJK RADICAL GRASS ONE	[FB41 8279 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EBE, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8279, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_462)
{
    // 2EBF 0021;	
    // (⺿) CJK RADICAL GRASS TWO	[FB41 8279 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EBF, 0x0021 };
    uint32_t const ces[12] = { 0xFB41, 0x8279, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_463)
{
    // 2EC0 0021;	
    // (⻀) CJK RADICAL GRASS THREE	[FB41 8279 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EC0, 0x0021 };
    uint32_t const ces[12] = { 0xFB41, 0x8279, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_464)
{
    // FA5D 003F;	
    // (艹) CJK COMPATIBILITY IDEOGRAPH-FA5D	[FB41 8279 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA5D, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8279, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_465)
{
    // FA5E 003F;	
    // (艹) CJK COMPATIBILITY IDEOGRAPH-FA5E	[FB41 8279 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA5E, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8279, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_466)
{
    // 2EBE 003F;	
    // (⺾) CJK RADICAL GRASS ONE	[FB41 8279 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EBE, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8279, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_467)
{
    // 2EBF 003F;	
    // (⺿) CJK RADICAL GRASS TWO	[FB41 8279 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EBF, 0x003F };
    uint32_t const ces[12] = { 0xFB41, 0x8279, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_468)
{
    // 2EC0 003F;	
    // (⻀) CJK RADICAL GRASS THREE	[FB41 8279 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EC0, 0x003F };
    uint32_t const ces[12] = { 0xFB41, 0x8279, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_469)
{
    // FA5D 0061;	
    // (艹) CJK COMPATIBILITY IDEOGRAPH-FA5D	[FB41 8279 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA5D, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8279, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_470)
{
    // FA5E 0061;	
    // (艹) CJK COMPATIBILITY IDEOGRAPH-FA5E	[FB41 8279 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA5E, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8279, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_471)
{
    // FA5D 0041;	
    // (艹) CJK COMPATIBILITY IDEOGRAPH-FA5D	[FB41 8279 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA5D, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8279, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_472)
{
    // FA5E 0041;	
    // (艹) CJK COMPATIBILITY IDEOGRAPH-FA5E	[FB41 8279 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA5E, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8279, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_473)
{
    // 2EBE 0061;	
    // (⺾) CJK RADICAL GRASS ONE	[FB41 8279 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EBE, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8279, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_474)
{
    // 2EBE 0041;	
    // (⺾) CJK RADICAL GRASS ONE	[FB41 8279 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EBE, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8279, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_475)
{
    // 2EBF 0061;	
    // (⺿) CJK RADICAL GRASS TWO	[FB41 8279 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EBF, 0x0061 };
    uint32_t const ces[12] = { 0xFB41, 0x8279, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_476)
{
    // 2EBF 0041;	
    // (⺿) CJK RADICAL GRASS TWO	[FB41 8279 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2EBF, 0x0041 };
    uint32_t const ces[12] = { 0xFB41, 0x8279, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_477)
{
    // 2EC0 0061;	
    // (⻀) CJK RADICAL GRASS THREE	[FB41 8279 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EC0, 0x0061 };
    uint32_t const ces[12] = { 0xFB41, 0x8279, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_478)
{
    // 2EC0 0041;	
    // (⻀) CJK RADICAL GRASS THREE	[FB41 8279 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2EC0, 0x0041 };
    uint32_t const ces[12] = { 0xFB41, 0x8279, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_479)
{
    // FA5D 0062;	
    // (艹) CJK COMPATIBILITY IDEOGRAPH-FA5D	[FB41 8279 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA5D, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8279, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_480)
{
    // FA5E 0062;	
    // (艹) CJK COMPATIBILITY IDEOGRAPH-FA5E	[FB41 8279 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA5E, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8279, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_481)
{
    // 2EBE 0062;	
    // (⺾) CJK RADICAL GRASS ONE	[FB41 8279 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EBE, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8279, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_482)
{
    // 2EBF 0062;	
    // (⺿) CJK RADICAL GRASS TWO	[FB41 8279 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EBF, 0x0062 };
    uint32_t const ces[12] = { 0xFB41, 0x8279, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_483)
{
    // 2EC0 0062;	
    // (⻀) CJK RADICAL GRASS THREE	[FB41 8279 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EC0, 0x0062 };
    uint32_t const ces[12] = { 0xFB41, 0x8279, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_484)
{
    // 2F990 0021;	
    // (芋) CJK COMPATIBILITY IDEOGRAPH-2F990	[FB41 828B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F990, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x828B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_485)
{
    // 2F990 003F;	
    // (芋) CJK COMPATIBILITY IDEOGRAPH-2F990	[FB41 828B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F990, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x828B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_486)
{
    // 2F990 0061;	
    // (芋) CJK COMPATIBILITY IDEOGRAPH-2F990	[FB41 828B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F990, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x828B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_487)
{
    // 2F990 0041;	
    // (芋) CJK COMPATIBILITY IDEOGRAPH-2F990	[FB41 828B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F990, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x828B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_488)
{
    // 2F990 0062;	
    // (芋) CJK COMPATIBILITY IDEOGRAPH-2F990	[FB41 828B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F990, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x828B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_489)
{
    // 2F98F 0021;	
    // (芑) CJK COMPATIBILITY IDEOGRAPH-2F98F	[FB41 8291 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F98F, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8291, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_490)
{
    // 2F98F 003F;	
    // (芑) CJK COMPATIBILITY IDEOGRAPH-2F98F	[FB41 8291 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F98F, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8291, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_491)
{
    // 2F98F 0061;	
    // (芑) CJK COMPATIBILITY IDEOGRAPH-2F98F	[FB41 8291 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F98F, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8291, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_492)
{
    // 2F98F 0041;	
    // (芑) CJK COMPATIBILITY IDEOGRAPH-2F98F	[FB41 8291 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F98F, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8291, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_493)
{
    // 2F98F 0062;	
    // (芑) CJK COMPATIBILITY IDEOGRAPH-2F98F	[FB41 8291 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F98F, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8291, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_494)
{
    // 2F991 0021;	
    // (芝) CJK COMPATIBILITY IDEOGRAPH-2F991	[FB41 829D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F991, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x829D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_495)
{
    // 2F991 003F;	
    // (芝) CJK COMPATIBILITY IDEOGRAPH-2F991	[FB41 829D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F991, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x829D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_496)
{
    // 2F991 0061;	
    // (芝) CJK COMPATIBILITY IDEOGRAPH-2F991	[FB41 829D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F991, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x829D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_497)
{
    // 2F991 0041;	
    // (芝) CJK COMPATIBILITY IDEOGRAPH-2F991	[FB41 829D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F991, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x829D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_498)
{
    // 2F991 0062;	
    // (芝) CJK COMPATIBILITY IDEOGRAPH-2F991	[FB41 829D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F991, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x829D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_322_499)
{
    // 2F993 0021;	
    // (花) CJK COMPATIBILITY IDEOGRAPH-2F993	[FB41 82B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F993, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x82B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

