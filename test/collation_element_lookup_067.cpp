// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_067_000)
{
    // 291F  ; [*0B1F.0020.0002] 
    // LEFTWARDS ARROW FROM BAR TO BLACK DIAMOND

    uint32_t const cps[1] = { 0x291f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb1f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_001)
{
    // 2920  ; [*0B20.0020.0002] 
    // RIGHTWARDS ARROW FROM BAR TO BLACK DIAMOND

    uint32_t const cps[1] = { 0x2920 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb20), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_002)
{
    // 2921  ; [*0B21.0020.0002] 
    // NORTH WEST AND SOUTH EAST ARROW

    uint32_t const cps[1] = { 0x2921 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb21), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_003)
{
    // 2922  ; [*0B22.0020.0002] 
    // NORTH EAST AND SOUTH WEST ARROW

    uint32_t const cps[1] = { 0x2922 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb22), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_004)
{
    // 2923  ; [*0B23.0020.0002] 
    // NORTH WEST ARROW WITH HOOK

    uint32_t const cps[1] = { 0x2923 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb23), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_005)
{
    // 2924  ; [*0B24.0020.0002] 
    // NORTH EAST ARROW WITH HOOK

    uint32_t const cps[1] = { 0x2924 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb24), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_006)
{
    // 2925  ; [*0B25.0020.0002] 
    // SOUTH EAST ARROW WITH HOOK

    uint32_t const cps[1] = { 0x2925 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb25), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_007)
{
    // 2926  ; [*0B26.0020.0002] 
    // SOUTH WEST ARROW WITH HOOK

    uint32_t const cps[1] = { 0x2926 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb26), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_008)
{
    // 2927  ; [*0B27.0020.0002] 
    // NORTH WEST ARROW AND NORTH EAST ARROW

    uint32_t const cps[1] = { 0x2927 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb27), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_009)
{
    // 2928  ; [*0B28.0020.0002] 
    // NORTH EAST ARROW AND SOUTH EAST ARROW

    uint32_t const cps[1] = { 0x2928 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb28), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_010)
{
    // 2929  ; [*0B29.0020.0002] 
    // SOUTH EAST ARROW AND SOUTH WEST ARROW

    uint32_t const cps[1] = { 0x2929 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb29), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_011)
{
    // 292A  ; [*0B2A.0020.0002] 
    // SOUTH WEST ARROW AND NORTH WEST ARROW

    uint32_t const cps[1] = { 0x292a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb2a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_012)
{
    // 292B  ; [*0B2B.0020.0002] 
    // RISING DIAGONAL CROSSING FALLING DIAGONAL

    uint32_t const cps[1] = { 0x292b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb2b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_013)
{
    // 292C  ; [*0B2C.0020.0002] 
    // FALLING DIAGONAL CROSSING RISING DIAGONAL

    uint32_t const cps[1] = { 0x292c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb2c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_014)
{
    // 292D  ; [*0B2D.0020.0002] 
    // SOUTH EAST ARROW CROSSING NORTH EAST ARROW

    uint32_t const cps[1] = { 0x292d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb2d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_015)
{
    // 292E  ; [*0B2E.0020.0002] 
    // NORTH EAST ARROW CROSSING SOUTH EAST ARROW

    uint32_t const cps[1] = { 0x292e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb2e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_016)
{
    // 292F  ; [*0B2F.0020.0002] 
    // FALLING DIAGONAL CROSSING NORTH EAST ARROW

    uint32_t const cps[1] = { 0x292f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb2f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_017)
{
    // 2930  ; [*0B30.0020.0002] 
    // RISING DIAGONAL CROSSING SOUTH EAST ARROW

    uint32_t const cps[1] = { 0x2930 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb30), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_018)
{
    // 2931  ; [*0B31.0020.0002] 
    // NORTH EAST ARROW CROSSING NORTH WEST ARROW

    uint32_t const cps[1] = { 0x2931 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb31), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_019)
{
    // 2932  ; [*0B32.0020.0002] 
    // NORTH WEST ARROW CROSSING NORTH EAST ARROW

    uint32_t const cps[1] = { 0x2932 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb32), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_020)
{
    // 2933  ; [*0B33.0020.0002] 
    // WAVE ARROW POINTING DIRECTLY RIGHT

    uint32_t const cps[1] = { 0x2933 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb33), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_021)
{
    // 2934  ; [*0B34.0020.0002] 
    // ARROW POINTING RIGHTWARDS THEN CURVING UPWARDS

    uint32_t const cps[1] = { 0x2934 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb34), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_022)
{
    // 2935  ; [*0B35.0020.0002] 
    // ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS

    uint32_t const cps[1] = { 0x2935 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb35), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_023)
{
    // 2936  ; [*0B36.0020.0002] 
    // ARROW POINTING DOWNWARDS THEN CURVING LEFTWARDS

    uint32_t const cps[1] = { 0x2936 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb36), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_024)
{
    // 2937  ; [*0B37.0020.0002] 
    // ARROW POINTING DOWNWARDS THEN CURVING RIGHTWARDS

    uint32_t const cps[1] = { 0x2937 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb37), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_025)
{
    // 2938  ; [*0B38.0020.0002] 
    // RIGHT-SIDE ARC CLOCKWISE ARROW

    uint32_t const cps[1] = { 0x2938 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb38), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_026)
{
    // 2939  ; [*0B39.0020.0002] 
    // LEFT-SIDE ARC ANTICLOCKWISE ARROW

    uint32_t const cps[1] = { 0x2939 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb39), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_027)
{
    // 293A  ; [*0B3A.0020.0002] 
    // TOP ARC ANTICLOCKWISE ARROW

    uint32_t const cps[1] = { 0x293a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb3a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_028)
{
    // 293B  ; [*0B3B.0020.0002] 
    // BOTTOM ARC ANTICLOCKWISE ARROW

    uint32_t const cps[1] = { 0x293b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb3b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_029)
{
    // 293C  ; [*0B3C.0020.0002] 
    // TOP ARC CLOCKWISE ARROW WITH MINUS

    uint32_t const cps[1] = { 0x293c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb3c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_030)
{
    // 293D  ; [*0B3D.0020.0002] 
    // TOP ARC ANTICLOCKWISE ARROW WITH PLUS

    uint32_t const cps[1] = { 0x293d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb3d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_031)
{
    // 293E  ; [*0B3E.0020.0002] 
    // LOWER RIGHT SEMICIRCULAR CLOCKWISE ARROW

    uint32_t const cps[1] = { 0x293e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb3e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_032)
{
    // 293F  ; [*0B3F.0020.0002] 
    // LOWER LEFT SEMICIRCULAR ANTICLOCKWISE ARROW

    uint32_t const cps[1] = { 0x293f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb3f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_033)
{
    // 2940  ; [*0B40.0020.0002] 
    // ANTICLOCKWISE CLOSED CIRCLE ARROW

    uint32_t const cps[1] = { 0x2940 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb40), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_034)
{
    // 2941  ; [*0B41.0020.0002] 
    // CLOCKWISE CLOSED CIRCLE ARROW

    uint32_t const cps[1] = { 0x2941 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb41), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_035)
{
    // 2942  ; [*0B42.0020.0002] 
    // RIGHTWARDS ARROW ABOVE SHORT LEFTWARDS ARROW

    uint32_t const cps[1] = { 0x2942 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb42), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_036)
{
    // 2943  ; [*0B43.0020.0002] 
    // LEFTWARDS ARROW ABOVE SHORT RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x2943 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb43), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_037)
{
    // 2944  ; [*0B44.0020.0002] 
    // SHORT RIGHTWARDS ARROW ABOVE LEFTWARDS ARROW

    uint32_t const cps[1] = { 0x2944 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb44), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_038)
{
    // 2945  ; [*0B45.0020.0002] 
    // RIGHTWARDS ARROW WITH PLUS BELOW

    uint32_t const cps[1] = { 0x2945 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb45), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_039)
{
    // 2946  ; [*0B46.0020.0002] 
    // LEFTWARDS ARROW WITH PLUS BELOW

    uint32_t const cps[1] = { 0x2946 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb46), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_040)
{
    // 2947  ; [*0B47.0020.0002] 
    // RIGHTWARDS ARROW THROUGH X

    uint32_t const cps[1] = { 0x2947 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb47), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_041)
{
    // 2948  ; [*0B48.0020.0002] 
    // LEFT RIGHT ARROW THROUGH SMALL CIRCLE

    uint32_t const cps[1] = { 0x2948 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb48), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_042)
{
    // 2949  ; [*0B49.0020.0002] 
    // UPWARDS TWO-HEADED ARROW FROM SMALL CIRCLE

    uint32_t const cps[1] = { 0x2949 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb49), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_043)
{
    // 294A  ; [*0B4A.0020.0002] 
    // LEFT BARB UP RIGHT BARB DOWN HARPOON

    uint32_t const cps[1] = { 0x294a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb4a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_044)
{
    // 294B  ; [*0B4B.0020.0002] 
    // LEFT BARB DOWN RIGHT BARB UP HARPOON

    uint32_t const cps[1] = { 0x294b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb4b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_045)
{
    // 294C  ; [*0B4C.0020.0002] 
    // UP BARB RIGHT DOWN BARB LEFT HARPOON

    uint32_t const cps[1] = { 0x294c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb4c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_046)
{
    // 294D  ; [*0B4D.0020.0002] 
    // UP BARB LEFT DOWN BARB RIGHT HARPOON

    uint32_t const cps[1] = { 0x294d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb4d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_047)
{
    // 294E  ; [*0B4E.0020.0002] 
    // LEFT BARB UP RIGHT BARB UP HARPOON

    uint32_t const cps[1] = { 0x294e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb4e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_048)
{
    // 294F  ; [*0B4F.0020.0002] 
    // UP BARB RIGHT DOWN BARB RIGHT HARPOON

    uint32_t const cps[1] = { 0x294f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb4f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_049)
{
    // 2950  ; [*0B50.0020.0002] 
    // LEFT BARB DOWN RIGHT BARB DOWN HARPOON

    uint32_t const cps[1] = { 0x2950 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb50), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_050)
{
    // 2951  ; [*0B51.0020.0002] 
    // UP BARB LEFT DOWN BARB LEFT HARPOON

    uint32_t const cps[1] = { 0x2951 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb51), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_051)
{
    // 2952  ; [*0B52.0020.0002] 
    // LEFTWARDS HARPOON WITH BARB UP TO BAR

    uint32_t const cps[1] = { 0x2952 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb52), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_052)
{
    // 2953  ; [*0B53.0020.0002] 
    // RIGHTWARDS HARPOON WITH BARB UP TO BAR

    uint32_t const cps[1] = { 0x2953 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb53), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_053)
{
    // 2954  ; [*0B54.0020.0002] 
    // UPWARDS HARPOON WITH BARB RIGHT TO BAR

    uint32_t const cps[1] = { 0x2954 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb54), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_054)
{
    // 2955  ; [*0B55.0020.0002] 
    // DOWNWARDS HARPOON WITH BARB RIGHT TO BAR

    uint32_t const cps[1] = { 0x2955 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb55), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_055)
{
    // 2956  ; [*0B56.0020.0002] 
    // LEFTWARDS HARPOON WITH BARB DOWN TO BAR

    uint32_t const cps[1] = { 0x2956 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb56), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_056)
{
    // 2957  ; [*0B57.0020.0002] 
    // RIGHTWARDS HARPOON WITH BARB DOWN TO BAR

    uint32_t const cps[1] = { 0x2957 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb57), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_057)
{
    // 2958  ; [*0B58.0020.0002] 
    // UPWARDS HARPOON WITH BARB LEFT TO BAR

    uint32_t const cps[1] = { 0x2958 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb58), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_058)
{
    // 2959  ; [*0B59.0020.0002] 
    // DOWNWARDS HARPOON WITH BARB LEFT TO BAR

    uint32_t const cps[1] = { 0x2959 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb59), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_059)
{
    // 295A  ; [*0B5A.0020.0002] 
    // LEFTWARDS HARPOON WITH BARB UP FROM BAR

    uint32_t const cps[1] = { 0x295a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb5a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_060)
{
    // 295B  ; [*0B5B.0020.0002] 
    // RIGHTWARDS HARPOON WITH BARB UP FROM BAR

    uint32_t const cps[1] = { 0x295b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb5b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_061)
{
    // 295C  ; [*0B5C.0020.0002] 
    // UPWARDS HARPOON WITH BARB RIGHT FROM BAR

    uint32_t const cps[1] = { 0x295c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb5c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_062)
{
    // 295D  ; [*0B5D.0020.0002] 
    // DOWNWARDS HARPOON WITH BARB RIGHT FROM BAR

    uint32_t const cps[1] = { 0x295d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb5d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_063)
{
    // 295E  ; [*0B5E.0020.0002] 
    // LEFTWARDS HARPOON WITH BARB DOWN FROM BAR

    uint32_t const cps[1] = { 0x295e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb5e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_064)
{
    // 295F  ; [*0B5F.0020.0002] 
    // RIGHTWARDS HARPOON WITH BARB DOWN FROM BAR

    uint32_t const cps[1] = { 0x295f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb5f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_065)
{
    // 2960  ; [*0B60.0020.0002] 
    // UPWARDS HARPOON WITH BARB LEFT FROM BAR

    uint32_t const cps[1] = { 0x2960 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb60), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_066)
{
    // 2961  ; [*0B61.0020.0002] 
    // DOWNWARDS HARPOON WITH BARB LEFT FROM BAR

    uint32_t const cps[1] = { 0x2961 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb61), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_067)
{
    // 2962  ; [*0B62.0020.0002] 
    // LEFTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB DOWN

    uint32_t const cps[1] = { 0x2962 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb62), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_068)
{
    // 2963  ; [*0B63.0020.0002] 
    // UPWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT

    uint32_t const cps[1] = { 0x2963 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb63), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_069)
{
    // 2964  ; [*0B64.0020.0002] 
    // RIGHTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB DOWN

    uint32_t const cps[1] = { 0x2964 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb64), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_070)
{
    // 2965  ; [*0B65.0020.0002] 
    // DOWNWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT

    uint32_t const cps[1] = { 0x2965 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb65), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_071)
{
    // 2966  ; [*0B66.0020.0002] 
    // LEFTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB UP

    uint32_t const cps[1] = { 0x2966 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb66), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_072)
{
    // 2967  ; [*0B67.0020.0002] 
    // LEFTWARDS HARPOON WITH BARB DOWN ABOVE RIGHTWARDS HARPOON WITH BARB DOWN

    uint32_t const cps[1] = { 0x2967 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb67), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_073)
{
    // 2968  ; [*0B68.0020.0002] 
    // RIGHTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB UP

    uint32_t const cps[1] = { 0x2968 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb68), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_074)
{
    // 2969  ; [*0B69.0020.0002] 
    // RIGHTWARDS HARPOON WITH BARB DOWN ABOVE LEFTWARDS HARPOON WITH BARB DOWN

    uint32_t const cps[1] = { 0x2969 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb69), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_075)
{
    // 296A  ; [*0B6A.0020.0002] 
    // LEFTWARDS HARPOON WITH BARB UP ABOVE LONG DASH

    uint32_t const cps[1] = { 0x296a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb6a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_076)
{
    // 296B  ; [*0B6B.0020.0002] 
    // LEFTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH

    uint32_t const cps[1] = { 0x296b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb6b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_077)
{
    // 296C  ; [*0B6C.0020.0002] 
    // RIGHTWARDS HARPOON WITH BARB UP ABOVE LONG DASH

    uint32_t const cps[1] = { 0x296c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb6c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_078)
{
    // 296D  ; [*0B6D.0020.0002] 
    // RIGHTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH

    uint32_t const cps[1] = { 0x296d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb6d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_079)
{
    // 296E  ; [*0B6E.0020.0002] 
    // UPWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT

    uint32_t const cps[1] = { 0x296e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb6e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_080)
{
    // 296F  ; [*0B6F.0020.0002] 
    // DOWNWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT

    uint32_t const cps[1] = { 0x296f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb6f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_081)
{
    // 2970  ; [*0B70.0020.0002] 
    // RIGHT DOUBLE ARROW WITH ROUNDED HEAD

    uint32_t const cps[1] = { 0x2970 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb70), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_082)
{
    // 2971  ; [*0B71.0020.0002] 
    // EQUALS SIGN ABOVE RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x2971 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb71), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_083)
{
    // 2972  ; [*0B72.0020.0002] 
    // TILDE OPERATOR ABOVE RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x2972 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb72), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_084)
{
    // 2973  ; [*0B73.0020.0002] 
    // LEFTWARDS ARROW ABOVE TILDE OPERATOR

    uint32_t const cps[1] = { 0x2973 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb73), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_085)
{
    // 2974  ; [*0B74.0020.0002] 
    // RIGHTWARDS ARROW ABOVE TILDE OPERATOR

    uint32_t const cps[1] = { 0x2974 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb74), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_086)
{
    // 2975  ; [*0B75.0020.0002] 
    // RIGHTWARDS ARROW ABOVE ALMOST EQUAL TO

    uint32_t const cps[1] = { 0x2975 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb75), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_087)
{
    // 2976  ; [*0B76.0020.0002] 
    // LESS-THAN ABOVE LEFTWARDS ARROW

    uint32_t const cps[1] = { 0x2976 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb76), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_088)
{
    // 2977  ; [*0B77.0020.0002] 
    // LEFTWARDS ARROW THROUGH LESS-THAN

    uint32_t const cps[1] = { 0x2977 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb77), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_089)
{
    // 2978  ; [*0B78.0020.0002] 
    // GREATER-THAN ABOVE RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x2978 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb78), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_090)
{
    // 2979  ; [*0B79.0020.0002] 
    // SUBSET ABOVE RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x2979 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb79), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_091)
{
    // 297A  ; [*0B7A.0020.0002] 
    // LEFTWARDS ARROW THROUGH SUBSET

    uint32_t const cps[1] = { 0x297a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb7a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_092)
{
    // 297B  ; [*0B7B.0020.0002] 
    // SUPERSET ABOVE LEFTWARDS ARROW

    uint32_t const cps[1] = { 0x297b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb7b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_093)
{
    // 297C  ; [*0B7C.0020.0002] 
    // LEFT FISH TAIL

    uint32_t const cps[1] = { 0x297c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb7c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_094)
{
    // 297D  ; [*0B7D.0020.0002] 
    // RIGHT FISH TAIL

    uint32_t const cps[1] = { 0x297d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb7d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_095)
{
    // 297E  ; [*0B7E.0020.0002] 
    // UP FISH TAIL

    uint32_t const cps[1] = { 0x297e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb7e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_096)
{
    // 297F  ; [*0B7F.0020.0002] 
    // DOWN FISH TAIL

    uint32_t const cps[1] = { 0x297f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb7f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_097)
{
    // 2980  ; [*0B80.0020.0002] 
    // TRIPLE VERTICAL BAR DELIMITER

    uint32_t const cps[1] = { 0x2980 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb80), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_098)
{
    // 2981  ; [*0B81.0020.0002] 
    // Z NOTATION SPOT

    uint32_t const cps[1] = { 0x2981 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb81), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_099)
{
    // 2982  ; [*0B82.0020.0002] 
    // Z NOTATION TYPE COLON

    uint32_t const cps[1] = { 0x2982 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb82), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_100)
{
    // 2983  ; [*032C.0020.0002] 
    // LEFT WHITE CURLY BRACKET

    uint32_t const cps[1] = { 0x2983 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x32c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_101)
{
    // 2984  ; [*032D.0020.0002] 
    // RIGHT WHITE CURLY BRACKET

    uint32_t const cps[1] = { 0x2984 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x32d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_102)
{
    // 2985  ; [*032E.0020.0002] 
    // LEFT WHITE PARENTHESIS

    uint32_t const cps[1] = { 0x2985 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x32e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_103)
{
    // 2986  ; [*032F.0020.0002] 
    // RIGHT WHITE PARENTHESIS

    uint32_t const cps[1] = { 0x2986 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x32f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_104)
{
    // 2987  ; [*0330.0020.0002] 
    // Z NOTATION LEFT IMAGE BRACKET

    uint32_t const cps[1] = { 0x2987 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x330), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_105)
{
    // 2988  ; [*0331.0020.0002] 
    // Z NOTATION RIGHT IMAGE BRACKET

    uint32_t const cps[1] = { 0x2988 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x331), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_106)
{
    // 2989  ; [*0332.0020.0002] 
    // Z NOTATION LEFT BINDING BRACKET

    uint32_t const cps[1] = { 0x2989 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x332), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_107)
{
    // 298A  ; [*0333.0020.0002] 
    // Z NOTATION RIGHT BINDING BRACKET

    uint32_t const cps[1] = { 0x298a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x333), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_108)
{
    // 298B  ; [*0334.0020.0002] 
    // LEFT SQUARE BRACKET WITH UNDERBAR

    uint32_t const cps[1] = { 0x298b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x334), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_109)
{
    // 298C  ; [*0335.0020.0002] 
    // RIGHT SQUARE BRACKET WITH UNDERBAR

    uint32_t const cps[1] = { 0x298c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x335), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_110)
{
    // 298D  ; [*0336.0020.0002] 
    // LEFT SQUARE BRACKET WITH TICK IN TOP CORNER

    uint32_t const cps[1] = { 0x298d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x336), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_111)
{
    // 298E  ; [*0337.0020.0002] 
    // RIGHT SQUARE BRACKET WITH TICK IN BOTTOM CORNER

    uint32_t const cps[1] = { 0x298e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x337), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_112)
{
    // 298F  ; [*0338.0020.0002] 
    // LEFT SQUARE BRACKET WITH TICK IN BOTTOM CORNER

    uint32_t const cps[1] = { 0x298f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x338), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_113)
{
    // 2990  ; [*0339.0020.0002] 
    // RIGHT SQUARE BRACKET WITH TICK IN TOP CORNER

    uint32_t const cps[1] = { 0x2990 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x339), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_114)
{
    // 2991  ; [*033A.0020.0002] 
    // LEFT ANGLE BRACKET WITH DOT

    uint32_t const cps[1] = { 0x2991 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_115)
{
    // 2992  ; [*033B.0020.0002] 
    // RIGHT ANGLE BRACKET WITH DOT

    uint32_t const cps[1] = { 0x2992 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_116)
{
    // 2993  ; [*033C.0020.0002] 
    // LEFT ARC LESS-THAN BRACKET

    uint32_t const cps[1] = { 0x2993 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_117)
{
    // 2994  ; [*033D.0020.0002] 
    // RIGHT ARC GREATER-THAN BRACKET

    uint32_t const cps[1] = { 0x2994 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_118)
{
    // 2995  ; [*033E.0020.0002] 
    // DOUBLE LEFT ARC GREATER-THAN BRACKET

    uint32_t const cps[1] = { 0x2995 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_119)
{
    // 2996  ; [*033F.0020.0002] 
    // DOUBLE RIGHT ARC LESS-THAN BRACKET

    uint32_t const cps[1] = { 0x2996 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_120)
{
    // 2997  ; [*0340.0020.0002] 
    // LEFT BLACK TORTOISE SHELL BRACKET

    uint32_t const cps[1] = { 0x2997 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x340), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_121)
{
    // 2998  ; [*0341.0020.0002] 
    // RIGHT BLACK TORTOISE SHELL BRACKET

    uint32_t const cps[1] = { 0x2998 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x341), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_122)
{
    // 2999  ; [*0B83.0020.0002] 
    // DOTTED FENCE

    uint32_t const cps[1] = { 0x2999 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb83), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_123)
{
    // 299A  ; [*0B84.0020.0002] 
    // VERTICAL ZIGZAG LINE

    uint32_t const cps[1] = { 0x299a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb84), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_124)
{
    // 299B  ; [*0B85.0020.0002] 
    // MEASURED ANGLE OPENING LEFT

    uint32_t const cps[1] = { 0x299b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb85), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_125)
{
    // 299C  ; [*0B86.0020.0002] 
    // RIGHT ANGLE VARIANT WITH SQUARE

    uint32_t const cps[1] = { 0x299c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb86), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_126)
{
    // 299D  ; [*0B87.0020.0002] 
    // MEASURED RIGHT ANGLE WITH DOT

    uint32_t const cps[1] = { 0x299d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb87), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_127)
{
    // 299E  ; [*0B88.0020.0002] 
    // ANGLE WITH S INSIDE

    uint32_t const cps[1] = { 0x299e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb88), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_128)
{
    // 299F  ; [*0B89.0020.0002] 
    // ACUTE ANGLE

    uint32_t const cps[1] = { 0x299f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb89), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_129)
{
    // 29A0  ; [*0B8A.0020.0002] 
    // SPHERICAL ANGLE OPENING LEFT

    uint32_t const cps[1] = { 0x29a0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb8a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_130)
{
    // 29A1  ; [*0B8B.0020.0002] 
    // SPHERICAL ANGLE OPENING UP

    uint32_t const cps[1] = { 0x29a1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_131)
{
    // 29A2  ; [*0B8C.0020.0002] 
    // TURNED ANGLE

    uint32_t const cps[1] = { 0x29a2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_132)
{
    // 29A3  ; [*0B8D.0020.0002] 
    // REVERSED ANGLE

    uint32_t const cps[1] = { 0x29a3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_133)
{
    // 29A4  ; [*0B8E.0020.0002] 
    // ANGLE WITH UNDERBAR

    uint32_t const cps[1] = { 0x29a4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_134)
{
    // 29A5  ; [*0B8F.0020.0002] 
    // REVERSED ANGLE WITH UNDERBAR

    uint32_t const cps[1] = { 0x29a5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_135)
{
    // 29A6  ; [*0B90.0020.0002] 
    // OBLIQUE ANGLE OPENING UP

    uint32_t const cps[1] = { 0x29a6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb90), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_136)
{
    // 29A7  ; [*0B91.0020.0002] 
    // OBLIQUE ANGLE OPENING DOWN

    uint32_t const cps[1] = { 0x29a7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb91), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_137)
{
    // 29A8  ; [*0B92.0020.0002] 
    // MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND RIGHT

    uint32_t const cps[1] = { 0x29a8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb92), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_138)
{
    // 29A9  ; [*0B93.0020.0002] 
    // MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND LEFT

    uint32_t const cps[1] = { 0x29a9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb93), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_139)
{
    // 29AA  ; [*0B94.0020.0002] 
    // MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND RIGHT

    uint32_t const cps[1] = { 0x29aa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb94), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_140)
{
    // 29AB  ; [*0B95.0020.0002] 
    // MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND LEFT

    uint32_t const cps[1] = { 0x29ab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb95), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_141)
{
    // 29AC  ; [*0B96.0020.0002] 
    // MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND UP

    uint32_t const cps[1] = { 0x29ac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb96), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_142)
{
    // 29AD  ; [*0B97.0020.0002] 
    // MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND UP

    uint32_t const cps[1] = { 0x29ad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb97), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_143)
{
    // 29AE  ; [*0B98.0020.0002] 
    // MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND DOWN

    uint32_t const cps[1] = { 0x29ae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb98), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_144)
{
    // 29AF  ; [*0B99.0020.0002] 
    // MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND DOWN

    uint32_t const cps[1] = { 0x29af };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb99), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_145)
{
    // 29B0  ; [*0B9A.0020.0002] 
    // REVERSED EMPTY SET

    uint32_t const cps[1] = { 0x29b0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb9a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_146)
{
    // 29B1  ; [*0B9B.0020.0002] 
    // EMPTY SET WITH OVERBAR

    uint32_t const cps[1] = { 0x29b1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb9b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_147)
{
    // 29B2  ; [*0B9C.0020.0002] 
    // EMPTY SET WITH SMALL CIRCLE ABOVE

    uint32_t const cps[1] = { 0x29b2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb9c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_148)
{
    // 29B3  ; [*0B9D.0020.0002] 
    // EMPTY SET WITH RIGHT ARROW ABOVE

    uint32_t const cps[1] = { 0x29b3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb9d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_067_149)
{
    // 29B4  ; [*0B9E.0020.0002] 
    // EMPTY SET WITH LEFT ARROW ABOVE

    uint32_t const cps[1] = { 0x29b4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xb9e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

