// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_389_000)
{
    // 4C11 003F;	
    // (䰑) CJK UNIFIED IDEOGRAPH-4C11	[FB80 CC11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C11, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_001)
{
    // 4C11 0061;	
    // (䰑) CJK UNIFIED IDEOGRAPH-4C11	[FB80 CC11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C11, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_002)
{
    // 4C11 0041;	
    // (䰑) CJK UNIFIED IDEOGRAPH-4C11	[FB80 CC11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C11, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_003)
{
    // 4C11 0062;	
    // (䰑) CJK UNIFIED IDEOGRAPH-4C11	[FB80 CC11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C11, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_004)
{
    // 4C12 0021;	
    // (䰒) CJK UNIFIED IDEOGRAPH-4C12	[FB80 CC12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C12, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_005)
{
    // 4C12 003F;	
    // (䰒) CJK UNIFIED IDEOGRAPH-4C12	[FB80 CC12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C12, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_006)
{
    // 4C12 0061;	
    // (䰒) CJK UNIFIED IDEOGRAPH-4C12	[FB80 CC12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C12, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_007)
{
    // 4C12 0041;	
    // (䰒) CJK UNIFIED IDEOGRAPH-4C12	[FB80 CC12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C12, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_008)
{
    // 4C12 0062;	
    // (䰒) CJK UNIFIED IDEOGRAPH-4C12	[FB80 CC12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C12, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_009)
{
    // 4C13 0021;	
    // (䰓) CJK UNIFIED IDEOGRAPH-4C13	[FB80 CC13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C13, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_010)
{
    // 4C13 003F;	
    // (䰓) CJK UNIFIED IDEOGRAPH-4C13	[FB80 CC13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C13, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_011)
{
    // 4C13 0061;	
    // (䰓) CJK UNIFIED IDEOGRAPH-4C13	[FB80 CC13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C13, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_012)
{
    // 4C13 0041;	
    // (䰓) CJK UNIFIED IDEOGRAPH-4C13	[FB80 CC13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C13, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_013)
{
    // 4C13 0062;	
    // (䰓) CJK UNIFIED IDEOGRAPH-4C13	[FB80 CC13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C13, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_014)
{
    // 4C14 0021;	
    // (䰔) CJK UNIFIED IDEOGRAPH-4C14	[FB80 CC14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C14, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_015)
{
    // 4C14 003F;	
    // (䰔) CJK UNIFIED IDEOGRAPH-4C14	[FB80 CC14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C14, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_016)
{
    // 4C14 0061;	
    // (䰔) CJK UNIFIED IDEOGRAPH-4C14	[FB80 CC14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C14, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_017)
{
    // 4C14 0041;	
    // (䰔) CJK UNIFIED IDEOGRAPH-4C14	[FB80 CC14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C14, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_018)
{
    // 4C14 0062;	
    // (䰔) CJK UNIFIED IDEOGRAPH-4C14	[FB80 CC14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C14, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_019)
{
    // 4C15 0021;	
    // (䰕) CJK UNIFIED IDEOGRAPH-4C15	[FB80 CC15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C15, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_020)
{
    // 4C15 003F;	
    // (䰕) CJK UNIFIED IDEOGRAPH-4C15	[FB80 CC15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C15, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_021)
{
    // 4C15 0061;	
    // (䰕) CJK UNIFIED IDEOGRAPH-4C15	[FB80 CC15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C15, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_022)
{
    // 4C15 0041;	
    // (䰕) CJK UNIFIED IDEOGRAPH-4C15	[FB80 CC15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C15, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_023)
{
    // 4C15 0062;	
    // (䰕) CJK UNIFIED IDEOGRAPH-4C15	[FB80 CC15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C15, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_024)
{
    // 4C16 0021;	
    // (䰖) CJK UNIFIED IDEOGRAPH-4C16	[FB80 CC16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C16, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_025)
{
    // 4C16 003F;	
    // (䰖) CJK UNIFIED IDEOGRAPH-4C16	[FB80 CC16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C16, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_026)
{
    // 4C16 0061;	
    // (䰖) CJK UNIFIED IDEOGRAPH-4C16	[FB80 CC16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C16, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_027)
{
    // 4C16 0041;	
    // (䰖) CJK UNIFIED IDEOGRAPH-4C16	[FB80 CC16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C16, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_028)
{
    // 4C16 0062;	
    // (䰖) CJK UNIFIED IDEOGRAPH-4C16	[FB80 CC16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C16, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_029)
{
    // 4C17 0021;	
    // (䰗) CJK UNIFIED IDEOGRAPH-4C17	[FB80 CC17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C17, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_030)
{
    // 4C17 003F;	
    // (䰗) CJK UNIFIED IDEOGRAPH-4C17	[FB80 CC17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C17, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_031)
{
    // 4C17 0061;	
    // (䰗) CJK UNIFIED IDEOGRAPH-4C17	[FB80 CC17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C17, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_032)
{
    // 4C17 0041;	
    // (䰗) CJK UNIFIED IDEOGRAPH-4C17	[FB80 CC17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C17, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_033)
{
    // 4C17 0062;	
    // (䰗) CJK UNIFIED IDEOGRAPH-4C17	[FB80 CC17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C17, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_034)
{
    // 4C18 0021;	
    // (䰘) CJK UNIFIED IDEOGRAPH-4C18	[FB80 CC18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C18, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_035)
{
    // 4C18 003F;	
    // (䰘) CJK UNIFIED IDEOGRAPH-4C18	[FB80 CC18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C18, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_036)
{
    // 4C18 0061;	
    // (䰘) CJK UNIFIED IDEOGRAPH-4C18	[FB80 CC18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C18, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_037)
{
    // 4C18 0041;	
    // (䰘) CJK UNIFIED IDEOGRAPH-4C18	[FB80 CC18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C18, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_038)
{
    // 4C18 0062;	
    // (䰘) CJK UNIFIED IDEOGRAPH-4C18	[FB80 CC18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C18, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_039)
{
    // 4C19 0021;	
    // (䰙) CJK UNIFIED IDEOGRAPH-4C19	[FB80 CC19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C19, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_040)
{
    // 4C19 003F;	
    // (䰙) CJK UNIFIED IDEOGRAPH-4C19	[FB80 CC19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C19, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_041)
{
    // 4C19 0061;	
    // (䰙) CJK UNIFIED IDEOGRAPH-4C19	[FB80 CC19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C19, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_042)
{
    // 4C19 0041;	
    // (䰙) CJK UNIFIED IDEOGRAPH-4C19	[FB80 CC19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C19, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_043)
{
    // 4C19 0062;	
    // (䰙) CJK UNIFIED IDEOGRAPH-4C19	[FB80 CC19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C19, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_044)
{
    // 4C1A 0021;	
    // (䰚) CJK UNIFIED IDEOGRAPH-4C1A	[FB80 CC1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C1A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_045)
{
    // 4C1A 003F;	
    // (䰚) CJK UNIFIED IDEOGRAPH-4C1A	[FB80 CC1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C1A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_046)
{
    // 4C1A 0061;	
    // (䰚) CJK UNIFIED IDEOGRAPH-4C1A	[FB80 CC1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C1A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_047)
{
    // 4C1A 0041;	
    // (䰚) CJK UNIFIED IDEOGRAPH-4C1A	[FB80 CC1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C1A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_048)
{
    // 4C1A 0062;	
    // (䰚) CJK UNIFIED IDEOGRAPH-4C1A	[FB80 CC1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C1A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_049)
{
    // 4C1B 0021;	
    // (䰛) CJK UNIFIED IDEOGRAPH-4C1B	[FB80 CC1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C1B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_050)
{
    // 4C1B 003F;	
    // (䰛) CJK UNIFIED IDEOGRAPH-4C1B	[FB80 CC1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C1B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_051)
{
    // 4C1B 0061;	
    // (䰛) CJK UNIFIED IDEOGRAPH-4C1B	[FB80 CC1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C1B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_052)
{
    // 4C1B 0041;	
    // (䰛) CJK UNIFIED IDEOGRAPH-4C1B	[FB80 CC1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C1B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_053)
{
    // 4C1B 0062;	
    // (䰛) CJK UNIFIED IDEOGRAPH-4C1B	[FB80 CC1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C1B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_054)
{
    // 4C1C 0021;	
    // (䰜) CJK UNIFIED IDEOGRAPH-4C1C	[FB80 CC1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C1C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_055)
{
    // 4C1C 003F;	
    // (䰜) CJK UNIFIED IDEOGRAPH-4C1C	[FB80 CC1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C1C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_056)
{
    // 4C1C 0061;	
    // (䰜) CJK UNIFIED IDEOGRAPH-4C1C	[FB80 CC1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C1C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_057)
{
    // 4C1C 0041;	
    // (䰜) CJK UNIFIED IDEOGRAPH-4C1C	[FB80 CC1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C1C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_058)
{
    // 4C1C 0062;	
    // (䰜) CJK UNIFIED IDEOGRAPH-4C1C	[FB80 CC1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C1C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_059)
{
    // 4C1D 0021;	
    // (䰝) CJK UNIFIED IDEOGRAPH-4C1D	[FB80 CC1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C1D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_060)
{
    // 4C1D 003F;	
    // (䰝) CJK UNIFIED IDEOGRAPH-4C1D	[FB80 CC1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C1D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_061)
{
    // 4C1D 0061;	
    // (䰝) CJK UNIFIED IDEOGRAPH-4C1D	[FB80 CC1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C1D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_062)
{
    // 4C1D 0041;	
    // (䰝) CJK UNIFIED IDEOGRAPH-4C1D	[FB80 CC1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C1D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_063)
{
    // 4C1D 0062;	
    // (䰝) CJK UNIFIED IDEOGRAPH-4C1D	[FB80 CC1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C1D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_064)
{
    // 4C1E 0021;	
    // (䰞) CJK UNIFIED IDEOGRAPH-4C1E	[FB80 CC1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C1E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_065)
{
    // 4C1E 003F;	
    // (䰞) CJK UNIFIED IDEOGRAPH-4C1E	[FB80 CC1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C1E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_066)
{
    // 4C1E 0061;	
    // (䰞) CJK UNIFIED IDEOGRAPH-4C1E	[FB80 CC1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C1E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_067)
{
    // 4C1E 0041;	
    // (䰞) CJK UNIFIED IDEOGRAPH-4C1E	[FB80 CC1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C1E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_068)
{
    // 4C1E 0062;	
    // (䰞) CJK UNIFIED IDEOGRAPH-4C1E	[FB80 CC1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C1E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_069)
{
    // 4C1F 0021;	
    // (䰟) CJK UNIFIED IDEOGRAPH-4C1F	[FB80 CC1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C1F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_070)
{
    // 4C1F 003F;	
    // (䰟) CJK UNIFIED IDEOGRAPH-4C1F	[FB80 CC1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C1F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_071)
{
    // 4C1F 0061;	
    // (䰟) CJK UNIFIED IDEOGRAPH-4C1F	[FB80 CC1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C1F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_072)
{
    // 4C1F 0041;	
    // (䰟) CJK UNIFIED IDEOGRAPH-4C1F	[FB80 CC1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C1F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_073)
{
    // 4C1F 0062;	
    // (䰟) CJK UNIFIED IDEOGRAPH-4C1F	[FB80 CC1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C1F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_074)
{
    // 4C20 0021;	
    // (䰠) CJK UNIFIED IDEOGRAPH-4C20	[FB80 CC20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C20, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_075)
{
    // 4C20 003F;	
    // (䰠) CJK UNIFIED IDEOGRAPH-4C20	[FB80 CC20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C20, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_076)
{
    // 4C20 0061;	
    // (䰠) CJK UNIFIED IDEOGRAPH-4C20	[FB80 CC20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C20, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_077)
{
    // 4C20 0041;	
    // (䰠) CJK UNIFIED IDEOGRAPH-4C20	[FB80 CC20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C20, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_078)
{
    // 4C20 0062;	
    // (䰠) CJK UNIFIED IDEOGRAPH-4C20	[FB80 CC20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C20, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_079)
{
    // 4C21 0021;	
    // (䰡) CJK UNIFIED IDEOGRAPH-4C21	[FB80 CC21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C21, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_080)
{
    // 4C21 003F;	
    // (䰡) CJK UNIFIED IDEOGRAPH-4C21	[FB80 CC21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C21, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_081)
{
    // 4C21 0061;	
    // (䰡) CJK UNIFIED IDEOGRAPH-4C21	[FB80 CC21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C21, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_082)
{
    // 4C21 0041;	
    // (䰡) CJK UNIFIED IDEOGRAPH-4C21	[FB80 CC21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C21, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_083)
{
    // 4C21 0062;	
    // (䰡) CJK UNIFIED IDEOGRAPH-4C21	[FB80 CC21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C21, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_084)
{
    // 4C22 0021;	
    // (䰢) CJK UNIFIED IDEOGRAPH-4C22	[FB80 CC22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C22, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_085)
{
    // 4C22 003F;	
    // (䰢) CJK UNIFIED IDEOGRAPH-4C22	[FB80 CC22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C22, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_086)
{
    // 4C22 0061;	
    // (䰢) CJK UNIFIED IDEOGRAPH-4C22	[FB80 CC22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C22, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_087)
{
    // 4C22 0041;	
    // (䰢) CJK UNIFIED IDEOGRAPH-4C22	[FB80 CC22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C22, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_088)
{
    // 4C22 0062;	
    // (䰢) CJK UNIFIED IDEOGRAPH-4C22	[FB80 CC22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C22, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_089)
{
    // 4C23 0021;	
    // (䰣) CJK UNIFIED IDEOGRAPH-4C23	[FB80 CC23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C23, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_090)
{
    // 4C23 003F;	
    // (䰣) CJK UNIFIED IDEOGRAPH-4C23	[FB80 CC23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C23, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_091)
{
    // 4C23 0061;	
    // (䰣) CJK UNIFIED IDEOGRAPH-4C23	[FB80 CC23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C23, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_092)
{
    // 4C23 0041;	
    // (䰣) CJK UNIFIED IDEOGRAPH-4C23	[FB80 CC23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C23, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_093)
{
    // 4C23 0062;	
    // (䰣) CJK UNIFIED IDEOGRAPH-4C23	[FB80 CC23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C23, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_094)
{
    // 4C24 0021;	
    // (䰤) CJK UNIFIED IDEOGRAPH-4C24	[FB80 CC24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C24, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_095)
{
    // 4C24 003F;	
    // (䰤) CJK UNIFIED IDEOGRAPH-4C24	[FB80 CC24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C24, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_096)
{
    // 4C24 0061;	
    // (䰤) CJK UNIFIED IDEOGRAPH-4C24	[FB80 CC24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C24, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_097)
{
    // 4C24 0041;	
    // (䰤) CJK UNIFIED IDEOGRAPH-4C24	[FB80 CC24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C24, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_098)
{
    // 4C24 0062;	
    // (䰤) CJK UNIFIED IDEOGRAPH-4C24	[FB80 CC24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C24, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_099)
{
    // 4C25 0021;	
    // (䰥) CJK UNIFIED IDEOGRAPH-4C25	[FB80 CC25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C25, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_100)
{
    // 4C25 003F;	
    // (䰥) CJK UNIFIED IDEOGRAPH-4C25	[FB80 CC25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C25, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_101)
{
    // 4C25 0061;	
    // (䰥) CJK UNIFIED IDEOGRAPH-4C25	[FB80 CC25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C25, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_102)
{
    // 4C25 0041;	
    // (䰥) CJK UNIFIED IDEOGRAPH-4C25	[FB80 CC25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C25, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_103)
{
    // 4C25 0062;	
    // (䰥) CJK UNIFIED IDEOGRAPH-4C25	[FB80 CC25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C25, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_104)
{
    // 4C26 0021;	
    // (䰦) CJK UNIFIED IDEOGRAPH-4C26	[FB80 CC26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C26, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_105)
{
    // 4C26 003F;	
    // (䰦) CJK UNIFIED IDEOGRAPH-4C26	[FB80 CC26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C26, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_106)
{
    // 4C26 0061;	
    // (䰦) CJK UNIFIED IDEOGRAPH-4C26	[FB80 CC26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C26, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_107)
{
    // 4C26 0041;	
    // (䰦) CJK UNIFIED IDEOGRAPH-4C26	[FB80 CC26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C26, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_108)
{
    // 4C26 0062;	
    // (䰦) CJK UNIFIED IDEOGRAPH-4C26	[FB80 CC26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C26, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_109)
{
    // 4C27 0021;	
    // (䰧) CJK UNIFIED IDEOGRAPH-4C27	[FB80 CC27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C27, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_110)
{
    // 4C27 003F;	
    // (䰧) CJK UNIFIED IDEOGRAPH-4C27	[FB80 CC27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C27, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_111)
{
    // 4C27 0061;	
    // (䰧) CJK UNIFIED IDEOGRAPH-4C27	[FB80 CC27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C27, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_112)
{
    // 4C27 0041;	
    // (䰧) CJK UNIFIED IDEOGRAPH-4C27	[FB80 CC27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C27, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_113)
{
    // 4C27 0062;	
    // (䰧) CJK UNIFIED IDEOGRAPH-4C27	[FB80 CC27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C27, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_114)
{
    // 4C28 0021;	
    // (䰨) CJK UNIFIED IDEOGRAPH-4C28	[FB80 CC28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C28, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_115)
{
    // 4C28 003F;	
    // (䰨) CJK UNIFIED IDEOGRAPH-4C28	[FB80 CC28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C28, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_116)
{
    // 4C28 0061;	
    // (䰨) CJK UNIFIED IDEOGRAPH-4C28	[FB80 CC28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C28, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_117)
{
    // 4C28 0041;	
    // (䰨) CJK UNIFIED IDEOGRAPH-4C28	[FB80 CC28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C28, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_118)
{
    // 4C28 0062;	
    // (䰨) CJK UNIFIED IDEOGRAPH-4C28	[FB80 CC28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C28, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_119)
{
    // 4C29 0021;	
    // (䰩) CJK UNIFIED IDEOGRAPH-4C29	[FB80 CC29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C29, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_120)
{
    // 4C29 003F;	
    // (䰩) CJK UNIFIED IDEOGRAPH-4C29	[FB80 CC29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C29, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_121)
{
    // 4C29 0061;	
    // (䰩) CJK UNIFIED IDEOGRAPH-4C29	[FB80 CC29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C29, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_122)
{
    // 4C29 0041;	
    // (䰩) CJK UNIFIED IDEOGRAPH-4C29	[FB80 CC29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C29, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_123)
{
    // 4C29 0062;	
    // (䰩) CJK UNIFIED IDEOGRAPH-4C29	[FB80 CC29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C29, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_124)
{
    // 4C2A 0021;	
    // (䰪) CJK UNIFIED IDEOGRAPH-4C2A	[FB80 CC2A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C2A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_125)
{
    // 4C2A 003F;	
    // (䰪) CJK UNIFIED IDEOGRAPH-4C2A	[FB80 CC2A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C2A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_126)
{
    // 4C2A 0061;	
    // (䰪) CJK UNIFIED IDEOGRAPH-4C2A	[FB80 CC2A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C2A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_127)
{
    // 4C2A 0041;	
    // (䰪) CJK UNIFIED IDEOGRAPH-4C2A	[FB80 CC2A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C2A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_128)
{
    // 4C2A 0062;	
    // (䰪) CJK UNIFIED IDEOGRAPH-4C2A	[FB80 CC2A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C2A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_129)
{
    // 4C2B 0021;	
    // (䰫) CJK UNIFIED IDEOGRAPH-4C2B	[FB80 CC2B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C2B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_130)
{
    // 4C2B 003F;	
    // (䰫) CJK UNIFIED IDEOGRAPH-4C2B	[FB80 CC2B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C2B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC2B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_131)
{
    // 4C2B 0061;	
    // (䰫) CJK UNIFIED IDEOGRAPH-4C2B	[FB80 CC2B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C2B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_132)
{
    // 4C2B 0041;	
    // (䰫) CJK UNIFIED IDEOGRAPH-4C2B	[FB80 CC2B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C2B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_133)
{
    // 4C2B 0062;	
    // (䰫) CJK UNIFIED IDEOGRAPH-4C2B	[FB80 CC2B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C2B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_134)
{
    // 4C2C 0021;	
    // (䰬) CJK UNIFIED IDEOGRAPH-4C2C	[FB80 CC2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C2C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_135)
{
    // 4C2C 003F;	
    // (䰬) CJK UNIFIED IDEOGRAPH-4C2C	[FB80 CC2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C2C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_136)
{
    // 4C2C 0061;	
    // (䰬) CJK UNIFIED IDEOGRAPH-4C2C	[FB80 CC2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C2C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_137)
{
    // 4C2C 0041;	
    // (䰬) CJK UNIFIED IDEOGRAPH-4C2C	[FB80 CC2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C2C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_138)
{
    // 4C2C 0062;	
    // (䰬) CJK UNIFIED IDEOGRAPH-4C2C	[FB80 CC2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C2C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_139)
{
    // 4C2D 0021;	
    // (䰭) CJK UNIFIED IDEOGRAPH-4C2D	[FB80 CC2D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C2D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_140)
{
    // 4C2D 003F;	
    // (䰭) CJK UNIFIED IDEOGRAPH-4C2D	[FB80 CC2D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C2D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_141)
{
    // 4C2D 0061;	
    // (䰭) CJK UNIFIED IDEOGRAPH-4C2D	[FB80 CC2D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C2D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_142)
{
    // 4C2D 0041;	
    // (䰭) CJK UNIFIED IDEOGRAPH-4C2D	[FB80 CC2D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C2D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_143)
{
    // 4C2D 0062;	
    // (䰭) CJK UNIFIED IDEOGRAPH-4C2D	[FB80 CC2D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C2D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_144)
{
    // 4C2E 0021;	
    // (䰮) CJK UNIFIED IDEOGRAPH-4C2E	[FB80 CC2E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C2E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_145)
{
    // 4C2E 003F;	
    // (䰮) CJK UNIFIED IDEOGRAPH-4C2E	[FB80 CC2E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C2E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_146)
{
    // 4C2E 0061;	
    // (䰮) CJK UNIFIED IDEOGRAPH-4C2E	[FB80 CC2E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C2E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_147)
{
    // 4C2E 0041;	
    // (䰮) CJK UNIFIED IDEOGRAPH-4C2E	[FB80 CC2E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C2E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_148)
{
    // 4C2E 0062;	
    // (䰮) CJK UNIFIED IDEOGRAPH-4C2E	[FB80 CC2E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C2E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_149)
{
    // 4C2F 0021;	
    // (䰯) CJK UNIFIED IDEOGRAPH-4C2F	[FB80 CC2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C2F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_150)
{
    // 4C2F 003F;	
    // (䰯) CJK UNIFIED IDEOGRAPH-4C2F	[FB80 CC2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C2F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_151)
{
    // 4C2F 0061;	
    // (䰯) CJK UNIFIED IDEOGRAPH-4C2F	[FB80 CC2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C2F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_152)
{
    // 4C2F 0041;	
    // (䰯) CJK UNIFIED IDEOGRAPH-4C2F	[FB80 CC2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C2F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_153)
{
    // 4C2F 0062;	
    // (䰯) CJK UNIFIED IDEOGRAPH-4C2F	[FB80 CC2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C2F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_154)
{
    // 4C30 0021;	
    // (䰰) CJK UNIFIED IDEOGRAPH-4C30	[FB80 CC30 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C30, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_155)
{
    // 4C30 003F;	
    // (䰰) CJK UNIFIED IDEOGRAPH-4C30	[FB80 CC30 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C30, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_156)
{
    // 4C30 0061;	
    // (䰰) CJK UNIFIED IDEOGRAPH-4C30	[FB80 CC30 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C30, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_157)
{
    // 4C30 0041;	
    // (䰰) CJK UNIFIED IDEOGRAPH-4C30	[FB80 CC30 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C30, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_158)
{
    // 4C30 0062;	
    // (䰰) CJK UNIFIED IDEOGRAPH-4C30	[FB80 CC30 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C30, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_159)
{
    // 4C31 0021;	
    // (䰱) CJK UNIFIED IDEOGRAPH-4C31	[FB80 CC31 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C31, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_160)
{
    // 4C31 003F;	
    // (䰱) CJK UNIFIED IDEOGRAPH-4C31	[FB80 CC31 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C31, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_161)
{
    // 4C31 0061;	
    // (䰱) CJK UNIFIED IDEOGRAPH-4C31	[FB80 CC31 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C31, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_162)
{
    // 4C31 0041;	
    // (䰱) CJK UNIFIED IDEOGRAPH-4C31	[FB80 CC31 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C31, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_163)
{
    // 4C31 0062;	
    // (䰱) CJK UNIFIED IDEOGRAPH-4C31	[FB80 CC31 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C31, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_164)
{
    // 4C32 0021;	
    // (䰲) CJK UNIFIED IDEOGRAPH-4C32	[FB80 CC32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C32, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_165)
{
    // 4C32 003F;	
    // (䰲) CJK UNIFIED IDEOGRAPH-4C32	[FB80 CC32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C32, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_166)
{
    // 4C32 0061;	
    // (䰲) CJK UNIFIED IDEOGRAPH-4C32	[FB80 CC32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C32, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_167)
{
    // 4C32 0041;	
    // (䰲) CJK UNIFIED IDEOGRAPH-4C32	[FB80 CC32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C32, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_168)
{
    // 4C32 0062;	
    // (䰲) CJK UNIFIED IDEOGRAPH-4C32	[FB80 CC32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C32, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_169)
{
    // 4C33 0021;	
    // (䰳) CJK UNIFIED IDEOGRAPH-4C33	[FB80 CC33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C33, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_170)
{
    // 4C33 003F;	
    // (䰳) CJK UNIFIED IDEOGRAPH-4C33	[FB80 CC33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C33, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_171)
{
    // 4C33 0061;	
    // (䰳) CJK UNIFIED IDEOGRAPH-4C33	[FB80 CC33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C33, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_172)
{
    // 4C33 0041;	
    // (䰳) CJK UNIFIED IDEOGRAPH-4C33	[FB80 CC33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C33, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_173)
{
    // 4C33 0062;	
    // (䰳) CJK UNIFIED IDEOGRAPH-4C33	[FB80 CC33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C33, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_174)
{
    // 4C34 0021;	
    // (䰴) CJK UNIFIED IDEOGRAPH-4C34	[FB80 CC34 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C34, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_175)
{
    // 4C34 003F;	
    // (䰴) CJK UNIFIED IDEOGRAPH-4C34	[FB80 CC34 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C34, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_176)
{
    // 4C34 0061;	
    // (䰴) CJK UNIFIED IDEOGRAPH-4C34	[FB80 CC34 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C34, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_177)
{
    // 4C34 0041;	
    // (䰴) CJK UNIFIED IDEOGRAPH-4C34	[FB80 CC34 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C34, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_178)
{
    // 4C34 0062;	
    // (䰴) CJK UNIFIED IDEOGRAPH-4C34	[FB80 CC34 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C34, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_179)
{
    // 4C35 0021;	
    // (䰵) CJK UNIFIED IDEOGRAPH-4C35	[FB80 CC35 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C35, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_180)
{
    // 4C35 003F;	
    // (䰵) CJK UNIFIED IDEOGRAPH-4C35	[FB80 CC35 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C35, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_181)
{
    // 4C35 0061;	
    // (䰵) CJK UNIFIED IDEOGRAPH-4C35	[FB80 CC35 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C35, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_182)
{
    // 4C35 0041;	
    // (䰵) CJK UNIFIED IDEOGRAPH-4C35	[FB80 CC35 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C35, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_183)
{
    // 4C35 0062;	
    // (䰵) CJK UNIFIED IDEOGRAPH-4C35	[FB80 CC35 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C35, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_184)
{
    // 4C36 0021;	
    // (䰶) CJK UNIFIED IDEOGRAPH-4C36	[FB80 CC36 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C36, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_185)
{
    // 4C36 003F;	
    // (䰶) CJK UNIFIED IDEOGRAPH-4C36	[FB80 CC36 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C36, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_186)
{
    // 4C36 0061;	
    // (䰶) CJK UNIFIED IDEOGRAPH-4C36	[FB80 CC36 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C36, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_187)
{
    // 4C36 0041;	
    // (䰶) CJK UNIFIED IDEOGRAPH-4C36	[FB80 CC36 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C36, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_188)
{
    // 4C36 0062;	
    // (䰶) CJK UNIFIED IDEOGRAPH-4C36	[FB80 CC36 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C36, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_189)
{
    // 4C37 0021;	
    // (䰷) CJK UNIFIED IDEOGRAPH-4C37	[FB80 CC37 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C37, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC37, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_190)
{
    // 4C37 003F;	
    // (䰷) CJK UNIFIED IDEOGRAPH-4C37	[FB80 CC37 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C37, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC37, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_191)
{
    // 4C37 0061;	
    // (䰷) CJK UNIFIED IDEOGRAPH-4C37	[FB80 CC37 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C37, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_192)
{
    // 4C37 0041;	
    // (䰷) CJK UNIFIED IDEOGRAPH-4C37	[FB80 CC37 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C37, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_193)
{
    // 4C37 0062;	
    // (䰷) CJK UNIFIED IDEOGRAPH-4C37	[FB80 CC37 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C37, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC37, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_194)
{
    // 4C38 0021;	
    // (䰸) CJK UNIFIED IDEOGRAPH-4C38	[FB80 CC38 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C38, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_195)
{
    // 4C38 003F;	
    // (䰸) CJK UNIFIED IDEOGRAPH-4C38	[FB80 CC38 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C38, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_196)
{
    // 4C38 0061;	
    // (䰸) CJK UNIFIED IDEOGRAPH-4C38	[FB80 CC38 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C38, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_197)
{
    // 4C38 0041;	
    // (䰸) CJK UNIFIED IDEOGRAPH-4C38	[FB80 CC38 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C38, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_198)
{
    // 4C38 0062;	
    // (䰸) CJK UNIFIED IDEOGRAPH-4C38	[FB80 CC38 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C38, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_199)
{
    // 4C39 0021;	
    // (䰹) CJK UNIFIED IDEOGRAPH-4C39	[FB80 CC39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C39, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_200)
{
    // 4C39 003F;	
    // (䰹) CJK UNIFIED IDEOGRAPH-4C39	[FB80 CC39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C39, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_201)
{
    // 4C39 0061;	
    // (䰹) CJK UNIFIED IDEOGRAPH-4C39	[FB80 CC39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C39, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_202)
{
    // 4C39 0041;	
    // (䰹) CJK UNIFIED IDEOGRAPH-4C39	[FB80 CC39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C39, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_203)
{
    // 4C39 0062;	
    // (䰹) CJK UNIFIED IDEOGRAPH-4C39	[FB80 CC39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C39, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_204)
{
    // 4C3A 0021;	
    // (䰺) CJK UNIFIED IDEOGRAPH-4C3A	[FB80 CC3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C3A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_205)
{
    // 4C3A 003F;	
    // (䰺) CJK UNIFIED IDEOGRAPH-4C3A	[FB80 CC3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C3A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_206)
{
    // 4C3A 0061;	
    // (䰺) CJK UNIFIED IDEOGRAPH-4C3A	[FB80 CC3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C3A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_207)
{
    // 4C3A 0041;	
    // (䰺) CJK UNIFIED IDEOGRAPH-4C3A	[FB80 CC3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C3A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_208)
{
    // 4C3A 0062;	
    // (䰺) CJK UNIFIED IDEOGRAPH-4C3A	[FB80 CC3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C3A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_209)
{
    // 4C3B 0021;	
    // (䰻) CJK UNIFIED IDEOGRAPH-4C3B	[FB80 CC3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C3B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_210)
{
    // 4C3B 003F;	
    // (䰻) CJK UNIFIED IDEOGRAPH-4C3B	[FB80 CC3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C3B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_211)
{
    // 4C3B 0061;	
    // (䰻) CJK UNIFIED IDEOGRAPH-4C3B	[FB80 CC3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C3B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_212)
{
    // 4C3B 0041;	
    // (䰻) CJK UNIFIED IDEOGRAPH-4C3B	[FB80 CC3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C3B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_213)
{
    // 4C3B 0062;	
    // (䰻) CJK UNIFIED IDEOGRAPH-4C3B	[FB80 CC3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C3B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_214)
{
    // 4C3C 0021;	
    // (䰼) CJK UNIFIED IDEOGRAPH-4C3C	[FB80 CC3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C3C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_215)
{
    // 4C3C 003F;	
    // (䰼) CJK UNIFIED IDEOGRAPH-4C3C	[FB80 CC3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C3C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_216)
{
    // 4C3C 0061;	
    // (䰼) CJK UNIFIED IDEOGRAPH-4C3C	[FB80 CC3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C3C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_217)
{
    // 4C3C 0041;	
    // (䰼) CJK UNIFIED IDEOGRAPH-4C3C	[FB80 CC3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C3C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_218)
{
    // 4C3C 0062;	
    // (䰼) CJK UNIFIED IDEOGRAPH-4C3C	[FB80 CC3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C3C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_219)
{
    // 4C3D 0021;	
    // (䰽) CJK UNIFIED IDEOGRAPH-4C3D	[FB80 CC3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C3D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_220)
{
    // 4C3D 003F;	
    // (䰽) CJK UNIFIED IDEOGRAPH-4C3D	[FB80 CC3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C3D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_221)
{
    // 4C3D 0061;	
    // (䰽) CJK UNIFIED IDEOGRAPH-4C3D	[FB80 CC3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C3D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_222)
{
    // 4C3D 0041;	
    // (䰽) CJK UNIFIED IDEOGRAPH-4C3D	[FB80 CC3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C3D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_223)
{
    // 4C3D 0062;	
    // (䰽) CJK UNIFIED IDEOGRAPH-4C3D	[FB80 CC3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C3D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_224)
{
    // 4C3E 0021;	
    // (䰾) CJK UNIFIED IDEOGRAPH-4C3E	[FB80 CC3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C3E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_225)
{
    // 4C3E 003F;	
    // (䰾) CJK UNIFIED IDEOGRAPH-4C3E	[FB80 CC3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C3E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_226)
{
    // 4C3E 0061;	
    // (䰾) CJK UNIFIED IDEOGRAPH-4C3E	[FB80 CC3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C3E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_227)
{
    // 4C3E 0041;	
    // (䰾) CJK UNIFIED IDEOGRAPH-4C3E	[FB80 CC3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C3E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_228)
{
    // 4C3E 0062;	
    // (䰾) CJK UNIFIED IDEOGRAPH-4C3E	[FB80 CC3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C3E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_229)
{
    // 4C3F 0021;	
    // (䰿) CJK UNIFIED IDEOGRAPH-4C3F	[FB80 CC3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C3F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_230)
{
    // 4C3F 003F;	
    // (䰿) CJK UNIFIED IDEOGRAPH-4C3F	[FB80 CC3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C3F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_231)
{
    // 4C3F 0061;	
    // (䰿) CJK UNIFIED IDEOGRAPH-4C3F	[FB80 CC3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C3F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_232)
{
    // 4C3F 0041;	
    // (䰿) CJK UNIFIED IDEOGRAPH-4C3F	[FB80 CC3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C3F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_233)
{
    // 4C3F 0062;	
    // (䰿) CJK UNIFIED IDEOGRAPH-4C3F	[FB80 CC3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C3F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_234)
{
    // 4C40 0021;	
    // (䱀) CJK UNIFIED IDEOGRAPH-4C40	[FB80 CC40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C40, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_235)
{
    // 4C40 003F;	
    // (䱀) CJK UNIFIED IDEOGRAPH-4C40	[FB80 CC40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C40, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_236)
{
    // 4C40 0061;	
    // (䱀) CJK UNIFIED IDEOGRAPH-4C40	[FB80 CC40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C40, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_237)
{
    // 4C40 0041;	
    // (䱀) CJK UNIFIED IDEOGRAPH-4C40	[FB80 CC40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C40, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_238)
{
    // 4C40 0062;	
    // (䱀) CJK UNIFIED IDEOGRAPH-4C40	[FB80 CC40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C40, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_239)
{
    // 4C41 0021;	
    // (䱁) CJK UNIFIED IDEOGRAPH-4C41	[FB80 CC41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C41, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_240)
{
    // 4C41 003F;	
    // (䱁) CJK UNIFIED IDEOGRAPH-4C41	[FB80 CC41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C41, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_241)
{
    // 4C41 0061;	
    // (䱁) CJK UNIFIED IDEOGRAPH-4C41	[FB80 CC41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C41, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_242)
{
    // 4C41 0041;	
    // (䱁) CJK UNIFIED IDEOGRAPH-4C41	[FB80 CC41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C41, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_243)
{
    // 4C41 0062;	
    // (䱁) CJK UNIFIED IDEOGRAPH-4C41	[FB80 CC41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C41, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_244)
{
    // 4C42 0021;	
    // (䱂) CJK UNIFIED IDEOGRAPH-4C42	[FB80 CC42 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C42, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_245)
{
    // 4C42 003F;	
    // (䱂) CJK UNIFIED IDEOGRAPH-4C42	[FB80 CC42 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C42, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_246)
{
    // 4C42 0061;	
    // (䱂) CJK UNIFIED IDEOGRAPH-4C42	[FB80 CC42 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C42, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_247)
{
    // 4C42 0041;	
    // (䱂) CJK UNIFIED IDEOGRAPH-4C42	[FB80 CC42 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C42, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_248)
{
    // 4C42 0062;	
    // (䱂) CJK UNIFIED IDEOGRAPH-4C42	[FB80 CC42 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C42, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_249)
{
    // 4C43 0021;	
    // (䱃) CJK UNIFIED IDEOGRAPH-4C43	[FB80 CC43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C43, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_250)
{
    // 4C43 003F;	
    // (䱃) CJK UNIFIED IDEOGRAPH-4C43	[FB80 CC43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C43, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_251)
{
    // 4C43 0061;	
    // (䱃) CJK UNIFIED IDEOGRAPH-4C43	[FB80 CC43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C43, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_252)
{
    // 4C43 0041;	
    // (䱃) CJK UNIFIED IDEOGRAPH-4C43	[FB80 CC43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C43, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_253)
{
    // 4C43 0062;	
    // (䱃) CJK UNIFIED IDEOGRAPH-4C43	[FB80 CC43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C43, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_254)
{
    // 4C44 0021;	
    // (䱄) CJK UNIFIED IDEOGRAPH-4C44	[FB80 CC44 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C44, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_255)
{
    // 4C44 003F;	
    // (䱄) CJK UNIFIED IDEOGRAPH-4C44	[FB80 CC44 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C44, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_256)
{
    // 4C44 0061;	
    // (䱄) CJK UNIFIED IDEOGRAPH-4C44	[FB80 CC44 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C44, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_257)
{
    // 4C44 0041;	
    // (䱄) CJK UNIFIED IDEOGRAPH-4C44	[FB80 CC44 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C44, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_258)
{
    // 4C44 0062;	
    // (䱄) CJK UNIFIED IDEOGRAPH-4C44	[FB80 CC44 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C44, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_259)
{
    // 4C45 0021;	
    // (䱅) CJK UNIFIED IDEOGRAPH-4C45	[FB80 CC45 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C45, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC45, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_260)
{
    // 4C45 003F;	
    // (䱅) CJK UNIFIED IDEOGRAPH-4C45	[FB80 CC45 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C45, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC45, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_261)
{
    // 4C45 0061;	
    // (䱅) CJK UNIFIED IDEOGRAPH-4C45	[FB80 CC45 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C45, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_262)
{
    // 4C45 0041;	
    // (䱅) CJK UNIFIED IDEOGRAPH-4C45	[FB80 CC45 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C45, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_263)
{
    // 4C45 0062;	
    // (䱅) CJK UNIFIED IDEOGRAPH-4C45	[FB80 CC45 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C45, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC45, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_264)
{
    // 4C46 0021;	
    // (䱆) CJK UNIFIED IDEOGRAPH-4C46	[FB80 CC46 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C46, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC46, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_265)
{
    // 4C46 003F;	
    // (䱆) CJK UNIFIED IDEOGRAPH-4C46	[FB80 CC46 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C46, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC46, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_266)
{
    // 4C46 0061;	
    // (䱆) CJK UNIFIED IDEOGRAPH-4C46	[FB80 CC46 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C46, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_267)
{
    // 4C46 0041;	
    // (䱆) CJK UNIFIED IDEOGRAPH-4C46	[FB80 CC46 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C46, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_268)
{
    // 4C46 0062;	
    // (䱆) CJK UNIFIED IDEOGRAPH-4C46	[FB80 CC46 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C46, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC46, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_269)
{
    // 4C47 0021;	
    // (䱇) CJK UNIFIED IDEOGRAPH-4C47	[FB80 CC47 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C47, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_270)
{
    // 4C47 003F;	
    // (䱇) CJK UNIFIED IDEOGRAPH-4C47	[FB80 CC47 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C47, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_271)
{
    // 4C47 0061;	
    // (䱇) CJK UNIFIED IDEOGRAPH-4C47	[FB80 CC47 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C47, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_272)
{
    // 4C47 0041;	
    // (䱇) CJK UNIFIED IDEOGRAPH-4C47	[FB80 CC47 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C47, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_273)
{
    // 4C47 0062;	
    // (䱇) CJK UNIFIED IDEOGRAPH-4C47	[FB80 CC47 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C47, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_274)
{
    // 4C48 0021;	
    // (䱈) CJK UNIFIED IDEOGRAPH-4C48	[FB80 CC48 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C48, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_275)
{
    // 4C48 003F;	
    // (䱈) CJK UNIFIED IDEOGRAPH-4C48	[FB80 CC48 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C48, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_276)
{
    // 4C48 0061;	
    // (䱈) CJK UNIFIED IDEOGRAPH-4C48	[FB80 CC48 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C48, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_277)
{
    // 4C48 0041;	
    // (䱈) CJK UNIFIED IDEOGRAPH-4C48	[FB80 CC48 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C48, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_278)
{
    // 4C48 0062;	
    // (䱈) CJK UNIFIED IDEOGRAPH-4C48	[FB80 CC48 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C48, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_279)
{
    // 4C49 0021;	
    // (䱉) CJK UNIFIED IDEOGRAPH-4C49	[FB80 CC49 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C49, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_280)
{
    // 4C49 003F;	
    // (䱉) CJK UNIFIED IDEOGRAPH-4C49	[FB80 CC49 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C49, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_281)
{
    // 4C49 0061;	
    // (䱉) CJK UNIFIED IDEOGRAPH-4C49	[FB80 CC49 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C49, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_282)
{
    // 4C49 0041;	
    // (䱉) CJK UNIFIED IDEOGRAPH-4C49	[FB80 CC49 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C49, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_283)
{
    // 4C49 0062;	
    // (䱉) CJK UNIFIED IDEOGRAPH-4C49	[FB80 CC49 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C49, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_284)
{
    // 4C4A 0021;	
    // (䱊) CJK UNIFIED IDEOGRAPH-4C4A	[FB80 CC4A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C4A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_285)
{
    // 4C4A 003F;	
    // (䱊) CJK UNIFIED IDEOGRAPH-4C4A	[FB80 CC4A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C4A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_286)
{
    // 4C4A 0061;	
    // (䱊) CJK UNIFIED IDEOGRAPH-4C4A	[FB80 CC4A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C4A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_287)
{
    // 4C4A 0041;	
    // (䱊) CJK UNIFIED IDEOGRAPH-4C4A	[FB80 CC4A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C4A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_288)
{
    // 4C4A 0062;	
    // (䱊) CJK UNIFIED IDEOGRAPH-4C4A	[FB80 CC4A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C4A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_289)
{
    // 4C4B 0021;	
    // (䱋) CJK UNIFIED IDEOGRAPH-4C4B	[FB80 CC4B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C4B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_290)
{
    // 4C4B 003F;	
    // (䱋) CJK UNIFIED IDEOGRAPH-4C4B	[FB80 CC4B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C4B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_291)
{
    // 4C4B 0061;	
    // (䱋) CJK UNIFIED IDEOGRAPH-4C4B	[FB80 CC4B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C4B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_292)
{
    // 4C4B 0041;	
    // (䱋) CJK UNIFIED IDEOGRAPH-4C4B	[FB80 CC4B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C4B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_293)
{
    // 4C4B 0062;	
    // (䱋) CJK UNIFIED IDEOGRAPH-4C4B	[FB80 CC4B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C4B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_294)
{
    // 4C4C 0021;	
    // (䱌) CJK UNIFIED IDEOGRAPH-4C4C	[FB80 CC4C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C4C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC4C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_295)
{
    // 4C4C 003F;	
    // (䱌) CJK UNIFIED IDEOGRAPH-4C4C	[FB80 CC4C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C4C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC4C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_296)
{
    // 4C4C 0061;	
    // (䱌) CJK UNIFIED IDEOGRAPH-4C4C	[FB80 CC4C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C4C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_297)
{
    // 4C4C 0041;	
    // (䱌) CJK UNIFIED IDEOGRAPH-4C4C	[FB80 CC4C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C4C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_298)
{
    // 4C4C 0062;	
    // (䱌) CJK UNIFIED IDEOGRAPH-4C4C	[FB80 CC4C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C4C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC4C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_299)
{
    // 4C4D 0021;	
    // (䱍) CJK UNIFIED IDEOGRAPH-4C4D	[FB80 CC4D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C4D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC4D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_300)
{
    // 4C4D 003F;	
    // (䱍) CJK UNIFIED IDEOGRAPH-4C4D	[FB80 CC4D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C4D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC4D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_301)
{
    // 4C4D 0061;	
    // (䱍) CJK UNIFIED IDEOGRAPH-4C4D	[FB80 CC4D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C4D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_302)
{
    // 4C4D 0041;	
    // (䱍) CJK UNIFIED IDEOGRAPH-4C4D	[FB80 CC4D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C4D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_303)
{
    // 4C4D 0062;	
    // (䱍) CJK UNIFIED IDEOGRAPH-4C4D	[FB80 CC4D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C4D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_304)
{
    // 4C4E 0021;	
    // (䱎) CJK UNIFIED IDEOGRAPH-4C4E	[FB80 CC4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C4E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_305)
{
    // 4C4E 003F;	
    // (䱎) CJK UNIFIED IDEOGRAPH-4C4E	[FB80 CC4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C4E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_306)
{
    // 4C4E 0061;	
    // (䱎) CJK UNIFIED IDEOGRAPH-4C4E	[FB80 CC4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C4E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_307)
{
    // 4C4E 0041;	
    // (䱎) CJK UNIFIED IDEOGRAPH-4C4E	[FB80 CC4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C4E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_308)
{
    // 4C4E 0062;	
    // (䱎) CJK UNIFIED IDEOGRAPH-4C4E	[FB80 CC4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C4E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_309)
{
    // 4C4F 0021;	
    // (䱏) CJK UNIFIED IDEOGRAPH-4C4F	[FB80 CC4F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C4F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_310)
{
    // 4C4F 003F;	
    // (䱏) CJK UNIFIED IDEOGRAPH-4C4F	[FB80 CC4F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C4F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_311)
{
    // 4C4F 0061;	
    // (䱏) CJK UNIFIED IDEOGRAPH-4C4F	[FB80 CC4F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C4F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_312)
{
    // 4C4F 0041;	
    // (䱏) CJK UNIFIED IDEOGRAPH-4C4F	[FB80 CC4F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C4F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_313)
{
    // 4C4F 0062;	
    // (䱏) CJK UNIFIED IDEOGRAPH-4C4F	[FB80 CC4F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C4F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_314)
{
    // 4C50 0021;	
    // (䱐) CJK UNIFIED IDEOGRAPH-4C50	[FB80 CC50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C50, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_315)
{
    // 4C50 003F;	
    // (䱐) CJK UNIFIED IDEOGRAPH-4C50	[FB80 CC50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C50, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_316)
{
    // 4C50 0061;	
    // (䱐) CJK UNIFIED IDEOGRAPH-4C50	[FB80 CC50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C50, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_317)
{
    // 4C50 0041;	
    // (䱐) CJK UNIFIED IDEOGRAPH-4C50	[FB80 CC50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C50, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_318)
{
    // 4C50 0062;	
    // (䱐) CJK UNIFIED IDEOGRAPH-4C50	[FB80 CC50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C50, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_319)
{
    // 4C51 0021;	
    // (䱑) CJK UNIFIED IDEOGRAPH-4C51	[FB80 CC51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C51, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_320)
{
    // 4C51 003F;	
    // (䱑) CJK UNIFIED IDEOGRAPH-4C51	[FB80 CC51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C51, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_321)
{
    // 4C51 0061;	
    // (䱑) CJK UNIFIED IDEOGRAPH-4C51	[FB80 CC51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C51, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_322)
{
    // 4C51 0041;	
    // (䱑) CJK UNIFIED IDEOGRAPH-4C51	[FB80 CC51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C51, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_323)
{
    // 4C51 0062;	
    // (䱑) CJK UNIFIED IDEOGRAPH-4C51	[FB80 CC51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C51, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_324)
{
    // 4C52 0021;	
    // (䱒) CJK UNIFIED IDEOGRAPH-4C52	[FB80 CC52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C52, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_325)
{
    // 4C52 003F;	
    // (䱒) CJK UNIFIED IDEOGRAPH-4C52	[FB80 CC52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C52, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_326)
{
    // 4C52 0061;	
    // (䱒) CJK UNIFIED IDEOGRAPH-4C52	[FB80 CC52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C52, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_327)
{
    // 4C52 0041;	
    // (䱒) CJK UNIFIED IDEOGRAPH-4C52	[FB80 CC52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C52, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_328)
{
    // 4C52 0062;	
    // (䱒) CJK UNIFIED IDEOGRAPH-4C52	[FB80 CC52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C52, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_329)
{
    // 4C53 0021;	
    // (䱓) CJK UNIFIED IDEOGRAPH-4C53	[FB80 CC53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C53, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_330)
{
    // 4C53 003F;	
    // (䱓) CJK UNIFIED IDEOGRAPH-4C53	[FB80 CC53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C53, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_331)
{
    // 4C53 0061;	
    // (䱓) CJK UNIFIED IDEOGRAPH-4C53	[FB80 CC53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C53, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_332)
{
    // 4C53 0041;	
    // (䱓) CJK UNIFIED IDEOGRAPH-4C53	[FB80 CC53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C53, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_333)
{
    // 4C53 0062;	
    // (䱓) CJK UNIFIED IDEOGRAPH-4C53	[FB80 CC53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C53, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_334)
{
    // 4C54 0021;	
    // (䱔) CJK UNIFIED IDEOGRAPH-4C54	[FB80 CC54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C54, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_335)
{
    // 4C54 003F;	
    // (䱔) CJK UNIFIED IDEOGRAPH-4C54	[FB80 CC54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C54, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_336)
{
    // 4C54 0061;	
    // (䱔) CJK UNIFIED IDEOGRAPH-4C54	[FB80 CC54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C54, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_337)
{
    // 4C54 0041;	
    // (䱔) CJK UNIFIED IDEOGRAPH-4C54	[FB80 CC54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C54, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_338)
{
    // 4C54 0062;	
    // (䱔) CJK UNIFIED IDEOGRAPH-4C54	[FB80 CC54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C54, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_339)
{
    // 4C55 0021;	
    // (䱕) CJK UNIFIED IDEOGRAPH-4C55	[FB80 CC55 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C55, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_340)
{
    // 4C55 003F;	
    // (䱕) CJK UNIFIED IDEOGRAPH-4C55	[FB80 CC55 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C55, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_341)
{
    // 4C55 0061;	
    // (䱕) CJK UNIFIED IDEOGRAPH-4C55	[FB80 CC55 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C55, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_342)
{
    // 4C55 0041;	
    // (䱕) CJK UNIFIED IDEOGRAPH-4C55	[FB80 CC55 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C55, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_343)
{
    // 4C55 0062;	
    // (䱕) CJK UNIFIED IDEOGRAPH-4C55	[FB80 CC55 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C55, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_344)
{
    // 4C56 0021;	
    // (䱖) CJK UNIFIED IDEOGRAPH-4C56	[FB80 CC56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C56, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_345)
{
    // 4C56 003F;	
    // (䱖) CJK UNIFIED IDEOGRAPH-4C56	[FB80 CC56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C56, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_346)
{
    // 4C56 0061;	
    // (䱖) CJK UNIFIED IDEOGRAPH-4C56	[FB80 CC56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C56, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_347)
{
    // 4C56 0041;	
    // (䱖) CJK UNIFIED IDEOGRAPH-4C56	[FB80 CC56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C56, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_348)
{
    // 4C56 0062;	
    // (䱖) CJK UNIFIED IDEOGRAPH-4C56	[FB80 CC56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C56, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_349)
{
    // 4C57 0021;	
    // (䱗) CJK UNIFIED IDEOGRAPH-4C57	[FB80 CC57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C57, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_350)
{
    // 4C57 003F;	
    // (䱗) CJK UNIFIED IDEOGRAPH-4C57	[FB80 CC57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C57, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_351)
{
    // 4C57 0061;	
    // (䱗) CJK UNIFIED IDEOGRAPH-4C57	[FB80 CC57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C57, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_352)
{
    // 4C57 0041;	
    // (䱗) CJK UNIFIED IDEOGRAPH-4C57	[FB80 CC57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C57, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_353)
{
    // 4C57 0062;	
    // (䱗) CJK UNIFIED IDEOGRAPH-4C57	[FB80 CC57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C57, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_354)
{
    // 4C58 0021;	
    // (䱘) CJK UNIFIED IDEOGRAPH-4C58	[FB80 CC58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C58, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_355)
{
    // 4C58 003F;	
    // (䱘) CJK UNIFIED IDEOGRAPH-4C58	[FB80 CC58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C58, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_356)
{
    // 4C58 0061;	
    // (䱘) CJK UNIFIED IDEOGRAPH-4C58	[FB80 CC58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C58, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_357)
{
    // 4C58 0041;	
    // (䱘) CJK UNIFIED IDEOGRAPH-4C58	[FB80 CC58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C58, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_358)
{
    // 4C58 0062;	
    // (䱘) CJK UNIFIED IDEOGRAPH-4C58	[FB80 CC58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C58, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_359)
{
    // 4C59 0021;	
    // (䱙) CJK UNIFIED IDEOGRAPH-4C59	[FB80 CC59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C59, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_360)
{
    // 4C59 003F;	
    // (䱙) CJK UNIFIED IDEOGRAPH-4C59	[FB80 CC59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C59, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_361)
{
    // 4C59 0061;	
    // (䱙) CJK UNIFIED IDEOGRAPH-4C59	[FB80 CC59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C59, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_362)
{
    // 4C59 0041;	
    // (䱙) CJK UNIFIED IDEOGRAPH-4C59	[FB80 CC59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C59, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_363)
{
    // 4C59 0062;	
    // (䱙) CJK UNIFIED IDEOGRAPH-4C59	[FB80 CC59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C59, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_364)
{
    // 4C5A 0021;	
    // (䱚) CJK UNIFIED IDEOGRAPH-4C5A	[FB80 CC5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C5A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_365)
{
    // 4C5A 003F;	
    // (䱚) CJK UNIFIED IDEOGRAPH-4C5A	[FB80 CC5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C5A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_366)
{
    // 4C5A 0061;	
    // (䱚) CJK UNIFIED IDEOGRAPH-4C5A	[FB80 CC5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C5A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_367)
{
    // 4C5A 0041;	
    // (䱚) CJK UNIFIED IDEOGRAPH-4C5A	[FB80 CC5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C5A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_368)
{
    // 4C5A 0062;	
    // (䱚) CJK UNIFIED IDEOGRAPH-4C5A	[FB80 CC5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C5A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_369)
{
    // 4C5B 0021;	
    // (䱛) CJK UNIFIED IDEOGRAPH-4C5B	[FB80 CC5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C5B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_370)
{
    // 4C5B 003F;	
    // (䱛) CJK UNIFIED IDEOGRAPH-4C5B	[FB80 CC5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C5B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_371)
{
    // 4C5B 0061;	
    // (䱛) CJK UNIFIED IDEOGRAPH-4C5B	[FB80 CC5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C5B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_372)
{
    // 4C5B 0041;	
    // (䱛) CJK UNIFIED IDEOGRAPH-4C5B	[FB80 CC5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C5B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_373)
{
    // 4C5B 0062;	
    // (䱛) CJK UNIFIED IDEOGRAPH-4C5B	[FB80 CC5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C5B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_374)
{
    // 4C5C 0021;	
    // (䱜) CJK UNIFIED IDEOGRAPH-4C5C	[FB80 CC5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C5C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_375)
{
    // 4C5C 003F;	
    // (䱜) CJK UNIFIED IDEOGRAPH-4C5C	[FB80 CC5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C5C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_376)
{
    // 4C5C 0061;	
    // (䱜) CJK UNIFIED IDEOGRAPH-4C5C	[FB80 CC5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C5C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_377)
{
    // 4C5C 0041;	
    // (䱜) CJK UNIFIED IDEOGRAPH-4C5C	[FB80 CC5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C5C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_378)
{
    // 4C5C 0062;	
    // (䱜) CJK UNIFIED IDEOGRAPH-4C5C	[FB80 CC5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C5C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_379)
{
    // 4C5D 0021;	
    // (䱝) CJK UNIFIED IDEOGRAPH-4C5D	[FB80 CC5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C5D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_380)
{
    // 4C5D 003F;	
    // (䱝) CJK UNIFIED IDEOGRAPH-4C5D	[FB80 CC5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C5D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_381)
{
    // 4C5D 0061;	
    // (䱝) CJK UNIFIED IDEOGRAPH-4C5D	[FB80 CC5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C5D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_382)
{
    // 4C5D 0041;	
    // (䱝) CJK UNIFIED IDEOGRAPH-4C5D	[FB80 CC5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C5D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_383)
{
    // 4C5D 0062;	
    // (䱝) CJK UNIFIED IDEOGRAPH-4C5D	[FB80 CC5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C5D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_384)
{
    // 4C5E 0021;	
    // (䱞) CJK UNIFIED IDEOGRAPH-4C5E	[FB80 CC5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C5E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_385)
{
    // 4C5E 003F;	
    // (䱞) CJK UNIFIED IDEOGRAPH-4C5E	[FB80 CC5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C5E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_386)
{
    // 4C5E 0061;	
    // (䱞) CJK UNIFIED IDEOGRAPH-4C5E	[FB80 CC5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C5E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_387)
{
    // 4C5E 0041;	
    // (䱞) CJK UNIFIED IDEOGRAPH-4C5E	[FB80 CC5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C5E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_388)
{
    // 4C5E 0062;	
    // (䱞) CJK UNIFIED IDEOGRAPH-4C5E	[FB80 CC5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C5E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_389)
{
    // 4C5F 0021;	
    // (䱟) CJK UNIFIED IDEOGRAPH-4C5F	[FB80 CC5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C5F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_390)
{
    // 4C5F 003F;	
    // (䱟) CJK UNIFIED IDEOGRAPH-4C5F	[FB80 CC5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C5F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_391)
{
    // 4C5F 0061;	
    // (䱟) CJK UNIFIED IDEOGRAPH-4C5F	[FB80 CC5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C5F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_392)
{
    // 4C5F 0041;	
    // (䱟) CJK UNIFIED IDEOGRAPH-4C5F	[FB80 CC5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C5F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_393)
{
    // 4C5F 0062;	
    // (䱟) CJK UNIFIED IDEOGRAPH-4C5F	[FB80 CC5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C5F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_394)
{
    // 4C60 0021;	
    // (䱠) CJK UNIFIED IDEOGRAPH-4C60	[FB80 CC60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C60, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_395)
{
    // 4C60 003F;	
    // (䱠) CJK UNIFIED IDEOGRAPH-4C60	[FB80 CC60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C60, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_396)
{
    // 4C60 0061;	
    // (䱠) CJK UNIFIED IDEOGRAPH-4C60	[FB80 CC60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C60, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_397)
{
    // 4C60 0041;	
    // (䱠) CJK UNIFIED IDEOGRAPH-4C60	[FB80 CC60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C60, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_398)
{
    // 4C60 0062;	
    // (䱠) CJK UNIFIED IDEOGRAPH-4C60	[FB80 CC60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C60, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_399)
{
    // 4C61 0021;	
    // (䱡) CJK UNIFIED IDEOGRAPH-4C61	[FB80 CC61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C61, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_400)
{
    // 4C61 003F;	
    // (䱡) CJK UNIFIED IDEOGRAPH-4C61	[FB80 CC61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C61, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_401)
{
    // 4C61 0061;	
    // (䱡) CJK UNIFIED IDEOGRAPH-4C61	[FB80 CC61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C61, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_402)
{
    // 4C61 0041;	
    // (䱡) CJK UNIFIED IDEOGRAPH-4C61	[FB80 CC61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C61, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_403)
{
    // 4C61 0062;	
    // (䱡) CJK UNIFIED IDEOGRAPH-4C61	[FB80 CC61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C61, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_404)
{
    // 4C62 0021;	
    // (䱢) CJK UNIFIED IDEOGRAPH-4C62	[FB80 CC62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C62, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_405)
{
    // 4C62 003F;	
    // (䱢) CJK UNIFIED IDEOGRAPH-4C62	[FB80 CC62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C62, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_406)
{
    // 4C62 0061;	
    // (䱢) CJK UNIFIED IDEOGRAPH-4C62	[FB80 CC62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C62, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_407)
{
    // 4C62 0041;	
    // (䱢) CJK UNIFIED IDEOGRAPH-4C62	[FB80 CC62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C62, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_408)
{
    // 4C62 0062;	
    // (䱢) CJK UNIFIED IDEOGRAPH-4C62	[FB80 CC62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C62, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_409)
{
    // 4C63 0021;	
    // (䱣) CJK UNIFIED IDEOGRAPH-4C63	[FB80 CC63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C63, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_410)
{
    // 4C63 003F;	
    // (䱣) CJK UNIFIED IDEOGRAPH-4C63	[FB80 CC63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C63, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_411)
{
    // 4C63 0061;	
    // (䱣) CJK UNIFIED IDEOGRAPH-4C63	[FB80 CC63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C63, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_412)
{
    // 4C63 0041;	
    // (䱣) CJK UNIFIED IDEOGRAPH-4C63	[FB80 CC63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C63, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_413)
{
    // 4C63 0062;	
    // (䱣) CJK UNIFIED IDEOGRAPH-4C63	[FB80 CC63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C63, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_414)
{
    // 4C64 0021;	
    // (䱤) CJK UNIFIED IDEOGRAPH-4C64	[FB80 CC64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C64, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_415)
{
    // 4C64 003F;	
    // (䱤) CJK UNIFIED IDEOGRAPH-4C64	[FB80 CC64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C64, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_416)
{
    // 4C64 0061;	
    // (䱤) CJK UNIFIED IDEOGRAPH-4C64	[FB80 CC64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C64, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_417)
{
    // 4C64 0041;	
    // (䱤) CJK UNIFIED IDEOGRAPH-4C64	[FB80 CC64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C64, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_418)
{
    // 4C64 0062;	
    // (䱤) CJK UNIFIED IDEOGRAPH-4C64	[FB80 CC64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C64, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_419)
{
    // 4C65 0021;	
    // (䱥) CJK UNIFIED IDEOGRAPH-4C65	[FB80 CC65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C65, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_420)
{
    // 4C65 003F;	
    // (䱥) CJK UNIFIED IDEOGRAPH-4C65	[FB80 CC65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C65, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_421)
{
    // 4C65 0061;	
    // (䱥) CJK UNIFIED IDEOGRAPH-4C65	[FB80 CC65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C65, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_422)
{
    // 4C65 0041;	
    // (䱥) CJK UNIFIED IDEOGRAPH-4C65	[FB80 CC65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C65, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_423)
{
    // 4C65 0062;	
    // (䱥) CJK UNIFIED IDEOGRAPH-4C65	[FB80 CC65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C65, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_424)
{
    // 4C66 0021;	
    // (䱦) CJK UNIFIED IDEOGRAPH-4C66	[FB80 CC66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C66, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_425)
{
    // 4C66 003F;	
    // (䱦) CJK UNIFIED IDEOGRAPH-4C66	[FB80 CC66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C66, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_426)
{
    // 4C66 0061;	
    // (䱦) CJK UNIFIED IDEOGRAPH-4C66	[FB80 CC66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C66, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_427)
{
    // 4C66 0041;	
    // (䱦) CJK UNIFIED IDEOGRAPH-4C66	[FB80 CC66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C66, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_428)
{
    // 4C66 0062;	
    // (䱦) CJK UNIFIED IDEOGRAPH-4C66	[FB80 CC66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C66, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_429)
{
    // 4C67 0021;	
    // (䱧) CJK UNIFIED IDEOGRAPH-4C67	[FB80 CC67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C67, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_430)
{
    // 4C67 003F;	
    // (䱧) CJK UNIFIED IDEOGRAPH-4C67	[FB80 CC67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C67, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_431)
{
    // 4C67 0061;	
    // (䱧) CJK UNIFIED IDEOGRAPH-4C67	[FB80 CC67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C67, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_432)
{
    // 4C67 0041;	
    // (䱧) CJK UNIFIED IDEOGRAPH-4C67	[FB80 CC67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C67, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_433)
{
    // 4C67 0062;	
    // (䱧) CJK UNIFIED IDEOGRAPH-4C67	[FB80 CC67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C67, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_434)
{
    // 4C68 0021;	
    // (䱨) CJK UNIFIED IDEOGRAPH-4C68	[FB80 CC68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C68, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_435)
{
    // 4C68 003F;	
    // (䱨) CJK UNIFIED IDEOGRAPH-4C68	[FB80 CC68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C68, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_436)
{
    // 4C68 0061;	
    // (䱨) CJK UNIFIED IDEOGRAPH-4C68	[FB80 CC68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C68, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_437)
{
    // 4C68 0041;	
    // (䱨) CJK UNIFIED IDEOGRAPH-4C68	[FB80 CC68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C68, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_438)
{
    // 4C68 0062;	
    // (䱨) CJK UNIFIED IDEOGRAPH-4C68	[FB80 CC68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C68, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_439)
{
    // 4C69 0021;	
    // (䱩) CJK UNIFIED IDEOGRAPH-4C69	[FB80 CC69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C69, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_440)
{
    // 4C69 003F;	
    // (䱩) CJK UNIFIED IDEOGRAPH-4C69	[FB80 CC69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C69, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_441)
{
    // 4C69 0061;	
    // (䱩) CJK UNIFIED IDEOGRAPH-4C69	[FB80 CC69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C69, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_442)
{
    // 4C69 0041;	
    // (䱩) CJK UNIFIED IDEOGRAPH-4C69	[FB80 CC69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C69, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_443)
{
    // 4C69 0062;	
    // (䱩) CJK UNIFIED IDEOGRAPH-4C69	[FB80 CC69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C69, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_444)
{
    // 4C6A 0021;	
    // (䱪) CJK UNIFIED IDEOGRAPH-4C6A	[FB80 CC6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C6A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_445)
{
    // 4C6A 003F;	
    // (䱪) CJK UNIFIED IDEOGRAPH-4C6A	[FB80 CC6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C6A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_446)
{
    // 4C6A 0061;	
    // (䱪) CJK UNIFIED IDEOGRAPH-4C6A	[FB80 CC6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C6A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_447)
{
    // 4C6A 0041;	
    // (䱪) CJK UNIFIED IDEOGRAPH-4C6A	[FB80 CC6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C6A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_448)
{
    // 4C6A 0062;	
    // (䱪) CJK UNIFIED IDEOGRAPH-4C6A	[FB80 CC6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C6A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_449)
{
    // 4C6B 0021;	
    // (䱫) CJK UNIFIED IDEOGRAPH-4C6B	[FB80 CC6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C6B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_450)
{
    // 4C6B 003F;	
    // (䱫) CJK UNIFIED IDEOGRAPH-4C6B	[FB80 CC6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C6B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_451)
{
    // 4C6B 0061;	
    // (䱫) CJK UNIFIED IDEOGRAPH-4C6B	[FB80 CC6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C6B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_452)
{
    // 4C6B 0041;	
    // (䱫) CJK UNIFIED IDEOGRAPH-4C6B	[FB80 CC6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C6B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_453)
{
    // 4C6B 0062;	
    // (䱫) CJK UNIFIED IDEOGRAPH-4C6B	[FB80 CC6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C6B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_454)
{
    // 4C6C 0021;	
    // (䱬) CJK UNIFIED IDEOGRAPH-4C6C	[FB80 CC6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C6C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_455)
{
    // 4C6C 003F;	
    // (䱬) CJK UNIFIED IDEOGRAPH-4C6C	[FB80 CC6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C6C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_456)
{
    // 4C6C 0061;	
    // (䱬) CJK UNIFIED IDEOGRAPH-4C6C	[FB80 CC6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C6C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_457)
{
    // 4C6C 0041;	
    // (䱬) CJK UNIFIED IDEOGRAPH-4C6C	[FB80 CC6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C6C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_458)
{
    // 4C6C 0062;	
    // (䱬) CJK UNIFIED IDEOGRAPH-4C6C	[FB80 CC6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C6C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_459)
{
    // 4C6D 0021;	
    // (䱭) CJK UNIFIED IDEOGRAPH-4C6D	[FB80 CC6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C6D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_460)
{
    // 4C6D 003F;	
    // (䱭) CJK UNIFIED IDEOGRAPH-4C6D	[FB80 CC6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C6D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_461)
{
    // 4C6D 0061;	
    // (䱭) CJK UNIFIED IDEOGRAPH-4C6D	[FB80 CC6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C6D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_462)
{
    // 4C6D 0041;	
    // (䱭) CJK UNIFIED IDEOGRAPH-4C6D	[FB80 CC6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C6D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_463)
{
    // 4C6D 0062;	
    // (䱭) CJK UNIFIED IDEOGRAPH-4C6D	[FB80 CC6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C6D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_464)
{
    // 4C6E 0021;	
    // (䱮) CJK UNIFIED IDEOGRAPH-4C6E	[FB80 CC6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C6E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_465)
{
    // 4C6E 003F;	
    // (䱮) CJK UNIFIED IDEOGRAPH-4C6E	[FB80 CC6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C6E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_466)
{
    // 4C6E 0061;	
    // (䱮) CJK UNIFIED IDEOGRAPH-4C6E	[FB80 CC6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C6E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_467)
{
    // 4C6E 0041;	
    // (䱮) CJK UNIFIED IDEOGRAPH-4C6E	[FB80 CC6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C6E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_468)
{
    // 4C6E 0062;	
    // (䱮) CJK UNIFIED IDEOGRAPH-4C6E	[FB80 CC6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C6E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_469)
{
    // 4C6F 0021;	
    // (䱯) CJK UNIFIED IDEOGRAPH-4C6F	[FB80 CC6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C6F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_470)
{
    // 4C6F 003F;	
    // (䱯) CJK UNIFIED IDEOGRAPH-4C6F	[FB80 CC6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C6F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_471)
{
    // 4C6F 0061;	
    // (䱯) CJK UNIFIED IDEOGRAPH-4C6F	[FB80 CC6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C6F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_472)
{
    // 4C6F 0041;	
    // (䱯) CJK UNIFIED IDEOGRAPH-4C6F	[FB80 CC6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C6F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_473)
{
    // 4C6F 0062;	
    // (䱯) CJK UNIFIED IDEOGRAPH-4C6F	[FB80 CC6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C6F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_474)
{
    // 4C70 0021;	
    // (䱰) CJK UNIFIED IDEOGRAPH-4C70	[FB80 CC70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C70, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_475)
{
    // 4C70 003F;	
    // (䱰) CJK UNIFIED IDEOGRAPH-4C70	[FB80 CC70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C70, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_476)
{
    // 4C70 0061;	
    // (䱰) CJK UNIFIED IDEOGRAPH-4C70	[FB80 CC70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C70, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_477)
{
    // 4C70 0041;	
    // (䱰) CJK UNIFIED IDEOGRAPH-4C70	[FB80 CC70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C70, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_478)
{
    // 4C70 0062;	
    // (䱰) CJK UNIFIED IDEOGRAPH-4C70	[FB80 CC70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C70, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_479)
{
    // 4C71 0021;	
    // (䱱) CJK UNIFIED IDEOGRAPH-4C71	[FB80 CC71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C71, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_480)
{
    // 4C71 003F;	
    // (䱱) CJK UNIFIED IDEOGRAPH-4C71	[FB80 CC71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C71, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_481)
{
    // 4C71 0061;	
    // (䱱) CJK UNIFIED IDEOGRAPH-4C71	[FB80 CC71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C71, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_482)
{
    // 4C71 0041;	
    // (䱱) CJK UNIFIED IDEOGRAPH-4C71	[FB80 CC71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C71, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_483)
{
    // 4C71 0062;	
    // (䱱) CJK UNIFIED IDEOGRAPH-4C71	[FB80 CC71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C71, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_484)
{
    // 4C72 0021;	
    // (䱲) CJK UNIFIED IDEOGRAPH-4C72	[FB80 CC72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C72, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_485)
{
    // 4C72 003F;	
    // (䱲) CJK UNIFIED IDEOGRAPH-4C72	[FB80 CC72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C72, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_486)
{
    // 4C72 0061;	
    // (䱲) CJK UNIFIED IDEOGRAPH-4C72	[FB80 CC72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C72, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_487)
{
    // 4C72 0041;	
    // (䱲) CJK UNIFIED IDEOGRAPH-4C72	[FB80 CC72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C72, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_488)
{
    // 4C72 0062;	
    // (䱲) CJK UNIFIED IDEOGRAPH-4C72	[FB80 CC72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C72, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_489)
{
    // 4C73 0021;	
    // (䱳) CJK UNIFIED IDEOGRAPH-4C73	[FB80 CC73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C73, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_490)
{
    // 4C73 003F;	
    // (䱳) CJK UNIFIED IDEOGRAPH-4C73	[FB80 CC73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C73, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_491)
{
    // 4C73 0061;	
    // (䱳) CJK UNIFIED IDEOGRAPH-4C73	[FB80 CC73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C73, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_492)
{
    // 4C73 0041;	
    // (䱳) CJK UNIFIED IDEOGRAPH-4C73	[FB80 CC73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C73, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_493)
{
    // 4C73 0062;	
    // (䱳) CJK UNIFIED IDEOGRAPH-4C73	[FB80 CC73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C73, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_494)
{
    // 4C74 0021;	
    // (䱴) CJK UNIFIED IDEOGRAPH-4C74	[FB80 CC74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C74, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_495)
{
    // 4C74 003F;	
    // (䱴) CJK UNIFIED IDEOGRAPH-4C74	[FB80 CC74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C74, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_496)
{
    // 4C74 0061;	
    // (䱴) CJK UNIFIED IDEOGRAPH-4C74	[FB80 CC74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C74, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_497)
{
    // 4C74 0041;	
    // (䱴) CJK UNIFIED IDEOGRAPH-4C74	[FB80 CC74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C74, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_498)
{
    // 4C74 0062;	
    // (䱴) CJK UNIFIED IDEOGRAPH-4C74	[FB80 CC74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C74, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_389_499)
{
    // 4C75 0021;	
    // (䱵) CJK UNIFIED IDEOGRAPH-4C75	[FB80 CC75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C75, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

