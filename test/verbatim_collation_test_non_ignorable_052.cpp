// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_052_000)
{
    // 1D1D0 0041;	
    // (ùáê) MUSICAL SYMBOL GREGORIAN C CLEF	[1182 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1D0, 0x0041 };
    uint32_t const ces[9] = { 0x1182, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_001)
{
    // 1D1D0 0062;	
    // (ùáê) MUSICAL SYMBOL GREGORIAN C CLEF	[1182 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D0, 0x0062 };
    uint32_t const ces[9] = { 0x1182, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_002)
{
    // 1D1D1 0021;	
    // (ùáë) MUSICAL SYMBOL GREGORIAN F CLEF	[1183 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D1, 0x0021 };
    uint32_t const ces[9] = { 0x1183, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_003)
{
    // 1D1D1 003F;	
    // (ùáë) MUSICAL SYMBOL GREGORIAN F CLEF	[1183 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D1, 0x003F };
    uint32_t const ces[9] = { 0x1183, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_004)
{
    // 1D1D1 0061;	
    // (ùáë) MUSICAL SYMBOL GREGORIAN F CLEF	[1183 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D1, 0x0061 };
    uint32_t const ces[9] = { 0x1183, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_005)
{
    // 1D1D1 0041;	
    // (ùáë) MUSICAL SYMBOL GREGORIAN F CLEF	[1183 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1D1, 0x0041 };
    uint32_t const ces[9] = { 0x1183, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_006)
{
    // 1D1D1 0062;	
    // (ùáë) MUSICAL SYMBOL GREGORIAN F CLEF	[1183 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D1, 0x0062 };
    uint32_t const ces[9] = { 0x1183, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_007)
{
    // 1D1D2 0021;	
    // (ùáí) MUSICAL SYMBOL SQUARE B	[1184 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D2, 0x0021 };
    uint32_t const ces[9] = { 0x1184, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_008)
{
    // 1D1D2 003F;	
    // (ùáí) MUSICAL SYMBOL SQUARE B	[1184 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D2, 0x003F };
    uint32_t const ces[9] = { 0x1184, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_009)
{
    // 1D1D2 0061;	
    // (ùáí) MUSICAL SYMBOL SQUARE B	[1184 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D2, 0x0061 };
    uint32_t const ces[9] = { 0x1184, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_010)
{
    // 1D1D2 0041;	
    // (ùáí) MUSICAL SYMBOL SQUARE B	[1184 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1D2, 0x0041 };
    uint32_t const ces[9] = { 0x1184, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_011)
{
    // 1D1D2 0062;	
    // (ùáí) MUSICAL SYMBOL SQUARE B	[1184 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D2, 0x0062 };
    uint32_t const ces[9] = { 0x1184, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_012)
{
    // 1D1D3 0021;	
    // (ùáì) MUSICAL SYMBOL VIRGA	[1185 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D3, 0x0021 };
    uint32_t const ces[9] = { 0x1185, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_013)
{
    // 1D1D3 003F;	
    // (ùáì) MUSICAL SYMBOL VIRGA	[1185 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D3, 0x003F };
    uint32_t const ces[9] = { 0x1185, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_014)
{
    // 1D1D3 0061;	
    // (ùáì) MUSICAL SYMBOL VIRGA	[1185 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D3, 0x0061 };
    uint32_t const ces[9] = { 0x1185, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_015)
{
    // 1D1D3 0041;	
    // (ùáì) MUSICAL SYMBOL VIRGA	[1185 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1D3, 0x0041 };
    uint32_t const ces[9] = { 0x1185, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_016)
{
    // 1D1D3 0062;	
    // (ùáì) MUSICAL SYMBOL VIRGA	[1185 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D3, 0x0062 };
    uint32_t const ces[9] = { 0x1185, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_017)
{
    // 1D1D4 0021;	
    // (ùáî) MUSICAL SYMBOL PODATUS	[1186 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D4, 0x0021 };
    uint32_t const ces[9] = { 0x1186, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_018)
{
    // 1D1D4 003F;	
    // (ùáî) MUSICAL SYMBOL PODATUS	[1186 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D4, 0x003F };
    uint32_t const ces[9] = { 0x1186, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_019)
{
    // 1D1D4 0061;	
    // (ùáî) MUSICAL SYMBOL PODATUS	[1186 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D4, 0x0061 };
    uint32_t const ces[9] = { 0x1186, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_020)
{
    // 1D1D4 0041;	
    // (ùáî) MUSICAL SYMBOL PODATUS	[1186 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1D4, 0x0041 };
    uint32_t const ces[9] = { 0x1186, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_021)
{
    // 1D1D4 0062;	
    // (ùáî) MUSICAL SYMBOL PODATUS	[1186 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D4, 0x0062 };
    uint32_t const ces[9] = { 0x1186, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_022)
{
    // 1D1D5 0021;	
    // (ùáï) MUSICAL SYMBOL CLIVIS	[1187 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D5, 0x0021 };
    uint32_t const ces[9] = { 0x1187, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_023)
{
    // 1D1D5 003F;	
    // (ùáï) MUSICAL SYMBOL CLIVIS	[1187 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D5, 0x003F };
    uint32_t const ces[9] = { 0x1187, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_024)
{
    // 1D1D5 0061;	
    // (ùáï) MUSICAL SYMBOL CLIVIS	[1187 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D5, 0x0061 };
    uint32_t const ces[9] = { 0x1187, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_025)
{
    // 1D1D5 0041;	
    // (ùáï) MUSICAL SYMBOL CLIVIS	[1187 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1D5, 0x0041 };
    uint32_t const ces[9] = { 0x1187, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_026)
{
    // 1D1D5 0062;	
    // (ùáï) MUSICAL SYMBOL CLIVIS	[1187 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D5, 0x0062 };
    uint32_t const ces[9] = { 0x1187, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_027)
{
    // 1D1D6 0021;	
    // (ùáñ) MUSICAL SYMBOL SCANDICUS	[1188 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D6, 0x0021 };
    uint32_t const ces[9] = { 0x1188, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_028)
{
    // 1D1D6 003F;	
    // (ùáñ) MUSICAL SYMBOL SCANDICUS	[1188 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D6, 0x003F };
    uint32_t const ces[9] = { 0x1188, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_029)
{
    // 1D1D6 0061;	
    // (ùáñ) MUSICAL SYMBOL SCANDICUS	[1188 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D6, 0x0061 };
    uint32_t const ces[9] = { 0x1188, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_030)
{
    // 1D1D6 0041;	
    // (ùáñ) MUSICAL SYMBOL SCANDICUS	[1188 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1D6, 0x0041 };
    uint32_t const ces[9] = { 0x1188, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_031)
{
    // 1D1D6 0062;	
    // (ùáñ) MUSICAL SYMBOL SCANDICUS	[1188 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D6, 0x0062 };
    uint32_t const ces[9] = { 0x1188, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_032)
{
    // 1D1D7 0021;	
    // (ùáó) MUSICAL SYMBOL CLIMACUS	[1189 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D7, 0x0021 };
    uint32_t const ces[9] = { 0x1189, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_033)
{
    // 1D1D7 003F;	
    // (ùáó) MUSICAL SYMBOL CLIMACUS	[1189 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D7, 0x003F };
    uint32_t const ces[9] = { 0x1189, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_034)
{
    // 1D1D7 0061;	
    // (ùáó) MUSICAL SYMBOL CLIMACUS	[1189 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D7, 0x0061 };
    uint32_t const ces[9] = { 0x1189, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_035)
{
    // 1D1D7 0041;	
    // (ùáó) MUSICAL SYMBOL CLIMACUS	[1189 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1D7, 0x0041 };
    uint32_t const ces[9] = { 0x1189, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_036)
{
    // 1D1D7 0062;	
    // (ùáó) MUSICAL SYMBOL CLIMACUS	[1189 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D7, 0x0062 };
    uint32_t const ces[9] = { 0x1189, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_037)
{
    // 1D1D8 0021;	
    // (ùáò) MUSICAL SYMBOL TORCULUS	[118A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D8, 0x0021 };
    uint32_t const ces[9] = { 0x118A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_038)
{
    // 1D1D8 003F;	
    // (ùáò) MUSICAL SYMBOL TORCULUS	[118A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D8, 0x003F };
    uint32_t const ces[9] = { 0x118A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_039)
{
    // 1D1D8 0061;	
    // (ùáò) MUSICAL SYMBOL TORCULUS	[118A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D8, 0x0061 };
    uint32_t const ces[9] = { 0x118A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_040)
{
    // 1D1D8 0041;	
    // (ùáò) MUSICAL SYMBOL TORCULUS	[118A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1D8, 0x0041 };
    uint32_t const ces[9] = { 0x118A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_041)
{
    // 1D1D8 0062;	
    // (ùáò) MUSICAL SYMBOL TORCULUS	[118A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D8, 0x0062 };
    uint32_t const ces[9] = { 0x118A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_042)
{
    // 1D1D9 0021;	
    // (ùáô) MUSICAL SYMBOL PORRECTUS	[118B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D9, 0x0021 };
    uint32_t const ces[9] = { 0x118B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_043)
{
    // 1D1D9 003F;	
    // (ùáô) MUSICAL SYMBOL PORRECTUS	[118B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D9, 0x003F };
    uint32_t const ces[9] = { 0x118B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_044)
{
    // 1D1D9 0061;	
    // (ùáô) MUSICAL SYMBOL PORRECTUS	[118B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D9, 0x0061 };
    uint32_t const ces[9] = { 0x118B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_045)
{
    // 1D1D9 0041;	
    // (ùáô) MUSICAL SYMBOL PORRECTUS	[118B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1D9, 0x0041 };
    uint32_t const ces[9] = { 0x118B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_046)
{
    // 1D1D9 0062;	
    // (ùáô) MUSICAL SYMBOL PORRECTUS	[118B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D9, 0x0062 };
    uint32_t const ces[9] = { 0x118B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_047)
{
    // 1D1DA 0021;	
    // (ùáö) MUSICAL SYMBOL PORRECTUS FLEXUS	[118C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1DA, 0x0021 };
    uint32_t const ces[9] = { 0x118C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_048)
{
    // 1D1DA 003F;	
    // (ùáö) MUSICAL SYMBOL PORRECTUS FLEXUS	[118C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1DA, 0x003F };
    uint32_t const ces[9] = { 0x118C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_049)
{
    // 1D1DA 0061;	
    // (ùáö) MUSICAL SYMBOL PORRECTUS FLEXUS	[118C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1DA, 0x0061 };
    uint32_t const ces[9] = { 0x118C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_050)
{
    // 1D1DA 0041;	
    // (ùáö) MUSICAL SYMBOL PORRECTUS FLEXUS	[118C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1DA, 0x0041 };
    uint32_t const ces[9] = { 0x118C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_051)
{
    // 1D1DA 0062;	
    // (ùáö) MUSICAL SYMBOL PORRECTUS FLEXUS	[118C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1DA, 0x0062 };
    uint32_t const ces[9] = { 0x118C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_052)
{
    // 1D1DB 0021;	
    // (ùáõ) MUSICAL SYMBOL SCANDICUS FLEXUS	[118D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1DB, 0x0021 };
    uint32_t const ces[9] = { 0x118D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_053)
{
    // 1D1DB 003F;	
    // (ùáõ) MUSICAL SYMBOL SCANDICUS FLEXUS	[118D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1DB, 0x003F };
    uint32_t const ces[9] = { 0x118D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_054)
{
    // 1D1DB 0061;	
    // (ùáõ) MUSICAL SYMBOL SCANDICUS FLEXUS	[118D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1DB, 0x0061 };
    uint32_t const ces[9] = { 0x118D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_055)
{
    // 1D1DB 0041;	
    // (ùáõ) MUSICAL SYMBOL SCANDICUS FLEXUS	[118D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1DB, 0x0041 };
    uint32_t const ces[9] = { 0x118D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_056)
{
    // 1D1DB 0062;	
    // (ùáõ) MUSICAL SYMBOL SCANDICUS FLEXUS	[118D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1DB, 0x0062 };
    uint32_t const ces[9] = { 0x118D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_057)
{
    // 1D1DC 0021;	
    // (ùáú) MUSICAL SYMBOL TORCULUS RESUPINUS	[118E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1DC, 0x0021 };
    uint32_t const ces[9] = { 0x118E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_058)
{
    // 1D1DC 003F;	
    // (ùáú) MUSICAL SYMBOL TORCULUS RESUPINUS	[118E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1DC, 0x003F };
    uint32_t const ces[9] = { 0x118E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_059)
{
    // 1D1DC 0061;	
    // (ùáú) MUSICAL SYMBOL TORCULUS RESUPINUS	[118E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1DC, 0x0061 };
    uint32_t const ces[9] = { 0x118E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_060)
{
    // 1D1DC 0041;	
    // (ùáú) MUSICAL SYMBOL TORCULUS RESUPINUS	[118E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1DC, 0x0041 };
    uint32_t const ces[9] = { 0x118E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_061)
{
    // 1D1DC 0062;	
    // (ùáú) MUSICAL SYMBOL TORCULUS RESUPINUS	[118E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1DC, 0x0062 };
    uint32_t const ces[9] = { 0x118E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_062)
{
    // 1D1DD 0021;	
    // (ùáù) MUSICAL SYMBOL PES SUBPUNCTIS	[118F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1DD, 0x0021 };
    uint32_t const ces[9] = { 0x118F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_063)
{
    // 1D1DD 003F;	
    // (ùáù) MUSICAL SYMBOL PES SUBPUNCTIS	[118F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1DD, 0x003F };
    uint32_t const ces[9] = { 0x118F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_064)
{
    // 1D1DD 0061;	
    // (ùáù) MUSICAL SYMBOL PES SUBPUNCTIS	[118F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1DD, 0x0061 };
    uint32_t const ces[9] = { 0x118F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_065)
{
    // 1D1DD 0041;	
    // (ùáù) MUSICAL SYMBOL PES SUBPUNCTIS	[118F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1DD, 0x0041 };
    uint32_t const ces[9] = { 0x118F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_066)
{
    // 1D1DD 0062;	
    // (ùáù) MUSICAL SYMBOL PES SUBPUNCTIS	[118F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1DD, 0x0062 };
    uint32_t const ces[9] = { 0x118F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_067)
{
    // 1D1DE 0021;	
    // (ùáû) MUSICAL SYMBOL KIEVAN C CLEF	[1190 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1DE, 0x0021 };
    uint32_t const ces[9] = { 0x1190, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_068)
{
    // 1D1DE 003F;	
    // (ùáû) MUSICAL SYMBOL KIEVAN C CLEF	[1190 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1DE, 0x003F };
    uint32_t const ces[9] = { 0x1190, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_069)
{
    // 1D1DE 0061;	
    // (ùáû) MUSICAL SYMBOL KIEVAN C CLEF	[1190 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1DE, 0x0061 };
    uint32_t const ces[9] = { 0x1190, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_070)
{
    // 1D1DE 0041;	
    // (ùáû) MUSICAL SYMBOL KIEVAN C CLEF	[1190 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1DE, 0x0041 };
    uint32_t const ces[9] = { 0x1190, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_071)
{
    // 1D1DE 0062;	
    // (ùáû) MUSICAL SYMBOL KIEVAN C CLEF	[1190 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1DE, 0x0062 };
    uint32_t const ces[9] = { 0x1190, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_072)
{
    // 1D1DF 0021;	
    // (ùáü) MUSICAL SYMBOL KIEVAN END OF PIECE	[1191 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1DF, 0x0021 };
    uint32_t const ces[9] = { 0x1191, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_073)
{
    // 1D1DF 003F;	
    // (ùáü) MUSICAL SYMBOL KIEVAN END OF PIECE	[1191 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1DF, 0x003F };
    uint32_t const ces[9] = { 0x1191, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_074)
{
    // 1D1DF 0061;	
    // (ùáü) MUSICAL SYMBOL KIEVAN END OF PIECE	[1191 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1DF, 0x0061 };
    uint32_t const ces[9] = { 0x1191, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_075)
{
    // 1D1DF 0041;	
    // (ùáü) MUSICAL SYMBOL KIEVAN END OF PIECE	[1191 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1DF, 0x0041 };
    uint32_t const ces[9] = { 0x1191, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_076)
{
    // 1D1DF 0062;	
    // (ùáü) MUSICAL SYMBOL KIEVAN END OF PIECE	[1191 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1DF, 0x0062 };
    uint32_t const ces[9] = { 0x1191, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_077)
{
    // 1D1E0 0021;	
    // (ùá†) MUSICAL SYMBOL KIEVAN FINAL NOTE	[1192 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E0, 0x0021 };
    uint32_t const ces[9] = { 0x1192, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_078)
{
    // 1D1E0 003F;	
    // (ùá†) MUSICAL SYMBOL KIEVAN FINAL NOTE	[1192 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E0, 0x003F };
    uint32_t const ces[9] = { 0x1192, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_079)
{
    // 1D1E0 0061;	
    // (ùá†) MUSICAL SYMBOL KIEVAN FINAL NOTE	[1192 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E0, 0x0061 };
    uint32_t const ces[9] = { 0x1192, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_080)
{
    // 1D1E0 0041;	
    // (ùá†) MUSICAL SYMBOL KIEVAN FINAL NOTE	[1192 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1E0, 0x0041 };
    uint32_t const ces[9] = { 0x1192, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_081)
{
    // 1D1E0 0062;	
    // (ùá†) MUSICAL SYMBOL KIEVAN FINAL NOTE	[1192 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E0, 0x0062 };
    uint32_t const ces[9] = { 0x1192, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_082)
{
    // 1D1E1 0021;	
    // (ùá°) MUSICAL SYMBOL KIEVAN RECITATIVE MARK	[1193 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E1, 0x0021 };
    uint32_t const ces[9] = { 0x1193, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_083)
{
    // 1D1E1 003F;	
    // (ùá°) MUSICAL SYMBOL KIEVAN RECITATIVE MARK	[1193 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E1, 0x003F };
    uint32_t const ces[9] = { 0x1193, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_084)
{
    // 1D1E1 0061;	
    // (ùá°) MUSICAL SYMBOL KIEVAN RECITATIVE MARK	[1193 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E1, 0x0061 };
    uint32_t const ces[9] = { 0x1193, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_085)
{
    // 1D1E1 0041;	
    // (ùá°) MUSICAL SYMBOL KIEVAN RECITATIVE MARK	[1193 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1E1, 0x0041 };
    uint32_t const ces[9] = { 0x1193, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_086)
{
    // 1D1E1 0062;	
    // (ùá°) MUSICAL SYMBOL KIEVAN RECITATIVE MARK	[1193 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E1, 0x0062 };
    uint32_t const ces[9] = { 0x1193, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_087)
{
    // 1D1E2 0021;	
    // (ùá¢) MUSICAL SYMBOL KIEVAN WHOLE NOTE	[1194 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E2, 0x0021 };
    uint32_t const ces[9] = { 0x1194, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_088)
{
    // 1D1E2 003F;	
    // (ùá¢) MUSICAL SYMBOL KIEVAN WHOLE NOTE	[1194 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E2, 0x003F };
    uint32_t const ces[9] = { 0x1194, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_089)
{
    // 1D1E2 0061;	
    // (ùá¢) MUSICAL SYMBOL KIEVAN WHOLE NOTE	[1194 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E2, 0x0061 };
    uint32_t const ces[9] = { 0x1194, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_090)
{
    // 1D1E2 0041;	
    // (ùá¢) MUSICAL SYMBOL KIEVAN WHOLE NOTE	[1194 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1E2, 0x0041 };
    uint32_t const ces[9] = { 0x1194, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_091)
{
    // 1D1E2 0062;	
    // (ùá¢) MUSICAL SYMBOL KIEVAN WHOLE NOTE	[1194 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E2, 0x0062 };
    uint32_t const ces[9] = { 0x1194, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_092)
{
    // 1D1E3 0021;	
    // (ùá£) MUSICAL SYMBOL KIEVAN HALF NOTE	[1195 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E3, 0x0021 };
    uint32_t const ces[9] = { 0x1195, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_093)
{
    // 1D1E3 003F;	
    // (ùá£) MUSICAL SYMBOL KIEVAN HALF NOTE	[1195 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E3, 0x003F };
    uint32_t const ces[9] = { 0x1195, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_094)
{
    // 1D1E3 0061;	
    // (ùá£) MUSICAL SYMBOL KIEVAN HALF NOTE	[1195 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E3, 0x0061 };
    uint32_t const ces[9] = { 0x1195, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_095)
{
    // 1D1E3 0041;	
    // (ùá£) MUSICAL SYMBOL KIEVAN HALF NOTE	[1195 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1E3, 0x0041 };
    uint32_t const ces[9] = { 0x1195, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_096)
{
    // 1D1E3 0062;	
    // (ùá£) MUSICAL SYMBOL KIEVAN HALF NOTE	[1195 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E3, 0x0062 };
    uint32_t const ces[9] = { 0x1195, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_097)
{
    // 1D1E4 0021;	
    // (ùá§) MUSICAL SYMBOL KIEVAN QUARTER NOTE STEM DOWN	[1196 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E4, 0x0021 };
    uint32_t const ces[9] = { 0x1196, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_098)
{
    // 1D1E4 003F;	
    // (ùá§) MUSICAL SYMBOL KIEVAN QUARTER NOTE STEM DOWN	[1196 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E4, 0x003F };
    uint32_t const ces[9] = { 0x1196, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_099)
{
    // 1D1E4 0061;	
    // (ùá§) MUSICAL SYMBOL KIEVAN QUARTER NOTE STEM DOWN	[1196 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E4, 0x0061 };
    uint32_t const ces[9] = { 0x1196, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_100)
{
    // 1D1E4 0041;	
    // (ùá§) MUSICAL SYMBOL KIEVAN QUARTER NOTE STEM DOWN	[1196 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1E4, 0x0041 };
    uint32_t const ces[9] = { 0x1196, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_101)
{
    // 1D1E4 0062;	
    // (ùá§) MUSICAL SYMBOL KIEVAN QUARTER NOTE STEM DOWN	[1196 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E4, 0x0062 };
    uint32_t const ces[9] = { 0x1196, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_102)
{
    // 1D1E5 0021;	
    // (ùá•) MUSICAL SYMBOL KIEVAN QUARTER NOTE STEM UP	[1197 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E5, 0x0021 };
    uint32_t const ces[9] = { 0x1197, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_103)
{
    // 1D1E5 003F;	
    // (ùá•) MUSICAL SYMBOL KIEVAN QUARTER NOTE STEM UP	[1197 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E5, 0x003F };
    uint32_t const ces[9] = { 0x1197, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_104)
{
    // 1D1E5 0061;	
    // (ùá•) MUSICAL SYMBOL KIEVAN QUARTER NOTE STEM UP	[1197 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E5, 0x0061 };
    uint32_t const ces[9] = { 0x1197, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_105)
{
    // 1D1E5 0041;	
    // (ùá•) MUSICAL SYMBOL KIEVAN QUARTER NOTE STEM UP	[1197 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1E5, 0x0041 };
    uint32_t const ces[9] = { 0x1197, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_106)
{
    // 1D1E5 0062;	
    // (ùá•) MUSICAL SYMBOL KIEVAN QUARTER NOTE STEM UP	[1197 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E5, 0x0062 };
    uint32_t const ces[9] = { 0x1197, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_107)
{
    // 1D1E6 0021;	
    // (ùá¶) MUSICAL SYMBOL KIEVAN EIGHTH NOTE STEM DOWN	[1198 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E6, 0x0021 };
    uint32_t const ces[9] = { 0x1198, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_108)
{
    // 1D1E6 003F;	
    // (ùá¶) MUSICAL SYMBOL KIEVAN EIGHTH NOTE STEM DOWN	[1198 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E6, 0x003F };
    uint32_t const ces[9] = { 0x1198, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_109)
{
    // 1D1E6 0061;	
    // (ùá¶) MUSICAL SYMBOL KIEVAN EIGHTH NOTE STEM DOWN	[1198 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E6, 0x0061 };
    uint32_t const ces[9] = { 0x1198, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_110)
{
    // 1D1E6 0041;	
    // (ùá¶) MUSICAL SYMBOL KIEVAN EIGHTH NOTE STEM DOWN	[1198 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1E6, 0x0041 };
    uint32_t const ces[9] = { 0x1198, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_111)
{
    // 1D1E6 0062;	
    // (ùá¶) MUSICAL SYMBOL KIEVAN EIGHTH NOTE STEM DOWN	[1198 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E6, 0x0062 };
    uint32_t const ces[9] = { 0x1198, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_112)
{
    // 1D1E7 0021;	
    // (ùáß) MUSICAL SYMBOL KIEVAN EIGHTH NOTE STEM UP	[1199 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E7, 0x0021 };
    uint32_t const ces[9] = { 0x1199, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_113)
{
    // 1D1E7 003F;	
    // (ùáß) MUSICAL SYMBOL KIEVAN EIGHTH NOTE STEM UP	[1199 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E7, 0x003F };
    uint32_t const ces[9] = { 0x1199, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_114)
{
    // 1D1E7 0061;	
    // (ùáß) MUSICAL SYMBOL KIEVAN EIGHTH NOTE STEM UP	[1199 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E7, 0x0061 };
    uint32_t const ces[9] = { 0x1199, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_115)
{
    // 1D1E7 0041;	
    // (ùáß) MUSICAL SYMBOL KIEVAN EIGHTH NOTE STEM UP	[1199 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1E7, 0x0041 };
    uint32_t const ces[9] = { 0x1199, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_116)
{
    // 1D1E7 0062;	
    // (ùáß) MUSICAL SYMBOL KIEVAN EIGHTH NOTE STEM UP	[1199 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E7, 0x0062 };
    uint32_t const ces[9] = { 0x1199, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_117)
{
    // 1D1E8 0021;	
    // (ùá®) MUSICAL SYMBOL KIEVAN FLAT SIGN	[119A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E8, 0x0021 };
    uint32_t const ces[9] = { 0x119A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_118)
{
    // 1D1E8 003F;	
    // (ùá®) MUSICAL SYMBOL KIEVAN FLAT SIGN	[119A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E8, 0x003F };
    uint32_t const ces[9] = { 0x119A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_119)
{
    // 1D1E8 0061;	
    // (ùá®) MUSICAL SYMBOL KIEVAN FLAT SIGN	[119A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E8, 0x0061 };
    uint32_t const ces[9] = { 0x119A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_120)
{
    // 1D1E8 0041;	
    // (ùá®) MUSICAL SYMBOL KIEVAN FLAT SIGN	[119A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1E8, 0x0041 };
    uint32_t const ces[9] = { 0x119A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_121)
{
    // 1D1E8 0062;	
    // (ùá®) MUSICAL SYMBOL KIEVAN FLAT SIGN	[119A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E8, 0x0062 };
    uint32_t const ces[9] = { 0x119A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_122)
{
    // 1D200 0021;	
    // (ùàÄ) GREEK VOCAL NOTATION SYMBOL-1	[119B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D200, 0x0021 };
    uint32_t const ces[9] = { 0x119B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_123)
{
    // 1D200 003F;	
    // (ùàÄ) GREEK VOCAL NOTATION SYMBOL-1	[119B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D200, 0x003F };
    uint32_t const ces[9] = { 0x119B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_124)
{
    // 1D200 0061;	
    // (ùàÄ) GREEK VOCAL NOTATION SYMBOL-1	[119B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D200, 0x0061 };
    uint32_t const ces[9] = { 0x119B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_125)
{
    // 1D200 0041;	
    // (ùàÄ) GREEK VOCAL NOTATION SYMBOL-1	[119B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D200, 0x0041 };
    uint32_t const ces[9] = { 0x119B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_126)
{
    // 1D200 0062;	
    // (ùàÄ) GREEK VOCAL NOTATION SYMBOL-1	[119B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D200, 0x0062 };
    uint32_t const ces[9] = { 0x119B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_127)
{
    // 1D201 0021;	
    // (ùàÅ) GREEK VOCAL NOTATION SYMBOL-2	[119C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D201, 0x0021 };
    uint32_t const ces[9] = { 0x119C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_128)
{
    // 1D201 003F;	
    // (ùàÅ) GREEK VOCAL NOTATION SYMBOL-2	[119C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D201, 0x003F };
    uint32_t const ces[9] = { 0x119C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_129)
{
    // 1D201 0061;	
    // (ùàÅ) GREEK VOCAL NOTATION SYMBOL-2	[119C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D201, 0x0061 };
    uint32_t const ces[9] = { 0x119C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_130)
{
    // 1D201 0041;	
    // (ùàÅ) GREEK VOCAL NOTATION SYMBOL-2	[119C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D201, 0x0041 };
    uint32_t const ces[9] = { 0x119C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_131)
{
    // 1D201 0062;	
    // (ùàÅ) GREEK VOCAL NOTATION SYMBOL-2	[119C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D201, 0x0062 };
    uint32_t const ces[9] = { 0x119C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_132)
{
    // 1D202 0021;	
    // (ùàÇ) GREEK VOCAL NOTATION SYMBOL-3	[119D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D202, 0x0021 };
    uint32_t const ces[9] = { 0x119D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_133)
{
    // 1D202 003F;	
    // (ùàÇ) GREEK VOCAL NOTATION SYMBOL-3	[119D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D202, 0x003F };
    uint32_t const ces[9] = { 0x119D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_134)
{
    // 1D202 0061;	
    // (ùàÇ) GREEK VOCAL NOTATION SYMBOL-3	[119D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D202, 0x0061 };
    uint32_t const ces[9] = { 0x119D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_135)
{
    // 1D202 0041;	
    // (ùàÇ) GREEK VOCAL NOTATION SYMBOL-3	[119D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D202, 0x0041 };
    uint32_t const ces[9] = { 0x119D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_136)
{
    // 1D202 0062;	
    // (ùàÇ) GREEK VOCAL NOTATION SYMBOL-3	[119D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D202, 0x0062 };
    uint32_t const ces[9] = { 0x119D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_137)
{
    // 1D203 0021;	
    // (ùàÉ) GREEK VOCAL NOTATION SYMBOL-4	[119E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D203, 0x0021 };
    uint32_t const ces[9] = { 0x119E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_138)
{
    // 1D203 003F;	
    // (ùàÉ) GREEK VOCAL NOTATION SYMBOL-4	[119E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D203, 0x003F };
    uint32_t const ces[9] = { 0x119E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_139)
{
    // 1D203 0061;	
    // (ùàÉ) GREEK VOCAL NOTATION SYMBOL-4	[119E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D203, 0x0061 };
    uint32_t const ces[9] = { 0x119E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_140)
{
    // 1D203 0041;	
    // (ùàÉ) GREEK VOCAL NOTATION SYMBOL-4	[119E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D203, 0x0041 };
    uint32_t const ces[9] = { 0x119E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_141)
{
    // 1D203 0062;	
    // (ùàÉ) GREEK VOCAL NOTATION SYMBOL-4	[119E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D203, 0x0062 };
    uint32_t const ces[9] = { 0x119E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_142)
{
    // 1D204 0021;	
    // (ùàÑ) GREEK VOCAL NOTATION SYMBOL-5	[119F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D204, 0x0021 };
    uint32_t const ces[9] = { 0x119F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_143)
{
    // 1D204 003F;	
    // (ùàÑ) GREEK VOCAL NOTATION SYMBOL-5	[119F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D204, 0x003F };
    uint32_t const ces[9] = { 0x119F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_144)
{
    // 1D204 0061;	
    // (ùàÑ) GREEK VOCAL NOTATION SYMBOL-5	[119F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D204, 0x0061 };
    uint32_t const ces[9] = { 0x119F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_145)
{
    // 1D204 0041;	
    // (ùàÑ) GREEK VOCAL NOTATION SYMBOL-5	[119F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D204, 0x0041 };
    uint32_t const ces[9] = { 0x119F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_146)
{
    // 1D204 0062;	
    // (ùàÑ) GREEK VOCAL NOTATION SYMBOL-5	[119F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D204, 0x0062 };
    uint32_t const ces[9] = { 0x119F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_147)
{
    // 1D205 0021;	
    // (ùàÖ) GREEK VOCAL NOTATION SYMBOL-6	[11A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D205, 0x0021 };
    uint32_t const ces[9] = { 0x11A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_148)
{
    // 1D205 003F;	
    // (ùàÖ) GREEK VOCAL NOTATION SYMBOL-6	[11A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D205, 0x003F };
    uint32_t const ces[9] = { 0x11A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_149)
{
    // 1D205 0061;	
    // (ùàÖ) GREEK VOCAL NOTATION SYMBOL-6	[11A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D205, 0x0061 };
    uint32_t const ces[9] = { 0x11A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_150)
{
    // 1D205 0041;	
    // (ùàÖ) GREEK VOCAL NOTATION SYMBOL-6	[11A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D205, 0x0041 };
    uint32_t const ces[9] = { 0x11A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_151)
{
    // 1D205 0062;	
    // (ùàÖ) GREEK VOCAL NOTATION SYMBOL-6	[11A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D205, 0x0062 };
    uint32_t const ces[9] = { 0x11A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_152)
{
    // 1D206 0021;	
    // (ùàÜ) GREEK VOCAL NOTATION SYMBOL-7	[11A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D206, 0x0021 };
    uint32_t const ces[9] = { 0x11A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_153)
{
    // 1D206 003F;	
    // (ùàÜ) GREEK VOCAL NOTATION SYMBOL-7	[11A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D206, 0x003F };
    uint32_t const ces[9] = { 0x11A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_154)
{
    // 1D206 0061;	
    // (ùàÜ) GREEK VOCAL NOTATION SYMBOL-7	[11A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D206, 0x0061 };
    uint32_t const ces[9] = { 0x11A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_155)
{
    // 1D206 0041;	
    // (ùàÜ) GREEK VOCAL NOTATION SYMBOL-7	[11A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D206, 0x0041 };
    uint32_t const ces[9] = { 0x11A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_156)
{
    // 1D206 0062;	
    // (ùàÜ) GREEK VOCAL NOTATION SYMBOL-7	[11A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D206, 0x0062 };
    uint32_t const ces[9] = { 0x11A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_157)
{
    // 1D207 0021;	
    // (ùàá) GREEK VOCAL NOTATION SYMBOL-8	[11A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D207, 0x0021 };
    uint32_t const ces[9] = { 0x11A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_158)
{
    // 1D207 003F;	
    // (ùàá) GREEK VOCAL NOTATION SYMBOL-8	[11A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D207, 0x003F };
    uint32_t const ces[9] = { 0x11A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_159)
{
    // 1D207 0061;	
    // (ùàá) GREEK VOCAL NOTATION SYMBOL-8	[11A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D207, 0x0061 };
    uint32_t const ces[9] = { 0x11A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_160)
{
    // 1D207 0041;	
    // (ùàá) GREEK VOCAL NOTATION SYMBOL-8	[11A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D207, 0x0041 };
    uint32_t const ces[9] = { 0x11A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_161)
{
    // 1D207 0062;	
    // (ùàá) GREEK VOCAL NOTATION SYMBOL-8	[11A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D207, 0x0062 };
    uint32_t const ces[9] = { 0x11A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_162)
{
    // 1D208 0021;	
    // (ùàà) GREEK VOCAL NOTATION SYMBOL-9	[11A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D208, 0x0021 };
    uint32_t const ces[9] = { 0x11A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_163)
{
    // 1D208 003F;	
    // (ùàà) GREEK VOCAL NOTATION SYMBOL-9	[11A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D208, 0x003F };
    uint32_t const ces[9] = { 0x11A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_164)
{
    // 1D208 0061;	
    // (ùàà) GREEK VOCAL NOTATION SYMBOL-9	[11A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D208, 0x0061 };
    uint32_t const ces[9] = { 0x11A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_165)
{
    // 1D208 0041;	
    // (ùàà) GREEK VOCAL NOTATION SYMBOL-9	[11A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D208, 0x0041 };
    uint32_t const ces[9] = { 0x11A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_166)
{
    // 1D208 0062;	
    // (ùàà) GREEK VOCAL NOTATION SYMBOL-9	[11A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D208, 0x0062 };
    uint32_t const ces[9] = { 0x11A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_167)
{
    // 1D209 0021;	
    // (ùàâ) GREEK VOCAL NOTATION SYMBOL-10	[11A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D209, 0x0021 };
    uint32_t const ces[9] = { 0x11A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_168)
{
    // 1D209 003F;	
    // (ùàâ) GREEK VOCAL NOTATION SYMBOL-10	[11A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D209, 0x003F };
    uint32_t const ces[9] = { 0x11A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_169)
{
    // 1D209 0061;	
    // (ùàâ) GREEK VOCAL NOTATION SYMBOL-10	[11A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D209, 0x0061 };
    uint32_t const ces[9] = { 0x11A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_170)
{
    // 1D209 0041;	
    // (ùàâ) GREEK VOCAL NOTATION SYMBOL-10	[11A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D209, 0x0041 };
    uint32_t const ces[9] = { 0x11A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_171)
{
    // 1D209 0062;	
    // (ùàâ) GREEK VOCAL NOTATION SYMBOL-10	[11A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D209, 0x0062 };
    uint32_t const ces[9] = { 0x11A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_172)
{
    // 1D20A 0021;	
    // (ùàä) GREEK VOCAL NOTATION SYMBOL-11	[11A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D20A, 0x0021 };
    uint32_t const ces[9] = { 0x11A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_173)
{
    // 1D20A 003F;	
    // (ùàä) GREEK VOCAL NOTATION SYMBOL-11	[11A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D20A, 0x003F };
    uint32_t const ces[9] = { 0x11A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_174)
{
    // 1D20A 0061;	
    // (ùàä) GREEK VOCAL NOTATION SYMBOL-11	[11A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D20A, 0x0061 };
    uint32_t const ces[9] = { 0x11A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_175)
{
    // 1D20A 0041;	
    // (ùàä) GREEK VOCAL NOTATION SYMBOL-11	[11A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D20A, 0x0041 };
    uint32_t const ces[9] = { 0x11A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_176)
{
    // 1D20A 0062;	
    // (ùàä) GREEK VOCAL NOTATION SYMBOL-11	[11A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D20A, 0x0062 };
    uint32_t const ces[9] = { 0x11A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_177)
{
    // 1D20B 0021;	
    // (ùàã) GREEK VOCAL NOTATION SYMBOL-12	[11A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D20B, 0x0021 };
    uint32_t const ces[9] = { 0x11A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_178)
{
    // 1D20B 003F;	
    // (ùàã) GREEK VOCAL NOTATION SYMBOL-12	[11A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D20B, 0x003F };
    uint32_t const ces[9] = { 0x11A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_179)
{
    // 1D20B 0061;	
    // (ùàã) GREEK VOCAL NOTATION SYMBOL-12	[11A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D20B, 0x0061 };
    uint32_t const ces[9] = { 0x11A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_180)
{
    // 1D20B 0041;	
    // (ùàã) GREEK VOCAL NOTATION SYMBOL-12	[11A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D20B, 0x0041 };
    uint32_t const ces[9] = { 0x11A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_181)
{
    // 1D20B 0062;	
    // (ùàã) GREEK VOCAL NOTATION SYMBOL-12	[11A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D20B, 0x0062 };
    uint32_t const ces[9] = { 0x11A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_182)
{
    // 1D20C 0021;	
    // (ùàå) GREEK VOCAL NOTATION SYMBOL-13	[11A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D20C, 0x0021 };
    uint32_t const ces[9] = { 0x11A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_183)
{
    // 1D20C 003F;	
    // (ùàå) GREEK VOCAL NOTATION SYMBOL-13	[11A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D20C, 0x003F };
    uint32_t const ces[9] = { 0x11A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_184)
{
    // 1D20C 0061;	
    // (ùàå) GREEK VOCAL NOTATION SYMBOL-13	[11A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D20C, 0x0061 };
    uint32_t const ces[9] = { 0x11A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_185)
{
    // 1D20C 0041;	
    // (ùàå) GREEK VOCAL NOTATION SYMBOL-13	[11A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D20C, 0x0041 };
    uint32_t const ces[9] = { 0x11A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_186)
{
    // 1D20C 0062;	
    // (ùàå) GREEK VOCAL NOTATION SYMBOL-13	[11A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D20C, 0x0062 };
    uint32_t const ces[9] = { 0x11A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_187)
{
    // 1D20D 0021;	
    // (ùàç) GREEK VOCAL NOTATION SYMBOL-14	[11A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D20D, 0x0021 };
    uint32_t const ces[9] = { 0x11A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_188)
{
    // 1D20D 003F;	
    // (ùàç) GREEK VOCAL NOTATION SYMBOL-14	[11A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D20D, 0x003F };
    uint32_t const ces[9] = { 0x11A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_189)
{
    // 1D20D 0061;	
    // (ùàç) GREEK VOCAL NOTATION SYMBOL-14	[11A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D20D, 0x0061 };
    uint32_t const ces[9] = { 0x11A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_190)
{
    // 1D20D 0041;	
    // (ùàç) GREEK VOCAL NOTATION SYMBOL-14	[11A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D20D, 0x0041 };
    uint32_t const ces[9] = { 0x11A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_191)
{
    // 1D20D 0062;	
    // (ùàç) GREEK VOCAL NOTATION SYMBOL-14	[11A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D20D, 0x0062 };
    uint32_t const ces[9] = { 0x11A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_192)
{
    // 1D20E 0021;	
    // (ùàé) GREEK VOCAL NOTATION SYMBOL-15	[11A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D20E, 0x0021 };
    uint32_t const ces[9] = { 0x11A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_193)
{
    // 1D20E 003F;	
    // (ùàé) GREEK VOCAL NOTATION SYMBOL-15	[11A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D20E, 0x003F };
    uint32_t const ces[9] = { 0x11A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_194)
{
    // 1D20E 0061;	
    // (ùàé) GREEK VOCAL NOTATION SYMBOL-15	[11A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D20E, 0x0061 };
    uint32_t const ces[9] = { 0x11A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_195)
{
    // 1D20E 0041;	
    // (ùàé) GREEK VOCAL NOTATION SYMBOL-15	[11A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D20E, 0x0041 };
    uint32_t const ces[9] = { 0x11A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_196)
{
    // 1D20E 0062;	
    // (ùàé) GREEK VOCAL NOTATION SYMBOL-15	[11A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D20E, 0x0062 };
    uint32_t const ces[9] = { 0x11A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_197)
{
    // 1D20F 0021;	
    // (ùàè) GREEK VOCAL NOTATION SYMBOL-16	[11AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D20F, 0x0021 };
    uint32_t const ces[9] = { 0x11AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_198)
{
    // 1D20F 003F;	
    // (ùàè) GREEK VOCAL NOTATION SYMBOL-16	[11AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D20F, 0x003F };
    uint32_t const ces[9] = { 0x11AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_199)
{
    // 1D20F 0061;	
    // (ùàè) GREEK VOCAL NOTATION SYMBOL-16	[11AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D20F, 0x0061 };
    uint32_t const ces[9] = { 0x11AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_200)
{
    // 1D20F 0041;	
    // (ùàè) GREEK VOCAL NOTATION SYMBOL-16	[11AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D20F, 0x0041 };
    uint32_t const ces[9] = { 0x11AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_201)
{
    // 1D20F 0062;	
    // (ùàè) GREEK VOCAL NOTATION SYMBOL-16	[11AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D20F, 0x0062 };
    uint32_t const ces[9] = { 0x11AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_202)
{
    // 1D210 0021;	
    // (ùàê) GREEK VOCAL NOTATION SYMBOL-17	[11AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D210, 0x0021 };
    uint32_t const ces[9] = { 0x11AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_203)
{
    // 1D210 003F;	
    // (ùàê) GREEK VOCAL NOTATION SYMBOL-17	[11AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D210, 0x003F };
    uint32_t const ces[9] = { 0x11AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_204)
{
    // 1D210 0061;	
    // (ùàê) GREEK VOCAL NOTATION SYMBOL-17	[11AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D210, 0x0061 };
    uint32_t const ces[9] = { 0x11AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_205)
{
    // 1D210 0041;	
    // (ùàê) GREEK VOCAL NOTATION SYMBOL-17	[11AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D210, 0x0041 };
    uint32_t const ces[9] = { 0x11AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_206)
{
    // 1D210 0062;	
    // (ùàê) GREEK VOCAL NOTATION SYMBOL-17	[11AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D210, 0x0062 };
    uint32_t const ces[9] = { 0x11AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_207)
{
    // 1D211 0021;	
    // (ùàë) GREEK VOCAL NOTATION SYMBOL-18	[11AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D211, 0x0021 };
    uint32_t const ces[9] = { 0x11AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_208)
{
    // 1D211 003F;	
    // (ùàë) GREEK VOCAL NOTATION SYMBOL-18	[11AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D211, 0x003F };
    uint32_t const ces[9] = { 0x11AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_209)
{
    // 1D211 0061;	
    // (ùàë) GREEK VOCAL NOTATION SYMBOL-18	[11AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D211, 0x0061 };
    uint32_t const ces[9] = { 0x11AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_210)
{
    // 1D211 0041;	
    // (ùàë) GREEK VOCAL NOTATION SYMBOL-18	[11AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D211, 0x0041 };
    uint32_t const ces[9] = { 0x11AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_211)
{
    // 1D211 0062;	
    // (ùàë) GREEK VOCAL NOTATION SYMBOL-18	[11AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D211, 0x0062 };
    uint32_t const ces[9] = { 0x11AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_212)
{
    // 1D212 0021;	
    // (ùàí) GREEK VOCAL NOTATION SYMBOL-19	[11AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D212, 0x0021 };
    uint32_t const ces[9] = { 0x11AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_213)
{
    // 1D212 003F;	
    // (ùàí) GREEK VOCAL NOTATION SYMBOL-19	[11AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D212, 0x003F };
    uint32_t const ces[9] = { 0x11AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_214)
{
    // 1D212 0061;	
    // (ùàí) GREEK VOCAL NOTATION SYMBOL-19	[11AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D212, 0x0061 };
    uint32_t const ces[9] = { 0x11AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_215)
{
    // 1D212 0041;	
    // (ùàí) GREEK VOCAL NOTATION SYMBOL-19	[11AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D212, 0x0041 };
    uint32_t const ces[9] = { 0x11AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_216)
{
    // 1D212 0062;	
    // (ùàí) GREEK VOCAL NOTATION SYMBOL-19	[11AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D212, 0x0062 };
    uint32_t const ces[9] = { 0x11AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_217)
{
    // 1D213 0021;	
    // (ùàì) GREEK VOCAL NOTATION SYMBOL-20	[11AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D213, 0x0021 };
    uint32_t const ces[9] = { 0x11AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_218)
{
    // 1D213 003F;	
    // (ùàì) GREEK VOCAL NOTATION SYMBOL-20	[11AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D213, 0x003F };
    uint32_t const ces[9] = { 0x11AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_219)
{
    // 1D213 0061;	
    // (ùàì) GREEK VOCAL NOTATION SYMBOL-20	[11AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D213, 0x0061 };
    uint32_t const ces[9] = { 0x11AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_220)
{
    // 1D213 0041;	
    // (ùàì) GREEK VOCAL NOTATION SYMBOL-20	[11AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D213, 0x0041 };
    uint32_t const ces[9] = { 0x11AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_221)
{
    // 1D213 0062;	
    // (ùàì) GREEK VOCAL NOTATION SYMBOL-20	[11AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D213, 0x0062 };
    uint32_t const ces[9] = { 0x11AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_222)
{
    // 1D214 0021;	
    // (ùàî) GREEK VOCAL NOTATION SYMBOL-21	[11AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D214, 0x0021 };
    uint32_t const ces[9] = { 0x11AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_223)
{
    // 1D214 003F;	
    // (ùàî) GREEK VOCAL NOTATION SYMBOL-21	[11AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D214, 0x003F };
    uint32_t const ces[9] = { 0x11AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_224)
{
    // 1D214 0061;	
    // (ùàî) GREEK VOCAL NOTATION SYMBOL-21	[11AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D214, 0x0061 };
    uint32_t const ces[9] = { 0x11AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_225)
{
    // 1D214 0041;	
    // (ùàî) GREEK VOCAL NOTATION SYMBOL-21	[11AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D214, 0x0041 };
    uint32_t const ces[9] = { 0x11AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_226)
{
    // 1D214 0062;	
    // (ùàî) GREEK VOCAL NOTATION SYMBOL-21	[11AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D214, 0x0062 };
    uint32_t const ces[9] = { 0x11AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_227)
{
    // 1D215 0021;	
    // (ùàï) GREEK VOCAL NOTATION SYMBOL-22	[11B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D215, 0x0021 };
    uint32_t const ces[9] = { 0x11B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_228)
{
    // 1D215 003F;	
    // (ùàï) GREEK VOCAL NOTATION SYMBOL-22	[11B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D215, 0x003F };
    uint32_t const ces[9] = { 0x11B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_229)
{
    // 1D215 0061;	
    // (ùàï) GREEK VOCAL NOTATION SYMBOL-22	[11B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D215, 0x0061 };
    uint32_t const ces[9] = { 0x11B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_230)
{
    // 1D215 0041;	
    // (ùàï) GREEK VOCAL NOTATION SYMBOL-22	[11B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D215, 0x0041 };
    uint32_t const ces[9] = { 0x11B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_231)
{
    // 1D215 0062;	
    // (ùàï) GREEK VOCAL NOTATION SYMBOL-22	[11B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D215, 0x0062 };
    uint32_t const ces[9] = { 0x11B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_232)
{
    // 1D216 0021;	
    // (ùàñ) GREEK VOCAL NOTATION SYMBOL-23	[11B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D216, 0x0021 };
    uint32_t const ces[9] = { 0x11B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_233)
{
    // 1D216 003F;	
    // (ùàñ) GREEK VOCAL NOTATION SYMBOL-23	[11B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D216, 0x003F };
    uint32_t const ces[9] = { 0x11B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_234)
{
    // 1D216 0061;	
    // (ùàñ) GREEK VOCAL NOTATION SYMBOL-23	[11B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D216, 0x0061 };
    uint32_t const ces[9] = { 0x11B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_235)
{
    // 1D216 0041;	
    // (ùàñ) GREEK VOCAL NOTATION SYMBOL-23	[11B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D216, 0x0041 };
    uint32_t const ces[9] = { 0x11B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_236)
{
    // 1D216 0062;	
    // (ùàñ) GREEK VOCAL NOTATION SYMBOL-23	[11B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D216, 0x0062 };
    uint32_t const ces[9] = { 0x11B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_237)
{
    // 1D217 0021;	
    // (ùàó) GREEK VOCAL NOTATION SYMBOL-24	[11B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D217, 0x0021 };
    uint32_t const ces[9] = { 0x11B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_238)
{
    // 1D217 003F;	
    // (ùàó) GREEK VOCAL NOTATION SYMBOL-24	[11B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D217, 0x003F };
    uint32_t const ces[9] = { 0x11B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_239)
{
    // 1D217 0061;	
    // (ùàó) GREEK VOCAL NOTATION SYMBOL-24	[11B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D217, 0x0061 };
    uint32_t const ces[9] = { 0x11B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_240)
{
    // 1D217 0041;	
    // (ùàó) GREEK VOCAL NOTATION SYMBOL-24	[11B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D217, 0x0041 };
    uint32_t const ces[9] = { 0x11B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_241)
{
    // 1D217 0062;	
    // (ùàó) GREEK VOCAL NOTATION SYMBOL-24	[11B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D217, 0x0062 };
    uint32_t const ces[9] = { 0x11B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_242)
{
    // 1D218 0021;	
    // (ùàò) GREEK VOCAL NOTATION SYMBOL-50	[11B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D218, 0x0021 };
    uint32_t const ces[9] = { 0x11B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_243)
{
    // 1D218 003F;	
    // (ùàò) GREEK VOCAL NOTATION SYMBOL-50	[11B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D218, 0x003F };
    uint32_t const ces[9] = { 0x11B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_244)
{
    // 1D218 0061;	
    // (ùàò) GREEK VOCAL NOTATION SYMBOL-50	[11B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D218, 0x0061 };
    uint32_t const ces[9] = { 0x11B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_245)
{
    // 1D218 0041;	
    // (ùàò) GREEK VOCAL NOTATION SYMBOL-50	[11B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D218, 0x0041 };
    uint32_t const ces[9] = { 0x11B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_246)
{
    // 1D218 0062;	
    // (ùàò) GREEK VOCAL NOTATION SYMBOL-50	[11B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D218, 0x0062 };
    uint32_t const ces[9] = { 0x11B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_247)
{
    // 1D219 0021;	
    // (ùàô) GREEK VOCAL NOTATION SYMBOL-51	[11B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D219, 0x0021 };
    uint32_t const ces[9] = { 0x11B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_248)
{
    // 1D219 003F;	
    // (ùàô) GREEK VOCAL NOTATION SYMBOL-51	[11B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D219, 0x003F };
    uint32_t const ces[9] = { 0x11B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_249)
{
    // 1D219 0061;	
    // (ùàô) GREEK VOCAL NOTATION SYMBOL-51	[11B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D219, 0x0061 };
    uint32_t const ces[9] = { 0x11B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_250)
{
    // 1D219 0041;	
    // (ùàô) GREEK VOCAL NOTATION SYMBOL-51	[11B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D219, 0x0041 };
    uint32_t const ces[9] = { 0x11B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_251)
{
    // 1D219 0062;	
    // (ùàô) GREEK VOCAL NOTATION SYMBOL-51	[11B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D219, 0x0062 };
    uint32_t const ces[9] = { 0x11B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_252)
{
    // 1D21A 0021;	
    // (ùàö) GREEK VOCAL NOTATION SYMBOL-52	[11B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D21A, 0x0021 };
    uint32_t const ces[9] = { 0x11B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_253)
{
    // 1D21A 003F;	
    // (ùàö) GREEK VOCAL NOTATION SYMBOL-52	[11B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D21A, 0x003F };
    uint32_t const ces[9] = { 0x11B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_254)
{
    // 1D21A 0061;	
    // (ùàö) GREEK VOCAL NOTATION SYMBOL-52	[11B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D21A, 0x0061 };
    uint32_t const ces[9] = { 0x11B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_255)
{
    // 1D21A 0041;	
    // (ùàö) GREEK VOCAL NOTATION SYMBOL-52	[11B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D21A, 0x0041 };
    uint32_t const ces[9] = { 0x11B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_256)
{
    // 1D21A 0062;	
    // (ùàö) GREEK VOCAL NOTATION SYMBOL-52	[11B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D21A, 0x0062 };
    uint32_t const ces[9] = { 0x11B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_257)
{
    // 1D21B 0021;	
    // (ùàõ) GREEK VOCAL NOTATION SYMBOL-53	[11B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D21B, 0x0021 };
    uint32_t const ces[9] = { 0x11B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_258)
{
    // 1D21B 003F;	
    // (ùàõ) GREEK VOCAL NOTATION SYMBOL-53	[11B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D21B, 0x003F };
    uint32_t const ces[9] = { 0x11B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_259)
{
    // 1D21B 0061;	
    // (ùàõ) GREEK VOCAL NOTATION SYMBOL-53	[11B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D21B, 0x0061 };
    uint32_t const ces[9] = { 0x11B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_260)
{
    // 1D21B 0041;	
    // (ùàõ) GREEK VOCAL NOTATION SYMBOL-53	[11B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D21B, 0x0041 };
    uint32_t const ces[9] = { 0x11B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_261)
{
    // 1D21B 0062;	
    // (ùàõ) GREEK VOCAL NOTATION SYMBOL-53	[11B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D21B, 0x0062 };
    uint32_t const ces[9] = { 0x11B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_262)
{
    // 1D21C 0021;	
    // (ùàú) GREEK VOCAL NOTATION SYMBOL-54	[11B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D21C, 0x0021 };
    uint32_t const ces[9] = { 0x11B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_263)
{
    // 1D21C 003F;	
    // (ùàú) GREEK VOCAL NOTATION SYMBOL-54	[11B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D21C, 0x003F };
    uint32_t const ces[9] = { 0x11B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_264)
{
    // 1D21C 0061;	
    // (ùàú) GREEK VOCAL NOTATION SYMBOL-54	[11B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D21C, 0x0061 };
    uint32_t const ces[9] = { 0x11B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_265)
{
    // 1D21C 0041;	
    // (ùàú) GREEK VOCAL NOTATION SYMBOL-54	[11B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D21C, 0x0041 };
    uint32_t const ces[9] = { 0x11B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_266)
{
    // 1D21C 0062;	
    // (ùàú) GREEK VOCAL NOTATION SYMBOL-54	[11B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D21C, 0x0062 };
    uint32_t const ces[9] = { 0x11B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_267)
{
    // 1D21D 0021;	
    // (ùàù) GREEK INSTRUMENTAL NOTATION SYMBOL-1	[11B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D21D, 0x0021 };
    uint32_t const ces[9] = { 0x11B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_268)
{
    // 1D21D 003F;	
    // (ùàù) GREEK INSTRUMENTAL NOTATION SYMBOL-1	[11B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D21D, 0x003F };
    uint32_t const ces[9] = { 0x11B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_269)
{
    // 1D21D 0061;	
    // (ùàù) GREEK INSTRUMENTAL NOTATION SYMBOL-1	[11B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D21D, 0x0061 };
    uint32_t const ces[9] = { 0x11B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_270)
{
    // 1D21D 0041;	
    // (ùàù) GREEK INSTRUMENTAL NOTATION SYMBOL-1	[11B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D21D, 0x0041 };
    uint32_t const ces[9] = { 0x11B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_271)
{
    // 1D21D 0062;	
    // (ùàù) GREEK INSTRUMENTAL NOTATION SYMBOL-1	[11B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D21D, 0x0062 };
    uint32_t const ces[9] = { 0x11B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_272)
{
    // 1D21E 0021;	
    // (ùàû) GREEK INSTRUMENTAL NOTATION SYMBOL-2	[11B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D21E, 0x0021 };
    uint32_t const ces[9] = { 0x11B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_273)
{
    // 1D21E 003F;	
    // (ùàû) GREEK INSTRUMENTAL NOTATION SYMBOL-2	[11B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D21E, 0x003F };
    uint32_t const ces[9] = { 0x11B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_274)
{
    // 1D21E 0061;	
    // (ùàû) GREEK INSTRUMENTAL NOTATION SYMBOL-2	[11B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D21E, 0x0061 };
    uint32_t const ces[9] = { 0x11B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_275)
{
    // 1D21E 0041;	
    // (ùàû) GREEK INSTRUMENTAL NOTATION SYMBOL-2	[11B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D21E, 0x0041 };
    uint32_t const ces[9] = { 0x11B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_276)
{
    // 1D21E 0062;	
    // (ùàû) GREEK INSTRUMENTAL NOTATION SYMBOL-2	[11B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D21E, 0x0062 };
    uint32_t const ces[9] = { 0x11B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_277)
{
    // 1D21F 0021;	
    // (ùàü) GREEK INSTRUMENTAL NOTATION SYMBOL-4	[11BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D21F, 0x0021 };
    uint32_t const ces[9] = { 0x11BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_278)
{
    // 1D21F 003F;	
    // (ùàü) GREEK INSTRUMENTAL NOTATION SYMBOL-4	[11BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D21F, 0x003F };
    uint32_t const ces[9] = { 0x11BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_279)
{
    // 1D21F 0061;	
    // (ùàü) GREEK INSTRUMENTAL NOTATION SYMBOL-4	[11BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D21F, 0x0061 };
    uint32_t const ces[9] = { 0x11BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_280)
{
    // 1D21F 0041;	
    // (ùàü) GREEK INSTRUMENTAL NOTATION SYMBOL-4	[11BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D21F, 0x0041 };
    uint32_t const ces[9] = { 0x11BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_281)
{
    // 1D21F 0062;	
    // (ùàü) GREEK INSTRUMENTAL NOTATION SYMBOL-4	[11BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D21F, 0x0062 };
    uint32_t const ces[9] = { 0x11BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_282)
{
    // 1D220 0021;	
    // (ùà†) GREEK INSTRUMENTAL NOTATION SYMBOL-5	[11BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D220, 0x0021 };
    uint32_t const ces[9] = { 0x11BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_283)
{
    // 1D220 003F;	
    // (ùà†) GREEK INSTRUMENTAL NOTATION SYMBOL-5	[11BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D220, 0x003F };
    uint32_t const ces[9] = { 0x11BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_284)
{
    // 1D220 0061;	
    // (ùà†) GREEK INSTRUMENTAL NOTATION SYMBOL-5	[11BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D220, 0x0061 };
    uint32_t const ces[9] = { 0x11BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_285)
{
    // 1D220 0041;	
    // (ùà†) GREEK INSTRUMENTAL NOTATION SYMBOL-5	[11BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D220, 0x0041 };
    uint32_t const ces[9] = { 0x11BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_286)
{
    // 1D220 0062;	
    // (ùà†) GREEK INSTRUMENTAL NOTATION SYMBOL-5	[11BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D220, 0x0062 };
    uint32_t const ces[9] = { 0x11BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_287)
{
    // 1D221 0021;	
    // (ùà°) GREEK INSTRUMENTAL NOTATION SYMBOL-7	[11BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D221, 0x0021 };
    uint32_t const ces[9] = { 0x11BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_288)
{
    // 1D221 003F;	
    // (ùà°) GREEK INSTRUMENTAL NOTATION SYMBOL-7	[11BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D221, 0x003F };
    uint32_t const ces[9] = { 0x11BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_289)
{
    // 1D221 0061;	
    // (ùà°) GREEK INSTRUMENTAL NOTATION SYMBOL-7	[11BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D221, 0x0061 };
    uint32_t const ces[9] = { 0x11BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_290)
{
    // 1D221 0041;	
    // (ùà°) GREEK INSTRUMENTAL NOTATION SYMBOL-7	[11BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D221, 0x0041 };
    uint32_t const ces[9] = { 0x11BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_291)
{
    // 1D221 0062;	
    // (ùà°) GREEK INSTRUMENTAL NOTATION SYMBOL-7	[11BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D221, 0x0062 };
    uint32_t const ces[9] = { 0x11BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_292)
{
    // 1D222 0021;	
    // (ùà¢) GREEK INSTRUMENTAL NOTATION SYMBOL-8	[11BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D222, 0x0021 };
    uint32_t const ces[9] = { 0x11BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_293)
{
    // 1D222 003F;	
    // (ùà¢) GREEK INSTRUMENTAL NOTATION SYMBOL-8	[11BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D222, 0x003F };
    uint32_t const ces[9] = { 0x11BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_294)
{
    // 1D222 0061;	
    // (ùà¢) GREEK INSTRUMENTAL NOTATION SYMBOL-8	[11BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D222, 0x0061 };
    uint32_t const ces[9] = { 0x11BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_295)
{
    // 1D222 0041;	
    // (ùà¢) GREEK INSTRUMENTAL NOTATION SYMBOL-8	[11BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D222, 0x0041 };
    uint32_t const ces[9] = { 0x11BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_296)
{
    // 1D222 0062;	
    // (ùà¢) GREEK INSTRUMENTAL NOTATION SYMBOL-8	[11BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D222, 0x0062 };
    uint32_t const ces[9] = { 0x11BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_297)
{
    // 1D223 0021;	
    // (ùà£) GREEK INSTRUMENTAL NOTATION SYMBOL-11	[11BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D223, 0x0021 };
    uint32_t const ces[9] = { 0x11BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_298)
{
    // 1D223 003F;	
    // (ùà£) GREEK INSTRUMENTAL NOTATION SYMBOL-11	[11BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D223, 0x003F };
    uint32_t const ces[9] = { 0x11BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_299)
{
    // 1D223 0061;	
    // (ùà£) GREEK INSTRUMENTAL NOTATION SYMBOL-11	[11BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D223, 0x0061 };
    uint32_t const ces[9] = { 0x11BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_300)
{
    // 1D223 0041;	
    // (ùà£) GREEK INSTRUMENTAL NOTATION SYMBOL-11	[11BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D223, 0x0041 };
    uint32_t const ces[9] = { 0x11BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_301)
{
    // 1D223 0062;	
    // (ùà£) GREEK INSTRUMENTAL NOTATION SYMBOL-11	[11BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D223, 0x0062 };
    uint32_t const ces[9] = { 0x11BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_302)
{
    // 1D224 0021;	
    // (ùà§) GREEK INSTRUMENTAL NOTATION SYMBOL-12	[11BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D224, 0x0021 };
    uint32_t const ces[9] = { 0x11BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_303)
{
    // 1D224 003F;	
    // (ùà§) GREEK INSTRUMENTAL NOTATION SYMBOL-12	[11BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D224, 0x003F };
    uint32_t const ces[9] = { 0x11BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_304)
{
    // 1D224 0061;	
    // (ùà§) GREEK INSTRUMENTAL NOTATION SYMBOL-12	[11BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D224, 0x0061 };
    uint32_t const ces[9] = { 0x11BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_305)
{
    // 1D224 0041;	
    // (ùà§) GREEK INSTRUMENTAL NOTATION SYMBOL-12	[11BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D224, 0x0041 };
    uint32_t const ces[9] = { 0x11BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_306)
{
    // 1D224 0062;	
    // (ùà§) GREEK INSTRUMENTAL NOTATION SYMBOL-12	[11BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D224, 0x0062 };
    uint32_t const ces[9] = { 0x11BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_307)
{
    // 1D225 0021;	
    // (ùà•) GREEK INSTRUMENTAL NOTATION SYMBOL-13	[11C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D225, 0x0021 };
    uint32_t const ces[9] = { 0x11C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_308)
{
    // 1D225 003F;	
    // (ùà•) GREEK INSTRUMENTAL NOTATION SYMBOL-13	[11C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D225, 0x003F };
    uint32_t const ces[9] = { 0x11C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_309)
{
    // 1D225 0061;	
    // (ùà•) GREEK INSTRUMENTAL NOTATION SYMBOL-13	[11C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D225, 0x0061 };
    uint32_t const ces[9] = { 0x11C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_310)
{
    // 1D225 0041;	
    // (ùà•) GREEK INSTRUMENTAL NOTATION SYMBOL-13	[11C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D225, 0x0041 };
    uint32_t const ces[9] = { 0x11C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_311)
{
    // 1D225 0062;	
    // (ùà•) GREEK INSTRUMENTAL NOTATION SYMBOL-13	[11C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D225, 0x0062 };
    uint32_t const ces[9] = { 0x11C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_312)
{
    // 1D226 0021;	
    // (ùà¶) GREEK INSTRUMENTAL NOTATION SYMBOL-14	[11C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D226, 0x0021 };
    uint32_t const ces[9] = { 0x11C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_313)
{
    // 1D226 003F;	
    // (ùà¶) GREEK INSTRUMENTAL NOTATION SYMBOL-14	[11C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D226, 0x003F };
    uint32_t const ces[9] = { 0x11C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_314)
{
    // 1D226 0061;	
    // (ùà¶) GREEK INSTRUMENTAL NOTATION SYMBOL-14	[11C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D226, 0x0061 };
    uint32_t const ces[9] = { 0x11C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_315)
{
    // 1D226 0041;	
    // (ùà¶) GREEK INSTRUMENTAL NOTATION SYMBOL-14	[11C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D226, 0x0041 };
    uint32_t const ces[9] = { 0x11C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_316)
{
    // 1D226 0062;	
    // (ùà¶) GREEK INSTRUMENTAL NOTATION SYMBOL-14	[11C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D226, 0x0062 };
    uint32_t const ces[9] = { 0x11C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_317)
{
    // 1D227 0021;	
    // (ùàß) GREEK INSTRUMENTAL NOTATION SYMBOL-17	[11C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D227, 0x0021 };
    uint32_t const ces[9] = { 0x11C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_318)
{
    // 1D227 003F;	
    // (ùàß) GREEK INSTRUMENTAL NOTATION SYMBOL-17	[11C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D227, 0x003F };
    uint32_t const ces[9] = { 0x11C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_319)
{
    // 1D227 0061;	
    // (ùàß) GREEK INSTRUMENTAL NOTATION SYMBOL-17	[11C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D227, 0x0061 };
    uint32_t const ces[9] = { 0x11C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_320)
{
    // 1D227 0041;	
    // (ùàß) GREEK INSTRUMENTAL NOTATION SYMBOL-17	[11C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D227, 0x0041 };
    uint32_t const ces[9] = { 0x11C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_321)
{
    // 1D227 0062;	
    // (ùàß) GREEK INSTRUMENTAL NOTATION SYMBOL-17	[11C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D227, 0x0062 };
    uint32_t const ces[9] = { 0x11C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_322)
{
    // 1D228 0021;	
    // (ùà®) GREEK INSTRUMENTAL NOTATION SYMBOL-18	[11C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D228, 0x0021 };
    uint32_t const ces[9] = { 0x11C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_323)
{
    // 1D228 003F;	
    // (ùà®) GREEK INSTRUMENTAL NOTATION SYMBOL-18	[11C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D228, 0x003F };
    uint32_t const ces[9] = { 0x11C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_324)
{
    // 1D228 0061;	
    // (ùà®) GREEK INSTRUMENTAL NOTATION SYMBOL-18	[11C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D228, 0x0061 };
    uint32_t const ces[9] = { 0x11C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_325)
{
    // 1D228 0041;	
    // (ùà®) GREEK INSTRUMENTAL NOTATION SYMBOL-18	[11C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D228, 0x0041 };
    uint32_t const ces[9] = { 0x11C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_326)
{
    // 1D228 0062;	
    // (ùà®) GREEK INSTRUMENTAL NOTATION SYMBOL-18	[11C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D228, 0x0062 };
    uint32_t const ces[9] = { 0x11C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_327)
{
    // 1D229 0021;	
    // (ùà©) GREEK INSTRUMENTAL NOTATION SYMBOL-19	[11C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D229, 0x0021 };
    uint32_t const ces[9] = { 0x11C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_328)
{
    // 1D229 003F;	
    // (ùà©) GREEK INSTRUMENTAL NOTATION SYMBOL-19	[11C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D229, 0x003F };
    uint32_t const ces[9] = { 0x11C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_329)
{
    // 1D229 0061;	
    // (ùà©) GREEK INSTRUMENTAL NOTATION SYMBOL-19	[11C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D229, 0x0061 };
    uint32_t const ces[9] = { 0x11C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_330)
{
    // 1D229 0041;	
    // (ùà©) GREEK INSTRUMENTAL NOTATION SYMBOL-19	[11C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D229, 0x0041 };
    uint32_t const ces[9] = { 0x11C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_331)
{
    // 1D229 0062;	
    // (ùà©) GREEK INSTRUMENTAL NOTATION SYMBOL-19	[11C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D229, 0x0062 };
    uint32_t const ces[9] = { 0x11C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_332)
{
    // 1D22A 0021;	
    // (ùà™) GREEK INSTRUMENTAL NOTATION SYMBOL-23	[11C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22A, 0x0021 };
    uint32_t const ces[9] = { 0x11C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_333)
{
    // 1D22A 003F;	
    // (ùà™) GREEK INSTRUMENTAL NOTATION SYMBOL-23	[11C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22A, 0x003F };
    uint32_t const ces[9] = { 0x11C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_334)
{
    // 1D22A 0061;	
    // (ùà™) GREEK INSTRUMENTAL NOTATION SYMBOL-23	[11C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22A, 0x0061 };
    uint32_t const ces[9] = { 0x11C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_335)
{
    // 1D22A 0041;	
    // (ùà™) GREEK INSTRUMENTAL NOTATION SYMBOL-23	[11C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D22A, 0x0041 };
    uint32_t const ces[9] = { 0x11C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_336)
{
    // 1D22A 0062;	
    // (ùà™) GREEK INSTRUMENTAL NOTATION SYMBOL-23	[11C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22A, 0x0062 };
    uint32_t const ces[9] = { 0x11C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_337)
{
    // 1D22B 0021;	
    // (ùà´) GREEK INSTRUMENTAL NOTATION SYMBOL-24	[11C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22B, 0x0021 };
    uint32_t const ces[9] = { 0x11C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_338)
{
    // 1D22B 003F;	
    // (ùà´) GREEK INSTRUMENTAL NOTATION SYMBOL-24	[11C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22B, 0x003F };
    uint32_t const ces[9] = { 0x11C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_339)
{
    // 1D22B 0061;	
    // (ùà´) GREEK INSTRUMENTAL NOTATION SYMBOL-24	[11C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22B, 0x0061 };
    uint32_t const ces[9] = { 0x11C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_340)
{
    // 1D22B 0041;	
    // (ùà´) GREEK INSTRUMENTAL NOTATION SYMBOL-24	[11C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D22B, 0x0041 };
    uint32_t const ces[9] = { 0x11C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_341)
{
    // 1D22B 0062;	
    // (ùà´) GREEK INSTRUMENTAL NOTATION SYMBOL-24	[11C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22B, 0x0062 };
    uint32_t const ces[9] = { 0x11C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_342)
{
    // 1D22C 0021;	
    // (ùà¨) GREEK INSTRUMENTAL NOTATION SYMBOL-25	[11C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22C, 0x0021 };
    uint32_t const ces[9] = { 0x11C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_343)
{
    // 1D22C 003F;	
    // (ùà¨) GREEK INSTRUMENTAL NOTATION SYMBOL-25	[11C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22C, 0x003F };
    uint32_t const ces[9] = { 0x11C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_344)
{
    // 1D22C 0061;	
    // (ùà¨) GREEK INSTRUMENTAL NOTATION SYMBOL-25	[11C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22C, 0x0061 };
    uint32_t const ces[9] = { 0x11C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_345)
{
    // 1D22C 0041;	
    // (ùà¨) GREEK INSTRUMENTAL NOTATION SYMBOL-25	[11C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D22C, 0x0041 };
    uint32_t const ces[9] = { 0x11C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_346)
{
    // 1D22C 0062;	
    // (ùà¨) GREEK INSTRUMENTAL NOTATION SYMBOL-25	[11C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22C, 0x0062 };
    uint32_t const ces[9] = { 0x11C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_347)
{
    // 1D22D 0021;	
    // (ùà≠) GREEK INSTRUMENTAL NOTATION SYMBOL-26	[11C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22D, 0x0021 };
    uint32_t const ces[9] = { 0x11C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_348)
{
    // 1D22D 003F;	
    // (ùà≠) GREEK INSTRUMENTAL NOTATION SYMBOL-26	[11C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22D, 0x003F };
    uint32_t const ces[9] = { 0x11C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_349)
{
    // 1D22D 0061;	
    // (ùà≠) GREEK INSTRUMENTAL NOTATION SYMBOL-26	[11C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22D, 0x0061 };
    uint32_t const ces[9] = { 0x11C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_350)
{
    // 1D22D 0041;	
    // (ùà≠) GREEK INSTRUMENTAL NOTATION SYMBOL-26	[11C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D22D, 0x0041 };
    uint32_t const ces[9] = { 0x11C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_351)
{
    // 1D22D 0062;	
    // (ùà≠) GREEK INSTRUMENTAL NOTATION SYMBOL-26	[11C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22D, 0x0062 };
    uint32_t const ces[9] = { 0x11C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_352)
{
    // 1D22E 0021;	
    // (ùàÆ) GREEK INSTRUMENTAL NOTATION SYMBOL-27	[11C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22E, 0x0021 };
    uint32_t const ces[9] = { 0x11C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_353)
{
    // 1D22E 003F;	
    // (ùàÆ) GREEK INSTRUMENTAL NOTATION SYMBOL-27	[11C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22E, 0x003F };
    uint32_t const ces[9] = { 0x11C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_354)
{
    // 1D22E 0061;	
    // (ùàÆ) GREEK INSTRUMENTAL NOTATION SYMBOL-27	[11C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22E, 0x0061 };
    uint32_t const ces[9] = { 0x11C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_355)
{
    // 1D22E 0041;	
    // (ùàÆ) GREEK INSTRUMENTAL NOTATION SYMBOL-27	[11C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D22E, 0x0041 };
    uint32_t const ces[9] = { 0x11C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_356)
{
    // 1D22E 0062;	
    // (ùàÆ) GREEK INSTRUMENTAL NOTATION SYMBOL-27	[11C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22E, 0x0062 };
    uint32_t const ces[9] = { 0x11C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_357)
{
    // 1D22F 0021;	
    // (ùàØ) GREEK INSTRUMENTAL NOTATION SYMBOL-29	[11CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22F, 0x0021 };
    uint32_t const ces[9] = { 0x11CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_358)
{
    // 1D22F 003F;	
    // (ùàØ) GREEK INSTRUMENTAL NOTATION SYMBOL-29	[11CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22F, 0x003F };
    uint32_t const ces[9] = { 0x11CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_359)
{
    // 1D22F 0061;	
    // (ùàØ) GREEK INSTRUMENTAL NOTATION SYMBOL-29	[11CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22F, 0x0061 };
    uint32_t const ces[9] = { 0x11CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_360)
{
    // 1D22F 0041;	
    // (ùàØ) GREEK INSTRUMENTAL NOTATION SYMBOL-29	[11CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D22F, 0x0041 };
    uint32_t const ces[9] = { 0x11CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_361)
{
    // 1D22F 0062;	
    // (ùàØ) GREEK INSTRUMENTAL NOTATION SYMBOL-29	[11CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22F, 0x0062 };
    uint32_t const ces[9] = { 0x11CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_362)
{
    // 1D230 0021;	
    // (ùà∞) GREEK INSTRUMENTAL NOTATION SYMBOL-30	[11CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D230, 0x0021 };
    uint32_t const ces[9] = { 0x11CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_363)
{
    // 1D230 003F;	
    // (ùà∞) GREEK INSTRUMENTAL NOTATION SYMBOL-30	[11CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D230, 0x003F };
    uint32_t const ces[9] = { 0x11CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_364)
{
    // 1D230 0061;	
    // (ùà∞) GREEK INSTRUMENTAL NOTATION SYMBOL-30	[11CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D230, 0x0061 };
    uint32_t const ces[9] = { 0x11CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_365)
{
    // 1D230 0041;	
    // (ùà∞) GREEK INSTRUMENTAL NOTATION SYMBOL-30	[11CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D230, 0x0041 };
    uint32_t const ces[9] = { 0x11CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_366)
{
    // 1D230 0062;	
    // (ùà∞) GREEK INSTRUMENTAL NOTATION SYMBOL-30	[11CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D230, 0x0062 };
    uint32_t const ces[9] = { 0x11CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_367)
{
    // 1D231 0021;	
    // (ùà±) GREEK INSTRUMENTAL NOTATION SYMBOL-32	[11CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D231, 0x0021 };
    uint32_t const ces[9] = { 0x11CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_368)
{
    // 1D231 003F;	
    // (ùà±) GREEK INSTRUMENTAL NOTATION SYMBOL-32	[11CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D231, 0x003F };
    uint32_t const ces[9] = { 0x11CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_369)
{
    // 1D231 0061;	
    // (ùà±) GREEK INSTRUMENTAL NOTATION SYMBOL-32	[11CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D231, 0x0061 };
    uint32_t const ces[9] = { 0x11CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_370)
{
    // 1D231 0041;	
    // (ùà±) GREEK INSTRUMENTAL NOTATION SYMBOL-32	[11CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D231, 0x0041 };
    uint32_t const ces[9] = { 0x11CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_371)
{
    // 1D231 0062;	
    // (ùà±) GREEK INSTRUMENTAL NOTATION SYMBOL-32	[11CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D231, 0x0062 };
    uint32_t const ces[9] = { 0x11CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_372)
{
    // 1D232 0021;	
    // (ùà≤) GREEK INSTRUMENTAL NOTATION SYMBOL-36	[11CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D232, 0x0021 };
    uint32_t const ces[9] = { 0x11CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_373)
{
    // 1D232 003F;	
    // (ùà≤) GREEK INSTRUMENTAL NOTATION SYMBOL-36	[11CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D232, 0x003F };
    uint32_t const ces[9] = { 0x11CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_374)
{
    // 1D232 0061;	
    // (ùà≤) GREEK INSTRUMENTAL NOTATION SYMBOL-36	[11CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D232, 0x0061 };
    uint32_t const ces[9] = { 0x11CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_375)
{
    // 1D232 0041;	
    // (ùà≤) GREEK INSTRUMENTAL NOTATION SYMBOL-36	[11CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D232, 0x0041 };
    uint32_t const ces[9] = { 0x11CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_376)
{
    // 1D232 0062;	
    // (ùà≤) GREEK INSTRUMENTAL NOTATION SYMBOL-36	[11CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D232, 0x0062 };
    uint32_t const ces[9] = { 0x11CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_377)
{
    // 1D233 0021;	
    // (ùà≥) GREEK INSTRUMENTAL NOTATION SYMBOL-37	[11CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D233, 0x0021 };
    uint32_t const ces[9] = { 0x11CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_378)
{
    // 1D233 003F;	
    // (ùà≥) GREEK INSTRUMENTAL NOTATION SYMBOL-37	[11CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D233, 0x003F };
    uint32_t const ces[9] = { 0x11CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_379)
{
    // 1D233 0061;	
    // (ùà≥) GREEK INSTRUMENTAL NOTATION SYMBOL-37	[11CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D233, 0x0061 };
    uint32_t const ces[9] = { 0x11CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_380)
{
    // 1D233 0041;	
    // (ùà≥) GREEK INSTRUMENTAL NOTATION SYMBOL-37	[11CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D233, 0x0041 };
    uint32_t const ces[9] = { 0x11CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_381)
{
    // 1D233 0062;	
    // (ùà≥) GREEK INSTRUMENTAL NOTATION SYMBOL-37	[11CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D233, 0x0062 };
    uint32_t const ces[9] = { 0x11CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_382)
{
    // 1D234 0021;	
    // (ùà¥) GREEK INSTRUMENTAL NOTATION SYMBOL-38	[11CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D234, 0x0021 };
    uint32_t const ces[9] = { 0x11CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_383)
{
    // 1D234 003F;	
    // (ùà¥) GREEK INSTRUMENTAL NOTATION SYMBOL-38	[11CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D234, 0x003F };
    uint32_t const ces[9] = { 0x11CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_384)
{
    // 1D234 0061;	
    // (ùà¥) GREEK INSTRUMENTAL NOTATION SYMBOL-38	[11CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D234, 0x0061 };
    uint32_t const ces[9] = { 0x11CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_385)
{
    // 1D234 0041;	
    // (ùà¥) GREEK INSTRUMENTAL NOTATION SYMBOL-38	[11CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D234, 0x0041 };
    uint32_t const ces[9] = { 0x11CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_386)
{
    // 1D234 0062;	
    // (ùà¥) GREEK INSTRUMENTAL NOTATION SYMBOL-38	[11CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D234, 0x0062 };
    uint32_t const ces[9] = { 0x11CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_387)
{
    // 1D235 0021;	
    // (ùàµ) GREEK INSTRUMENTAL NOTATION SYMBOL-39	[11D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D235, 0x0021 };
    uint32_t const ces[9] = { 0x11D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_388)
{
    // 1D235 003F;	
    // (ùàµ) GREEK INSTRUMENTAL NOTATION SYMBOL-39	[11D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D235, 0x003F };
    uint32_t const ces[9] = { 0x11D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_389)
{
    // 1D235 0061;	
    // (ùàµ) GREEK INSTRUMENTAL NOTATION SYMBOL-39	[11D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D235, 0x0061 };
    uint32_t const ces[9] = { 0x11D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_390)
{
    // 1D235 0041;	
    // (ùàµ) GREEK INSTRUMENTAL NOTATION SYMBOL-39	[11D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D235, 0x0041 };
    uint32_t const ces[9] = { 0x11D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_391)
{
    // 1D235 0062;	
    // (ùàµ) GREEK INSTRUMENTAL NOTATION SYMBOL-39	[11D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D235, 0x0062 };
    uint32_t const ces[9] = { 0x11D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_392)
{
    // 1D236 0021;	
    // (ùà∂) GREEK INSTRUMENTAL NOTATION SYMBOL-40	[11D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D236, 0x0021 };
    uint32_t const ces[9] = { 0x11D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_393)
{
    // 1D236 003F;	
    // (ùà∂) GREEK INSTRUMENTAL NOTATION SYMBOL-40	[11D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D236, 0x003F };
    uint32_t const ces[9] = { 0x11D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_394)
{
    // 1D236 0061;	
    // (ùà∂) GREEK INSTRUMENTAL NOTATION SYMBOL-40	[11D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D236, 0x0061 };
    uint32_t const ces[9] = { 0x11D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_395)
{
    // 1D236 0041;	
    // (ùà∂) GREEK INSTRUMENTAL NOTATION SYMBOL-40	[11D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D236, 0x0041 };
    uint32_t const ces[9] = { 0x11D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_396)
{
    // 1D236 0062;	
    // (ùà∂) GREEK INSTRUMENTAL NOTATION SYMBOL-40	[11D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D236, 0x0062 };
    uint32_t const ces[9] = { 0x11D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_397)
{
    // 1D237 0021;	
    // (ùà∑) GREEK INSTRUMENTAL NOTATION SYMBOL-42	[11D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D237, 0x0021 };
    uint32_t const ces[9] = { 0x11D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_398)
{
    // 1D237 003F;	
    // (ùà∑) GREEK INSTRUMENTAL NOTATION SYMBOL-42	[11D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D237, 0x003F };
    uint32_t const ces[9] = { 0x11D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_399)
{
    // 1D237 0061;	
    // (ùà∑) GREEK INSTRUMENTAL NOTATION SYMBOL-42	[11D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D237, 0x0061 };
    uint32_t const ces[9] = { 0x11D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_400)
{
    // 1D237 0041;	
    // (ùà∑) GREEK INSTRUMENTAL NOTATION SYMBOL-42	[11D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D237, 0x0041 };
    uint32_t const ces[9] = { 0x11D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_401)
{
    // 1D237 0062;	
    // (ùà∑) GREEK INSTRUMENTAL NOTATION SYMBOL-42	[11D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D237, 0x0062 };
    uint32_t const ces[9] = { 0x11D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_402)
{
    // 1D238 0021;	
    // (ùà∏) GREEK INSTRUMENTAL NOTATION SYMBOL-43	[11D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D238, 0x0021 };
    uint32_t const ces[9] = { 0x11D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_403)
{
    // 1D238 003F;	
    // (ùà∏) GREEK INSTRUMENTAL NOTATION SYMBOL-43	[11D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D238, 0x003F };
    uint32_t const ces[9] = { 0x11D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_404)
{
    // 1D238 0061;	
    // (ùà∏) GREEK INSTRUMENTAL NOTATION SYMBOL-43	[11D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D238, 0x0061 };
    uint32_t const ces[9] = { 0x11D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_405)
{
    // 1D238 0041;	
    // (ùà∏) GREEK INSTRUMENTAL NOTATION SYMBOL-43	[11D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D238, 0x0041 };
    uint32_t const ces[9] = { 0x11D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_406)
{
    // 1D238 0062;	
    // (ùà∏) GREEK INSTRUMENTAL NOTATION SYMBOL-43	[11D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D238, 0x0062 };
    uint32_t const ces[9] = { 0x11D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_407)
{
    // 1D239 0021;	
    // (ùàπ) GREEK INSTRUMENTAL NOTATION SYMBOL-45	[11D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D239, 0x0021 };
    uint32_t const ces[9] = { 0x11D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_408)
{
    // 1D239 003F;	
    // (ùàπ) GREEK INSTRUMENTAL NOTATION SYMBOL-45	[11D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D239, 0x003F };
    uint32_t const ces[9] = { 0x11D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_409)
{
    // 1D239 0061;	
    // (ùàπ) GREEK INSTRUMENTAL NOTATION SYMBOL-45	[11D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D239, 0x0061 };
    uint32_t const ces[9] = { 0x11D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_410)
{
    // 1D239 0041;	
    // (ùàπ) GREEK INSTRUMENTAL NOTATION SYMBOL-45	[11D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D239, 0x0041 };
    uint32_t const ces[9] = { 0x11D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_411)
{
    // 1D239 0062;	
    // (ùàπ) GREEK INSTRUMENTAL NOTATION SYMBOL-45	[11D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D239, 0x0062 };
    uint32_t const ces[9] = { 0x11D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_412)
{
    // 1D23A 0021;	
    // (ùà∫) GREEK INSTRUMENTAL NOTATION SYMBOL-47	[11D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23A, 0x0021 };
    uint32_t const ces[9] = { 0x11D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_413)
{
    // 1D23A 003F;	
    // (ùà∫) GREEK INSTRUMENTAL NOTATION SYMBOL-47	[11D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23A, 0x003F };
    uint32_t const ces[9] = { 0x11D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_414)
{
    // 1D23A 0061;	
    // (ùà∫) GREEK INSTRUMENTAL NOTATION SYMBOL-47	[11D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23A, 0x0061 };
    uint32_t const ces[9] = { 0x11D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_415)
{
    // 1D23A 0041;	
    // (ùà∫) GREEK INSTRUMENTAL NOTATION SYMBOL-47	[11D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D23A, 0x0041 };
    uint32_t const ces[9] = { 0x11D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_416)
{
    // 1D23A 0062;	
    // (ùà∫) GREEK INSTRUMENTAL NOTATION SYMBOL-47	[11D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23A, 0x0062 };
    uint32_t const ces[9] = { 0x11D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_417)
{
    // 1D23B 0021;	
    // (ùàª) GREEK INSTRUMENTAL NOTATION SYMBOL-48	[11D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23B, 0x0021 };
    uint32_t const ces[9] = { 0x11D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_418)
{
    // 1D23B 003F;	
    // (ùàª) GREEK INSTRUMENTAL NOTATION SYMBOL-48	[11D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23B, 0x003F };
    uint32_t const ces[9] = { 0x11D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_419)
{
    // 1D23B 0061;	
    // (ùàª) GREEK INSTRUMENTAL NOTATION SYMBOL-48	[11D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23B, 0x0061 };
    uint32_t const ces[9] = { 0x11D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_420)
{
    // 1D23B 0041;	
    // (ùàª) GREEK INSTRUMENTAL NOTATION SYMBOL-48	[11D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D23B, 0x0041 };
    uint32_t const ces[9] = { 0x11D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_421)
{
    // 1D23B 0062;	
    // (ùàª) GREEK INSTRUMENTAL NOTATION SYMBOL-48	[11D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23B, 0x0062 };
    uint32_t const ces[9] = { 0x11D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_422)
{
    // 1D23C 0021;	
    // (ùàº) GREEK INSTRUMENTAL NOTATION SYMBOL-49	[11D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23C, 0x0021 };
    uint32_t const ces[9] = { 0x11D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_423)
{
    // 1D23C 003F;	
    // (ùàº) GREEK INSTRUMENTAL NOTATION SYMBOL-49	[11D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23C, 0x003F };
    uint32_t const ces[9] = { 0x11D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_424)
{
    // 1D23C 0061;	
    // (ùàº) GREEK INSTRUMENTAL NOTATION SYMBOL-49	[11D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23C, 0x0061 };
    uint32_t const ces[9] = { 0x11D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_425)
{
    // 1D23C 0041;	
    // (ùàº) GREEK INSTRUMENTAL NOTATION SYMBOL-49	[11D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D23C, 0x0041 };
    uint32_t const ces[9] = { 0x11D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_426)
{
    // 1D23C 0062;	
    // (ùàº) GREEK INSTRUMENTAL NOTATION SYMBOL-49	[11D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23C, 0x0062 };
    uint32_t const ces[9] = { 0x11D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_427)
{
    // 1D23D 0021;	
    // (ùàΩ) GREEK INSTRUMENTAL NOTATION SYMBOL-50	[11D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23D, 0x0021 };
    uint32_t const ces[9] = { 0x11D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_428)
{
    // 1D23D 003F;	
    // (ùàΩ) GREEK INSTRUMENTAL NOTATION SYMBOL-50	[11D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23D, 0x003F };
    uint32_t const ces[9] = { 0x11D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_429)
{
    // 1D23D 0061;	
    // (ùàΩ) GREEK INSTRUMENTAL NOTATION SYMBOL-50	[11D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23D, 0x0061 };
    uint32_t const ces[9] = { 0x11D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_430)
{
    // 1D23D 0041;	
    // (ùàΩ) GREEK INSTRUMENTAL NOTATION SYMBOL-50	[11D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D23D, 0x0041 };
    uint32_t const ces[9] = { 0x11D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_431)
{
    // 1D23D 0062;	
    // (ùàΩ) GREEK INSTRUMENTAL NOTATION SYMBOL-50	[11D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23D, 0x0062 };
    uint32_t const ces[9] = { 0x11D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_432)
{
    // 1D23E 0021;	
    // (ùàæ) GREEK INSTRUMENTAL NOTATION SYMBOL-51	[11D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23E, 0x0021 };
    uint32_t const ces[9] = { 0x11D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_433)
{
    // 1D23E 003F;	
    // (ùàæ) GREEK INSTRUMENTAL NOTATION SYMBOL-51	[11D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23E, 0x003F };
    uint32_t const ces[9] = { 0x11D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_434)
{
    // 1D23E 0061;	
    // (ùàæ) GREEK INSTRUMENTAL NOTATION SYMBOL-51	[11D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23E, 0x0061 };
    uint32_t const ces[9] = { 0x11D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_435)
{
    // 1D23E 0041;	
    // (ùàæ) GREEK INSTRUMENTAL NOTATION SYMBOL-51	[11D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D23E, 0x0041 };
    uint32_t const ces[9] = { 0x11D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_436)
{
    // 1D23E 0062;	
    // (ùàæ) GREEK INSTRUMENTAL NOTATION SYMBOL-51	[11D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23E, 0x0062 };
    uint32_t const ces[9] = { 0x11D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_437)
{
    // 1D23F 0021;	
    // (ùàø) GREEK INSTRUMENTAL NOTATION SYMBOL-52	[11DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23F, 0x0021 };
    uint32_t const ces[9] = { 0x11DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_438)
{
    // 1D23F 003F;	
    // (ùàø) GREEK INSTRUMENTAL NOTATION SYMBOL-52	[11DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23F, 0x003F };
    uint32_t const ces[9] = { 0x11DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_439)
{
    // 1D23F 0061;	
    // (ùàø) GREEK INSTRUMENTAL NOTATION SYMBOL-52	[11DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23F, 0x0061 };
    uint32_t const ces[9] = { 0x11DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_440)
{
    // 1D23F 0041;	
    // (ùàø) GREEK INSTRUMENTAL NOTATION SYMBOL-52	[11DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D23F, 0x0041 };
    uint32_t const ces[9] = { 0x11DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_441)
{
    // 1D23F 0062;	
    // (ùàø) GREEK INSTRUMENTAL NOTATION SYMBOL-52	[11DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23F, 0x0062 };
    uint32_t const ces[9] = { 0x11DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_442)
{
    // 1D240 0021;	
    // (ùâÄ) GREEK INSTRUMENTAL NOTATION SYMBOL-53	[11DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D240, 0x0021 };
    uint32_t const ces[9] = { 0x11DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_443)
{
    // 1D240 003F;	
    // (ùâÄ) GREEK INSTRUMENTAL NOTATION SYMBOL-53	[11DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D240, 0x003F };
    uint32_t const ces[9] = { 0x11DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_444)
{
    // 1D240 0061;	
    // (ùâÄ) GREEK INSTRUMENTAL NOTATION SYMBOL-53	[11DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D240, 0x0061 };
    uint32_t const ces[9] = { 0x11DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_445)
{
    // 1D240 0041;	
    // (ùâÄ) GREEK INSTRUMENTAL NOTATION SYMBOL-53	[11DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D240, 0x0041 };
    uint32_t const ces[9] = { 0x11DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_446)
{
    // 1D240 0062;	
    // (ùâÄ) GREEK INSTRUMENTAL NOTATION SYMBOL-53	[11DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D240, 0x0062 };
    uint32_t const ces[9] = { 0x11DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_447)
{
    // 1D241 0021;	
    // (ùâÅ) GREEK INSTRUMENTAL NOTATION SYMBOL-54	[11DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D241, 0x0021 };
    uint32_t const ces[9] = { 0x11DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_448)
{
    // 1D241 003F;	
    // (ùâÅ) GREEK INSTRUMENTAL NOTATION SYMBOL-54	[11DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D241, 0x003F };
    uint32_t const ces[9] = { 0x11DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_449)
{
    // 1D241 0061;	
    // (ùâÅ) GREEK INSTRUMENTAL NOTATION SYMBOL-54	[11DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D241, 0x0061 };
    uint32_t const ces[9] = { 0x11DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_450)
{
    // 1D241 0041;	
    // (ùâÅ) GREEK INSTRUMENTAL NOTATION SYMBOL-54	[11DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D241, 0x0041 };
    uint32_t const ces[9] = { 0x11DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_451)
{
    // 1D241 0062;	
    // (ùâÅ) GREEK INSTRUMENTAL NOTATION SYMBOL-54	[11DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D241, 0x0062 };
    uint32_t const ces[9] = { 0x11DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_452)
{
    // 1D245 0021;	
    // (ùâÖ) GREEK MUSICAL LEIMMA	[11DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D245, 0x0021 };
    uint32_t const ces[9] = { 0x11DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_453)
{
    // 1D245 003F;	
    // (ùâÖ) GREEK MUSICAL LEIMMA	[11DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D245, 0x003F };
    uint32_t const ces[9] = { 0x11DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_454)
{
    // 1D245 0061;	
    // (ùâÖ) GREEK MUSICAL LEIMMA	[11DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D245, 0x0061 };
    uint32_t const ces[9] = { 0x11DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_455)
{
    // 1D245 0041;	
    // (ùâÖ) GREEK MUSICAL LEIMMA	[11DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D245, 0x0041 };
    uint32_t const ces[9] = { 0x11DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_456)
{
    // 1D245 0062;	
    // (ùâÖ) GREEK MUSICAL LEIMMA	[11DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D245, 0x0062 };
    uint32_t const ces[9] = { 0x11DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_457)
{
    // 1BC9C 0021;	
    // (õ≤ú) DUPLOYAN SIGN O WITH CROSS	[11DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC9C, 0x0021 };
    uint32_t const ces[9] = { 0x11DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_458)
{
    // 1BC9C 003F;	
    // (õ≤ú) DUPLOYAN SIGN O WITH CROSS	[11DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC9C, 0x003F };
    uint32_t const ces[9] = { 0x11DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_459)
{
    // 1BC9C 0061;	
    // (õ≤ú) DUPLOYAN SIGN O WITH CROSS	[11DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC9C, 0x0061 };
    uint32_t const ces[9] = { 0x11DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_460)
{
    // 1BC9C 0041;	
    // (õ≤ú) DUPLOYAN SIGN O WITH CROSS	[11DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC9C, 0x0041 };
    uint32_t const ces[9] = { 0x11DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_461)
{
    // 1BC9C 0062;	
    // (õ≤ú) DUPLOYAN SIGN O WITH CROSS	[11DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC9C, 0x0062 };
    uint32_t const ces[9] = { 0x11DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_462)
{
    // 1F000 0021;	
    // (üÄÄ) MAHJONG TILE EAST WIND	[11DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F000, 0x0021 };
    uint32_t const ces[9] = { 0x11DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_463)
{
    // 1F000 003F;	
    // (üÄÄ) MAHJONG TILE EAST WIND	[11DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F000, 0x003F };
    uint32_t const ces[9] = { 0x11DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_464)
{
    // 1F000 0061;	
    // (üÄÄ) MAHJONG TILE EAST WIND	[11DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F000, 0x0061 };
    uint32_t const ces[9] = { 0x11DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_465)
{
    // 1F000 0041;	
    // (üÄÄ) MAHJONG TILE EAST WIND	[11DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F000, 0x0041 };
    uint32_t const ces[9] = { 0x11DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_466)
{
    // 1F000 0062;	
    // (üÄÄ) MAHJONG TILE EAST WIND	[11DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F000, 0x0062 };
    uint32_t const ces[9] = { 0x11DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_467)
{
    // 1F001 0021;	
    // (üÄÅ) MAHJONG TILE SOUTH WIND	[11E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F001, 0x0021 };
    uint32_t const ces[9] = { 0x11E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_468)
{
    // 1F001 003F;	
    // (üÄÅ) MAHJONG TILE SOUTH WIND	[11E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F001, 0x003F };
    uint32_t const ces[9] = { 0x11E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_469)
{
    // 1F001 0061;	
    // (üÄÅ) MAHJONG TILE SOUTH WIND	[11E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F001, 0x0061 };
    uint32_t const ces[9] = { 0x11E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_470)
{
    // 1F001 0041;	
    // (üÄÅ) MAHJONG TILE SOUTH WIND	[11E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F001, 0x0041 };
    uint32_t const ces[9] = { 0x11E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_471)
{
    // 1F001 0062;	
    // (üÄÅ) MAHJONG TILE SOUTH WIND	[11E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F001, 0x0062 };
    uint32_t const ces[9] = { 0x11E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_472)
{
    // 1F002 0021;	
    // (üÄÇ) MAHJONG TILE WEST WIND	[11E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F002, 0x0021 };
    uint32_t const ces[9] = { 0x11E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_473)
{
    // 1F002 003F;	
    // (üÄÇ) MAHJONG TILE WEST WIND	[11E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F002, 0x003F };
    uint32_t const ces[9] = { 0x11E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_474)
{
    // 1F002 0061;	
    // (üÄÇ) MAHJONG TILE WEST WIND	[11E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F002, 0x0061 };
    uint32_t const ces[9] = { 0x11E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_475)
{
    // 1F002 0041;	
    // (üÄÇ) MAHJONG TILE WEST WIND	[11E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F002, 0x0041 };
    uint32_t const ces[9] = { 0x11E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_476)
{
    // 1F002 0062;	
    // (üÄÇ) MAHJONG TILE WEST WIND	[11E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F002, 0x0062 };
    uint32_t const ces[9] = { 0x11E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_477)
{
    // 1F003 0021;	
    // (üÄÉ) MAHJONG TILE NORTH WIND	[11E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F003, 0x0021 };
    uint32_t const ces[9] = { 0x11E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_478)
{
    // 1F003 003F;	
    // (üÄÉ) MAHJONG TILE NORTH WIND	[11E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F003, 0x003F };
    uint32_t const ces[9] = { 0x11E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_479)
{
    // 1F003 0061;	
    // (üÄÉ) MAHJONG TILE NORTH WIND	[11E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F003, 0x0061 };
    uint32_t const ces[9] = { 0x11E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_480)
{
    // 1F003 0041;	
    // (üÄÉ) MAHJONG TILE NORTH WIND	[11E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F003, 0x0041 };
    uint32_t const ces[9] = { 0x11E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_481)
{
    // 1F003 0062;	
    // (üÄÉ) MAHJONG TILE NORTH WIND	[11E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F003, 0x0062 };
    uint32_t const ces[9] = { 0x11E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_482)
{
    // 1F004 0021;	
    // (üÄÑ) MAHJONG TILE RED DRAGON	[11E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F004, 0x0021 };
    uint32_t const ces[9] = { 0x11E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_483)
{
    // 1F004 003F;	
    // (üÄÑ) MAHJONG TILE RED DRAGON	[11E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F004, 0x003F };
    uint32_t const ces[9] = { 0x11E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_484)
{
    // 1F004 0061;	
    // (üÄÑ) MAHJONG TILE RED DRAGON	[11E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F004, 0x0061 };
    uint32_t const ces[9] = { 0x11E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_485)
{
    // 1F004 0041;	
    // (üÄÑ) MAHJONG TILE RED DRAGON	[11E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F004, 0x0041 };
    uint32_t const ces[9] = { 0x11E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_486)
{
    // 1F004 0062;	
    // (üÄÑ) MAHJONG TILE RED DRAGON	[11E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F004, 0x0062 };
    uint32_t const ces[9] = { 0x11E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_487)
{
    // 1F005 0021;	
    // (üÄÖ) MAHJONG TILE GREEN DRAGON	[11E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F005, 0x0021 };
    uint32_t const ces[9] = { 0x11E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_488)
{
    // 1F005 003F;	
    // (üÄÖ) MAHJONG TILE GREEN DRAGON	[11E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F005, 0x003F };
    uint32_t const ces[9] = { 0x11E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_489)
{
    // 1F005 0061;	
    // (üÄÖ) MAHJONG TILE GREEN DRAGON	[11E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F005, 0x0061 };
    uint32_t const ces[9] = { 0x11E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_490)
{
    // 1F005 0041;	
    // (üÄÖ) MAHJONG TILE GREEN DRAGON	[11E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F005, 0x0041 };
    uint32_t const ces[9] = { 0x11E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_491)
{
    // 1F005 0062;	
    // (üÄÖ) MAHJONG TILE GREEN DRAGON	[11E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F005, 0x0062 };
    uint32_t const ces[9] = { 0x11E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_492)
{
    // 1F006 0021;	
    // (üÄÜ) MAHJONG TILE WHITE DRAGON	[11E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F006, 0x0021 };
    uint32_t const ces[9] = { 0x11E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_493)
{
    // 1F006 003F;	
    // (üÄÜ) MAHJONG TILE WHITE DRAGON	[11E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F006, 0x003F };
    uint32_t const ces[9] = { 0x11E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_494)
{
    // 1F006 0061;	
    // (üÄÜ) MAHJONG TILE WHITE DRAGON	[11E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F006, 0x0061 };
    uint32_t const ces[9] = { 0x11E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_495)
{
    // 1F006 0041;	
    // (üÄÜ) MAHJONG TILE WHITE DRAGON	[11E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F006, 0x0041 };
    uint32_t const ces[9] = { 0x11E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_496)
{
    // 1F006 0062;	
    // (üÄÜ) MAHJONG TILE WHITE DRAGON	[11E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F006, 0x0062 };
    uint32_t const ces[9] = { 0x11E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_497)
{
    // 1F007 0021;	
    // (üÄá) MAHJONG TILE ONE OF CHARACTERS	[11E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F007, 0x0021 };
    uint32_t const ces[9] = { 0x11E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_498)
{
    // 1F007 003F;	
    // (üÄá) MAHJONG TILE ONE OF CHARACTERS	[11E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F007, 0x003F };
    uint32_t const ces[9] = { 0x11E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_052_499)
{
    // 1F007 0061;	
    // (üÄá) MAHJONG TILE ONE OF CHARACTERS	[11E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F007, 0x0061 };
    uint32_t const ces[9] = { 0x11E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

