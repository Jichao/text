// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_138_000)
{
    // 0455 0021;	
    // (ѕ) CYRILLIC SMALL LETTER DZE	[20DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0455, 0x0021 };
    uint32_t const ces[9] = { 0x20DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_001)
{
    // 0405 0021;	
    // (Ѕ) CYRILLIC CAPITAL LETTER DZE	[20DA 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0405, 0x0021 };
    uint32_t const ces[9] = { 0x20DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_002)
{
    // 0455 003F;	
    // (ѕ) CYRILLIC SMALL LETTER DZE	[20DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0455, 0x003F };
    uint32_t const ces[9] = { 0x20DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_003)
{
    // 0405 003F;	
    // (Ѕ) CYRILLIC CAPITAL LETTER DZE	[20DA 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0405, 0x003F };
    uint32_t const ces[9] = { 0x20DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_004)
{
    // 0455 0061;	
    // (ѕ) CYRILLIC SMALL LETTER DZE	[20DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0455, 0x0061 };
    uint32_t const ces[9] = { 0x20DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_005)
{
    // 0455 0041;	
    // (ѕ) CYRILLIC SMALL LETTER DZE	[20DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0455, 0x0041 };
    uint32_t const ces[9] = { 0x20DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_006)
{
    // 0405 0061;	
    // (Ѕ) CYRILLIC CAPITAL LETTER DZE	[20DA 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0405, 0x0061 };
    uint32_t const ces[9] = { 0x20DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_007)
{
    // 0405 0041;	
    // (Ѕ) CYRILLIC CAPITAL LETTER DZE	[20DA 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0405, 0x0041 };
    uint32_t const ces[9] = { 0x20DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_008)
{
    // 0455 0062;	
    // (ѕ) CYRILLIC SMALL LETTER DZE	[20DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0455, 0x0062 };
    uint32_t const ces[9] = { 0x20DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_009)
{
    // 0405 0062;	
    // (Ѕ) CYRILLIC CAPITAL LETTER DZE	[20DA 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0405, 0x0062 };
    uint32_t const ces[9] = { 0x20DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_010)
{
    // A645 0021;	
    // (ꙅ) CYRILLIC SMALL LETTER REVERSED DZE	[20DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA645, 0x0021 };
    uint32_t const ces[9] = { 0x20DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_011)
{
    // A644 0021;	
    // (Ꙅ) CYRILLIC CAPITAL LETTER REVERSED DZE	[20DE 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA644, 0x0021 };
    uint32_t const ces[9] = { 0x20DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_012)
{
    // A645 003F;	
    // (ꙅ) CYRILLIC SMALL LETTER REVERSED DZE	[20DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA645, 0x003F };
    uint32_t const ces[9] = { 0x20DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_013)
{
    // A644 003F;	
    // (Ꙅ) CYRILLIC CAPITAL LETTER REVERSED DZE	[20DE 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA644, 0x003F };
    uint32_t const ces[9] = { 0x20DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_014)
{
    // A645 0061;	
    // (ꙅ) CYRILLIC SMALL LETTER REVERSED DZE	[20DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA645, 0x0061 };
    uint32_t const ces[9] = { 0x20DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_015)
{
    // A645 0041;	
    // (ꙅ) CYRILLIC SMALL LETTER REVERSED DZE	[20DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA645, 0x0041 };
    uint32_t const ces[9] = { 0x20DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_016)
{
    // A644 0061;	
    // (Ꙅ) CYRILLIC CAPITAL LETTER REVERSED DZE	[20DE 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA644, 0x0061 };
    uint32_t const ces[9] = { 0x20DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_017)
{
    // A644 0041;	
    // (Ꙅ) CYRILLIC CAPITAL LETTER REVERSED DZE	[20DE 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA644, 0x0041 };
    uint32_t const ces[9] = { 0x20DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_018)
{
    // A645 0062;	
    // (ꙅ) CYRILLIC SMALL LETTER REVERSED DZE	[20DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA645, 0x0062 };
    uint32_t const ces[9] = { 0x20DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_019)
{
    // A644 0062;	
    // (Ꙅ) CYRILLIC CAPITAL LETTER REVERSED DZE	[20DE 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA644, 0x0062 };
    uint32_t const ces[9] = { 0x20DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_020)
{
    // 04E1 0021;	
    // (ӡ) CYRILLIC SMALL LETTER ABKHASIAN DZE	[20DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04E1, 0x0021 };
    uint32_t const ces[9] = { 0x20DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_021)
{
    // 04E0 0021;	
    // (Ӡ) CYRILLIC CAPITAL LETTER ABKHASIAN DZE	[20DF 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04E0, 0x0021 };
    uint32_t const ces[9] = { 0x20DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_022)
{
    // 04E1 003F;	
    // (ӡ) CYRILLIC SMALL LETTER ABKHASIAN DZE	[20DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04E1, 0x003F };
    uint32_t const ces[9] = { 0x20DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_023)
{
    // 04E0 003F;	
    // (Ӡ) CYRILLIC CAPITAL LETTER ABKHASIAN DZE	[20DF 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04E0, 0x003F };
    uint32_t const ces[9] = { 0x20DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_024)
{
    // 04E1 0061;	
    // (ӡ) CYRILLIC SMALL LETTER ABKHASIAN DZE	[20DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04E1, 0x0061 };
    uint32_t const ces[9] = { 0x20DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_025)
{
    // 04E1 0041;	
    // (ӡ) CYRILLIC SMALL LETTER ABKHASIAN DZE	[20DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x04E1, 0x0041 };
    uint32_t const ces[9] = { 0x20DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_026)
{
    // 04E0 0061;	
    // (Ӡ) CYRILLIC CAPITAL LETTER ABKHASIAN DZE	[20DF 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04E0, 0x0061 };
    uint32_t const ces[9] = { 0x20DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_027)
{
    // 04E0 0041;	
    // (Ӡ) CYRILLIC CAPITAL LETTER ABKHASIAN DZE	[20DF 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x04E0, 0x0041 };
    uint32_t const ces[9] = { 0x20DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_028)
{
    // 04E1 0062;	
    // (ӡ) CYRILLIC SMALL LETTER ABKHASIAN DZE	[20DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04E1, 0x0062 };
    uint32_t const ces[9] = { 0x20DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_029)
{
    // 04E0 0062;	
    // (Ӡ) CYRILLIC CAPITAL LETTER ABKHASIAN DZE	[20DF 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04E0, 0x0062 };
    uint32_t const ces[9] = { 0x20DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_030)
{
    // A689 0021;	
    // (ꚉ) CYRILLIC SMALL LETTER DZZE	[20E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA689, 0x0021 };
    uint32_t const ces[9] = { 0x20E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_031)
{
    // A688 0021;	
    // (Ꚉ) CYRILLIC CAPITAL LETTER DZZE	[20E3 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA688, 0x0021 };
    uint32_t const ces[9] = { 0x20E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_032)
{
    // A689 003F;	
    // (ꚉ) CYRILLIC SMALL LETTER DZZE	[20E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA689, 0x003F };
    uint32_t const ces[9] = { 0x20E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_033)
{
    // A688 003F;	
    // (Ꚉ) CYRILLIC CAPITAL LETTER DZZE	[20E3 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA688, 0x003F };
    uint32_t const ces[9] = { 0x20E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_034)
{
    // A689 0061;	
    // (ꚉ) CYRILLIC SMALL LETTER DZZE	[20E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA689, 0x0061 };
    uint32_t const ces[9] = { 0x20E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_035)
{
    // A689 0041;	
    // (ꚉ) CYRILLIC SMALL LETTER DZZE	[20E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA689, 0x0041 };
    uint32_t const ces[9] = { 0x20E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_036)
{
    // A688 0061;	
    // (Ꚉ) CYRILLIC CAPITAL LETTER DZZE	[20E3 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA688, 0x0061 };
    uint32_t const ces[9] = { 0x20E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_037)
{
    // A688 0041;	
    // (Ꚉ) CYRILLIC CAPITAL LETTER DZZE	[20E3 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA688, 0x0041 };
    uint32_t const ces[9] = { 0x20E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_038)
{
    // A689 0062;	
    // (ꚉ) CYRILLIC SMALL LETTER DZZE	[20E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA689, 0x0062 };
    uint32_t const ces[9] = { 0x20E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_039)
{
    // A688 0062;	
    // (Ꚉ) CYRILLIC CAPITAL LETTER DZZE	[20E3 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA688, 0x0062 };
    uint32_t const ces[9] = { 0x20E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_040)
{
    // 0507 0021;	
    // (ԇ) CYRILLIC SMALL LETTER KOMI DZJE	[20E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0507, 0x0021 };
    uint32_t const ces[9] = { 0x20E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_041)
{
    // 0506 0021;	
    // (Ԇ) CYRILLIC CAPITAL LETTER KOMI DZJE	[20E4 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0506, 0x0021 };
    uint32_t const ces[9] = { 0x20E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_042)
{
    // 0507 003F;	
    // (ԇ) CYRILLIC SMALL LETTER KOMI DZJE	[20E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0507, 0x003F };
    uint32_t const ces[9] = { 0x20E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_043)
{
    // 0506 003F;	
    // (Ԇ) CYRILLIC CAPITAL LETTER KOMI DZJE	[20E4 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0506, 0x003F };
    uint32_t const ces[9] = { 0x20E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_044)
{
    // 0507 0061;	
    // (ԇ) CYRILLIC SMALL LETTER KOMI DZJE	[20E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0507, 0x0061 };
    uint32_t const ces[9] = { 0x20E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_045)
{
    // 0507 0041;	
    // (ԇ) CYRILLIC SMALL LETTER KOMI DZJE	[20E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0507, 0x0041 };
    uint32_t const ces[9] = { 0x20E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_046)
{
    // 0506 0061;	
    // (Ԇ) CYRILLIC CAPITAL LETTER KOMI DZJE	[20E4 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0506, 0x0061 };
    uint32_t const ces[9] = { 0x20E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_047)
{
    // 0506 0041;	
    // (Ԇ) CYRILLIC CAPITAL LETTER KOMI DZJE	[20E4 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0506, 0x0041 };
    uint32_t const ces[9] = { 0x20E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_048)
{
    // 0507 0062;	
    // (ԇ) CYRILLIC SMALL LETTER KOMI DZJE	[20E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0507, 0x0062 };
    uint32_t const ces[9] = { 0x20E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_049)
{
    // 0506 0062;	
    // (Ԇ) CYRILLIC CAPITAL LETTER KOMI DZJE	[20E4 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0506, 0x0062 };
    uint32_t const ces[9] = { 0x20E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_050)
{
    // A683 0021;	
    // (ꚃ) CYRILLIC SMALL LETTER DZWE	[20E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA683, 0x0021 };
    uint32_t const ces[9] = { 0x20E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_051)
{
    // A682 0021;	
    // (Ꚃ) CYRILLIC CAPITAL LETTER DZWE	[20E5 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA682, 0x0021 };
    uint32_t const ces[9] = { 0x20E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_052)
{
    // A683 003F;	
    // (ꚃ) CYRILLIC SMALL LETTER DZWE	[20E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA683, 0x003F };
    uint32_t const ces[9] = { 0x20E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_053)
{
    // A682 003F;	
    // (Ꚃ) CYRILLIC CAPITAL LETTER DZWE	[20E5 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA682, 0x003F };
    uint32_t const ces[9] = { 0x20E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_054)
{
    // A683 0061;	
    // (ꚃ) CYRILLIC SMALL LETTER DZWE	[20E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA683, 0x0061 };
    uint32_t const ces[9] = { 0x20E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_055)
{
    // A683 0041;	
    // (ꚃ) CYRILLIC SMALL LETTER DZWE	[20E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA683, 0x0041 };
    uint32_t const ces[9] = { 0x20E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_056)
{
    // A682 0061;	
    // (Ꚃ) CYRILLIC CAPITAL LETTER DZWE	[20E5 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA682, 0x0061 };
    uint32_t const ces[9] = { 0x20E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_057)
{
    // A682 0041;	
    // (Ꚃ) CYRILLIC CAPITAL LETTER DZWE	[20E5 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA682, 0x0041 };
    uint32_t const ces[9] = { 0x20E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_058)
{
    // A683 0062;	
    // (ꚃ) CYRILLIC SMALL LETTER DZWE	[20E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA683, 0x0062 };
    uint32_t const ces[9] = { 0x20E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_059)
{
    // A682 0062;	
    // (Ꚃ) CYRILLIC CAPITAL LETTER DZWE	[20E5 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA682, 0x0062 };
    uint32_t const ces[9] = { 0x20E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_060)
{
    // 0438 0300 0334;	
    // (ѝ) CYRILLIC SMALL LETTER I, COMBINING GRAVE ACCENT	[20E6 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0438, 0x0300, 0x0334 };
    uint32_t const ces[10] = { 0x20E6, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_061)
{
    // 0438 0334 0300;	
    // (и̴) CYRILLIC SMALL LETTER I, COMBINING TILDE OVERLAY	[20E6 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0438, 0x0334, 0x0300 };
    uint32_t const ces[10] = { 0x20E6, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_062)
{
    // 0438 0334 0340;	
    // (и̴) CYRILLIC SMALL LETTER I, COMBINING TILDE OVERLAY	[20E6 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0438, 0x0334, 0x0340 };
    uint32_t const ces[10] = { 0x20E6, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_063)
{
    // 045D 0334;	
    // (ѝ) CYRILLIC SMALL LETTER I WITH GRAVE	[20E6 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x045D, 0x0334 };
    uint32_t const ces[10] = { 0x20E6, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_064)
{
    // 040D 0334;	
    // (Ѝ) CYRILLIC CAPITAL LETTER I WITH GRAVE	[20E6 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x040D, 0x0334 };
    uint32_t const ces[10] = { 0x20E6, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_065)
{
    // 0418 0300 0334;	
    // (Ѝ) CYRILLIC CAPITAL LETTER I, COMBINING GRAVE ACCENT	[20E6 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0418, 0x0300, 0x0334 };
    uint32_t const ces[10] = { 0x20E6, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_066)
{
    // 0418 0334 0300;	
    // (И̴) CYRILLIC CAPITAL LETTER I, COMBINING TILDE OVERLAY	[20E6 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0418, 0x0334, 0x0300 };
    uint32_t const ces[10] = { 0x20E6, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_067)
{
    // 0418 0340 0334;	
    // (Ѝ) CYRILLIC CAPITAL LETTER I, COMBINING GRAVE TONE MARK	[20E6 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0418, 0x0340, 0x0334 };
    uint32_t const ces[10] = { 0x20E6, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_068)
{
    // 0438 0308 0334;	
    // (ӥ) CYRILLIC SMALL LETTER I, COMBINING DIAERESIS	[20E6 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0438, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x20E6, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_069)
{
    // 0438 0334 0308;	
    // (и̴) CYRILLIC SMALL LETTER I, COMBINING TILDE OVERLAY	[20E6 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0438, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x20E6, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_070)
{
    // 04E5 0334;	
    // (ӥ) CYRILLIC SMALL LETTER I WITH DIAERESIS	[20E6 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04E5, 0x0334 };
    uint32_t const ces[10] = { 0x20E6, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_071)
{
    // 0418 0308 0334;	
    // (Ӥ) CYRILLIC CAPITAL LETTER I, COMBINING DIAERESIS	[20E6 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0418, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x20E6, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_072)
{
    // 0418 0334 0308;	
    // (И̴) CYRILLIC CAPITAL LETTER I, COMBINING TILDE OVERLAY	[20E6 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0418, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x20E6, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_073)
{
    // 04E4 0334;	
    // (Ӥ) CYRILLIC CAPITAL LETTER I WITH DIAERESIS	[20E6 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04E4, 0x0334 };
    uint32_t const ces[10] = { 0x20E6, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_074)
{
    // 0438 0304 0334;	
    // (ӣ) CYRILLIC SMALL LETTER I, COMBINING MACRON	[20E6 | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0438, 0x0304, 0x0334 };
    uint32_t const ces[10] = { 0x20E6, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_075)
{
    // 0438 0334 0304;	
    // (и̴) CYRILLIC SMALL LETTER I, COMBINING TILDE OVERLAY	[20E6 | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0438, 0x0334, 0x0304 };
    uint32_t const ces[10] = { 0x20E6, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_076)
{
    // 04E3 0334;	
    // (ӣ) CYRILLIC SMALL LETTER I WITH MACRON	[20E6 | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04E3, 0x0334 };
    uint32_t const ces[10] = { 0x20E6, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_077)
{
    // 0418 0304 0334;	
    // (Ӣ) CYRILLIC CAPITAL LETTER I, COMBINING MACRON	[20E6 | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0418, 0x0304, 0x0334 };
    uint32_t const ces[10] = { 0x20E6, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_078)
{
    // 0418 0334 0304;	
    // (И̴) CYRILLIC CAPITAL LETTER I, COMBINING TILDE OVERLAY	[20E6 | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0418, 0x0334, 0x0304 };
    uint32_t const ces[10] = { 0x20E6, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_079)
{
    // 04E2 0334;	
    // (Ӣ) CYRILLIC CAPITAL LETTER I WITH MACRON	[20E6 | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04E2, 0x0334 };
    uint32_t const ces[10] = { 0x20E6, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_080)
{
    // 0334 A675;	
    // (ꙵ) COMBINING CYRILLIC LETTER I	[20E6 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0xA675 };
    uint32_t const ces[8] = { 0x20E6, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_081)
{
    // A675 0334;	
    // (ꙵ) COMBINING CYRILLIC LETTER I	[20E6 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0xA675, 0x0334 };
    uint32_t const ces[8] = { 0x20E6, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_082)
{
    // 0438 0021;	
    // (и) CYRILLIC SMALL LETTER I	[20E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0438, 0x0021 };
    uint32_t const ces[9] = { 0x20E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_083)
{
    // A675 0021;	
    // (ꙵ) COMBINING CYRILLIC LETTER I	[20E6 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA675, 0x0021 };
    uint32_t const ces[9] = { 0x20E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_084)
{
    // 0418 0021;	
    // (И) CYRILLIC CAPITAL LETTER I	[20E6 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0418, 0x0021 };
    uint32_t const ces[9] = { 0x20E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_085)
{
    // 045D 0021;	
    // (ѝ) CYRILLIC SMALL LETTER I WITH GRAVE	[20E6 0261 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x045D, 0x0021 };
    uint32_t const ces[11] = { 0x20E6, 0x0261, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_086)
{
    // 040D 0021;	
    // (Ѝ) CYRILLIC CAPITAL LETTER I WITH GRAVE	[20E6 0261 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x040D, 0x0021 };
    uint32_t const ces[11] = { 0x20E6, 0x0261, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_087)
{
    // 04E5 0021;	
    // (ӥ) CYRILLIC SMALL LETTER I WITH DIAERESIS	[20E6 0261 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04E5, 0x0021 };
    uint32_t const ces[11] = { 0x20E6, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_088)
{
    // 04E4 0021;	
    // (Ӥ) CYRILLIC CAPITAL LETTER I WITH DIAERESIS	[20E6 0261 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04E4, 0x0021 };
    uint32_t const ces[11] = { 0x20E6, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_089)
{
    // 04E3 0021;	
    // (ӣ) CYRILLIC SMALL LETTER I WITH MACRON	[20E6 0261 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04E3, 0x0021 };
    uint32_t const ces[11] = { 0x20E6, 0x0261, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_090)
{
    // 04E2 0021;	
    // (Ӣ) CYRILLIC CAPITAL LETTER I WITH MACRON	[20E6 0261 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04E2, 0x0021 };
    uint32_t const ces[11] = { 0x20E6, 0x0261, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_091)
{
    // 0438 003F;	
    // (и) CYRILLIC SMALL LETTER I	[20E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0438, 0x003F };
    uint32_t const ces[9] = { 0x20E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_092)
{
    // A675 003F;	
    // (ꙵ) COMBINING CYRILLIC LETTER I	[20E6 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA675, 0x003F };
    uint32_t const ces[9] = { 0x20E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_093)
{
    // 0418 003F;	
    // (И) CYRILLIC CAPITAL LETTER I	[20E6 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0418, 0x003F };
    uint32_t const ces[9] = { 0x20E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_094)
{
    // 045D 003F;	
    // (ѝ) CYRILLIC SMALL LETTER I WITH GRAVE	[20E6 0267 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x045D, 0x003F };
    uint32_t const ces[11] = { 0x20E6, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_095)
{
    // 040D 003F;	
    // (Ѝ) CYRILLIC CAPITAL LETTER I WITH GRAVE	[20E6 0267 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x040D, 0x003F };
    uint32_t const ces[11] = { 0x20E6, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_096)
{
    // 04E5 003F;	
    // (ӥ) CYRILLIC SMALL LETTER I WITH DIAERESIS	[20E6 0267 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04E5, 0x003F };
    uint32_t const ces[11] = { 0x20E6, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_097)
{
    // 04E4 003F;	
    // (Ӥ) CYRILLIC CAPITAL LETTER I WITH DIAERESIS	[20E6 0267 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04E4, 0x003F };
    uint32_t const ces[11] = { 0x20E6, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_098)
{
    // 04E3 003F;	
    // (ӣ) CYRILLIC SMALL LETTER I WITH MACRON	[20E6 0267 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04E3, 0x003F };
    uint32_t const ces[11] = { 0x20E6, 0x0267, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_099)
{
    // 04E2 003F;	
    // (Ӣ) CYRILLIC CAPITAL LETTER I WITH MACRON	[20E6 0267 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04E2, 0x003F };
    uint32_t const ces[11] = { 0x20E6, 0x0267, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_100)
{
    // 0438 0061;	
    // (и) CYRILLIC SMALL LETTER I	[20E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0438, 0x0061 };
    uint32_t const ces[9] = { 0x20E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_101)
{
    // 0438 0041;	
    // (и) CYRILLIC SMALL LETTER I	[20E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0438, 0x0041 };
    uint32_t const ces[9] = { 0x20E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_102)
{
    // A675 0061;	
    // (ꙵ) COMBINING CYRILLIC LETTER I	[20E6 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA675, 0x0061 };
    uint32_t const ces[9] = { 0x20E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_103)
{
    // A675 0041;	
    // (ꙵ) COMBINING CYRILLIC LETTER I	[20E6 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0xA675, 0x0041 };
    uint32_t const ces[9] = { 0x20E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_104)
{
    // 0418 0061;	
    // (И) CYRILLIC CAPITAL LETTER I	[20E6 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0418, 0x0061 };
    uint32_t const ces[9] = { 0x20E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_105)
{
    // 0418 0041;	
    // (И) CYRILLIC CAPITAL LETTER I	[20E6 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0418, 0x0041 };
    uint32_t const ces[9] = { 0x20E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_106)
{
    // 045D 0061;	
    // (ѝ) CYRILLIC SMALL LETTER I WITH GRAVE	[20E6 1CAD | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x045D, 0x0061 };
    uint32_t const ces[11] = { 0x20E6, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_107)
{
    // 045D 0041;	
    // (ѝ) CYRILLIC SMALL LETTER I WITH GRAVE	[20E6 1CAD | 0020 0025 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x045D, 0x0041 };
    uint32_t const ces[11] = { 0x20E6, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_108)
{
    // 040D 0061;	
    // (Ѝ) CYRILLIC CAPITAL LETTER I WITH GRAVE	[20E6 1CAD | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x040D, 0x0061 };
    uint32_t const ces[11] = { 0x20E6, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_109)
{
    // 040D 0041;	
    // (Ѝ) CYRILLIC CAPITAL LETTER I WITH GRAVE	[20E6 1CAD | 0020 0025 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x040D, 0x0041 };
    uint32_t const ces[11] = { 0x20E6, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_110)
{
    // 0438 0001 0306 0061;	
    // (и'\u0001'̆) CYRILLIC SMALL LETTER I, <START OF HEADING>, COMBINING BREVE	[20E6 1CAD | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0438, 0x0001, 0x0306, 0x0061 };
    uint32_t const ces[11] = { 0x20E6, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_111)
{
    // 0418 0001 0306 0061;	
    // (И'\u0001'̆) CYRILLIC CAPITAL LETTER I, <START OF HEADING>, COMBINING BREVE	[20E6 1CAD | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[4] = { 0x0418, 0x0001, 0x0306, 0x0061 };
    uint32_t const ces[11] = { 0x20E6, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_112)
{
    // 04E5 0061;	
    // (ӥ) CYRILLIC SMALL LETTER I WITH DIAERESIS	[20E6 1CAD | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04E5, 0x0061 };
    uint32_t const ces[11] = { 0x20E6, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_113)
{
    // 04E5 0041;	
    // (ӥ) CYRILLIC SMALL LETTER I WITH DIAERESIS	[20E6 1CAD | 0020 002B 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x04E5, 0x0041 };
    uint32_t const ces[11] = { 0x20E6, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_114)
{
    // 04E4 0061;	
    // (Ӥ) CYRILLIC CAPITAL LETTER I WITH DIAERESIS	[20E6 1CAD | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04E4, 0x0061 };
    uint32_t const ces[11] = { 0x20E6, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_115)
{
    // 04E4 0041;	
    // (Ӥ) CYRILLIC CAPITAL LETTER I WITH DIAERESIS	[20E6 1CAD | 0020 002B 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x04E4, 0x0041 };
    uint32_t const ces[11] = { 0x20E6, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_116)
{
    // 04E3 0061;	
    // (ӣ) CYRILLIC SMALL LETTER I WITH MACRON	[20E6 1CAD | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04E3, 0x0061 };
    uint32_t const ces[11] = { 0x20E6, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_117)
{
    // 04E3 0041;	
    // (ӣ) CYRILLIC SMALL LETTER I WITH MACRON	[20E6 1CAD | 0020 0032 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x04E3, 0x0041 };
    uint32_t const ces[11] = { 0x20E6, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_118)
{
    // 04E2 0061;	
    // (Ӣ) CYRILLIC CAPITAL LETTER I WITH MACRON	[20E6 1CAD | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04E2, 0x0061 };
    uint32_t const ces[11] = { 0x20E6, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_119)
{
    // 04E2 0041;	
    // (Ӣ) CYRILLIC CAPITAL LETTER I WITH MACRON	[20E6 1CAD | 0020 0032 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x04E2, 0x0041 };
    uint32_t const ces[11] = { 0x20E6, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_120)
{
    // 0438 0062;	
    // (и) CYRILLIC SMALL LETTER I	[20E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0438, 0x0062 };
    uint32_t const ces[9] = { 0x20E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_121)
{
    // A675 0062;	
    // (ꙵ) COMBINING CYRILLIC LETTER I	[20E6 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA675, 0x0062 };
    uint32_t const ces[9] = { 0x20E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_122)
{
    // 0418 0062;	
    // (И) CYRILLIC CAPITAL LETTER I	[20E6 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0418, 0x0062 };
    uint32_t const ces[9] = { 0x20E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_123)
{
    // 045D 0062;	
    // (ѝ) CYRILLIC SMALL LETTER I WITH GRAVE	[20E6 1CC6 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x045D, 0x0062 };
    uint32_t const ces[11] = { 0x20E6, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_124)
{
    // 040D 0062;	
    // (Ѝ) CYRILLIC CAPITAL LETTER I WITH GRAVE	[20E6 1CC6 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x040D, 0x0062 };
    uint32_t const ces[11] = { 0x20E6, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_125)
{
    // 04E5 0062;	
    // (ӥ) CYRILLIC SMALL LETTER I WITH DIAERESIS	[20E6 1CC6 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04E5, 0x0062 };
    uint32_t const ces[11] = { 0x20E6, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_126)
{
    // 04E4 0062;	
    // (Ӥ) CYRILLIC CAPITAL LETTER I WITH DIAERESIS	[20E6 1CC6 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04E4, 0x0062 };
    uint32_t const ces[11] = { 0x20E6, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_127)
{
    // 04E3 0062;	
    // (ӣ) CYRILLIC SMALL LETTER I WITH MACRON	[20E6 1CC6 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04E3, 0x0062 };
    uint32_t const ces[11] = { 0x20E6, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_128)
{
    // 04E2 0062;	
    // (Ӣ) CYRILLIC CAPITAL LETTER I WITH MACRON	[20E6 1CC6 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04E2, 0x0062 };
    uint32_t const ces[11] = { 0x20E6, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_129)
{
    // 048B 0021;	
    // (ҋ) CYRILLIC SMALL LETTER SHORT I WITH TAIL	[20EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x048B, 0x0021 };
    uint32_t const ces[9] = { 0x20EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_130)
{
    // 048A 0021;	
    // (Ҋ) CYRILLIC CAPITAL LETTER SHORT I WITH TAIL	[20EA 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x048A, 0x0021 };
    uint32_t const ces[9] = { 0x20EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_131)
{
    // 048B 003F;	
    // (ҋ) CYRILLIC SMALL LETTER SHORT I WITH TAIL	[20EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x048B, 0x003F };
    uint32_t const ces[9] = { 0x20EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_132)
{
    // 048A 003F;	
    // (Ҋ) CYRILLIC CAPITAL LETTER SHORT I WITH TAIL	[20EA 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x048A, 0x003F };
    uint32_t const ces[9] = { 0x20EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_133)
{
    // 048B 0061;	
    // (ҋ) CYRILLIC SMALL LETTER SHORT I WITH TAIL	[20EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x048B, 0x0061 };
    uint32_t const ces[9] = { 0x20EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_134)
{
    // 048B 0041;	
    // (ҋ) CYRILLIC SMALL LETTER SHORT I WITH TAIL	[20EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x048B, 0x0041 };
    uint32_t const ces[9] = { 0x20EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_135)
{
    // 048A 0061;	
    // (Ҋ) CYRILLIC CAPITAL LETTER SHORT I WITH TAIL	[20EA 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x048A, 0x0061 };
    uint32_t const ces[9] = { 0x20EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_136)
{
    // 048A 0041;	
    // (Ҋ) CYRILLIC CAPITAL LETTER SHORT I WITH TAIL	[20EA 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x048A, 0x0041 };
    uint32_t const ces[9] = { 0x20EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_137)
{
    // 048B 0062;	
    // (ҋ) CYRILLIC SMALL LETTER SHORT I WITH TAIL	[20EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x048B, 0x0062 };
    uint32_t const ces[9] = { 0x20EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_138)
{
    // 048A 0062;	
    // (Ҋ) CYRILLIC CAPITAL LETTER SHORT I WITH TAIL	[20EA 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x048A, 0x0062 };
    uint32_t const ces[9] = { 0x20EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_139)
{
    // 0456 0308 0334;	
    // (ї) CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I, COMBINING DIAERESIS	[20EE | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0456, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x20EE, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_140)
{
    // 0456 0334 0308;	
    // (і̴) CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I, COMBINING TILDE OVERLAY	[20EE | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0456, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x20EE, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_141)
{
    // 0457 0334;	
    // (ї) CYRILLIC SMALL LETTER YI	[20EE | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0457, 0x0334 };
    uint32_t const ces[10] = { 0x20EE, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_142)
{
    // 0406 0308 0334;	
    // (Ї) CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I, COMBINING DIAERESIS	[20EE | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0406, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x20EE, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_143)
{
    // 0406 0334 0308;	
    // (І̴) CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I, COMBINING TILDE OVERLAY	[20EE | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0406, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x20EE, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_144)
{
    // 0407 0334;	
    // (Ї) CYRILLIC CAPITAL LETTER YI	[20EE | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0407, 0x0334 };
    uint32_t const ces[10] = { 0x20EE, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_145)
{
    // 0334 A676;	
    // (ꙶ) COMBINING CYRILLIC LETTER YI	[20EE | 004A 0020 002B | 0002 0004 0004 |]

    uint32_t cps[2] = { 0x0334, 0xA676 };
    uint32_t const ces[10] = { 0x20EE, 0x0000, 0x004A, 0x0020, 0x002B, 0x0000, 0x0002, 0x0004, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_146)
{
    // A676 0334;	
    // (ꙶ) COMBINING CYRILLIC LETTER YI	[20EE | 004A 0020 002B | 0002 0004 0004 |]

    uint32_t cps[2] = { 0xA676, 0x0334 };
    uint32_t const ces[10] = { 0x20EE, 0x0000, 0x004A, 0x0020, 0x002B, 0x0000, 0x0002, 0x0004, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_147)
{
    // 0456 0021;	
    // (і) CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I	[20EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0456, 0x0021 };
    uint32_t const ces[9] = { 0x20EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_148)
{
    // 0406 0021;	
    // (І) CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I	[20EE 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0406, 0x0021 };
    uint32_t const ces[9] = { 0x20EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_149)
{
    // 0457 0021;	
    // (ї) CYRILLIC SMALL LETTER YI	[20EE 0261 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0457, 0x0021 };
    uint32_t const ces[11] = { 0x20EE, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_150)
{
    // A676 0021;	
    // (ꙶ) COMBINING CYRILLIC LETTER YI	[20EE 0261 | 0020 002B 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA676, 0x0021 };
    uint32_t const ces[11] = { 0x20EE, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_151)
{
    // 0407 0021;	
    // (Ї) CYRILLIC CAPITAL LETTER YI	[20EE 0261 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0407, 0x0021 };
    uint32_t const ces[11] = { 0x20EE, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_152)
{
    // 0456 003F;	
    // (і) CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I	[20EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0456, 0x003F };
    uint32_t const ces[9] = { 0x20EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_153)
{
    // 0406 003F;	
    // (І) CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I	[20EE 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0406, 0x003F };
    uint32_t const ces[9] = { 0x20EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_154)
{
    // 0457 003F;	
    // (ї) CYRILLIC SMALL LETTER YI	[20EE 0267 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0457, 0x003F };
    uint32_t const ces[11] = { 0x20EE, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_155)
{
    // A676 003F;	
    // (ꙶ) COMBINING CYRILLIC LETTER YI	[20EE 0267 | 0020 002B 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA676, 0x003F };
    uint32_t const ces[11] = { 0x20EE, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_156)
{
    // 0407 003F;	
    // (Ї) CYRILLIC CAPITAL LETTER YI	[20EE 0267 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0407, 0x003F };
    uint32_t const ces[11] = { 0x20EE, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_157)
{
    // 0456 0061;	
    // (і) CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I	[20EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0456, 0x0061 };
    uint32_t const ces[9] = { 0x20EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_158)
{
    // 0456 0041;	
    // (і) CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I	[20EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0456, 0x0041 };
    uint32_t const ces[9] = { 0x20EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_159)
{
    // 0406 0061;	
    // (І) CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I	[20EE 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0406, 0x0061 };
    uint32_t const ces[9] = { 0x20EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_160)
{
    // 0406 0041;	
    // (І) CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I	[20EE 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0406, 0x0041 };
    uint32_t const ces[9] = { 0x20EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_161)
{
    // 0457 0061;	
    // (ї) CYRILLIC SMALL LETTER YI	[20EE 1CAD | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0457, 0x0061 };
    uint32_t const ces[11] = { 0x20EE, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_162)
{
    // 0457 0041;	
    // (ї) CYRILLIC SMALL LETTER YI	[20EE 1CAD | 0020 002B 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0457, 0x0041 };
    uint32_t const ces[11] = { 0x20EE, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_163)
{
    // A676 0061;	
    // (ꙶ) COMBINING CYRILLIC LETTER YI	[20EE 1CAD | 0020 002B 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA676, 0x0061 };
    uint32_t const ces[11] = { 0x20EE, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_164)
{
    // A676 0041;	
    // (ꙶ) COMBINING CYRILLIC LETTER YI	[20EE 1CAD | 0020 002B 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0xA676, 0x0041 };
    uint32_t const ces[11] = { 0x20EE, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_165)
{
    // 0407 0061;	
    // (Ї) CYRILLIC CAPITAL LETTER YI	[20EE 1CAD | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0407, 0x0061 };
    uint32_t const ces[11] = { 0x20EE, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_166)
{
    // 0407 0041;	
    // (Ї) CYRILLIC CAPITAL LETTER YI	[20EE 1CAD | 0020 002B 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0407, 0x0041 };
    uint32_t const ces[11] = { 0x20EE, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_167)
{
    // 0456 0062;	
    // (і) CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I	[20EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0456, 0x0062 };
    uint32_t const ces[9] = { 0x20EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_168)
{
    // 0406 0062;	
    // (І) CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I	[20EE 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0406, 0x0062 };
    uint32_t const ces[9] = { 0x20EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_169)
{
    // 0457 0062;	
    // (ї) CYRILLIC SMALL LETTER YI	[20EE 1CC6 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0457, 0x0062 };
    uint32_t const ces[11] = { 0x20EE, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_170)
{
    // A676 0062;	
    // (ꙶ) COMBINING CYRILLIC LETTER YI	[20EE 1CC6 | 0020 002B 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA676, 0x0062 };
    uint32_t const ces[11] = { 0x20EE, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_171)
{
    // 0407 0062;	
    // (Ї) CYRILLIC CAPITAL LETTER YI	[20EE 1CC6 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0407, 0x0062 };
    uint32_t const ces[11] = { 0x20EE, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_172)
{
    // A647 0021;	
    // (ꙇ) CYRILLIC SMALL LETTER IOTA	[20F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA647, 0x0021 };
    uint32_t const ces[9] = { 0x20F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_173)
{
    // A646 0021;	
    // (Ꙇ) CYRILLIC CAPITAL LETTER IOTA	[20F2 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA646, 0x0021 };
    uint32_t const ces[9] = { 0x20F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_174)
{
    // A647 003F;	
    // (ꙇ) CYRILLIC SMALL LETTER IOTA	[20F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA647, 0x003F };
    uint32_t const ces[9] = { 0x20F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_175)
{
    // A646 003F;	
    // (Ꙇ) CYRILLIC CAPITAL LETTER IOTA	[20F2 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA646, 0x003F };
    uint32_t const ces[9] = { 0x20F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_176)
{
    // A647 0061;	
    // (ꙇ) CYRILLIC SMALL LETTER IOTA	[20F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA647, 0x0061 };
    uint32_t const ces[9] = { 0x20F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_177)
{
    // A647 0041;	
    // (ꙇ) CYRILLIC SMALL LETTER IOTA	[20F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA647, 0x0041 };
    uint32_t const ces[9] = { 0x20F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_178)
{
    // A646 0061;	
    // (Ꙇ) CYRILLIC CAPITAL LETTER IOTA	[20F2 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA646, 0x0061 };
    uint32_t const ces[9] = { 0x20F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_179)
{
    // A646 0041;	
    // (Ꙇ) CYRILLIC CAPITAL LETTER IOTA	[20F2 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA646, 0x0041 };
    uint32_t const ces[9] = { 0x20F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_180)
{
    // A647 0062;	
    // (ꙇ) CYRILLIC SMALL LETTER IOTA	[20F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA647, 0x0062 };
    uint32_t const ces[9] = { 0x20F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_181)
{
    // A646 0062;	
    // (Ꙇ) CYRILLIC CAPITAL LETTER IOTA	[20F2 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA646, 0x0062 };
    uint32_t const ces[9] = { 0x20F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_182)
{
    // 0438 0306 0334;	
    // (й) CYRILLIC SMALL LETTER I, COMBINING BREVE	[20F3 | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x0438, 0x0306, 0x0334 };
    uint32_t const ces[8] = { 0x20F3, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_183)
{
    // 0438 0334 0306;	
    // (и̴) CYRILLIC SMALL LETTER I, COMBINING TILDE OVERLAY	[20F3 | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x0438, 0x0334, 0x0306 };
    uint32_t const ces[8] = { 0x20F3, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_184)
{
    // 0439 0334;	
    // (й) CYRILLIC SMALL LETTER SHORT I	[20F3 | 0020 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x0439, 0x0334 };
    uint32_t const ces[8] = { 0x20F3, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_185)
{
    // 0418 0306 0334;	
    // (Й) CYRILLIC CAPITAL LETTER I, COMBINING BREVE	[20F3 | 0020 004A | 0008 0002 |]

    uint32_t cps[3] = { 0x0418, 0x0306, 0x0334 };
    uint32_t const ces[8] = { 0x20F3, 0x0000, 0x0020, 0x004A, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_186)
{
    // 0418 0334 0306;	
    // (И̴) CYRILLIC CAPITAL LETTER I, COMBINING TILDE OVERLAY	[20F3 | 0020 004A | 0008 0002 |]

    uint32_t cps[3] = { 0x0418, 0x0334, 0x0306 };
    uint32_t const ces[8] = { 0x20F3, 0x0000, 0x0020, 0x004A, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_187)
{
    // 0419 0334;	
    // (Й) CYRILLIC CAPITAL LETTER SHORT I	[20F3 | 0020 004A | 0008 0002 |]

    uint32_t cps[2] = { 0x0419, 0x0334 };
    uint32_t const ces[8] = { 0x20F3, 0x0000, 0x0020, 0x004A, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_188)
{
    // 0438 0306 0021;	
    // (й) CYRILLIC SMALL LETTER I, COMBINING BREVE	[20F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0438, 0x0306, 0x0021 };
    uint32_t const ces[9] = { 0x20F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_189)
{
    // 0439 0021;	
    // (й) CYRILLIC SMALL LETTER SHORT I	[20F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0439, 0x0021 };
    uint32_t const ces[9] = { 0x20F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_190)
{
    // 0418 0306 0021;	
    // (Й) CYRILLIC CAPITAL LETTER I, COMBINING BREVE	[20F3 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[3] = { 0x0418, 0x0306, 0x0021 };
    uint32_t const ces[9] = { 0x20F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_191)
{
    // 0419 0021;	
    // (Й) CYRILLIC CAPITAL LETTER SHORT I	[20F3 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0419, 0x0021 };
    uint32_t const ces[9] = { 0x20F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_192)
{
    // 0438 0306 003F;	
    // (й) CYRILLIC SMALL LETTER I, COMBINING BREVE	[20F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0438, 0x0306, 0x003F };
    uint32_t const ces[9] = { 0x20F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_193)
{
    // 0439 003F;	
    // (й) CYRILLIC SMALL LETTER SHORT I	[20F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0439, 0x003F };
    uint32_t const ces[9] = { 0x20F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_194)
{
    // 0418 0306 003F;	
    // (Й) CYRILLIC CAPITAL LETTER I, COMBINING BREVE	[20F3 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[3] = { 0x0418, 0x0306, 0x003F };
    uint32_t const ces[9] = { 0x20F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_195)
{
    // 0419 003F;	
    // (Й) CYRILLIC CAPITAL LETTER SHORT I	[20F3 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0419, 0x003F };
    uint32_t const ces[9] = { 0x20F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_196)
{
    // 0438 0306 0061;	
    // (й) CYRILLIC SMALL LETTER I, COMBINING BREVE	[20F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0438, 0x0306, 0x0061 };
    uint32_t const ces[9] = { 0x20F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_197)
{
    // 0439 0061;	
    // (й) CYRILLIC SMALL LETTER SHORT I	[20F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0439, 0x0061 };
    uint32_t const ces[9] = { 0x20F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_198)
{
    // 0438 0591 0306 0061;	
    // (й֑) CYRILLIC SMALL LETTER I, HEBREW ACCENT ETNAHTA, COMBINING BREVE	[20F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[4] = { 0x0438, 0x0591, 0x0306, 0x0061 };
    uint32_t const ces[9] = { 0x20F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_199)
{
    // 0438 1D165 0306 0061;	
    // (й𝅥) CYRILLIC SMALL LETTER I, MUSICAL SYMBOL COMBINING STEM, COMBINING BREVE	[20F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[4] = { 0x0438, 0x1D165, 0x0306, 0x0061 };
    uint32_t const ces[9] = { 0x20F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_200)
{
    // 0438 0306 0041;	
    // (й) CYRILLIC SMALL LETTER I, COMBINING BREVE	[20F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x0438, 0x0306, 0x0041 };
    uint32_t const ces[9] = { 0x20F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_201)
{
    // 0439 0041;	
    // (й) CYRILLIC SMALL LETTER SHORT I	[20F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0439, 0x0041 };
    uint32_t const ces[9] = { 0x20F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_202)
{
    // 0418 0306 0061;	
    // (Й) CYRILLIC CAPITAL LETTER I, COMBINING BREVE	[20F3 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[3] = { 0x0418, 0x0306, 0x0061 };
    uint32_t const ces[9] = { 0x20F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_203)
{
    // 0419 0061;	
    // (Й) CYRILLIC CAPITAL LETTER SHORT I	[20F3 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0419, 0x0061 };
    uint32_t const ces[9] = { 0x20F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_204)
{
    // 0418 0591 0306 0061;	
    // (Й֑) CYRILLIC CAPITAL LETTER I, HEBREW ACCENT ETNAHTA, COMBINING BREVE	[20F3 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[4] = { 0x0418, 0x0591, 0x0306, 0x0061 };
    uint32_t const ces[9] = { 0x20F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_205)
{
    // 0418 1D165 0306 0061;	
    // (Й𝅥) CYRILLIC CAPITAL LETTER I, MUSICAL SYMBOL COMBINING STEM, COMBINING BREVE	[20F3 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[4] = { 0x0418, 0x1D165, 0x0306, 0x0061 };
    uint32_t const ces[9] = { 0x20F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_206)
{
    // 0418 0306 0041;	
    // (Й) CYRILLIC CAPITAL LETTER I, COMBINING BREVE	[20F3 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[3] = { 0x0418, 0x0306, 0x0041 };
    uint32_t const ces[9] = { 0x20F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_207)
{
    // 0419 0041;	
    // (Й) CYRILLIC CAPITAL LETTER SHORT I	[20F3 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0419, 0x0041 };
    uint32_t const ces[9] = { 0x20F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_208)
{
    // 0438 0306 0062;	
    // (й) CYRILLIC SMALL LETTER I, COMBINING BREVE	[20F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0438, 0x0306, 0x0062 };
    uint32_t const ces[9] = { 0x20F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_209)
{
    // 0439 0062;	
    // (й) CYRILLIC SMALL LETTER SHORT I	[20F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0439, 0x0062 };
    uint32_t const ces[9] = { 0x20F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_210)
{
    // 0418 0306 0062;	
    // (Й) CYRILLIC CAPITAL LETTER I, COMBINING BREVE	[20F3 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[3] = { 0x0418, 0x0306, 0x0062 };
    uint32_t const ces[9] = { 0x20F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_211)
{
    // 0419 0062;	
    // (Й) CYRILLIC CAPITAL LETTER SHORT I	[20F3 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0419, 0x0062 };
    uint32_t const ces[9] = { 0x20F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_212)
{
    // 0458 0021;	
    // (ј) CYRILLIC SMALL LETTER JE	[20F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0458, 0x0021 };
    uint32_t const ces[9] = { 0x20F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_213)
{
    // 0408 0021;	
    // (Ј) CYRILLIC CAPITAL LETTER JE	[20F7 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0408, 0x0021 };
    uint32_t const ces[9] = { 0x20F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_214)
{
    // 0458 003F;	
    // (ј) CYRILLIC SMALL LETTER JE	[20F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0458, 0x003F };
    uint32_t const ces[9] = { 0x20F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_215)
{
    // 0408 003F;	
    // (Ј) CYRILLIC CAPITAL LETTER JE	[20F7 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0408, 0x003F };
    uint32_t const ces[9] = { 0x20F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_216)
{
    // 0458 0061;	
    // (ј) CYRILLIC SMALL LETTER JE	[20F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0458, 0x0061 };
    uint32_t const ces[9] = { 0x20F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_217)
{
    // 0458 0041;	
    // (ј) CYRILLIC SMALL LETTER JE	[20F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0458, 0x0041 };
    uint32_t const ces[9] = { 0x20F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_218)
{
    // 0408 0061;	
    // (Ј) CYRILLIC CAPITAL LETTER JE	[20F7 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0408, 0x0061 };
    uint32_t const ces[9] = { 0x20F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_219)
{
    // 0408 0041;	
    // (Ј) CYRILLIC CAPITAL LETTER JE	[20F7 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0408, 0x0041 };
    uint32_t const ces[9] = { 0x20F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_220)
{
    // 0458 0062;	
    // (ј) CYRILLIC SMALL LETTER JE	[20F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0458, 0x0062 };
    uint32_t const ces[9] = { 0x20F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_221)
{
    // 0408 0062;	
    // (Ј) CYRILLIC CAPITAL LETTER JE	[20F7 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0408, 0x0062 };
    uint32_t const ces[9] = { 0x20F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_222)
{
    // 0334 2DF8;	
    // (ⷸ) COMBINING CYRILLIC LETTER DJERV	[20FB | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x2DF8 };
    uint32_t const ces[8] = { 0x20FB, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_223)
{
    // 2DF8 0334;	
    // (ⷸ) COMBINING CYRILLIC LETTER DJERV	[20FB | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x2DF8, 0x0334 };
    uint32_t const ces[8] = { 0x20FB, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_224)
{
    // A649 0021;	
    // (ꙉ) CYRILLIC SMALL LETTER DJERV	[20FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA649, 0x0021 };
    uint32_t const ces[9] = { 0x20FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_225)
{
    // 2DF8 0021;	
    // (ⷸ) COMBINING CYRILLIC LETTER DJERV	[20FB 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF8, 0x0021 };
    uint32_t const ces[9] = { 0x20FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_226)
{
    // A648 0021;	
    // (Ꙉ) CYRILLIC CAPITAL LETTER DJERV	[20FB 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA648, 0x0021 };
    uint32_t const ces[9] = { 0x20FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_227)
{
    // A649 003F;	
    // (ꙉ) CYRILLIC SMALL LETTER DJERV	[20FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA649, 0x003F };
    uint32_t const ces[9] = { 0x20FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_228)
{
    // 2DF8 003F;	
    // (ⷸ) COMBINING CYRILLIC LETTER DJERV	[20FB 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF8, 0x003F };
    uint32_t const ces[9] = { 0x20FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_229)
{
    // A648 003F;	
    // (Ꙉ) CYRILLIC CAPITAL LETTER DJERV	[20FB 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA648, 0x003F };
    uint32_t const ces[9] = { 0x20FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_230)
{
    // A649 0061;	
    // (ꙉ) CYRILLIC SMALL LETTER DJERV	[20FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA649, 0x0061 };
    uint32_t const ces[9] = { 0x20FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_231)
{
    // A649 0041;	
    // (ꙉ) CYRILLIC SMALL LETTER DJERV	[20FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA649, 0x0041 };
    uint32_t const ces[9] = { 0x20FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_232)
{
    // 2DF8 0061;	
    // (ⷸ) COMBINING CYRILLIC LETTER DJERV	[20FB 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF8, 0x0061 };
    uint32_t const ces[9] = { 0x20FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_233)
{
    // 2DF8 0041;	
    // (ⷸ) COMBINING CYRILLIC LETTER DJERV	[20FB 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DF8, 0x0041 };
    uint32_t const ces[9] = { 0x20FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_234)
{
    // A648 0061;	
    // (Ꙉ) CYRILLIC CAPITAL LETTER DJERV	[20FB 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA648, 0x0061 };
    uint32_t const ces[9] = { 0x20FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_235)
{
    // A648 0041;	
    // (Ꙉ) CYRILLIC CAPITAL LETTER DJERV	[20FB 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA648, 0x0041 };
    uint32_t const ces[9] = { 0x20FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_236)
{
    // A649 0062;	
    // (ꙉ) CYRILLIC SMALL LETTER DJERV	[20FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA649, 0x0062 };
    uint32_t const ces[9] = { 0x20FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_237)
{
    // 2DF8 0062;	
    // (ⷸ) COMBINING CYRILLIC LETTER DJERV	[20FB 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF8, 0x0062 };
    uint32_t const ces[9] = { 0x20FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_238)
{
    // A648 0062;	
    // (Ꙉ) CYRILLIC CAPITAL LETTER DJERV	[20FB 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA648, 0x0062 };
    uint32_t const ces[9] = { 0x20FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_239)
{
    // 043A 0301 0334;	
    // (ќ) CYRILLIC SMALL LETTER KA, COMBINING ACUTE ACCENT	[20FC | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x043A, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x20FC, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_240)
{
    // 043A 0334 0301;	
    // (к̴) CYRILLIC SMALL LETTER KA, COMBINING TILDE OVERLAY	[20FC | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x043A, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x20FC, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_241)
{
    // 043A 0334 0341;	
    // (к̴) CYRILLIC SMALL LETTER KA, COMBINING TILDE OVERLAY	[20FC | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x043A, 0x0334, 0x0341 };
    uint32_t const ces[10] = { 0x20FC, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_242)
{
    // 045C 0334;	
    // (ќ) CYRILLIC SMALL LETTER KJE	[20FC | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x045C, 0x0334 };
    uint32_t const ces[10] = { 0x20FC, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_243)
{
    // 040C 0334;	
    // (Ќ) CYRILLIC CAPITAL LETTER KJE	[20FC | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x040C, 0x0334 };
    uint32_t const ces[10] = { 0x20FC, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_244)
{
    // 041A 0301 0334;	
    // (Ќ) CYRILLIC CAPITAL LETTER KA, COMBINING ACUTE ACCENT	[20FC | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x041A, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x20FC, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_245)
{
    // 041A 0334 0301;	
    // (К̴) CYRILLIC CAPITAL LETTER KA, COMBINING TILDE OVERLAY	[20FC | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x041A, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x20FC, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_246)
{
    // 041A 0341 0334;	
    // (Ќ) CYRILLIC CAPITAL LETTER KA, COMBINING ACUTE TONE MARK	[20FC | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x041A, 0x0341, 0x0334 };
    uint32_t const ces[10] = { 0x20FC, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_247)
{
    // 0334 2DE6;	
    // (ⷦ) COMBINING CYRILLIC LETTER KA	[20FC | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x2DE6 };
    uint32_t const ces[8] = { 0x20FC, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_248)
{
    // 2DE6 0334;	
    // (ⷦ) COMBINING CYRILLIC LETTER KA	[20FC | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x2DE6, 0x0334 };
    uint32_t const ces[8] = { 0x20FC, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_249)
{
    // 043A 0021;	
    // (к) CYRILLIC SMALL LETTER KA	[20FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x043A, 0x0021 };
    uint32_t const ces[9] = { 0x20FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_250)
{
    // 2DE6 0021;	
    // (ⷦ) COMBINING CYRILLIC LETTER KA	[20FC 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE6, 0x0021 };
    uint32_t const ces[9] = { 0x20FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_251)
{
    // 041A 0021;	
    // (К) CYRILLIC CAPITAL LETTER KA	[20FC 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x041A, 0x0021 };
    uint32_t const ces[9] = { 0x20FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_252)
{
    // 045C 0021;	
    // (ќ) CYRILLIC SMALL LETTER KJE	[20FC 0261 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x045C, 0x0021 };
    uint32_t const ces[11] = { 0x20FC, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_253)
{
    // 040C 0021;	
    // (Ќ) CYRILLIC CAPITAL LETTER KJE	[20FC 0261 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x040C, 0x0021 };
    uint32_t const ces[11] = { 0x20FC, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_254)
{
    // 043A 003F;	
    // (к) CYRILLIC SMALL LETTER KA	[20FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x043A, 0x003F };
    uint32_t const ces[9] = { 0x20FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_255)
{
    // 2DE6 003F;	
    // (ⷦ) COMBINING CYRILLIC LETTER KA	[20FC 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE6, 0x003F };
    uint32_t const ces[9] = { 0x20FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_256)
{
    // 041A 003F;	
    // (К) CYRILLIC CAPITAL LETTER KA	[20FC 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x041A, 0x003F };
    uint32_t const ces[9] = { 0x20FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_257)
{
    // 045C 003F;	
    // (ќ) CYRILLIC SMALL LETTER KJE	[20FC 0267 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x045C, 0x003F };
    uint32_t const ces[11] = { 0x20FC, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_258)
{
    // 040C 003F;	
    // (Ќ) CYRILLIC CAPITAL LETTER KJE	[20FC 0267 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x040C, 0x003F };
    uint32_t const ces[11] = { 0x20FC, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_259)
{
    // 043A 0061;	
    // (к) CYRILLIC SMALL LETTER KA	[20FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x043A, 0x0061 };
    uint32_t const ces[9] = { 0x20FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_260)
{
    // 043A 0041;	
    // (к) CYRILLIC SMALL LETTER KA	[20FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x043A, 0x0041 };
    uint32_t const ces[9] = { 0x20FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_261)
{
    // 2DE6 0061;	
    // (ⷦ) COMBINING CYRILLIC LETTER KA	[20FC 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE6, 0x0061 };
    uint32_t const ces[9] = { 0x20FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_262)
{
    // 2DE6 0041;	
    // (ⷦ) COMBINING CYRILLIC LETTER KA	[20FC 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DE6, 0x0041 };
    uint32_t const ces[9] = { 0x20FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_263)
{
    // 041A 0061;	
    // (К) CYRILLIC CAPITAL LETTER KA	[20FC 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x041A, 0x0061 };
    uint32_t const ces[9] = { 0x20FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_264)
{
    // 041A 0041;	
    // (К) CYRILLIC CAPITAL LETTER KA	[20FC 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x041A, 0x0041 };
    uint32_t const ces[9] = { 0x20FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_265)
{
    // 045C 0061;	
    // (ќ) CYRILLIC SMALL LETTER KJE	[20FC 1CAD | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x045C, 0x0061 };
    uint32_t const ces[11] = { 0x20FC, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_266)
{
    // 045C 0041;	
    // (ќ) CYRILLIC SMALL LETTER KJE	[20FC 1CAD | 0020 0024 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x045C, 0x0041 };
    uint32_t const ces[11] = { 0x20FC, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_267)
{
    // 040C 0061;	
    // (Ќ) CYRILLIC CAPITAL LETTER KJE	[20FC 1CAD | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x040C, 0x0061 };
    uint32_t const ces[11] = { 0x20FC, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_268)
{
    // 040C 0041;	
    // (Ќ) CYRILLIC CAPITAL LETTER KJE	[20FC 1CAD | 0020 0024 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x040C, 0x0041 };
    uint32_t const ces[11] = { 0x20FC, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_269)
{
    // 043A 0062;	
    // (к) CYRILLIC SMALL LETTER KA	[20FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x043A, 0x0062 };
    uint32_t const ces[9] = { 0x20FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_270)
{
    // 2DE6 0062;	
    // (ⷦ) COMBINING CYRILLIC LETTER KA	[20FC 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE6, 0x0062 };
    uint32_t const ces[9] = { 0x20FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_271)
{
    // 041A 0062;	
    // (К) CYRILLIC CAPITAL LETTER KA	[20FC 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x041A, 0x0062 };
    uint32_t const ces[9] = { 0x20FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_272)
{
    // 045C 0062;	
    // (ќ) CYRILLIC SMALL LETTER KJE	[20FC 1CC6 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x045C, 0x0062 };
    uint32_t const ces[11] = { 0x20FC, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_273)
{
    // 040C 0062;	
    // (Ќ) CYRILLIC CAPITAL LETTER KJE	[20FC 1CC6 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x040C, 0x0062 };
    uint32_t const ces[11] = { 0x20FC, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_274)
{
    // 049B 0021;	
    // (қ) CYRILLIC SMALL LETTER KA WITH DESCENDER	[2100 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x049B, 0x0021 };
    uint32_t const ces[9] = { 0x2100, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_275)
{
    // 049A 0021;	
    // (Қ) CYRILLIC CAPITAL LETTER KA WITH DESCENDER	[2100 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x049A, 0x0021 };
    uint32_t const ces[9] = { 0x2100, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_276)
{
    // 049B 003F;	
    // (қ) CYRILLIC SMALL LETTER KA WITH DESCENDER	[2100 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x049B, 0x003F };
    uint32_t const ces[9] = { 0x2100, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_277)
{
    // 049A 003F;	
    // (Қ) CYRILLIC CAPITAL LETTER KA WITH DESCENDER	[2100 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x049A, 0x003F };
    uint32_t const ces[9] = { 0x2100, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_278)
{
    // 049B 0061;	
    // (қ) CYRILLIC SMALL LETTER KA WITH DESCENDER	[2100 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x049B, 0x0061 };
    uint32_t const ces[9] = { 0x2100, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_279)
{
    // 049B 0041;	
    // (қ) CYRILLIC SMALL LETTER KA WITH DESCENDER	[2100 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x049B, 0x0041 };
    uint32_t const ces[9] = { 0x2100, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_280)
{
    // 049A 0061;	
    // (Қ) CYRILLIC CAPITAL LETTER KA WITH DESCENDER	[2100 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x049A, 0x0061 };
    uint32_t const ces[9] = { 0x2100, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_281)
{
    // 049A 0041;	
    // (Қ) CYRILLIC CAPITAL LETTER KA WITH DESCENDER	[2100 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x049A, 0x0041 };
    uint32_t const ces[9] = { 0x2100, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_282)
{
    // 049B 0062;	
    // (қ) CYRILLIC SMALL LETTER KA WITH DESCENDER	[2100 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x049B, 0x0062 };
    uint32_t const ces[9] = { 0x2100, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_283)
{
    // 049A 0062;	
    // (Қ) CYRILLIC CAPITAL LETTER KA WITH DESCENDER	[2100 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x049A, 0x0062 };
    uint32_t const ces[9] = { 0x2100, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_284)
{
    // 04C4 0021;	
    // (ӄ) CYRILLIC SMALL LETTER KA WITH HOOK	[2104 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04C4, 0x0021 };
    uint32_t const ces[9] = { 0x2104, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_285)
{
    // 04C3 0021;	
    // (Ӄ) CYRILLIC CAPITAL LETTER KA WITH HOOK	[2104 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04C3, 0x0021 };
    uint32_t const ces[9] = { 0x2104, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_286)
{
    // 04C4 003F;	
    // (ӄ) CYRILLIC SMALL LETTER KA WITH HOOK	[2104 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04C4, 0x003F };
    uint32_t const ces[9] = { 0x2104, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_287)
{
    // 04C3 003F;	
    // (Ӄ) CYRILLIC CAPITAL LETTER KA WITH HOOK	[2104 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04C3, 0x003F };
    uint32_t const ces[9] = { 0x2104, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_288)
{
    // 04C4 0061;	
    // (ӄ) CYRILLIC SMALL LETTER KA WITH HOOK	[2104 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04C4, 0x0061 };
    uint32_t const ces[9] = { 0x2104, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_289)
{
    // 04C4 0041;	
    // (ӄ) CYRILLIC SMALL LETTER KA WITH HOOK	[2104 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x04C4, 0x0041 };
    uint32_t const ces[9] = { 0x2104, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_290)
{
    // 04C3 0061;	
    // (Ӄ) CYRILLIC CAPITAL LETTER KA WITH HOOK	[2104 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04C3, 0x0061 };
    uint32_t const ces[9] = { 0x2104, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_291)
{
    // 04C3 0041;	
    // (Ӄ) CYRILLIC CAPITAL LETTER KA WITH HOOK	[2104 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x04C3, 0x0041 };
    uint32_t const ces[9] = { 0x2104, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_292)
{
    // 04C4 0062;	
    // (ӄ) CYRILLIC SMALL LETTER KA WITH HOOK	[2104 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04C4, 0x0062 };
    uint32_t const ces[9] = { 0x2104, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_293)
{
    // 04C3 0062;	
    // (Ӄ) CYRILLIC CAPITAL LETTER KA WITH HOOK	[2104 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04C3, 0x0062 };
    uint32_t const ces[9] = { 0x2104, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_294)
{
    // 04A1 0021;	
    // (ҡ) CYRILLIC SMALL LETTER BASHKIR KA	[2108 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04A1, 0x0021 };
    uint32_t const ces[9] = { 0x2108, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_295)
{
    // 04A0 0021;	
    // (Ҡ) CYRILLIC CAPITAL LETTER BASHKIR KA	[2108 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04A0, 0x0021 };
    uint32_t const ces[9] = { 0x2108, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_296)
{
    // 04A1 003F;	
    // (ҡ) CYRILLIC SMALL LETTER BASHKIR KA	[2108 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04A1, 0x003F };
    uint32_t const ces[9] = { 0x2108, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_297)
{
    // 04A0 003F;	
    // (Ҡ) CYRILLIC CAPITAL LETTER BASHKIR KA	[2108 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04A0, 0x003F };
    uint32_t const ces[9] = { 0x2108, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_298)
{
    // 04A1 0061;	
    // (ҡ) CYRILLIC SMALL LETTER BASHKIR KA	[2108 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04A1, 0x0061 };
    uint32_t const ces[9] = { 0x2108, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_299)
{
    // 04A1 0041;	
    // (ҡ) CYRILLIC SMALL LETTER BASHKIR KA	[2108 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x04A1, 0x0041 };
    uint32_t const ces[9] = { 0x2108, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_300)
{
    // 04A0 0061;	
    // (Ҡ) CYRILLIC CAPITAL LETTER BASHKIR KA	[2108 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04A0, 0x0061 };
    uint32_t const ces[9] = { 0x2108, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_301)
{
    // 04A0 0041;	
    // (Ҡ) CYRILLIC CAPITAL LETTER BASHKIR KA	[2108 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x04A0, 0x0041 };
    uint32_t const ces[9] = { 0x2108, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_302)
{
    // 04A1 0062;	
    // (ҡ) CYRILLIC SMALL LETTER BASHKIR KA	[2108 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04A1, 0x0062 };
    uint32_t const ces[9] = { 0x2108, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_303)
{
    // 04A0 0062;	
    // (Ҡ) CYRILLIC CAPITAL LETTER BASHKIR KA	[2108 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04A0, 0x0062 };
    uint32_t const ces[9] = { 0x2108, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_304)
{
    // 049F 0021;	
    // (ҟ) CYRILLIC SMALL LETTER KA WITH STROKE	[210C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x049F, 0x0021 };
    uint32_t const ces[9] = { 0x210C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_305)
{
    // 049E 0021;	
    // (Ҟ) CYRILLIC CAPITAL LETTER KA WITH STROKE	[210C 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x049E, 0x0021 };
    uint32_t const ces[9] = { 0x210C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_306)
{
    // 049F 003F;	
    // (ҟ) CYRILLIC SMALL LETTER KA WITH STROKE	[210C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x049F, 0x003F };
    uint32_t const ces[9] = { 0x210C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_307)
{
    // 049E 003F;	
    // (Ҟ) CYRILLIC CAPITAL LETTER KA WITH STROKE	[210C 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x049E, 0x003F };
    uint32_t const ces[9] = { 0x210C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_308)
{
    // 049F 0061;	
    // (ҟ) CYRILLIC SMALL LETTER KA WITH STROKE	[210C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x049F, 0x0061 };
    uint32_t const ces[9] = { 0x210C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_309)
{
    // 049F 0041;	
    // (ҟ) CYRILLIC SMALL LETTER KA WITH STROKE	[210C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x049F, 0x0041 };
    uint32_t const ces[9] = { 0x210C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_310)
{
    // 049E 0061;	
    // (Ҟ) CYRILLIC CAPITAL LETTER KA WITH STROKE	[210C 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x049E, 0x0061 };
    uint32_t const ces[9] = { 0x210C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_311)
{
    // 049E 0041;	
    // (Ҟ) CYRILLIC CAPITAL LETTER KA WITH STROKE	[210C 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x049E, 0x0041 };
    uint32_t const ces[9] = { 0x210C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_312)
{
    // 049F 0062;	
    // (ҟ) CYRILLIC SMALL LETTER KA WITH STROKE	[210C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x049F, 0x0062 };
    uint32_t const ces[9] = { 0x210C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_313)
{
    // 049E 0062;	
    // (Ҟ) CYRILLIC CAPITAL LETTER KA WITH STROKE	[210C 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x049E, 0x0062 };
    uint32_t const ces[9] = { 0x210C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_314)
{
    // 049D 0021;	
    // (ҝ) CYRILLIC SMALL LETTER KA WITH VERTICAL STROKE	[2110 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x049D, 0x0021 };
    uint32_t const ces[9] = { 0x2110, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_315)
{
    // 049C 0021;	
    // (Ҝ) CYRILLIC CAPITAL LETTER KA WITH VERTICAL STROKE	[2110 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x049C, 0x0021 };
    uint32_t const ces[9] = { 0x2110, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_316)
{
    // 049D 003F;	
    // (ҝ) CYRILLIC SMALL LETTER KA WITH VERTICAL STROKE	[2110 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x049D, 0x003F };
    uint32_t const ces[9] = { 0x2110, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_317)
{
    // 049C 003F;	
    // (Ҝ) CYRILLIC CAPITAL LETTER KA WITH VERTICAL STROKE	[2110 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x049C, 0x003F };
    uint32_t const ces[9] = { 0x2110, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_318)
{
    // 049D 0061;	
    // (ҝ) CYRILLIC SMALL LETTER KA WITH VERTICAL STROKE	[2110 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x049D, 0x0061 };
    uint32_t const ces[9] = { 0x2110, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_319)
{
    // 049D 0041;	
    // (ҝ) CYRILLIC SMALL LETTER KA WITH VERTICAL STROKE	[2110 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x049D, 0x0041 };
    uint32_t const ces[9] = { 0x2110, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_320)
{
    // 049C 0061;	
    // (Ҝ) CYRILLIC CAPITAL LETTER KA WITH VERTICAL STROKE	[2110 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x049C, 0x0061 };
    uint32_t const ces[9] = { 0x2110, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_321)
{
    // 049C 0041;	
    // (Ҝ) CYRILLIC CAPITAL LETTER KA WITH VERTICAL STROKE	[2110 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x049C, 0x0041 };
    uint32_t const ces[9] = { 0x2110, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_322)
{
    // 049D 0062;	
    // (ҝ) CYRILLIC SMALL LETTER KA WITH VERTICAL STROKE	[2110 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x049D, 0x0062 };
    uint32_t const ces[9] = { 0x2110, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_323)
{
    // 049C 0062;	
    // (Ҝ) CYRILLIC CAPITAL LETTER KA WITH VERTICAL STROKE	[2110 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x049C, 0x0062 };
    uint32_t const ces[9] = { 0x2110, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_324)
{
    // 051F 0021;	
    // (ԟ) CYRILLIC SMALL LETTER ALEUT KA	[2114 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x051F, 0x0021 };
    uint32_t const ces[9] = { 0x2114, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_325)
{
    // 051E 0021;	
    // (Ԟ) CYRILLIC CAPITAL LETTER ALEUT KA	[2114 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x051E, 0x0021 };
    uint32_t const ces[9] = { 0x2114, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_326)
{
    // 051F 003F;	
    // (ԟ) CYRILLIC SMALL LETTER ALEUT KA	[2114 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x051F, 0x003F };
    uint32_t const ces[9] = { 0x2114, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_327)
{
    // 051E 003F;	
    // (Ԟ) CYRILLIC CAPITAL LETTER ALEUT KA	[2114 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x051E, 0x003F };
    uint32_t const ces[9] = { 0x2114, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_328)
{
    // 051F 0061;	
    // (ԟ) CYRILLIC SMALL LETTER ALEUT KA	[2114 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x051F, 0x0061 };
    uint32_t const ces[9] = { 0x2114, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_329)
{
    // 051F 0041;	
    // (ԟ) CYRILLIC SMALL LETTER ALEUT KA	[2114 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x051F, 0x0041 };
    uint32_t const ces[9] = { 0x2114, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_330)
{
    // 051E 0061;	
    // (Ԟ) CYRILLIC CAPITAL LETTER ALEUT KA	[2114 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x051E, 0x0061 };
    uint32_t const ces[9] = { 0x2114, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_331)
{
    // 051E 0041;	
    // (Ԟ) CYRILLIC CAPITAL LETTER ALEUT KA	[2114 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x051E, 0x0041 };
    uint32_t const ces[9] = { 0x2114, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_332)
{
    // 051F 0062;	
    // (ԟ) CYRILLIC SMALL LETTER ALEUT KA	[2114 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x051F, 0x0062 };
    uint32_t const ces[9] = { 0x2114, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_333)
{
    // 051E 0062;	
    // (Ԟ) CYRILLIC CAPITAL LETTER ALEUT KA	[2114 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x051E, 0x0062 };
    uint32_t const ces[9] = { 0x2114, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_334)
{
    // 051B 0021;	
    // (ԛ) CYRILLIC SMALL LETTER QA	[2115 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x051B, 0x0021 };
    uint32_t const ces[9] = { 0x2115, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_335)
{
    // 051A 0021;	
    // (Ԛ) CYRILLIC CAPITAL LETTER QA	[2115 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x051A, 0x0021 };
    uint32_t const ces[9] = { 0x2115, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_336)
{
    // 051B 003F;	
    // (ԛ) CYRILLIC SMALL LETTER QA	[2115 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x051B, 0x003F };
    uint32_t const ces[9] = { 0x2115, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_337)
{
    // 051A 003F;	
    // (Ԛ) CYRILLIC CAPITAL LETTER QA	[2115 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x051A, 0x003F };
    uint32_t const ces[9] = { 0x2115, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_338)
{
    // 051B 0061;	
    // (ԛ) CYRILLIC SMALL LETTER QA	[2115 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x051B, 0x0061 };
    uint32_t const ces[9] = { 0x2115, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_339)
{
    // 051B 0041;	
    // (ԛ) CYRILLIC SMALL LETTER QA	[2115 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x051B, 0x0041 };
    uint32_t const ces[9] = { 0x2115, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_340)
{
    // 051A 0061;	
    // (Ԛ) CYRILLIC CAPITAL LETTER QA	[2115 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x051A, 0x0061 };
    uint32_t const ces[9] = { 0x2115, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_341)
{
    // 051A 0041;	
    // (Ԛ) CYRILLIC CAPITAL LETTER QA	[2115 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x051A, 0x0041 };
    uint32_t const ces[9] = { 0x2115, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_342)
{
    // 051B 0062;	
    // (ԛ) CYRILLIC SMALL LETTER QA	[2115 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x051B, 0x0062 };
    uint32_t const ces[9] = { 0x2115, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_343)
{
    // 051A 0062;	
    // (Ԛ) CYRILLIC CAPITAL LETTER QA	[2115 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x051A, 0x0062 };
    uint32_t const ces[9] = { 0x2115, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_344)
{
    // 0334 2DE7;	
    // (ⷧ) COMBINING CYRILLIC LETTER EL	[2116 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x2DE7 };
    uint32_t const ces[8] = { 0x2116, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_345)
{
    // 2DE7 0334;	
    // (ⷧ) COMBINING CYRILLIC LETTER EL	[2116 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x2DE7, 0x0334 };
    uint32_t const ces[8] = { 0x2116, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_346)
{
    // 043B 0021;	
    // (л) CYRILLIC SMALL LETTER EL	[2116 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x043B, 0x0021 };
    uint32_t const ces[9] = { 0x2116, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_347)
{
    // 2DE7 0021;	
    // (ⷧ) COMBINING CYRILLIC LETTER EL	[2116 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE7, 0x0021 };
    uint32_t const ces[9] = { 0x2116, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_348)
{
    // 041B 0021;	
    // (Л) CYRILLIC CAPITAL LETTER EL	[2116 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x041B, 0x0021 };
    uint32_t const ces[9] = { 0x2116, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_349)
{
    // 043B 003F;	
    // (л) CYRILLIC SMALL LETTER EL	[2116 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x043B, 0x003F };
    uint32_t const ces[9] = { 0x2116, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_350)
{
    // 2DE7 003F;	
    // (ⷧ) COMBINING CYRILLIC LETTER EL	[2116 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE7, 0x003F };
    uint32_t const ces[9] = { 0x2116, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_351)
{
    // 041B 003F;	
    // (Л) CYRILLIC CAPITAL LETTER EL	[2116 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x041B, 0x003F };
    uint32_t const ces[9] = { 0x2116, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_352)
{
    // 043B 0061;	
    // (л) CYRILLIC SMALL LETTER EL	[2116 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x043B, 0x0061 };
    uint32_t const ces[9] = { 0x2116, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_353)
{
    // 043B 0041;	
    // (л) CYRILLIC SMALL LETTER EL	[2116 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x043B, 0x0041 };
    uint32_t const ces[9] = { 0x2116, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_354)
{
    // 2DE7 0061;	
    // (ⷧ) COMBINING CYRILLIC LETTER EL	[2116 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE7, 0x0061 };
    uint32_t const ces[9] = { 0x2116, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_355)
{
    // 2DE7 0041;	
    // (ⷧ) COMBINING CYRILLIC LETTER EL	[2116 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DE7, 0x0041 };
    uint32_t const ces[9] = { 0x2116, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_356)
{
    // 041B 0061;	
    // (Л) CYRILLIC CAPITAL LETTER EL	[2116 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x041B, 0x0061 };
    uint32_t const ces[9] = { 0x2116, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_357)
{
    // 041B 0041;	
    // (Л) CYRILLIC CAPITAL LETTER EL	[2116 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x041B, 0x0041 };
    uint32_t const ces[9] = { 0x2116, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_358)
{
    // 043B 0062;	
    // (л) CYRILLIC SMALL LETTER EL	[2116 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x043B, 0x0062 };
    uint32_t const ces[9] = { 0x2116, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_359)
{
    // 2DE7 0062;	
    // (ⷧ) COMBINING CYRILLIC LETTER EL	[2116 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE7, 0x0062 };
    uint32_t const ces[9] = { 0x2116, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_360)
{
    // 041B 0062;	
    // (Л) CYRILLIC CAPITAL LETTER EL	[2116 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x041B, 0x0062 };
    uint32_t const ces[9] = { 0x2116, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_361)
{
    // 1D2B 0021;	
    // (ᴫ) CYRILLIC LETTER SMALL CAPITAL EL	[211A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D2B, 0x0021 };
    uint32_t const ces[9] = { 0x211A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_362)
{
    // 1D2B 003F;	
    // (ᴫ) CYRILLIC LETTER SMALL CAPITAL EL	[211A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D2B, 0x003F };
    uint32_t const ces[9] = { 0x211A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_363)
{
    // 1D2B 0061;	
    // (ᴫ) CYRILLIC LETTER SMALL CAPITAL EL	[211A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D2B, 0x0061 };
    uint32_t const ces[9] = { 0x211A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_364)
{
    // 1D2B 0041;	
    // (ᴫ) CYRILLIC LETTER SMALL CAPITAL EL	[211A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D2B, 0x0041 };
    uint32_t const ces[9] = { 0x211A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_365)
{
    // 1D2B 0062;	
    // (ᴫ) CYRILLIC LETTER SMALL CAPITAL EL	[211A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D2B, 0x0062 };
    uint32_t const ces[9] = { 0x211A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_366)
{
    // 04C6 0021;	
    // (ӆ) CYRILLIC SMALL LETTER EL WITH TAIL	[211B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04C6, 0x0021 };
    uint32_t const ces[9] = { 0x211B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_367)
{
    // 04C5 0021;	
    // (Ӆ) CYRILLIC CAPITAL LETTER EL WITH TAIL	[211B 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04C5, 0x0021 };
    uint32_t const ces[9] = { 0x211B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_368)
{
    // 04C6 003F;	
    // (ӆ) CYRILLIC SMALL LETTER EL WITH TAIL	[211B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04C6, 0x003F };
    uint32_t const ces[9] = { 0x211B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_369)
{
    // 04C5 003F;	
    // (Ӆ) CYRILLIC CAPITAL LETTER EL WITH TAIL	[211B 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04C5, 0x003F };
    uint32_t const ces[9] = { 0x211B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_370)
{
    // 04C6 0061;	
    // (ӆ) CYRILLIC SMALL LETTER EL WITH TAIL	[211B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04C6, 0x0061 };
    uint32_t const ces[9] = { 0x211B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_371)
{
    // 04C6 0041;	
    // (ӆ) CYRILLIC SMALL LETTER EL WITH TAIL	[211B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x04C6, 0x0041 };
    uint32_t const ces[9] = { 0x211B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_372)
{
    // 04C5 0061;	
    // (Ӆ) CYRILLIC CAPITAL LETTER EL WITH TAIL	[211B 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04C5, 0x0061 };
    uint32_t const ces[9] = { 0x211B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_373)
{
    // 04C5 0041;	
    // (Ӆ) CYRILLIC CAPITAL LETTER EL WITH TAIL	[211B 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x04C5, 0x0041 };
    uint32_t const ces[9] = { 0x211B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_374)
{
    // 04C6 0062;	
    // (ӆ) CYRILLIC SMALL LETTER EL WITH TAIL	[211B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04C6, 0x0062 };
    uint32_t const ces[9] = { 0x211B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_375)
{
    // 04C5 0062;	
    // (Ӆ) CYRILLIC CAPITAL LETTER EL WITH TAIL	[211B 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04C5, 0x0062 };
    uint32_t const ces[9] = { 0x211B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_376)
{
    // 052F 0021;	
    // (ԯ) CYRILLIC SMALL LETTER EL WITH DESCENDER	[211F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x052F, 0x0021 };
    uint32_t const ces[9] = { 0x211F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_377)
{
    // 052E 0021;	
    // (Ԯ) CYRILLIC CAPITAL LETTER EL WITH DESCENDER	[211F 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x052E, 0x0021 };
    uint32_t const ces[9] = { 0x211F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_378)
{
    // 052F 003F;	
    // (ԯ) CYRILLIC SMALL LETTER EL WITH DESCENDER	[211F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x052F, 0x003F };
    uint32_t const ces[9] = { 0x211F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_379)
{
    // 052E 003F;	
    // (Ԯ) CYRILLIC CAPITAL LETTER EL WITH DESCENDER	[211F 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x052E, 0x003F };
    uint32_t const ces[9] = { 0x211F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_380)
{
    // 052F 0061;	
    // (ԯ) CYRILLIC SMALL LETTER EL WITH DESCENDER	[211F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x052F, 0x0061 };
    uint32_t const ces[9] = { 0x211F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_381)
{
    // 052F 0041;	
    // (ԯ) CYRILLIC SMALL LETTER EL WITH DESCENDER	[211F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x052F, 0x0041 };
    uint32_t const ces[9] = { 0x211F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_382)
{
    // 052E 0061;	
    // (Ԯ) CYRILLIC CAPITAL LETTER EL WITH DESCENDER	[211F 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x052E, 0x0061 };
    uint32_t const ces[9] = { 0x211F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_383)
{
    // 052E 0041;	
    // (Ԯ) CYRILLIC CAPITAL LETTER EL WITH DESCENDER	[211F 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x052E, 0x0041 };
    uint32_t const ces[9] = { 0x211F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_384)
{
    // 052F 0062;	
    // (ԯ) CYRILLIC SMALL LETTER EL WITH DESCENDER	[211F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x052F, 0x0062 };
    uint32_t const ces[9] = { 0x211F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_385)
{
    // 052E 0062;	
    // (Ԯ) CYRILLIC CAPITAL LETTER EL WITH DESCENDER	[211F 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x052E, 0x0062 };
    uint32_t const ces[9] = { 0x211F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_386)
{
    // 0513 0021;	
    // (ԓ) CYRILLIC SMALL LETTER EL WITH HOOK	[2120 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0513, 0x0021 };
    uint32_t const ces[9] = { 0x2120, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_387)
{
    // 0512 0021;	
    // (Ԓ) CYRILLIC CAPITAL LETTER EL WITH HOOK	[2120 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0512, 0x0021 };
    uint32_t const ces[9] = { 0x2120, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_388)
{
    // 0513 003F;	
    // (ԓ) CYRILLIC SMALL LETTER EL WITH HOOK	[2120 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0513, 0x003F };
    uint32_t const ces[9] = { 0x2120, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_389)
{
    // 0512 003F;	
    // (Ԓ) CYRILLIC CAPITAL LETTER EL WITH HOOK	[2120 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0512, 0x003F };
    uint32_t const ces[9] = { 0x2120, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_390)
{
    // 0513 0061;	
    // (ԓ) CYRILLIC SMALL LETTER EL WITH HOOK	[2120 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0513, 0x0061 };
    uint32_t const ces[9] = { 0x2120, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_391)
{
    // 0513 0041;	
    // (ԓ) CYRILLIC SMALL LETTER EL WITH HOOK	[2120 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0513, 0x0041 };
    uint32_t const ces[9] = { 0x2120, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_392)
{
    // 0512 0061;	
    // (Ԓ) CYRILLIC CAPITAL LETTER EL WITH HOOK	[2120 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0512, 0x0061 };
    uint32_t const ces[9] = { 0x2120, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_393)
{
    // 0512 0041;	
    // (Ԓ) CYRILLIC CAPITAL LETTER EL WITH HOOK	[2120 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0512, 0x0041 };
    uint32_t const ces[9] = { 0x2120, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_394)
{
    // 0513 0062;	
    // (ԓ) CYRILLIC SMALL LETTER EL WITH HOOK	[2120 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0513, 0x0062 };
    uint32_t const ces[9] = { 0x2120, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_395)
{
    // 0512 0062;	
    // (Ԓ) CYRILLIC CAPITAL LETTER EL WITH HOOK	[2120 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0512, 0x0062 };
    uint32_t const ces[9] = { 0x2120, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_396)
{
    // 0521 0021;	
    // (ԡ) CYRILLIC SMALL LETTER EL WITH MIDDLE HOOK	[2121 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0521, 0x0021 };
    uint32_t const ces[9] = { 0x2121, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_397)
{
    // 0520 0021;	
    // (Ԡ) CYRILLIC CAPITAL LETTER EL WITH MIDDLE HOOK	[2121 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0520, 0x0021 };
    uint32_t const ces[9] = { 0x2121, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_398)
{
    // 0521 003F;	
    // (ԡ) CYRILLIC SMALL LETTER EL WITH MIDDLE HOOK	[2121 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0521, 0x003F };
    uint32_t const ces[9] = { 0x2121, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_399)
{
    // 0520 003F;	
    // (Ԡ) CYRILLIC CAPITAL LETTER EL WITH MIDDLE HOOK	[2121 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0520, 0x003F };
    uint32_t const ces[9] = { 0x2121, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_400)
{
    // 0521 0061;	
    // (ԡ) CYRILLIC SMALL LETTER EL WITH MIDDLE HOOK	[2121 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0521, 0x0061 };
    uint32_t const ces[9] = { 0x2121, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_401)
{
    // 0521 0041;	
    // (ԡ) CYRILLIC SMALL LETTER EL WITH MIDDLE HOOK	[2121 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0521, 0x0041 };
    uint32_t const ces[9] = { 0x2121, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_402)
{
    // 0520 0061;	
    // (Ԡ) CYRILLIC CAPITAL LETTER EL WITH MIDDLE HOOK	[2121 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0520, 0x0061 };
    uint32_t const ces[9] = { 0x2121, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_403)
{
    // 0520 0041;	
    // (Ԡ) CYRILLIC CAPITAL LETTER EL WITH MIDDLE HOOK	[2121 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0520, 0x0041 };
    uint32_t const ces[9] = { 0x2121, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_404)
{
    // 0521 0062;	
    // (ԡ) CYRILLIC SMALL LETTER EL WITH MIDDLE HOOK	[2121 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0521, 0x0062 };
    uint32_t const ces[9] = { 0x2121, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_405)
{
    // 0520 0062;	
    // (Ԡ) CYRILLIC CAPITAL LETTER EL WITH MIDDLE HOOK	[2121 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0520, 0x0062 };
    uint32_t const ces[9] = { 0x2121, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_406)
{
    // 0459 0021;	
    // (љ) CYRILLIC SMALL LETTER LJE	[2122 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0459, 0x0021 };
    uint32_t const ces[9] = { 0x2122, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_407)
{
    // 0409 0021;	
    // (Љ) CYRILLIC CAPITAL LETTER LJE	[2122 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0409, 0x0021 };
    uint32_t const ces[9] = { 0x2122, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_408)
{
    // 0459 003F;	
    // (љ) CYRILLIC SMALL LETTER LJE	[2122 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0459, 0x003F };
    uint32_t const ces[9] = { 0x2122, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_409)
{
    // 0409 003F;	
    // (Љ) CYRILLIC CAPITAL LETTER LJE	[2122 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0409, 0x003F };
    uint32_t const ces[9] = { 0x2122, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_410)
{
    // 0459 0061;	
    // (љ) CYRILLIC SMALL LETTER LJE	[2122 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0459, 0x0061 };
    uint32_t const ces[9] = { 0x2122, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_411)
{
    // 0459 0041;	
    // (љ) CYRILLIC SMALL LETTER LJE	[2122 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0459, 0x0041 };
    uint32_t const ces[9] = { 0x2122, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_412)
{
    // 0409 0061;	
    // (Љ) CYRILLIC CAPITAL LETTER LJE	[2122 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0409, 0x0061 };
    uint32_t const ces[9] = { 0x2122, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_413)
{
    // 0409 0041;	
    // (Љ) CYRILLIC CAPITAL LETTER LJE	[2122 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0409, 0x0041 };
    uint32_t const ces[9] = { 0x2122, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_414)
{
    // 0459 0062;	
    // (љ) CYRILLIC SMALL LETTER LJE	[2122 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0459, 0x0062 };
    uint32_t const ces[9] = { 0x2122, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_415)
{
    // 0409 0062;	
    // (Љ) CYRILLIC CAPITAL LETTER LJE	[2122 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0409, 0x0062 };
    uint32_t const ces[9] = { 0x2122, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_416)
{
    // A665 0021;	
    // (ꙥ) CYRILLIC SMALL LETTER SOFT EL	[2126 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA665, 0x0021 };
    uint32_t const ces[9] = { 0x2126, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_417)
{
    // A664 0021;	
    // (Ꙥ) CYRILLIC CAPITAL LETTER SOFT EL	[2126 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA664, 0x0021 };
    uint32_t const ces[9] = { 0x2126, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_418)
{
    // A665 003F;	
    // (ꙥ) CYRILLIC SMALL LETTER SOFT EL	[2126 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA665, 0x003F };
    uint32_t const ces[9] = { 0x2126, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_419)
{
    // A664 003F;	
    // (Ꙥ) CYRILLIC CAPITAL LETTER SOFT EL	[2126 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA664, 0x003F };
    uint32_t const ces[9] = { 0x2126, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_420)
{
    // A665 0061;	
    // (ꙥ) CYRILLIC SMALL LETTER SOFT EL	[2126 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA665, 0x0061 };
    uint32_t const ces[9] = { 0x2126, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_421)
{
    // A665 0041;	
    // (ꙥ) CYRILLIC SMALL LETTER SOFT EL	[2126 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA665, 0x0041 };
    uint32_t const ces[9] = { 0x2126, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_422)
{
    // A664 0061;	
    // (Ꙥ) CYRILLIC CAPITAL LETTER SOFT EL	[2126 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA664, 0x0061 };
    uint32_t const ces[9] = { 0x2126, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_423)
{
    // A664 0041;	
    // (Ꙥ) CYRILLIC CAPITAL LETTER SOFT EL	[2126 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA664, 0x0041 };
    uint32_t const ces[9] = { 0x2126, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_424)
{
    // A665 0062;	
    // (ꙥ) CYRILLIC SMALL LETTER SOFT EL	[2126 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA665, 0x0062 };
    uint32_t const ces[9] = { 0x2126, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_425)
{
    // A664 0062;	
    // (Ꙥ) CYRILLIC CAPITAL LETTER SOFT EL	[2126 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA664, 0x0062 };
    uint32_t const ces[9] = { 0x2126, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_426)
{
    // 0509 0021;	
    // (ԉ) CYRILLIC SMALL LETTER KOMI LJE	[2127 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0509, 0x0021 };
    uint32_t const ces[9] = { 0x2127, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_427)
{
    // 0508 0021;	
    // (Ԉ) CYRILLIC CAPITAL LETTER KOMI LJE	[2127 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0508, 0x0021 };
    uint32_t const ces[9] = { 0x2127, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_428)
{
    // 0509 003F;	
    // (ԉ) CYRILLIC SMALL LETTER KOMI LJE	[2127 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0509, 0x003F };
    uint32_t const ces[9] = { 0x2127, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_429)
{
    // 0508 003F;	
    // (Ԉ) CYRILLIC CAPITAL LETTER KOMI LJE	[2127 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0508, 0x003F };
    uint32_t const ces[9] = { 0x2127, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_430)
{
    // 0509 0061;	
    // (ԉ) CYRILLIC SMALL LETTER KOMI LJE	[2127 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0509, 0x0061 };
    uint32_t const ces[9] = { 0x2127, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_431)
{
    // 0509 0041;	
    // (ԉ) CYRILLIC SMALL LETTER KOMI LJE	[2127 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0509, 0x0041 };
    uint32_t const ces[9] = { 0x2127, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_432)
{
    // 0508 0061;	
    // (Ԉ) CYRILLIC CAPITAL LETTER KOMI LJE	[2127 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0508, 0x0061 };
    uint32_t const ces[9] = { 0x2127, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_433)
{
    // 0508 0041;	
    // (Ԉ) CYRILLIC CAPITAL LETTER KOMI LJE	[2127 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0508, 0x0041 };
    uint32_t const ces[9] = { 0x2127, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_434)
{
    // 0509 0062;	
    // (ԉ) CYRILLIC SMALL LETTER KOMI LJE	[2127 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0509, 0x0062 };
    uint32_t const ces[9] = { 0x2127, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_435)
{
    // 0508 0062;	
    // (Ԉ) CYRILLIC CAPITAL LETTER KOMI LJE	[2127 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0508, 0x0062 };
    uint32_t const ces[9] = { 0x2127, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_436)
{
    // 0515 0021;	
    // (ԕ) CYRILLIC SMALL LETTER LHA	[2128 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0515, 0x0021 };
    uint32_t const ces[9] = { 0x2128, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_437)
{
    // 0514 0021;	
    // (Ԕ) CYRILLIC CAPITAL LETTER LHA	[2128 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0514, 0x0021 };
    uint32_t const ces[9] = { 0x2128, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_438)
{
    // 0515 003F;	
    // (ԕ) CYRILLIC SMALL LETTER LHA	[2128 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0515, 0x003F };
    uint32_t const ces[9] = { 0x2128, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_439)
{
    // 0514 003F;	
    // (Ԕ) CYRILLIC CAPITAL LETTER LHA	[2128 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0514, 0x003F };
    uint32_t const ces[9] = { 0x2128, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_440)
{
    // 0515 0061;	
    // (ԕ) CYRILLIC SMALL LETTER LHA	[2128 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0515, 0x0061 };
    uint32_t const ces[9] = { 0x2128, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_441)
{
    // 0515 0041;	
    // (ԕ) CYRILLIC SMALL LETTER LHA	[2128 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0515, 0x0041 };
    uint32_t const ces[9] = { 0x2128, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_442)
{
    // 0514 0061;	
    // (Ԕ) CYRILLIC CAPITAL LETTER LHA	[2128 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0514, 0x0061 };
    uint32_t const ces[9] = { 0x2128, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_443)
{
    // 0514 0041;	
    // (Ԕ) CYRILLIC CAPITAL LETTER LHA	[2128 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0514, 0x0041 };
    uint32_t const ces[9] = { 0x2128, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_444)
{
    // 0515 0062;	
    // (ԕ) CYRILLIC SMALL LETTER LHA	[2128 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0515, 0x0062 };
    uint32_t const ces[9] = { 0x2128, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_445)
{
    // 0514 0062;	
    // (Ԕ) CYRILLIC CAPITAL LETTER LHA	[2128 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0514, 0x0062 };
    uint32_t const ces[9] = { 0x2128, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_446)
{
    // 0334 2DE8;	
    // (ⷨ) COMBINING CYRILLIC LETTER EM	[2129 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x2DE8 };
    uint32_t const ces[8] = { 0x2129, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_447)
{
    // 2DE8 0334;	
    // (ⷨ) COMBINING CYRILLIC LETTER EM	[2129 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x2DE8, 0x0334 };
    uint32_t const ces[8] = { 0x2129, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_448)
{
    // 043C 0021;	
    // (м) CYRILLIC SMALL LETTER EM	[2129 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x043C, 0x0021 };
    uint32_t const ces[9] = { 0x2129, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_449)
{
    // 2DE8 0021;	
    // (ⷨ) COMBINING CYRILLIC LETTER EM	[2129 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE8, 0x0021 };
    uint32_t const ces[9] = { 0x2129, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_450)
{
    // 041C 0021;	
    // (М) CYRILLIC CAPITAL LETTER EM	[2129 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x041C, 0x0021 };
    uint32_t const ces[9] = { 0x2129, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_451)
{
    // 043C 003F;	
    // (м) CYRILLIC SMALL LETTER EM	[2129 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x043C, 0x003F };
    uint32_t const ces[9] = { 0x2129, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_452)
{
    // 2DE8 003F;	
    // (ⷨ) COMBINING CYRILLIC LETTER EM	[2129 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE8, 0x003F };
    uint32_t const ces[9] = { 0x2129, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_453)
{
    // 041C 003F;	
    // (М) CYRILLIC CAPITAL LETTER EM	[2129 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x041C, 0x003F };
    uint32_t const ces[9] = { 0x2129, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_454)
{
    // 043C 0061;	
    // (м) CYRILLIC SMALL LETTER EM	[2129 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x043C, 0x0061 };
    uint32_t const ces[9] = { 0x2129, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_455)
{
    // 043C 0041;	
    // (м) CYRILLIC SMALL LETTER EM	[2129 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x043C, 0x0041 };
    uint32_t const ces[9] = { 0x2129, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_456)
{
    // 2DE8 0061;	
    // (ⷨ) COMBINING CYRILLIC LETTER EM	[2129 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE8, 0x0061 };
    uint32_t const ces[9] = { 0x2129, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_457)
{
    // 2DE8 0041;	
    // (ⷨ) COMBINING CYRILLIC LETTER EM	[2129 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DE8, 0x0041 };
    uint32_t const ces[9] = { 0x2129, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_458)
{
    // 041C 0061;	
    // (М) CYRILLIC CAPITAL LETTER EM	[2129 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x041C, 0x0061 };
    uint32_t const ces[9] = { 0x2129, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_459)
{
    // 041C 0041;	
    // (М) CYRILLIC CAPITAL LETTER EM	[2129 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x041C, 0x0041 };
    uint32_t const ces[9] = { 0x2129, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_460)
{
    // 043C 0062;	
    // (м) CYRILLIC SMALL LETTER EM	[2129 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x043C, 0x0062 };
    uint32_t const ces[9] = { 0x2129, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_461)
{
    // 2DE8 0062;	
    // (ⷨ) COMBINING CYRILLIC LETTER EM	[2129 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE8, 0x0062 };
    uint32_t const ces[9] = { 0x2129, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_462)
{
    // 041C 0062;	
    // (М) CYRILLIC CAPITAL LETTER EM	[2129 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x041C, 0x0062 };
    uint32_t const ces[9] = { 0x2129, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_463)
{
    // 04CE 0021;	
    // (ӎ) CYRILLIC SMALL LETTER EM WITH TAIL	[212D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04CE, 0x0021 };
    uint32_t const ces[9] = { 0x212D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_464)
{
    // 04CD 0021;	
    // (Ӎ) CYRILLIC CAPITAL LETTER EM WITH TAIL	[212D 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04CD, 0x0021 };
    uint32_t const ces[9] = { 0x212D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_465)
{
    // 04CE 003F;	
    // (ӎ) CYRILLIC SMALL LETTER EM WITH TAIL	[212D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04CE, 0x003F };
    uint32_t const ces[9] = { 0x212D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_466)
{
    // 04CD 003F;	
    // (Ӎ) CYRILLIC CAPITAL LETTER EM WITH TAIL	[212D 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04CD, 0x003F };
    uint32_t const ces[9] = { 0x212D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_467)
{
    // 04CE 0061;	
    // (ӎ) CYRILLIC SMALL LETTER EM WITH TAIL	[212D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04CE, 0x0061 };
    uint32_t const ces[9] = { 0x212D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_468)
{
    // 04CE 0041;	
    // (ӎ) CYRILLIC SMALL LETTER EM WITH TAIL	[212D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x04CE, 0x0041 };
    uint32_t const ces[9] = { 0x212D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_469)
{
    // 04CD 0061;	
    // (Ӎ) CYRILLIC CAPITAL LETTER EM WITH TAIL	[212D 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04CD, 0x0061 };
    uint32_t const ces[9] = { 0x212D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_470)
{
    // 04CD 0041;	
    // (Ӎ) CYRILLIC CAPITAL LETTER EM WITH TAIL	[212D 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x04CD, 0x0041 };
    uint32_t const ces[9] = { 0x212D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_471)
{
    // 04CE 0062;	
    // (ӎ) CYRILLIC SMALL LETTER EM WITH TAIL	[212D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04CE, 0x0062 };
    uint32_t const ces[9] = { 0x212D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_472)
{
    // 04CD 0062;	
    // (Ӎ) CYRILLIC CAPITAL LETTER EM WITH TAIL	[212D 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04CD, 0x0062 };
    uint32_t const ces[9] = { 0x212D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_473)
{
    // A667 0021;	
    // (ꙧ) CYRILLIC SMALL LETTER SOFT EM	[2131 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA667, 0x0021 };
    uint32_t const ces[9] = { 0x2131, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_474)
{
    // A666 0021;	
    // (Ꙧ) CYRILLIC CAPITAL LETTER SOFT EM	[2131 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA666, 0x0021 };
    uint32_t const ces[9] = { 0x2131, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_475)
{
    // A667 003F;	
    // (ꙧ) CYRILLIC SMALL LETTER SOFT EM	[2131 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA667, 0x003F };
    uint32_t const ces[9] = { 0x2131, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_476)
{
    // A666 003F;	
    // (Ꙧ) CYRILLIC CAPITAL LETTER SOFT EM	[2131 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA666, 0x003F };
    uint32_t const ces[9] = { 0x2131, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_477)
{
    // A667 0061;	
    // (ꙧ) CYRILLIC SMALL LETTER SOFT EM	[2131 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA667, 0x0061 };
    uint32_t const ces[9] = { 0x2131, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_478)
{
    // A667 0041;	
    // (ꙧ) CYRILLIC SMALL LETTER SOFT EM	[2131 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA667, 0x0041 };
    uint32_t const ces[9] = { 0x2131, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_479)
{
    // A666 0061;	
    // (Ꙧ) CYRILLIC CAPITAL LETTER SOFT EM	[2131 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA666, 0x0061 };
    uint32_t const ces[9] = { 0x2131, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_480)
{
    // A666 0041;	
    // (Ꙧ) CYRILLIC CAPITAL LETTER SOFT EM	[2131 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA666, 0x0041 };
    uint32_t const ces[9] = { 0x2131, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_481)
{
    // A667 0062;	
    // (ꙧ) CYRILLIC SMALL LETTER SOFT EM	[2131 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA667, 0x0062 };
    uint32_t const ces[9] = { 0x2131, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_482)
{
    // A666 0062;	
    // (Ꙧ) CYRILLIC CAPITAL LETTER SOFT EM	[2131 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA666, 0x0062 };
    uint32_t const ces[9] = { 0x2131, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_483)
{
    // 0334 2DE9;	
    // (ⷩ) COMBINING CYRILLIC LETTER EN	[2132 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x2DE9 };
    uint32_t const ces[8] = { 0x2132, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_484)
{
    // 2DE9 0334;	
    // (ⷩ) COMBINING CYRILLIC LETTER EN	[2132 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x2DE9, 0x0334 };
    uint32_t const ces[8] = { 0x2132, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_485)
{
    // 043D 0021;	
    // (н) CYRILLIC SMALL LETTER EN	[2132 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x043D, 0x0021 };
    uint32_t const ces[9] = { 0x2132, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_486)
{
    // 2DE9 0021;	
    // (ⷩ) COMBINING CYRILLIC LETTER EN	[2132 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE9, 0x0021 };
    uint32_t const ces[9] = { 0x2132, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_487)
{
    // 041D 0021;	
    // (Н) CYRILLIC CAPITAL LETTER EN	[2132 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x041D, 0x0021 };
    uint32_t const ces[9] = { 0x2132, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_488)
{
    // 1D78 0021;	
    // (ᵸ) MODIFIER LETTER CYRILLIC EN	[2132 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D78, 0x0021 };
    uint32_t const ces[9] = { 0x2132, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_489)
{
    // 043D 003F;	
    // (н) CYRILLIC SMALL LETTER EN	[2132 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x043D, 0x003F };
    uint32_t const ces[9] = { 0x2132, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_490)
{
    // 2DE9 003F;	
    // (ⷩ) COMBINING CYRILLIC LETTER EN	[2132 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE9, 0x003F };
    uint32_t const ces[9] = { 0x2132, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_491)
{
    // 041D 003F;	
    // (Н) CYRILLIC CAPITAL LETTER EN	[2132 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x041D, 0x003F };
    uint32_t const ces[9] = { 0x2132, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_492)
{
    // 1D78 003F;	
    // (ᵸ) MODIFIER LETTER CYRILLIC EN	[2132 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D78, 0x003F };
    uint32_t const ces[9] = { 0x2132, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_493)
{
    // 043D 0061;	
    // (н) CYRILLIC SMALL LETTER EN	[2132 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x043D, 0x0061 };
    uint32_t const ces[9] = { 0x2132, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_494)
{
    // 043D 0041;	
    // (н) CYRILLIC SMALL LETTER EN	[2132 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x043D, 0x0041 };
    uint32_t const ces[9] = { 0x2132, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_495)
{
    // 2DE9 0061;	
    // (ⷩ) COMBINING CYRILLIC LETTER EN	[2132 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DE9, 0x0061 };
    uint32_t const ces[9] = { 0x2132, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_496)
{
    // 2DE9 0041;	
    // (ⷩ) COMBINING CYRILLIC LETTER EN	[2132 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DE9, 0x0041 };
    uint32_t const ces[9] = { 0x2132, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_497)
{
    // 041D 0061;	
    // (Н) CYRILLIC CAPITAL LETTER EN	[2132 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x041D, 0x0061 };
    uint32_t const ces[9] = { 0x2132, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_498)
{
    // 041D 0041;	
    // (Н) CYRILLIC CAPITAL LETTER EN	[2132 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x041D, 0x0041 };
    uint32_t const ces[9] = { 0x2132, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_138_499)
{
    // 1D78 0061;	
    // (ᵸ) MODIFIER LETTER CYRILLIC EN	[2132 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D78, 0x0061 };
    uint32_t const ces[9] = { 0x2132, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

