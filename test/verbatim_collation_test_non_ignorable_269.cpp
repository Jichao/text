// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_269_000)
{
    // 16B63 003F;	
    // (𖭣) PAHAWH HMONG SIGN VOS LUB	[45BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B63, 0x003F };
    uint32_t const ces[9] = { 0x45BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_001)
{
    // 16B63 0061;	
    // (𖭣) PAHAWH HMONG SIGN VOS LUB	[45BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B63, 0x0061 };
    uint32_t const ces[9] = { 0x45BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_002)
{
    // 16B63 0041;	
    // (𖭣) PAHAWH HMONG SIGN VOS LUB	[45BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B63, 0x0041 };
    uint32_t const ces[9] = { 0x45BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_003)
{
    // 16B63 0062;	
    // (𖭣) PAHAWH HMONG SIGN VOS LUB	[45BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B63, 0x0062 };
    uint32_t const ces[9] = { 0x45BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_004)
{
    // 16B64 0021;	
    // (𖭤) PAHAWH HMONG SIGN XYOO	[45BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B64, 0x0021 };
    uint32_t const ces[9] = { 0x45BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_005)
{
    // 16B64 003F;	
    // (𖭤) PAHAWH HMONG SIGN XYOO	[45BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B64, 0x003F };
    uint32_t const ces[9] = { 0x45BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_006)
{
    // 16B64 0061;	
    // (𖭤) PAHAWH HMONG SIGN XYOO	[45BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B64, 0x0061 };
    uint32_t const ces[9] = { 0x45BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_007)
{
    // 16B64 0041;	
    // (𖭤) PAHAWH HMONG SIGN XYOO	[45BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B64, 0x0041 };
    uint32_t const ces[9] = { 0x45BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_008)
{
    // 16B64 0062;	
    // (𖭤) PAHAWH HMONG SIGN XYOO	[45BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B64, 0x0062 };
    uint32_t const ces[9] = { 0x45BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_009)
{
    // 16B65 0021;	
    // (𖭥) PAHAWH HMONG SIGN HLI	[45BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B65, 0x0021 };
    uint32_t const ces[9] = { 0x45BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_010)
{
    // 16B65 003F;	
    // (𖭥) PAHAWH HMONG SIGN HLI	[45BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B65, 0x003F };
    uint32_t const ces[9] = { 0x45BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_011)
{
    // 16B65 0061;	
    // (𖭥) PAHAWH HMONG SIGN HLI	[45BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B65, 0x0061 };
    uint32_t const ces[9] = { 0x45BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_012)
{
    // 16B65 0041;	
    // (𖭥) PAHAWH HMONG SIGN HLI	[45BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B65, 0x0041 };
    uint32_t const ces[9] = { 0x45BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_013)
{
    // 16B65 0062;	
    // (𖭥) PAHAWH HMONG SIGN HLI	[45BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B65, 0x0062 };
    uint32_t const ces[9] = { 0x45BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_014)
{
    // 16B66 0021;	
    // (𖭦) PAHAWH HMONG SIGN THIRD-STAGE HLI	[45BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B66, 0x0021 };
    uint32_t const ces[9] = { 0x45BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_015)
{
    // 16B66 003F;	
    // (𖭦) PAHAWH HMONG SIGN THIRD-STAGE HLI	[45BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B66, 0x003F };
    uint32_t const ces[9] = { 0x45BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_016)
{
    // 16B66 0061;	
    // (𖭦) PAHAWH HMONG SIGN THIRD-STAGE HLI	[45BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B66, 0x0061 };
    uint32_t const ces[9] = { 0x45BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_017)
{
    // 16B66 0041;	
    // (𖭦) PAHAWH HMONG SIGN THIRD-STAGE HLI	[45BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B66, 0x0041 };
    uint32_t const ces[9] = { 0x45BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_018)
{
    // 16B66 0062;	
    // (𖭦) PAHAWH HMONG SIGN THIRD-STAGE HLI	[45BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B66, 0x0062 };
    uint32_t const ces[9] = { 0x45BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_019)
{
    // 16B67 0021;	
    // (𖭧) PAHAWH HMONG SIGN ZWJ THAJ	[45BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B67, 0x0021 };
    uint32_t const ces[9] = { 0x45BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_020)
{
    // 16B67 003F;	
    // (𖭧) PAHAWH HMONG SIGN ZWJ THAJ	[45BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B67, 0x003F };
    uint32_t const ces[9] = { 0x45BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_021)
{
    // 16B67 0061;	
    // (𖭧) PAHAWH HMONG SIGN ZWJ THAJ	[45BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B67, 0x0061 };
    uint32_t const ces[9] = { 0x45BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_022)
{
    // 16B67 0041;	
    // (𖭧) PAHAWH HMONG SIGN ZWJ THAJ	[45BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B67, 0x0041 };
    uint32_t const ces[9] = { 0x45BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_023)
{
    // 16B67 0062;	
    // (𖭧) PAHAWH HMONG SIGN ZWJ THAJ	[45BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B67, 0x0062 };
    uint32_t const ces[9] = { 0x45BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_024)
{
    // 16B68 0021;	
    // (𖭨) PAHAWH HMONG SIGN HNUB	[45C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B68, 0x0021 };
    uint32_t const ces[9] = { 0x45C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_025)
{
    // 16B68 003F;	
    // (𖭨) PAHAWH HMONG SIGN HNUB	[45C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B68, 0x003F };
    uint32_t const ces[9] = { 0x45C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_026)
{
    // 16B68 0061;	
    // (𖭨) PAHAWH HMONG SIGN HNUB	[45C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B68, 0x0061 };
    uint32_t const ces[9] = { 0x45C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_027)
{
    // 16B68 0041;	
    // (𖭨) PAHAWH HMONG SIGN HNUB	[45C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B68, 0x0041 };
    uint32_t const ces[9] = { 0x45C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_028)
{
    // 16B68 0062;	
    // (𖭨) PAHAWH HMONG SIGN HNUB	[45C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B68, 0x0062 };
    uint32_t const ces[9] = { 0x45C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_029)
{
    // 16B69 0021;	
    // (𖭩) PAHAWH HMONG SIGN NQIG	[45C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B69, 0x0021 };
    uint32_t const ces[9] = { 0x45C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_030)
{
    // 16B69 003F;	
    // (𖭩) PAHAWH HMONG SIGN NQIG	[45C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B69, 0x003F };
    uint32_t const ces[9] = { 0x45C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_031)
{
    // 16B69 0061;	
    // (𖭩) PAHAWH HMONG SIGN NQIG	[45C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B69, 0x0061 };
    uint32_t const ces[9] = { 0x45C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_032)
{
    // 16B69 0041;	
    // (𖭩) PAHAWH HMONG SIGN NQIG	[45C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B69, 0x0041 };
    uint32_t const ces[9] = { 0x45C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_033)
{
    // 16B69 0062;	
    // (𖭩) PAHAWH HMONG SIGN NQIG	[45C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B69, 0x0062 };
    uint32_t const ces[9] = { 0x45C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_034)
{
    // 16B6A 0021;	
    // (𖭪) PAHAWH HMONG SIGN XIAB	[45C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B6A, 0x0021 };
    uint32_t const ces[9] = { 0x45C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_035)
{
    // 16B6A 003F;	
    // (𖭪) PAHAWH HMONG SIGN XIAB	[45C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B6A, 0x003F };
    uint32_t const ces[9] = { 0x45C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_036)
{
    // 16B6A 0061;	
    // (𖭪) PAHAWH HMONG SIGN XIAB	[45C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B6A, 0x0061 };
    uint32_t const ces[9] = { 0x45C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_037)
{
    // 16B6A 0041;	
    // (𖭪) PAHAWH HMONG SIGN XIAB	[45C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B6A, 0x0041 };
    uint32_t const ces[9] = { 0x45C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_038)
{
    // 16B6A 0062;	
    // (𖭪) PAHAWH HMONG SIGN XIAB	[45C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B6A, 0x0062 };
    uint32_t const ces[9] = { 0x45C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_039)
{
    // 16B6B 0021;	
    // (𖭫) PAHAWH HMONG SIGN NTUJ	[45C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B6B, 0x0021 };
    uint32_t const ces[9] = { 0x45C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_040)
{
    // 16B6B 003F;	
    // (𖭫) PAHAWH HMONG SIGN NTUJ	[45C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B6B, 0x003F };
    uint32_t const ces[9] = { 0x45C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_041)
{
    // 16B6B 0061;	
    // (𖭫) PAHAWH HMONG SIGN NTUJ	[45C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B6B, 0x0061 };
    uint32_t const ces[9] = { 0x45C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_042)
{
    // 16B6B 0041;	
    // (𖭫) PAHAWH HMONG SIGN NTUJ	[45C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B6B, 0x0041 };
    uint32_t const ces[9] = { 0x45C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_043)
{
    // 16B6B 0062;	
    // (𖭫) PAHAWH HMONG SIGN NTUJ	[45C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B6B, 0x0062 };
    uint32_t const ces[9] = { 0x45C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_044)
{
    // 16B6C 0021;	
    // (𖭬) PAHAWH HMONG SIGN AV	[45C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B6C, 0x0021 };
    uint32_t const ces[9] = { 0x45C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_045)
{
    // 16B6C 003F;	
    // (𖭬) PAHAWH HMONG SIGN AV	[45C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B6C, 0x003F };
    uint32_t const ces[9] = { 0x45C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_046)
{
    // 16B6C 0061;	
    // (𖭬) PAHAWH HMONG SIGN AV	[45C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B6C, 0x0061 };
    uint32_t const ces[9] = { 0x45C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_047)
{
    // 16B6C 0041;	
    // (𖭬) PAHAWH HMONG SIGN AV	[45C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B6C, 0x0041 };
    uint32_t const ces[9] = { 0x45C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_048)
{
    // 16B6C 0062;	
    // (𖭬) PAHAWH HMONG SIGN AV	[45C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B6C, 0x0062 };
    uint32_t const ces[9] = { 0x45C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_049)
{
    // 16B6D 0021;	
    // (𖭭) PAHAWH HMONG SIGN TXHEEJ CEEV	[45C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B6D, 0x0021 };
    uint32_t const ces[9] = { 0x45C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_050)
{
    // 16B6D 003F;	
    // (𖭭) PAHAWH HMONG SIGN TXHEEJ CEEV	[45C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B6D, 0x003F };
    uint32_t const ces[9] = { 0x45C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_051)
{
    // 16B6D 0061;	
    // (𖭭) PAHAWH HMONG SIGN TXHEEJ CEEV	[45C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B6D, 0x0061 };
    uint32_t const ces[9] = { 0x45C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_052)
{
    // 16B6D 0041;	
    // (𖭭) PAHAWH HMONG SIGN TXHEEJ CEEV	[45C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B6D, 0x0041 };
    uint32_t const ces[9] = { 0x45C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_053)
{
    // 16B6D 0062;	
    // (𖭭) PAHAWH HMONG SIGN TXHEEJ CEEV	[45C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B6D, 0x0062 };
    uint32_t const ces[9] = { 0x45C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_054)
{
    // 16B6E 0021;	
    // (𖭮) PAHAWH HMONG SIGN MEEJ TSEEB	[45C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B6E, 0x0021 };
    uint32_t const ces[9] = { 0x45C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_055)
{
    // 16B6E 003F;	
    // (𖭮) PAHAWH HMONG SIGN MEEJ TSEEB	[45C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B6E, 0x003F };
    uint32_t const ces[9] = { 0x45C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_056)
{
    // 16B6E 0061;	
    // (𖭮) PAHAWH HMONG SIGN MEEJ TSEEB	[45C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B6E, 0x0061 };
    uint32_t const ces[9] = { 0x45C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_057)
{
    // 16B6E 0041;	
    // (𖭮) PAHAWH HMONG SIGN MEEJ TSEEB	[45C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B6E, 0x0041 };
    uint32_t const ces[9] = { 0x45C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_058)
{
    // 16B6E 0062;	
    // (𖭮) PAHAWH HMONG SIGN MEEJ TSEEB	[45C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B6E, 0x0062 };
    uint32_t const ces[9] = { 0x45C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_059)
{
    // 16B6F 0021;	
    // (𖭯) PAHAWH HMONG SIGN TAU	[45C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B6F, 0x0021 };
    uint32_t const ces[9] = { 0x45C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_060)
{
    // 16B6F 003F;	
    // (𖭯) PAHAWH HMONG SIGN TAU	[45C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B6F, 0x003F };
    uint32_t const ces[9] = { 0x45C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_061)
{
    // 16B6F 0061;	
    // (𖭯) PAHAWH HMONG SIGN TAU	[45C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B6F, 0x0061 };
    uint32_t const ces[9] = { 0x45C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_062)
{
    // 16B6F 0041;	
    // (𖭯) PAHAWH HMONG SIGN TAU	[45C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B6F, 0x0041 };
    uint32_t const ces[9] = { 0x45C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_063)
{
    // 16B6F 0062;	
    // (𖭯) PAHAWH HMONG SIGN TAU	[45C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B6F, 0x0062 };
    uint32_t const ces[9] = { 0x45C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_064)
{
    // 16B70 0021;	
    // (𖭰) PAHAWH HMONG SIGN LOS	[45C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B70, 0x0021 };
    uint32_t const ces[9] = { 0x45C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_065)
{
    // 16B70 003F;	
    // (𖭰) PAHAWH HMONG SIGN LOS	[45C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B70, 0x003F };
    uint32_t const ces[9] = { 0x45C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_066)
{
    // 16B70 0061;	
    // (𖭰) PAHAWH HMONG SIGN LOS	[45C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B70, 0x0061 };
    uint32_t const ces[9] = { 0x45C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_067)
{
    // 16B70 0041;	
    // (𖭰) PAHAWH HMONG SIGN LOS	[45C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B70, 0x0041 };
    uint32_t const ces[9] = { 0x45C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_068)
{
    // 16B70 0062;	
    // (𖭰) PAHAWH HMONG SIGN LOS	[45C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B70, 0x0062 };
    uint32_t const ces[9] = { 0x45C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_069)
{
    // 16B71 0021;	
    // (𖭱) PAHAWH HMONG SIGN MUS	[45C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B71, 0x0021 };
    uint32_t const ces[9] = { 0x45C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_070)
{
    // 16B71 003F;	
    // (𖭱) PAHAWH HMONG SIGN MUS	[45C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B71, 0x003F };
    uint32_t const ces[9] = { 0x45C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_071)
{
    // 16B71 0061;	
    // (𖭱) PAHAWH HMONG SIGN MUS	[45C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B71, 0x0061 };
    uint32_t const ces[9] = { 0x45C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_072)
{
    // 16B71 0041;	
    // (𖭱) PAHAWH HMONG SIGN MUS	[45C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B71, 0x0041 };
    uint32_t const ces[9] = { 0x45C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_073)
{
    // 16B71 0062;	
    // (𖭱) PAHAWH HMONG SIGN MUS	[45C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B71, 0x0062 };
    uint32_t const ces[9] = { 0x45C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_074)
{
    // 16B72 0021;	
    // (𖭲) PAHAWH HMONG SIGN CIM HAIS LUS NTOG NTOG	[45CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B72, 0x0021 };
    uint32_t const ces[9] = { 0x45CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_075)
{
    // 16B72 003F;	
    // (𖭲) PAHAWH HMONG SIGN CIM HAIS LUS NTOG NTOG	[45CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B72, 0x003F };
    uint32_t const ces[9] = { 0x45CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_076)
{
    // 16B72 0061;	
    // (𖭲) PAHAWH HMONG SIGN CIM HAIS LUS NTOG NTOG	[45CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B72, 0x0061 };
    uint32_t const ces[9] = { 0x45CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_077)
{
    // 16B72 0041;	
    // (𖭲) PAHAWH HMONG SIGN CIM HAIS LUS NTOG NTOG	[45CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B72, 0x0041 };
    uint32_t const ces[9] = { 0x45CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_078)
{
    // 16B72 0062;	
    // (𖭲) PAHAWH HMONG SIGN CIM HAIS LUS NTOG NTOG	[45CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B72, 0x0062 };
    uint32_t const ces[9] = { 0x45CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_079)
{
    // 16B73 0021;	
    // (𖭳) PAHAWH HMONG SIGN CIM CUAM TSHOOJ	[45CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B73, 0x0021 };
    uint32_t const ces[9] = { 0x45CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_080)
{
    // 16B73 003F;	
    // (𖭳) PAHAWH HMONG SIGN CIM CUAM TSHOOJ	[45CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B73, 0x003F };
    uint32_t const ces[9] = { 0x45CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_081)
{
    // 16B73 0061;	
    // (𖭳) PAHAWH HMONG SIGN CIM CUAM TSHOOJ	[45CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B73, 0x0061 };
    uint32_t const ces[9] = { 0x45CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_082)
{
    // 16B73 0041;	
    // (𖭳) PAHAWH HMONG SIGN CIM CUAM TSHOOJ	[45CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B73, 0x0041 };
    uint32_t const ces[9] = { 0x45CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_083)
{
    // 16B73 0062;	
    // (𖭳) PAHAWH HMONG SIGN CIM CUAM TSHOOJ	[45CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B73, 0x0062 };
    uint32_t const ces[9] = { 0x45CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_084)
{
    // 16B74 0021;	
    // (𖭴) PAHAWH HMONG SIGN CIM TXWV	[45CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B74, 0x0021 };
    uint32_t const ces[9] = { 0x45CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_085)
{
    // 16B74 003F;	
    // (𖭴) PAHAWH HMONG SIGN CIM TXWV	[45CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B74, 0x003F };
    uint32_t const ces[9] = { 0x45CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_086)
{
    // 16B74 0061;	
    // (𖭴) PAHAWH HMONG SIGN CIM TXWV	[45CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B74, 0x0061 };
    uint32_t const ces[9] = { 0x45CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_087)
{
    // 16B74 0041;	
    // (𖭴) PAHAWH HMONG SIGN CIM TXWV	[45CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B74, 0x0041 };
    uint32_t const ces[9] = { 0x45CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_088)
{
    // 16B74 0062;	
    // (𖭴) PAHAWH HMONG SIGN CIM TXWV	[45CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B74, 0x0062 };
    uint32_t const ces[9] = { 0x45CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_089)
{
    // 16B75 0021;	
    // (𖭵) PAHAWH HMONG SIGN CIM TXWV CHWV	[45CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B75, 0x0021 };
    uint32_t const ces[9] = { 0x45CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_090)
{
    // 16B75 003F;	
    // (𖭵) PAHAWH HMONG SIGN CIM TXWV CHWV	[45CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B75, 0x003F };
    uint32_t const ces[9] = { 0x45CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_091)
{
    // 16B75 0061;	
    // (𖭵) PAHAWH HMONG SIGN CIM TXWV CHWV	[45CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B75, 0x0061 };
    uint32_t const ces[9] = { 0x45CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_092)
{
    // 16B75 0041;	
    // (𖭵) PAHAWH HMONG SIGN CIM TXWV CHWV	[45CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B75, 0x0041 };
    uint32_t const ces[9] = { 0x45CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_093)
{
    // 16B75 0062;	
    // (𖭵) PAHAWH HMONG SIGN CIM TXWV CHWV	[45CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B75, 0x0062 };
    uint32_t const ces[9] = { 0x45CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_094)
{
    // 16B76 0021;	
    // (𖭶) PAHAWH HMONG SIGN CIM PUB DAWB	[45CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B76, 0x0021 };
    uint32_t const ces[9] = { 0x45CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_095)
{
    // 16B76 003F;	
    // (𖭶) PAHAWH HMONG SIGN CIM PUB DAWB	[45CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B76, 0x003F };
    uint32_t const ces[9] = { 0x45CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_096)
{
    // 16B76 0061;	
    // (𖭶) PAHAWH HMONG SIGN CIM PUB DAWB	[45CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B76, 0x0061 };
    uint32_t const ces[9] = { 0x45CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_097)
{
    // 16B76 0041;	
    // (𖭶) PAHAWH HMONG SIGN CIM PUB DAWB	[45CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B76, 0x0041 };
    uint32_t const ces[9] = { 0x45CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_098)
{
    // 16B76 0062;	
    // (𖭶) PAHAWH HMONG SIGN CIM PUB DAWB	[45CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B76, 0x0062 };
    uint32_t const ces[9] = { 0x45CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_099)
{
    // 16B77 0021;	
    // (𖭷) PAHAWH HMONG SIGN CIM NRES TOS	[45CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B77, 0x0021 };
    uint32_t const ces[9] = { 0x45CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_100)
{
    // 16B77 003F;	
    // (𖭷) PAHAWH HMONG SIGN CIM NRES TOS	[45CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B77, 0x003F };
    uint32_t const ces[9] = { 0x45CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_101)
{
    // 16B77 0061;	
    // (𖭷) PAHAWH HMONG SIGN CIM NRES TOS	[45CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B77, 0x0061 };
    uint32_t const ces[9] = { 0x45CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_102)
{
    // 16B77 0041;	
    // (𖭷) PAHAWH HMONG SIGN CIM NRES TOS	[45CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B77, 0x0041 };
    uint32_t const ces[9] = { 0x45CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_103)
{
    // 16B77 0062;	
    // (𖭷) PAHAWH HMONG SIGN CIM NRES TOS	[45CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B77, 0x0062 };
    uint32_t const ces[9] = { 0x45CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_104)
{
    // 16B7D 0021;	
    // (𖭽) PAHAWH HMONG CLAN SIGN TSHEEJ	[45D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B7D, 0x0021 };
    uint32_t const ces[9] = { 0x45D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_105)
{
    // 16B7D 003F;	
    // (𖭽) PAHAWH HMONG CLAN SIGN TSHEEJ	[45D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B7D, 0x003F };
    uint32_t const ces[9] = { 0x45D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_106)
{
    // 16B7D 0061;	
    // (𖭽) PAHAWH HMONG CLAN SIGN TSHEEJ	[45D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B7D, 0x0061 };
    uint32_t const ces[9] = { 0x45D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_107)
{
    // 16B7D 0041;	
    // (𖭽) PAHAWH HMONG CLAN SIGN TSHEEJ	[45D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B7D, 0x0041 };
    uint32_t const ces[9] = { 0x45D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_108)
{
    // 16B7D 0062;	
    // (𖭽) PAHAWH HMONG CLAN SIGN TSHEEJ	[45D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B7D, 0x0062 };
    uint32_t const ces[9] = { 0x45D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_109)
{
    // 16B7E 0021;	
    // (𖭾) PAHAWH HMONG CLAN SIGN YEEG	[45D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B7E, 0x0021 };
    uint32_t const ces[9] = { 0x45D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_110)
{
    // 16B7E 003F;	
    // (𖭾) PAHAWH HMONG CLAN SIGN YEEG	[45D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B7E, 0x003F };
    uint32_t const ces[9] = { 0x45D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_111)
{
    // 16B7E 0061;	
    // (𖭾) PAHAWH HMONG CLAN SIGN YEEG	[45D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B7E, 0x0061 };
    uint32_t const ces[9] = { 0x45D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_112)
{
    // 16B7E 0041;	
    // (𖭾) PAHAWH HMONG CLAN SIGN YEEG	[45D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B7E, 0x0041 };
    uint32_t const ces[9] = { 0x45D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_113)
{
    // 16B7E 0062;	
    // (𖭾) PAHAWH HMONG CLAN SIGN YEEG	[45D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B7E, 0x0062 };
    uint32_t const ces[9] = { 0x45D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_114)
{
    // 16B7F 0021;	
    // (𖭿) PAHAWH HMONG CLAN SIGN LIS	[45D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B7F, 0x0021 };
    uint32_t const ces[9] = { 0x45D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_115)
{
    // 16B7F 003F;	
    // (𖭿) PAHAWH HMONG CLAN SIGN LIS	[45D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B7F, 0x003F };
    uint32_t const ces[9] = { 0x45D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_116)
{
    // 16B7F 0061;	
    // (𖭿) PAHAWH HMONG CLAN SIGN LIS	[45D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B7F, 0x0061 };
    uint32_t const ces[9] = { 0x45D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_117)
{
    // 16B7F 0041;	
    // (𖭿) PAHAWH HMONG CLAN SIGN LIS	[45D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B7F, 0x0041 };
    uint32_t const ces[9] = { 0x45D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_118)
{
    // 16B7F 0062;	
    // (𖭿) PAHAWH HMONG CLAN SIGN LIS	[45D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B7F, 0x0062 };
    uint32_t const ces[9] = { 0x45D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_119)
{
    // 16B80 0021;	
    // (𖮀) PAHAWH HMONG CLAN SIGN LAUJ	[45D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B80, 0x0021 };
    uint32_t const ces[9] = { 0x45D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_120)
{
    // 16B80 003F;	
    // (𖮀) PAHAWH HMONG CLAN SIGN LAUJ	[45D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B80, 0x003F };
    uint32_t const ces[9] = { 0x45D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_121)
{
    // 16B80 0061;	
    // (𖮀) PAHAWH HMONG CLAN SIGN LAUJ	[45D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B80, 0x0061 };
    uint32_t const ces[9] = { 0x45D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_122)
{
    // 16B80 0041;	
    // (𖮀) PAHAWH HMONG CLAN SIGN LAUJ	[45D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B80, 0x0041 };
    uint32_t const ces[9] = { 0x45D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_123)
{
    // 16B80 0062;	
    // (𖮀) PAHAWH HMONG CLAN SIGN LAUJ	[45D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B80, 0x0062 };
    uint32_t const ces[9] = { 0x45D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_124)
{
    // 16B81 0021;	
    // (𖮁) PAHAWH HMONG CLAN SIGN XYOOJ	[45D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B81, 0x0021 };
    uint32_t const ces[9] = { 0x45D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_125)
{
    // 16B81 003F;	
    // (𖮁) PAHAWH HMONG CLAN SIGN XYOOJ	[45D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B81, 0x003F };
    uint32_t const ces[9] = { 0x45D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_126)
{
    // 16B81 0061;	
    // (𖮁) PAHAWH HMONG CLAN SIGN XYOOJ	[45D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B81, 0x0061 };
    uint32_t const ces[9] = { 0x45D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_127)
{
    // 16B81 0041;	
    // (𖮁) PAHAWH HMONG CLAN SIGN XYOOJ	[45D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B81, 0x0041 };
    uint32_t const ces[9] = { 0x45D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_128)
{
    // 16B81 0062;	
    // (𖮁) PAHAWH HMONG CLAN SIGN XYOOJ	[45D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B81, 0x0062 };
    uint32_t const ces[9] = { 0x45D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_129)
{
    // 16B82 0021;	
    // (𖮂) PAHAWH HMONG CLAN SIGN KOO	[45D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B82, 0x0021 };
    uint32_t const ces[9] = { 0x45D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_130)
{
    // 16B82 003F;	
    // (𖮂) PAHAWH HMONG CLAN SIGN KOO	[45D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B82, 0x003F };
    uint32_t const ces[9] = { 0x45D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_131)
{
    // 16B82 0061;	
    // (𖮂) PAHAWH HMONG CLAN SIGN KOO	[45D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B82, 0x0061 };
    uint32_t const ces[9] = { 0x45D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_132)
{
    // 16B82 0041;	
    // (𖮂) PAHAWH HMONG CLAN SIGN KOO	[45D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B82, 0x0041 };
    uint32_t const ces[9] = { 0x45D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_133)
{
    // 16B82 0062;	
    // (𖮂) PAHAWH HMONG CLAN SIGN KOO	[45D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B82, 0x0062 };
    uint32_t const ces[9] = { 0x45D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_134)
{
    // 16B83 0021;	
    // (𖮃) PAHAWH HMONG CLAN SIGN HAWJ	[45D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B83, 0x0021 };
    uint32_t const ces[9] = { 0x45D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_135)
{
    // 16B83 003F;	
    // (𖮃) PAHAWH HMONG CLAN SIGN HAWJ	[45D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B83, 0x003F };
    uint32_t const ces[9] = { 0x45D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_136)
{
    // 16B83 0061;	
    // (𖮃) PAHAWH HMONG CLAN SIGN HAWJ	[45D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B83, 0x0061 };
    uint32_t const ces[9] = { 0x45D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_137)
{
    // 16B83 0041;	
    // (𖮃) PAHAWH HMONG CLAN SIGN HAWJ	[45D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B83, 0x0041 };
    uint32_t const ces[9] = { 0x45D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_138)
{
    // 16B83 0062;	
    // (𖮃) PAHAWH HMONG CLAN SIGN HAWJ	[45D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B83, 0x0062 };
    uint32_t const ces[9] = { 0x45D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_139)
{
    // 16B84 0021;	
    // (𖮄) PAHAWH HMONG CLAN SIGN MUAS	[45D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B84, 0x0021 };
    uint32_t const ces[9] = { 0x45D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_140)
{
    // 16B84 003F;	
    // (𖮄) PAHAWH HMONG CLAN SIGN MUAS	[45D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B84, 0x003F };
    uint32_t const ces[9] = { 0x45D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_141)
{
    // 16B84 0061;	
    // (𖮄) PAHAWH HMONG CLAN SIGN MUAS	[45D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B84, 0x0061 };
    uint32_t const ces[9] = { 0x45D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_142)
{
    // 16B84 0041;	
    // (𖮄) PAHAWH HMONG CLAN SIGN MUAS	[45D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B84, 0x0041 };
    uint32_t const ces[9] = { 0x45D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_143)
{
    // 16B84 0062;	
    // (𖮄) PAHAWH HMONG CLAN SIGN MUAS	[45D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B84, 0x0062 };
    uint32_t const ces[9] = { 0x45D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_144)
{
    // 16B85 0021;	
    // (𖮅) PAHAWH HMONG CLAN SIGN THOJ	[45D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B85, 0x0021 };
    uint32_t const ces[9] = { 0x45D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_145)
{
    // 16B85 003F;	
    // (𖮅) PAHAWH HMONG CLAN SIGN THOJ	[45D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B85, 0x003F };
    uint32_t const ces[9] = { 0x45D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_146)
{
    // 16B85 0061;	
    // (𖮅) PAHAWH HMONG CLAN SIGN THOJ	[45D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B85, 0x0061 };
    uint32_t const ces[9] = { 0x45D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_147)
{
    // 16B85 0041;	
    // (𖮅) PAHAWH HMONG CLAN SIGN THOJ	[45D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B85, 0x0041 };
    uint32_t const ces[9] = { 0x45D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_148)
{
    // 16B85 0062;	
    // (𖮅) PAHAWH HMONG CLAN SIGN THOJ	[45D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B85, 0x0062 };
    uint32_t const ces[9] = { 0x45D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_149)
{
    // 16B86 0021;	
    // (𖮆) PAHAWH HMONG CLAN SIGN TSAB	[45D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B86, 0x0021 };
    uint32_t const ces[9] = { 0x45D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_150)
{
    // 16B86 003F;	
    // (𖮆) PAHAWH HMONG CLAN SIGN TSAB	[45D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B86, 0x003F };
    uint32_t const ces[9] = { 0x45D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_151)
{
    // 16B86 0061;	
    // (𖮆) PAHAWH HMONG CLAN SIGN TSAB	[45D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B86, 0x0061 };
    uint32_t const ces[9] = { 0x45D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_152)
{
    // 16B86 0041;	
    // (𖮆) PAHAWH HMONG CLAN SIGN TSAB	[45D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B86, 0x0041 };
    uint32_t const ces[9] = { 0x45D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_153)
{
    // 16B86 0062;	
    // (𖮆) PAHAWH HMONG CLAN SIGN TSAB	[45D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B86, 0x0062 };
    uint32_t const ces[9] = { 0x45D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_154)
{
    // 16B87 0021;	
    // (𖮇) PAHAWH HMONG CLAN SIGN PHAB	[45DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B87, 0x0021 };
    uint32_t const ces[9] = { 0x45DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_155)
{
    // 16B87 003F;	
    // (𖮇) PAHAWH HMONG CLAN SIGN PHAB	[45DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B87, 0x003F };
    uint32_t const ces[9] = { 0x45DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_156)
{
    // 16B87 0061;	
    // (𖮇) PAHAWH HMONG CLAN SIGN PHAB	[45DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B87, 0x0061 };
    uint32_t const ces[9] = { 0x45DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_157)
{
    // 16B87 0041;	
    // (𖮇) PAHAWH HMONG CLAN SIGN PHAB	[45DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B87, 0x0041 };
    uint32_t const ces[9] = { 0x45DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_158)
{
    // 16B87 0062;	
    // (𖮇) PAHAWH HMONG CLAN SIGN PHAB	[45DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B87, 0x0062 };
    uint32_t const ces[9] = { 0x45DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_159)
{
    // 16B88 0021;	
    // (𖮈) PAHAWH HMONG CLAN SIGN KHAB	[45DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B88, 0x0021 };
    uint32_t const ces[9] = { 0x45DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_160)
{
    // 16B88 003F;	
    // (𖮈) PAHAWH HMONG CLAN SIGN KHAB	[45DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B88, 0x003F };
    uint32_t const ces[9] = { 0x45DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_161)
{
    // 16B88 0061;	
    // (𖮈) PAHAWH HMONG CLAN SIGN KHAB	[45DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B88, 0x0061 };
    uint32_t const ces[9] = { 0x45DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_162)
{
    // 16B88 0041;	
    // (𖮈) PAHAWH HMONG CLAN SIGN KHAB	[45DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B88, 0x0041 };
    uint32_t const ces[9] = { 0x45DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_163)
{
    // 16B88 0062;	
    // (𖮈) PAHAWH HMONG CLAN SIGN KHAB	[45DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B88, 0x0062 };
    uint32_t const ces[9] = { 0x45DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_164)
{
    // 16B89 0021;	
    // (𖮉) PAHAWH HMONG CLAN SIGN HAM	[45DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B89, 0x0021 };
    uint32_t const ces[9] = { 0x45DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_165)
{
    // 16B89 003F;	
    // (𖮉) PAHAWH HMONG CLAN SIGN HAM	[45DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B89, 0x003F };
    uint32_t const ces[9] = { 0x45DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_166)
{
    // 16B89 0061;	
    // (𖮉) PAHAWH HMONG CLAN SIGN HAM	[45DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B89, 0x0061 };
    uint32_t const ces[9] = { 0x45DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_167)
{
    // 16B89 0041;	
    // (𖮉) PAHAWH HMONG CLAN SIGN HAM	[45DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B89, 0x0041 };
    uint32_t const ces[9] = { 0x45DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_168)
{
    // 16B89 0062;	
    // (𖮉) PAHAWH HMONG CLAN SIGN HAM	[45DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B89, 0x0062 };
    uint32_t const ces[9] = { 0x45DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_169)
{
    // 16B8A 0021;	
    // (𖮊) PAHAWH HMONG CLAN SIGN VAJ	[45DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B8A, 0x0021 };
    uint32_t const ces[9] = { 0x45DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_170)
{
    // 16B8A 003F;	
    // (𖮊) PAHAWH HMONG CLAN SIGN VAJ	[45DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B8A, 0x003F };
    uint32_t const ces[9] = { 0x45DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_171)
{
    // 16B8A 0061;	
    // (𖮊) PAHAWH HMONG CLAN SIGN VAJ	[45DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B8A, 0x0061 };
    uint32_t const ces[9] = { 0x45DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_172)
{
    // 16B8A 0041;	
    // (𖮊) PAHAWH HMONG CLAN SIGN VAJ	[45DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B8A, 0x0041 };
    uint32_t const ces[9] = { 0x45DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_173)
{
    // 16B8A 0062;	
    // (𖮊) PAHAWH HMONG CLAN SIGN VAJ	[45DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B8A, 0x0062 };
    uint32_t const ces[9] = { 0x45DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_174)
{
    // 16B8B 0021;	
    // (𖮋) PAHAWH HMONG CLAN SIGN FAJ	[45DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B8B, 0x0021 };
    uint32_t const ces[9] = { 0x45DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_175)
{
    // 16B8B 003F;	
    // (𖮋) PAHAWH HMONG CLAN SIGN FAJ	[45DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B8B, 0x003F };
    uint32_t const ces[9] = { 0x45DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_176)
{
    // 16B8B 0061;	
    // (𖮋) PAHAWH HMONG CLAN SIGN FAJ	[45DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B8B, 0x0061 };
    uint32_t const ces[9] = { 0x45DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_177)
{
    // 16B8B 0041;	
    // (𖮋) PAHAWH HMONG CLAN SIGN FAJ	[45DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B8B, 0x0041 };
    uint32_t const ces[9] = { 0x45DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_178)
{
    // 16B8B 0062;	
    // (𖮋) PAHAWH HMONG CLAN SIGN FAJ	[45DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B8B, 0x0062 };
    uint32_t const ces[9] = { 0x45DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_179)
{
    // 16B8C 0021;	
    // (𖮌) PAHAWH HMONG CLAN SIGN YAJ	[45DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B8C, 0x0021 };
    uint32_t const ces[9] = { 0x45DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_180)
{
    // 16B8C 003F;	
    // (𖮌) PAHAWH HMONG CLAN SIGN YAJ	[45DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B8C, 0x003F };
    uint32_t const ces[9] = { 0x45DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_181)
{
    // 16B8C 0061;	
    // (𖮌) PAHAWH HMONG CLAN SIGN YAJ	[45DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B8C, 0x0061 };
    uint32_t const ces[9] = { 0x45DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_182)
{
    // 16B8C 0041;	
    // (𖮌) PAHAWH HMONG CLAN SIGN YAJ	[45DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B8C, 0x0041 };
    uint32_t const ces[9] = { 0x45DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_183)
{
    // 16B8C 0062;	
    // (𖮌) PAHAWH HMONG CLAN SIGN YAJ	[45DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B8C, 0x0062 };
    uint32_t const ces[9] = { 0x45DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_184)
{
    // 16B8D 0021;	
    // (𖮍) PAHAWH HMONG CLAN SIGN TSWB	[45E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B8D, 0x0021 };
    uint32_t const ces[9] = { 0x45E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_185)
{
    // 16B8D 003F;	
    // (𖮍) PAHAWH HMONG CLAN SIGN TSWB	[45E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B8D, 0x003F };
    uint32_t const ces[9] = { 0x45E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_186)
{
    // 16B8D 0061;	
    // (𖮍) PAHAWH HMONG CLAN SIGN TSWB	[45E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B8D, 0x0061 };
    uint32_t const ces[9] = { 0x45E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_187)
{
    // 16B8D 0041;	
    // (𖮍) PAHAWH HMONG CLAN SIGN TSWB	[45E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B8D, 0x0041 };
    uint32_t const ces[9] = { 0x45E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_188)
{
    // 16B8D 0062;	
    // (𖮍) PAHAWH HMONG CLAN SIGN TSWB	[45E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B8D, 0x0062 };
    uint32_t const ces[9] = { 0x45E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_189)
{
    // 16B8E 0021;	
    // (𖮎) PAHAWH HMONG CLAN SIGN KWM	[45E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B8E, 0x0021 };
    uint32_t const ces[9] = { 0x45E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_190)
{
    // 16B8E 003F;	
    // (𖮎) PAHAWH HMONG CLAN SIGN KWM	[45E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B8E, 0x003F };
    uint32_t const ces[9] = { 0x45E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_191)
{
    // 16B8E 0061;	
    // (𖮎) PAHAWH HMONG CLAN SIGN KWM	[45E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B8E, 0x0061 };
    uint32_t const ces[9] = { 0x45E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_192)
{
    // 16B8E 0041;	
    // (𖮎) PAHAWH HMONG CLAN SIGN KWM	[45E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B8E, 0x0041 };
    uint32_t const ces[9] = { 0x45E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_193)
{
    // 16B8E 0062;	
    // (𖮎) PAHAWH HMONG CLAN SIGN KWM	[45E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B8E, 0x0062 };
    uint32_t const ces[9] = { 0x45E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_194)
{
    // 16B8F 0021;	
    // (𖮏) PAHAWH HMONG CLAN SIGN VWJ	[45E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B8F, 0x0021 };
    uint32_t const ces[9] = { 0x45E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_195)
{
    // 16B8F 003F;	
    // (𖮏) PAHAWH HMONG CLAN SIGN VWJ	[45E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B8F, 0x003F };
    uint32_t const ces[9] = { 0x45E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_196)
{
    // 16B8F 0061;	
    // (𖮏) PAHAWH HMONG CLAN SIGN VWJ	[45E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B8F, 0x0061 };
    uint32_t const ces[9] = { 0x45E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_197)
{
    // 16B8F 0041;	
    // (𖮏) PAHAWH HMONG CLAN SIGN VWJ	[45E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B8F, 0x0041 };
    uint32_t const ces[9] = { 0x45E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_198)
{
    // 16B8F 0062;	
    // (𖮏) PAHAWH HMONG CLAN SIGN VWJ	[45E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B8F, 0x0062 };
    uint32_t const ces[9] = { 0x45E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_199)
{
    // 10280 0021;	
    // (𐊀) LYCIAN LETTER A	[45E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10280, 0x0021 };
    uint32_t const ces[9] = { 0x45E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_200)
{
    // 10280 003F;	
    // (𐊀) LYCIAN LETTER A	[45E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10280, 0x003F };
    uint32_t const ces[9] = { 0x45E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_201)
{
    // 10280 0061;	
    // (𐊀) LYCIAN LETTER A	[45E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10280, 0x0061 };
    uint32_t const ces[9] = { 0x45E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_202)
{
    // 10280 0041;	
    // (𐊀) LYCIAN LETTER A	[45E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10280, 0x0041 };
    uint32_t const ces[9] = { 0x45E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_203)
{
    // 10280 0062;	
    // (𐊀) LYCIAN LETTER A	[45E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10280, 0x0062 };
    uint32_t const ces[9] = { 0x45E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_204)
{
    // 10281 0021;	
    // (𐊁) LYCIAN LETTER E	[45E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10281, 0x0021 };
    uint32_t const ces[9] = { 0x45E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_205)
{
    // 10281 003F;	
    // (𐊁) LYCIAN LETTER E	[45E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10281, 0x003F };
    uint32_t const ces[9] = { 0x45E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_206)
{
    // 10281 0061;	
    // (𐊁) LYCIAN LETTER E	[45E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10281, 0x0061 };
    uint32_t const ces[9] = { 0x45E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_207)
{
    // 10281 0041;	
    // (𐊁) LYCIAN LETTER E	[45E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10281, 0x0041 };
    uint32_t const ces[9] = { 0x45E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_208)
{
    // 10281 0062;	
    // (𐊁) LYCIAN LETTER E	[45E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10281, 0x0062 };
    uint32_t const ces[9] = { 0x45E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_209)
{
    // 10282 0021;	
    // (𐊂) LYCIAN LETTER B	[45E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10282, 0x0021 };
    uint32_t const ces[9] = { 0x45E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_210)
{
    // 10282 003F;	
    // (𐊂) LYCIAN LETTER B	[45E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10282, 0x003F };
    uint32_t const ces[9] = { 0x45E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_211)
{
    // 10282 0061;	
    // (𐊂) LYCIAN LETTER B	[45E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10282, 0x0061 };
    uint32_t const ces[9] = { 0x45E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_212)
{
    // 10282 0041;	
    // (𐊂) LYCIAN LETTER B	[45E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10282, 0x0041 };
    uint32_t const ces[9] = { 0x45E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_213)
{
    // 10282 0062;	
    // (𐊂) LYCIAN LETTER B	[45E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10282, 0x0062 };
    uint32_t const ces[9] = { 0x45E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_214)
{
    // 10283 0021;	
    // (𐊃) LYCIAN LETTER BH	[45E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10283, 0x0021 };
    uint32_t const ces[9] = { 0x45E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_215)
{
    // 10283 003F;	
    // (𐊃) LYCIAN LETTER BH	[45E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10283, 0x003F };
    uint32_t const ces[9] = { 0x45E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_216)
{
    // 10283 0061;	
    // (𐊃) LYCIAN LETTER BH	[45E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10283, 0x0061 };
    uint32_t const ces[9] = { 0x45E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_217)
{
    // 10283 0041;	
    // (𐊃) LYCIAN LETTER BH	[45E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10283, 0x0041 };
    uint32_t const ces[9] = { 0x45E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_218)
{
    // 10283 0062;	
    // (𐊃) LYCIAN LETTER BH	[45E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10283, 0x0062 };
    uint32_t const ces[9] = { 0x45E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_219)
{
    // 10284 0021;	
    // (𐊄) LYCIAN LETTER G	[45E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10284, 0x0021 };
    uint32_t const ces[9] = { 0x45E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_220)
{
    // 10284 003F;	
    // (𐊄) LYCIAN LETTER G	[45E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10284, 0x003F };
    uint32_t const ces[9] = { 0x45E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_221)
{
    // 10284 0061;	
    // (𐊄) LYCIAN LETTER G	[45E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10284, 0x0061 };
    uint32_t const ces[9] = { 0x45E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_222)
{
    // 10284 0041;	
    // (𐊄) LYCIAN LETTER G	[45E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10284, 0x0041 };
    uint32_t const ces[9] = { 0x45E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_223)
{
    // 10284 0062;	
    // (𐊄) LYCIAN LETTER G	[45E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10284, 0x0062 };
    uint32_t const ces[9] = { 0x45E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_224)
{
    // 10285 0021;	
    // (𐊅) LYCIAN LETTER D	[45E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10285, 0x0021 };
    uint32_t const ces[9] = { 0x45E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_225)
{
    // 10285 003F;	
    // (𐊅) LYCIAN LETTER D	[45E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10285, 0x003F };
    uint32_t const ces[9] = { 0x45E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_226)
{
    // 10285 0061;	
    // (𐊅) LYCIAN LETTER D	[45E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10285, 0x0061 };
    uint32_t const ces[9] = { 0x45E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_227)
{
    // 10285 0041;	
    // (𐊅) LYCIAN LETTER D	[45E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10285, 0x0041 };
    uint32_t const ces[9] = { 0x45E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_228)
{
    // 10285 0062;	
    // (𐊅) LYCIAN LETTER D	[45E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10285, 0x0062 };
    uint32_t const ces[9] = { 0x45E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_229)
{
    // 10286 0021;	
    // (𐊆) LYCIAN LETTER I	[45E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10286, 0x0021 };
    uint32_t const ces[9] = { 0x45E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_230)
{
    // 10286 003F;	
    // (𐊆) LYCIAN LETTER I	[45E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10286, 0x003F };
    uint32_t const ces[9] = { 0x45E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_231)
{
    // 10286 0061;	
    // (𐊆) LYCIAN LETTER I	[45E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10286, 0x0061 };
    uint32_t const ces[9] = { 0x45E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_232)
{
    // 10286 0041;	
    // (𐊆) LYCIAN LETTER I	[45E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10286, 0x0041 };
    uint32_t const ces[9] = { 0x45E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_233)
{
    // 10286 0062;	
    // (𐊆) LYCIAN LETTER I	[45E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10286, 0x0062 };
    uint32_t const ces[9] = { 0x45E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_234)
{
    // 10287 0021;	
    // (𐊇) LYCIAN LETTER W	[45EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10287, 0x0021 };
    uint32_t const ces[9] = { 0x45EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_235)
{
    // 10287 003F;	
    // (𐊇) LYCIAN LETTER W	[45EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10287, 0x003F };
    uint32_t const ces[9] = { 0x45EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_236)
{
    // 10287 0061;	
    // (𐊇) LYCIAN LETTER W	[45EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10287, 0x0061 };
    uint32_t const ces[9] = { 0x45EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_237)
{
    // 10287 0041;	
    // (𐊇) LYCIAN LETTER W	[45EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10287, 0x0041 };
    uint32_t const ces[9] = { 0x45EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_238)
{
    // 10287 0062;	
    // (𐊇) LYCIAN LETTER W	[45EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10287, 0x0062 };
    uint32_t const ces[9] = { 0x45EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_239)
{
    // 10288 0021;	
    // (𐊈) LYCIAN LETTER Z	[45EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10288, 0x0021 };
    uint32_t const ces[9] = { 0x45EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_240)
{
    // 10288 003F;	
    // (𐊈) LYCIAN LETTER Z	[45EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10288, 0x003F };
    uint32_t const ces[9] = { 0x45EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_241)
{
    // 10288 0061;	
    // (𐊈) LYCIAN LETTER Z	[45EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10288, 0x0061 };
    uint32_t const ces[9] = { 0x45EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_242)
{
    // 10288 0041;	
    // (𐊈) LYCIAN LETTER Z	[45EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10288, 0x0041 };
    uint32_t const ces[9] = { 0x45EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_243)
{
    // 10288 0062;	
    // (𐊈) LYCIAN LETTER Z	[45EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10288, 0x0062 };
    uint32_t const ces[9] = { 0x45EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_244)
{
    // 10289 0021;	
    // (𐊉) LYCIAN LETTER TH	[45EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10289, 0x0021 };
    uint32_t const ces[9] = { 0x45EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_245)
{
    // 10289 003F;	
    // (𐊉) LYCIAN LETTER TH	[45EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10289, 0x003F };
    uint32_t const ces[9] = { 0x45EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_246)
{
    // 10289 0061;	
    // (𐊉) LYCIAN LETTER TH	[45EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10289, 0x0061 };
    uint32_t const ces[9] = { 0x45EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_247)
{
    // 10289 0041;	
    // (𐊉) LYCIAN LETTER TH	[45EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10289, 0x0041 };
    uint32_t const ces[9] = { 0x45EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_248)
{
    // 10289 0062;	
    // (𐊉) LYCIAN LETTER TH	[45EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10289, 0x0062 };
    uint32_t const ces[9] = { 0x45EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_249)
{
    // 1028A 0021;	
    // (𐊊) LYCIAN LETTER J	[45ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028A, 0x0021 };
    uint32_t const ces[9] = { 0x45ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_250)
{
    // 1028A 003F;	
    // (𐊊) LYCIAN LETTER J	[45ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028A, 0x003F };
    uint32_t const ces[9] = { 0x45ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_251)
{
    // 1028A 0061;	
    // (𐊊) LYCIAN LETTER J	[45ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028A, 0x0061 };
    uint32_t const ces[9] = { 0x45ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_252)
{
    // 1028A 0041;	
    // (𐊊) LYCIAN LETTER J	[45ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1028A, 0x0041 };
    uint32_t const ces[9] = { 0x45ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_253)
{
    // 1028A 0062;	
    // (𐊊) LYCIAN LETTER J	[45ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028A, 0x0062 };
    uint32_t const ces[9] = { 0x45ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_254)
{
    // 1028B 0021;	
    // (𐊋) LYCIAN LETTER K	[45EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028B, 0x0021 };
    uint32_t const ces[9] = { 0x45EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_255)
{
    // 1028B 003F;	
    // (𐊋) LYCIAN LETTER K	[45EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028B, 0x003F };
    uint32_t const ces[9] = { 0x45EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_256)
{
    // 1028B 0061;	
    // (𐊋) LYCIAN LETTER K	[45EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028B, 0x0061 };
    uint32_t const ces[9] = { 0x45EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_257)
{
    // 1028B 0041;	
    // (𐊋) LYCIAN LETTER K	[45EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1028B, 0x0041 };
    uint32_t const ces[9] = { 0x45EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_258)
{
    // 1028B 0062;	
    // (𐊋) LYCIAN LETTER K	[45EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028B, 0x0062 };
    uint32_t const ces[9] = { 0x45EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_259)
{
    // 1028C 0021;	
    // (𐊌) LYCIAN LETTER Q	[45EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028C, 0x0021 };
    uint32_t const ces[9] = { 0x45EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_260)
{
    // 1028C 003F;	
    // (𐊌) LYCIAN LETTER Q	[45EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028C, 0x003F };
    uint32_t const ces[9] = { 0x45EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_261)
{
    // 1028C 0061;	
    // (𐊌) LYCIAN LETTER Q	[45EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028C, 0x0061 };
    uint32_t const ces[9] = { 0x45EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_262)
{
    // 1028C 0041;	
    // (𐊌) LYCIAN LETTER Q	[45EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1028C, 0x0041 };
    uint32_t const ces[9] = { 0x45EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_263)
{
    // 1028C 0062;	
    // (𐊌) LYCIAN LETTER Q	[45EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028C, 0x0062 };
    uint32_t const ces[9] = { 0x45EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_264)
{
    // 1028D 0021;	
    // (𐊍) LYCIAN LETTER L	[45F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028D, 0x0021 };
    uint32_t const ces[9] = { 0x45F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_265)
{
    // 1028D 003F;	
    // (𐊍) LYCIAN LETTER L	[45F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028D, 0x003F };
    uint32_t const ces[9] = { 0x45F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_266)
{
    // 1028D 0061;	
    // (𐊍) LYCIAN LETTER L	[45F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028D, 0x0061 };
    uint32_t const ces[9] = { 0x45F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_267)
{
    // 1028D 0041;	
    // (𐊍) LYCIAN LETTER L	[45F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1028D, 0x0041 };
    uint32_t const ces[9] = { 0x45F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_268)
{
    // 1028D 0062;	
    // (𐊍) LYCIAN LETTER L	[45F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028D, 0x0062 };
    uint32_t const ces[9] = { 0x45F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_269)
{
    // 1028E 0021;	
    // (𐊎) LYCIAN LETTER M	[45F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028E, 0x0021 };
    uint32_t const ces[9] = { 0x45F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_270)
{
    // 1028E 003F;	
    // (𐊎) LYCIAN LETTER M	[45F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028E, 0x003F };
    uint32_t const ces[9] = { 0x45F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_271)
{
    // 1028E 0061;	
    // (𐊎) LYCIAN LETTER M	[45F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028E, 0x0061 };
    uint32_t const ces[9] = { 0x45F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_272)
{
    // 1028E 0041;	
    // (𐊎) LYCIAN LETTER M	[45F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1028E, 0x0041 };
    uint32_t const ces[9] = { 0x45F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_273)
{
    // 1028E 0062;	
    // (𐊎) LYCIAN LETTER M	[45F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028E, 0x0062 };
    uint32_t const ces[9] = { 0x45F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_274)
{
    // 1028F 0021;	
    // (𐊏) LYCIAN LETTER N	[45F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028F, 0x0021 };
    uint32_t const ces[9] = { 0x45F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_275)
{
    // 1028F 003F;	
    // (𐊏) LYCIAN LETTER N	[45F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028F, 0x003F };
    uint32_t const ces[9] = { 0x45F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_276)
{
    // 1028F 0061;	
    // (𐊏) LYCIAN LETTER N	[45F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028F, 0x0061 };
    uint32_t const ces[9] = { 0x45F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_277)
{
    // 1028F 0041;	
    // (𐊏) LYCIAN LETTER N	[45F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1028F, 0x0041 };
    uint32_t const ces[9] = { 0x45F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_278)
{
    // 1028F 0062;	
    // (𐊏) LYCIAN LETTER N	[45F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028F, 0x0062 };
    uint32_t const ces[9] = { 0x45F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_279)
{
    // 10290 0021;	
    // (𐊐) LYCIAN LETTER MM	[45F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10290, 0x0021 };
    uint32_t const ces[9] = { 0x45F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_280)
{
    // 10290 003F;	
    // (𐊐) LYCIAN LETTER MM	[45F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10290, 0x003F };
    uint32_t const ces[9] = { 0x45F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_281)
{
    // 10290 0061;	
    // (𐊐) LYCIAN LETTER MM	[45F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10290, 0x0061 };
    uint32_t const ces[9] = { 0x45F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_282)
{
    // 10290 0041;	
    // (𐊐) LYCIAN LETTER MM	[45F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10290, 0x0041 };
    uint32_t const ces[9] = { 0x45F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_283)
{
    // 10290 0062;	
    // (𐊐) LYCIAN LETTER MM	[45F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10290, 0x0062 };
    uint32_t const ces[9] = { 0x45F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_284)
{
    // 10291 0021;	
    // (𐊑) LYCIAN LETTER NN	[45F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10291, 0x0021 };
    uint32_t const ces[9] = { 0x45F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_285)
{
    // 10291 003F;	
    // (𐊑) LYCIAN LETTER NN	[45F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10291, 0x003F };
    uint32_t const ces[9] = { 0x45F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_286)
{
    // 10291 0061;	
    // (𐊑) LYCIAN LETTER NN	[45F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10291, 0x0061 };
    uint32_t const ces[9] = { 0x45F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_287)
{
    // 10291 0041;	
    // (𐊑) LYCIAN LETTER NN	[45F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10291, 0x0041 };
    uint32_t const ces[9] = { 0x45F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_288)
{
    // 10291 0062;	
    // (𐊑) LYCIAN LETTER NN	[45F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10291, 0x0062 };
    uint32_t const ces[9] = { 0x45F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_289)
{
    // 10292 0021;	
    // (𐊒) LYCIAN LETTER U	[45F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10292, 0x0021 };
    uint32_t const ces[9] = { 0x45F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_290)
{
    // 10292 003F;	
    // (𐊒) LYCIAN LETTER U	[45F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10292, 0x003F };
    uint32_t const ces[9] = { 0x45F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_291)
{
    // 10292 0061;	
    // (𐊒) LYCIAN LETTER U	[45F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10292, 0x0061 };
    uint32_t const ces[9] = { 0x45F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_292)
{
    // 10292 0041;	
    // (𐊒) LYCIAN LETTER U	[45F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10292, 0x0041 };
    uint32_t const ces[9] = { 0x45F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_293)
{
    // 10292 0062;	
    // (𐊒) LYCIAN LETTER U	[45F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10292, 0x0062 };
    uint32_t const ces[9] = { 0x45F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_294)
{
    // 10293 0021;	
    // (𐊓) LYCIAN LETTER P	[45F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10293, 0x0021 };
    uint32_t const ces[9] = { 0x45F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_295)
{
    // 10293 003F;	
    // (𐊓) LYCIAN LETTER P	[45F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10293, 0x003F };
    uint32_t const ces[9] = { 0x45F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_296)
{
    // 10293 0061;	
    // (𐊓) LYCIAN LETTER P	[45F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10293, 0x0061 };
    uint32_t const ces[9] = { 0x45F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_297)
{
    // 10293 0041;	
    // (𐊓) LYCIAN LETTER P	[45F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10293, 0x0041 };
    uint32_t const ces[9] = { 0x45F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_298)
{
    // 10293 0062;	
    // (𐊓) LYCIAN LETTER P	[45F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10293, 0x0062 };
    uint32_t const ces[9] = { 0x45F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_299)
{
    // 10294 0021;	
    // (𐊔) LYCIAN LETTER KK	[45F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10294, 0x0021 };
    uint32_t const ces[9] = { 0x45F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_300)
{
    // 10294 003F;	
    // (𐊔) LYCIAN LETTER KK	[45F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10294, 0x003F };
    uint32_t const ces[9] = { 0x45F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_301)
{
    // 10294 0061;	
    // (𐊔) LYCIAN LETTER KK	[45F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10294, 0x0061 };
    uint32_t const ces[9] = { 0x45F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_302)
{
    // 10294 0041;	
    // (𐊔) LYCIAN LETTER KK	[45F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10294, 0x0041 };
    uint32_t const ces[9] = { 0x45F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_303)
{
    // 10294 0062;	
    // (𐊔) LYCIAN LETTER KK	[45F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10294, 0x0062 };
    uint32_t const ces[9] = { 0x45F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_304)
{
    // 10295 0021;	
    // (𐊕) LYCIAN LETTER R	[45F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10295, 0x0021 };
    uint32_t const ces[9] = { 0x45F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_305)
{
    // 10295 003F;	
    // (𐊕) LYCIAN LETTER R	[45F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10295, 0x003F };
    uint32_t const ces[9] = { 0x45F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_306)
{
    // 10295 0061;	
    // (𐊕) LYCIAN LETTER R	[45F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10295, 0x0061 };
    uint32_t const ces[9] = { 0x45F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_307)
{
    // 10295 0041;	
    // (𐊕) LYCIAN LETTER R	[45F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10295, 0x0041 };
    uint32_t const ces[9] = { 0x45F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_308)
{
    // 10295 0062;	
    // (𐊕) LYCIAN LETTER R	[45F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10295, 0x0062 };
    uint32_t const ces[9] = { 0x45F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_309)
{
    // 10296 0021;	
    // (𐊖) LYCIAN LETTER S	[45F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10296, 0x0021 };
    uint32_t const ces[9] = { 0x45F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_310)
{
    // 10296 003F;	
    // (𐊖) LYCIAN LETTER S	[45F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10296, 0x003F };
    uint32_t const ces[9] = { 0x45F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_311)
{
    // 10296 0061;	
    // (𐊖) LYCIAN LETTER S	[45F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10296, 0x0061 };
    uint32_t const ces[9] = { 0x45F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_312)
{
    // 10296 0041;	
    // (𐊖) LYCIAN LETTER S	[45F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10296, 0x0041 };
    uint32_t const ces[9] = { 0x45F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_313)
{
    // 10296 0062;	
    // (𐊖) LYCIAN LETTER S	[45F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10296, 0x0062 };
    uint32_t const ces[9] = { 0x45F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_314)
{
    // 10297 0021;	
    // (𐊗) LYCIAN LETTER T	[45FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10297, 0x0021 };
    uint32_t const ces[9] = { 0x45FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_315)
{
    // 10297 003F;	
    // (𐊗) LYCIAN LETTER T	[45FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10297, 0x003F };
    uint32_t const ces[9] = { 0x45FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_316)
{
    // 10297 0061;	
    // (𐊗) LYCIAN LETTER T	[45FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10297, 0x0061 };
    uint32_t const ces[9] = { 0x45FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_317)
{
    // 10297 0041;	
    // (𐊗) LYCIAN LETTER T	[45FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10297, 0x0041 };
    uint32_t const ces[9] = { 0x45FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_318)
{
    // 10297 0062;	
    // (𐊗) LYCIAN LETTER T	[45FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10297, 0x0062 };
    uint32_t const ces[9] = { 0x45FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_319)
{
    // 10298 0021;	
    // (𐊘) LYCIAN LETTER TT	[45FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10298, 0x0021 };
    uint32_t const ces[9] = { 0x45FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_320)
{
    // 10298 003F;	
    // (𐊘) LYCIAN LETTER TT	[45FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10298, 0x003F };
    uint32_t const ces[9] = { 0x45FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_321)
{
    // 10298 0061;	
    // (𐊘) LYCIAN LETTER TT	[45FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10298, 0x0061 };
    uint32_t const ces[9] = { 0x45FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_322)
{
    // 10298 0041;	
    // (𐊘) LYCIAN LETTER TT	[45FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10298, 0x0041 };
    uint32_t const ces[9] = { 0x45FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_323)
{
    // 10298 0062;	
    // (𐊘) LYCIAN LETTER TT	[45FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10298, 0x0062 };
    uint32_t const ces[9] = { 0x45FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_324)
{
    // 10299 0021;	
    // (𐊙) LYCIAN LETTER AN	[45FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10299, 0x0021 };
    uint32_t const ces[9] = { 0x45FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_325)
{
    // 10299 003F;	
    // (𐊙) LYCIAN LETTER AN	[45FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10299, 0x003F };
    uint32_t const ces[9] = { 0x45FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_326)
{
    // 10299 0061;	
    // (𐊙) LYCIAN LETTER AN	[45FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10299, 0x0061 };
    uint32_t const ces[9] = { 0x45FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_327)
{
    // 10299 0041;	
    // (𐊙) LYCIAN LETTER AN	[45FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10299, 0x0041 };
    uint32_t const ces[9] = { 0x45FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_328)
{
    // 10299 0062;	
    // (𐊙) LYCIAN LETTER AN	[45FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10299, 0x0062 };
    uint32_t const ces[9] = { 0x45FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_329)
{
    // 1029A 0021;	
    // (𐊚) LYCIAN LETTER EN	[45FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1029A, 0x0021 };
    uint32_t const ces[9] = { 0x45FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_330)
{
    // 1029A 003F;	
    // (𐊚) LYCIAN LETTER EN	[45FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1029A, 0x003F };
    uint32_t const ces[9] = { 0x45FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_331)
{
    // 1029A 0061;	
    // (𐊚) LYCIAN LETTER EN	[45FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1029A, 0x0061 };
    uint32_t const ces[9] = { 0x45FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_332)
{
    // 1029A 0041;	
    // (𐊚) LYCIAN LETTER EN	[45FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1029A, 0x0041 };
    uint32_t const ces[9] = { 0x45FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_333)
{
    // 1029A 0062;	
    // (𐊚) LYCIAN LETTER EN	[45FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1029A, 0x0062 };
    uint32_t const ces[9] = { 0x45FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_334)
{
    // 1029B 0021;	
    // (𐊛) LYCIAN LETTER H	[45FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1029B, 0x0021 };
    uint32_t const ces[9] = { 0x45FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_335)
{
    // 1029B 003F;	
    // (𐊛) LYCIAN LETTER H	[45FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1029B, 0x003F };
    uint32_t const ces[9] = { 0x45FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_336)
{
    // 1029B 0061;	
    // (𐊛) LYCIAN LETTER H	[45FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1029B, 0x0061 };
    uint32_t const ces[9] = { 0x45FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_337)
{
    // 1029B 0041;	
    // (𐊛) LYCIAN LETTER H	[45FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1029B, 0x0041 };
    uint32_t const ces[9] = { 0x45FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_338)
{
    // 1029B 0062;	
    // (𐊛) LYCIAN LETTER H	[45FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1029B, 0x0062 };
    uint32_t const ces[9] = { 0x45FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_339)
{
    // 1029C 0021;	
    // (𐊜) LYCIAN LETTER X	[45FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1029C, 0x0021 };
    uint32_t const ces[9] = { 0x45FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_340)
{
    // 1029C 003F;	
    // (𐊜) LYCIAN LETTER X	[45FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1029C, 0x003F };
    uint32_t const ces[9] = { 0x45FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_341)
{
    // 1029C 0061;	
    // (𐊜) LYCIAN LETTER X	[45FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1029C, 0x0061 };
    uint32_t const ces[9] = { 0x45FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_342)
{
    // 1029C 0041;	
    // (𐊜) LYCIAN LETTER X	[45FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1029C, 0x0041 };
    uint32_t const ces[9] = { 0x45FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_343)
{
    // 1029C 0062;	
    // (𐊜) LYCIAN LETTER X	[45FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1029C, 0x0062 };
    uint32_t const ces[9] = { 0x45FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_344)
{
    // 102A0 0021;	
    // (𐊠) CARIAN LETTER A	[4600 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A0, 0x0021 };
    uint32_t const ces[9] = { 0x4600, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_345)
{
    // 102A0 003F;	
    // (𐊠) CARIAN LETTER A	[4600 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A0, 0x003F };
    uint32_t const ces[9] = { 0x4600, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_346)
{
    // 102A0 0061;	
    // (𐊠) CARIAN LETTER A	[4600 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A0, 0x0061 };
    uint32_t const ces[9] = { 0x4600, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_347)
{
    // 102A0 0041;	
    // (𐊠) CARIAN LETTER A	[4600 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102A0, 0x0041 };
    uint32_t const ces[9] = { 0x4600, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_348)
{
    // 102A0 0062;	
    // (𐊠) CARIAN LETTER A	[4600 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A0, 0x0062 };
    uint32_t const ces[9] = { 0x4600, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_349)
{
    // 102A1 0021;	
    // (𐊡) CARIAN LETTER P2	[4601 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A1, 0x0021 };
    uint32_t const ces[9] = { 0x4601, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_350)
{
    // 102A1 003F;	
    // (𐊡) CARIAN LETTER P2	[4601 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A1, 0x003F };
    uint32_t const ces[9] = { 0x4601, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_351)
{
    // 102A1 0061;	
    // (𐊡) CARIAN LETTER P2	[4601 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A1, 0x0061 };
    uint32_t const ces[9] = { 0x4601, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_352)
{
    // 102A1 0041;	
    // (𐊡) CARIAN LETTER P2	[4601 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102A1, 0x0041 };
    uint32_t const ces[9] = { 0x4601, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_353)
{
    // 102A1 0062;	
    // (𐊡) CARIAN LETTER P2	[4601 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A1, 0x0062 };
    uint32_t const ces[9] = { 0x4601, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_354)
{
    // 102A2 0021;	
    // (𐊢) CARIAN LETTER D	[4602 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A2, 0x0021 };
    uint32_t const ces[9] = { 0x4602, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_355)
{
    // 102A2 003F;	
    // (𐊢) CARIAN LETTER D	[4602 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A2, 0x003F };
    uint32_t const ces[9] = { 0x4602, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_356)
{
    // 102A2 0061;	
    // (𐊢) CARIAN LETTER D	[4602 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A2, 0x0061 };
    uint32_t const ces[9] = { 0x4602, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_357)
{
    // 102A2 0041;	
    // (𐊢) CARIAN LETTER D	[4602 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102A2, 0x0041 };
    uint32_t const ces[9] = { 0x4602, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_358)
{
    // 102A2 0062;	
    // (𐊢) CARIAN LETTER D	[4602 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A2, 0x0062 };
    uint32_t const ces[9] = { 0x4602, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_359)
{
    // 102A3 0021;	
    // (𐊣) CARIAN LETTER L	[4603 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A3, 0x0021 };
    uint32_t const ces[9] = { 0x4603, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_360)
{
    // 102A3 003F;	
    // (𐊣) CARIAN LETTER L	[4603 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A3, 0x003F };
    uint32_t const ces[9] = { 0x4603, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_361)
{
    // 102A3 0061;	
    // (𐊣) CARIAN LETTER L	[4603 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A3, 0x0061 };
    uint32_t const ces[9] = { 0x4603, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_362)
{
    // 102A3 0041;	
    // (𐊣) CARIAN LETTER L	[4603 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102A3, 0x0041 };
    uint32_t const ces[9] = { 0x4603, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_363)
{
    // 102A3 0062;	
    // (𐊣) CARIAN LETTER L	[4603 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A3, 0x0062 };
    uint32_t const ces[9] = { 0x4603, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_364)
{
    // 102A4 0021;	
    // (𐊤) CARIAN LETTER UUU	[4604 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A4, 0x0021 };
    uint32_t const ces[9] = { 0x4604, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_365)
{
    // 102A4 003F;	
    // (𐊤) CARIAN LETTER UUU	[4604 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A4, 0x003F };
    uint32_t const ces[9] = { 0x4604, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_366)
{
    // 102A4 0061;	
    // (𐊤) CARIAN LETTER UUU	[4604 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A4, 0x0061 };
    uint32_t const ces[9] = { 0x4604, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_367)
{
    // 102A4 0041;	
    // (𐊤) CARIAN LETTER UUU	[4604 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102A4, 0x0041 };
    uint32_t const ces[9] = { 0x4604, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_368)
{
    // 102A4 0062;	
    // (𐊤) CARIAN LETTER UUU	[4604 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A4, 0x0062 };
    uint32_t const ces[9] = { 0x4604, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_369)
{
    // 102A5 0021;	
    // (𐊥) CARIAN LETTER R	[4605 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A5, 0x0021 };
    uint32_t const ces[9] = { 0x4605, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_370)
{
    // 102A5 003F;	
    // (𐊥) CARIAN LETTER R	[4605 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A5, 0x003F };
    uint32_t const ces[9] = { 0x4605, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_371)
{
    // 102A5 0061;	
    // (𐊥) CARIAN LETTER R	[4605 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A5, 0x0061 };
    uint32_t const ces[9] = { 0x4605, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_372)
{
    // 102A5 0041;	
    // (𐊥) CARIAN LETTER R	[4605 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102A5, 0x0041 };
    uint32_t const ces[9] = { 0x4605, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_373)
{
    // 102A5 0062;	
    // (𐊥) CARIAN LETTER R	[4605 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A5, 0x0062 };
    uint32_t const ces[9] = { 0x4605, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_374)
{
    // 102A6 0021;	
    // (𐊦) CARIAN LETTER LD	[4606 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A6, 0x0021 };
    uint32_t const ces[9] = { 0x4606, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_375)
{
    // 102A6 003F;	
    // (𐊦) CARIAN LETTER LD	[4606 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A6, 0x003F };
    uint32_t const ces[9] = { 0x4606, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_376)
{
    // 102A6 0061;	
    // (𐊦) CARIAN LETTER LD	[4606 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A6, 0x0061 };
    uint32_t const ces[9] = { 0x4606, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_377)
{
    // 102A6 0041;	
    // (𐊦) CARIAN LETTER LD	[4606 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102A6, 0x0041 };
    uint32_t const ces[9] = { 0x4606, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_378)
{
    // 102A6 0062;	
    // (𐊦) CARIAN LETTER LD	[4606 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A6, 0x0062 };
    uint32_t const ces[9] = { 0x4606, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_379)
{
    // 102A7 0021;	
    // (𐊧) CARIAN LETTER A2	[4607 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A7, 0x0021 };
    uint32_t const ces[9] = { 0x4607, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_380)
{
    // 102A7 003F;	
    // (𐊧) CARIAN LETTER A2	[4607 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A7, 0x003F };
    uint32_t const ces[9] = { 0x4607, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_381)
{
    // 102A7 0061;	
    // (𐊧) CARIAN LETTER A2	[4607 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A7, 0x0061 };
    uint32_t const ces[9] = { 0x4607, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_382)
{
    // 102A7 0041;	
    // (𐊧) CARIAN LETTER A2	[4607 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102A7, 0x0041 };
    uint32_t const ces[9] = { 0x4607, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_383)
{
    // 102A7 0062;	
    // (𐊧) CARIAN LETTER A2	[4607 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A7, 0x0062 };
    uint32_t const ces[9] = { 0x4607, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_384)
{
    // 102A8 0021;	
    // (𐊨) CARIAN LETTER Q	[4608 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A8, 0x0021 };
    uint32_t const ces[9] = { 0x4608, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_385)
{
    // 102A8 003F;	
    // (𐊨) CARIAN LETTER Q	[4608 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A8, 0x003F };
    uint32_t const ces[9] = { 0x4608, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_386)
{
    // 102A8 0061;	
    // (𐊨) CARIAN LETTER Q	[4608 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A8, 0x0061 };
    uint32_t const ces[9] = { 0x4608, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_387)
{
    // 102A8 0041;	
    // (𐊨) CARIAN LETTER Q	[4608 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102A8, 0x0041 };
    uint32_t const ces[9] = { 0x4608, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_388)
{
    // 102A8 0062;	
    // (𐊨) CARIAN LETTER Q	[4608 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A8, 0x0062 };
    uint32_t const ces[9] = { 0x4608, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_389)
{
    // 102A9 0021;	
    // (𐊩) CARIAN LETTER B	[4609 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A9, 0x0021 };
    uint32_t const ces[9] = { 0x4609, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_390)
{
    // 102A9 003F;	
    // (𐊩) CARIAN LETTER B	[4609 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A9, 0x003F };
    uint32_t const ces[9] = { 0x4609, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_391)
{
    // 102A9 0061;	
    // (𐊩) CARIAN LETTER B	[4609 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A9, 0x0061 };
    uint32_t const ces[9] = { 0x4609, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_392)
{
    // 102A9 0041;	
    // (𐊩) CARIAN LETTER B	[4609 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102A9, 0x0041 };
    uint32_t const ces[9] = { 0x4609, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_393)
{
    // 102A9 0062;	
    // (𐊩) CARIAN LETTER B	[4609 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A9, 0x0062 };
    uint32_t const ces[9] = { 0x4609, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_394)
{
    // 102AA 0021;	
    // (𐊪) CARIAN LETTER M	[460A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102AA, 0x0021 };
    uint32_t const ces[9] = { 0x460A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_395)
{
    // 102AA 003F;	
    // (𐊪) CARIAN LETTER M	[460A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102AA, 0x003F };
    uint32_t const ces[9] = { 0x460A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_396)
{
    // 102AA 0061;	
    // (𐊪) CARIAN LETTER M	[460A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102AA, 0x0061 };
    uint32_t const ces[9] = { 0x460A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_397)
{
    // 102AA 0041;	
    // (𐊪) CARIAN LETTER M	[460A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102AA, 0x0041 };
    uint32_t const ces[9] = { 0x460A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_398)
{
    // 102AA 0062;	
    // (𐊪) CARIAN LETTER M	[460A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102AA, 0x0062 };
    uint32_t const ces[9] = { 0x460A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_399)
{
    // 102AB 0021;	
    // (𐊫) CARIAN LETTER O	[460B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102AB, 0x0021 };
    uint32_t const ces[9] = { 0x460B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_400)
{
    // 102AB 003F;	
    // (𐊫) CARIAN LETTER O	[460B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102AB, 0x003F };
    uint32_t const ces[9] = { 0x460B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_401)
{
    // 102AB 0061;	
    // (𐊫) CARIAN LETTER O	[460B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102AB, 0x0061 };
    uint32_t const ces[9] = { 0x460B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_402)
{
    // 102AB 0041;	
    // (𐊫) CARIAN LETTER O	[460B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102AB, 0x0041 };
    uint32_t const ces[9] = { 0x460B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_403)
{
    // 102AB 0062;	
    // (𐊫) CARIAN LETTER O	[460B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102AB, 0x0062 };
    uint32_t const ces[9] = { 0x460B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_404)
{
    // 102AC 0021;	
    // (𐊬) CARIAN LETTER D2	[460C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102AC, 0x0021 };
    uint32_t const ces[9] = { 0x460C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_405)
{
    // 102AC 003F;	
    // (𐊬) CARIAN LETTER D2	[460C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102AC, 0x003F };
    uint32_t const ces[9] = { 0x460C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_406)
{
    // 102AC 0061;	
    // (𐊬) CARIAN LETTER D2	[460C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102AC, 0x0061 };
    uint32_t const ces[9] = { 0x460C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_407)
{
    // 102AC 0041;	
    // (𐊬) CARIAN LETTER D2	[460C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102AC, 0x0041 };
    uint32_t const ces[9] = { 0x460C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_408)
{
    // 102AC 0062;	
    // (𐊬) CARIAN LETTER D2	[460C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102AC, 0x0062 };
    uint32_t const ces[9] = { 0x460C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_409)
{
    // 102AD 0021;	
    // (𐊭) CARIAN LETTER T	[460D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102AD, 0x0021 };
    uint32_t const ces[9] = { 0x460D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_410)
{
    // 102AD 003F;	
    // (𐊭) CARIAN LETTER T	[460D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102AD, 0x003F };
    uint32_t const ces[9] = { 0x460D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_411)
{
    // 102AD 0061;	
    // (𐊭) CARIAN LETTER T	[460D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102AD, 0x0061 };
    uint32_t const ces[9] = { 0x460D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_412)
{
    // 102AD 0041;	
    // (𐊭) CARIAN LETTER T	[460D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102AD, 0x0041 };
    uint32_t const ces[9] = { 0x460D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_413)
{
    // 102AD 0062;	
    // (𐊭) CARIAN LETTER T	[460D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102AD, 0x0062 };
    uint32_t const ces[9] = { 0x460D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_414)
{
    // 102AE 0021;	
    // (𐊮) CARIAN LETTER SH	[460E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102AE, 0x0021 };
    uint32_t const ces[9] = { 0x460E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_415)
{
    // 102AE 003F;	
    // (𐊮) CARIAN LETTER SH	[460E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102AE, 0x003F };
    uint32_t const ces[9] = { 0x460E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_416)
{
    // 102AE 0061;	
    // (𐊮) CARIAN LETTER SH	[460E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102AE, 0x0061 };
    uint32_t const ces[9] = { 0x460E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_417)
{
    // 102AE 0041;	
    // (𐊮) CARIAN LETTER SH	[460E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102AE, 0x0041 };
    uint32_t const ces[9] = { 0x460E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_418)
{
    // 102AE 0062;	
    // (𐊮) CARIAN LETTER SH	[460E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102AE, 0x0062 };
    uint32_t const ces[9] = { 0x460E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_419)
{
    // 102AF 0021;	
    // (𐊯) CARIAN LETTER SH2	[460F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102AF, 0x0021 };
    uint32_t const ces[9] = { 0x460F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_420)
{
    // 102AF 003F;	
    // (𐊯) CARIAN LETTER SH2	[460F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102AF, 0x003F };
    uint32_t const ces[9] = { 0x460F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_421)
{
    // 102AF 0061;	
    // (𐊯) CARIAN LETTER SH2	[460F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102AF, 0x0061 };
    uint32_t const ces[9] = { 0x460F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_422)
{
    // 102AF 0041;	
    // (𐊯) CARIAN LETTER SH2	[460F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102AF, 0x0041 };
    uint32_t const ces[9] = { 0x460F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_423)
{
    // 102AF 0062;	
    // (𐊯) CARIAN LETTER SH2	[460F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102AF, 0x0062 };
    uint32_t const ces[9] = { 0x460F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_424)
{
    // 102B0 0021;	
    // (𐊰) CARIAN LETTER S	[4610 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B0, 0x0021 };
    uint32_t const ces[9] = { 0x4610, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_425)
{
    // 102B0 003F;	
    // (𐊰) CARIAN LETTER S	[4610 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B0, 0x003F };
    uint32_t const ces[9] = { 0x4610, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_426)
{
    // 102B0 0061;	
    // (𐊰) CARIAN LETTER S	[4610 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B0, 0x0061 };
    uint32_t const ces[9] = { 0x4610, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_427)
{
    // 102B0 0041;	
    // (𐊰) CARIAN LETTER S	[4610 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102B0, 0x0041 };
    uint32_t const ces[9] = { 0x4610, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_428)
{
    // 102B0 0062;	
    // (𐊰) CARIAN LETTER S	[4610 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B0, 0x0062 };
    uint32_t const ces[9] = { 0x4610, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_429)
{
    // 102B1 0021;	
    // (𐊱) CARIAN LETTER C-18	[4611 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B1, 0x0021 };
    uint32_t const ces[9] = { 0x4611, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_430)
{
    // 102B1 003F;	
    // (𐊱) CARIAN LETTER C-18	[4611 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B1, 0x003F };
    uint32_t const ces[9] = { 0x4611, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_431)
{
    // 102B1 0061;	
    // (𐊱) CARIAN LETTER C-18	[4611 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B1, 0x0061 };
    uint32_t const ces[9] = { 0x4611, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_432)
{
    // 102B1 0041;	
    // (𐊱) CARIAN LETTER C-18	[4611 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102B1, 0x0041 };
    uint32_t const ces[9] = { 0x4611, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_433)
{
    // 102B1 0062;	
    // (𐊱) CARIAN LETTER C-18	[4611 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B1, 0x0062 };
    uint32_t const ces[9] = { 0x4611, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_434)
{
    // 102B2 0021;	
    // (𐊲) CARIAN LETTER U	[4612 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B2, 0x0021 };
    uint32_t const ces[9] = { 0x4612, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_435)
{
    // 102B2 003F;	
    // (𐊲) CARIAN LETTER U	[4612 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B2, 0x003F };
    uint32_t const ces[9] = { 0x4612, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_436)
{
    // 102B2 0061;	
    // (𐊲) CARIAN LETTER U	[4612 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B2, 0x0061 };
    uint32_t const ces[9] = { 0x4612, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_437)
{
    // 102B2 0041;	
    // (𐊲) CARIAN LETTER U	[4612 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102B2, 0x0041 };
    uint32_t const ces[9] = { 0x4612, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_438)
{
    // 102B2 0062;	
    // (𐊲) CARIAN LETTER U	[4612 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B2, 0x0062 };
    uint32_t const ces[9] = { 0x4612, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_439)
{
    // 102B3 0021;	
    // (𐊳) CARIAN LETTER NN	[4613 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B3, 0x0021 };
    uint32_t const ces[9] = { 0x4613, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_440)
{
    // 102B3 003F;	
    // (𐊳) CARIAN LETTER NN	[4613 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B3, 0x003F };
    uint32_t const ces[9] = { 0x4613, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_441)
{
    // 102B3 0061;	
    // (𐊳) CARIAN LETTER NN	[4613 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B3, 0x0061 };
    uint32_t const ces[9] = { 0x4613, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_442)
{
    // 102B3 0041;	
    // (𐊳) CARIAN LETTER NN	[4613 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102B3, 0x0041 };
    uint32_t const ces[9] = { 0x4613, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_443)
{
    // 102B3 0062;	
    // (𐊳) CARIAN LETTER NN	[4613 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B3, 0x0062 };
    uint32_t const ces[9] = { 0x4613, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_444)
{
    // 102B4 0021;	
    // (𐊴) CARIAN LETTER X	[4614 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B4, 0x0021 };
    uint32_t const ces[9] = { 0x4614, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_445)
{
    // 102B4 003F;	
    // (𐊴) CARIAN LETTER X	[4614 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B4, 0x003F };
    uint32_t const ces[9] = { 0x4614, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_446)
{
    // 102B4 0061;	
    // (𐊴) CARIAN LETTER X	[4614 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B4, 0x0061 };
    uint32_t const ces[9] = { 0x4614, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_447)
{
    // 102B4 0041;	
    // (𐊴) CARIAN LETTER X	[4614 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102B4, 0x0041 };
    uint32_t const ces[9] = { 0x4614, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_448)
{
    // 102B4 0062;	
    // (𐊴) CARIAN LETTER X	[4614 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B4, 0x0062 };
    uint32_t const ces[9] = { 0x4614, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_449)
{
    // 102B5 0021;	
    // (𐊵) CARIAN LETTER N	[4615 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B5, 0x0021 };
    uint32_t const ces[9] = { 0x4615, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_450)
{
    // 102B5 003F;	
    // (𐊵) CARIAN LETTER N	[4615 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B5, 0x003F };
    uint32_t const ces[9] = { 0x4615, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_451)
{
    // 102B5 0061;	
    // (𐊵) CARIAN LETTER N	[4615 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B5, 0x0061 };
    uint32_t const ces[9] = { 0x4615, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_452)
{
    // 102B5 0041;	
    // (𐊵) CARIAN LETTER N	[4615 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102B5, 0x0041 };
    uint32_t const ces[9] = { 0x4615, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_453)
{
    // 102B5 0062;	
    // (𐊵) CARIAN LETTER N	[4615 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B5, 0x0062 };
    uint32_t const ces[9] = { 0x4615, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_454)
{
    // 102B6 0021;	
    // (𐊶) CARIAN LETTER TT2	[4616 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B6, 0x0021 };
    uint32_t const ces[9] = { 0x4616, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_455)
{
    // 102B6 003F;	
    // (𐊶) CARIAN LETTER TT2	[4616 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B6, 0x003F };
    uint32_t const ces[9] = { 0x4616, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_456)
{
    // 102B6 0061;	
    // (𐊶) CARIAN LETTER TT2	[4616 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B6, 0x0061 };
    uint32_t const ces[9] = { 0x4616, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_457)
{
    // 102B6 0041;	
    // (𐊶) CARIAN LETTER TT2	[4616 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102B6, 0x0041 };
    uint32_t const ces[9] = { 0x4616, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_458)
{
    // 102B6 0062;	
    // (𐊶) CARIAN LETTER TT2	[4616 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B6, 0x0062 };
    uint32_t const ces[9] = { 0x4616, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_459)
{
    // 102B7 0021;	
    // (𐊷) CARIAN LETTER P	[4617 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B7, 0x0021 };
    uint32_t const ces[9] = { 0x4617, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_460)
{
    // 102B7 003F;	
    // (𐊷) CARIAN LETTER P	[4617 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B7, 0x003F };
    uint32_t const ces[9] = { 0x4617, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_461)
{
    // 102B7 0061;	
    // (𐊷) CARIAN LETTER P	[4617 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B7, 0x0061 };
    uint32_t const ces[9] = { 0x4617, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_462)
{
    // 102B7 0041;	
    // (𐊷) CARIAN LETTER P	[4617 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102B7, 0x0041 };
    uint32_t const ces[9] = { 0x4617, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_463)
{
    // 102B7 0062;	
    // (𐊷) CARIAN LETTER P	[4617 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B7, 0x0062 };
    uint32_t const ces[9] = { 0x4617, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_464)
{
    // 102B8 0021;	
    // (𐊸) CARIAN LETTER SS	[4618 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B8, 0x0021 };
    uint32_t const ces[9] = { 0x4618, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_465)
{
    // 102B8 003F;	
    // (𐊸) CARIAN LETTER SS	[4618 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B8, 0x003F };
    uint32_t const ces[9] = { 0x4618, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_466)
{
    // 102B8 0061;	
    // (𐊸) CARIAN LETTER SS	[4618 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B8, 0x0061 };
    uint32_t const ces[9] = { 0x4618, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_467)
{
    // 102B8 0041;	
    // (𐊸) CARIAN LETTER SS	[4618 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102B8, 0x0041 };
    uint32_t const ces[9] = { 0x4618, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_468)
{
    // 102B8 0062;	
    // (𐊸) CARIAN LETTER SS	[4618 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B8, 0x0062 };
    uint32_t const ces[9] = { 0x4618, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_469)
{
    // 102B9 0021;	
    // (𐊹) CARIAN LETTER I	[4619 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B9, 0x0021 };
    uint32_t const ces[9] = { 0x4619, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_470)
{
    // 102B9 003F;	
    // (𐊹) CARIAN LETTER I	[4619 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B9, 0x003F };
    uint32_t const ces[9] = { 0x4619, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_471)
{
    // 102B9 0061;	
    // (𐊹) CARIAN LETTER I	[4619 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B9, 0x0061 };
    uint32_t const ces[9] = { 0x4619, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_472)
{
    // 102B9 0041;	
    // (𐊹) CARIAN LETTER I	[4619 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102B9, 0x0041 };
    uint32_t const ces[9] = { 0x4619, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_473)
{
    // 102B9 0062;	
    // (𐊹) CARIAN LETTER I	[4619 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102B9, 0x0062 };
    uint32_t const ces[9] = { 0x4619, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_474)
{
    // 102BA 0021;	
    // (𐊺) CARIAN LETTER E	[461A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102BA, 0x0021 };
    uint32_t const ces[9] = { 0x461A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_475)
{
    // 102BA 003F;	
    // (𐊺) CARIAN LETTER E	[461A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102BA, 0x003F };
    uint32_t const ces[9] = { 0x461A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_476)
{
    // 102BA 0061;	
    // (𐊺) CARIAN LETTER E	[461A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102BA, 0x0061 };
    uint32_t const ces[9] = { 0x461A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_477)
{
    // 102BA 0041;	
    // (𐊺) CARIAN LETTER E	[461A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102BA, 0x0041 };
    uint32_t const ces[9] = { 0x461A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_478)
{
    // 102BA 0062;	
    // (𐊺) CARIAN LETTER E	[461A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102BA, 0x0062 };
    uint32_t const ces[9] = { 0x461A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_479)
{
    // 102BB 0021;	
    // (𐊻) CARIAN LETTER UUUU	[461B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102BB, 0x0021 };
    uint32_t const ces[9] = { 0x461B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_480)
{
    // 102BB 003F;	
    // (𐊻) CARIAN LETTER UUUU	[461B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102BB, 0x003F };
    uint32_t const ces[9] = { 0x461B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_481)
{
    // 102BB 0061;	
    // (𐊻) CARIAN LETTER UUUU	[461B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102BB, 0x0061 };
    uint32_t const ces[9] = { 0x461B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_482)
{
    // 102BB 0041;	
    // (𐊻) CARIAN LETTER UUUU	[461B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102BB, 0x0041 };
    uint32_t const ces[9] = { 0x461B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_483)
{
    // 102BB 0062;	
    // (𐊻) CARIAN LETTER UUUU	[461B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102BB, 0x0062 };
    uint32_t const ces[9] = { 0x461B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_484)
{
    // 102BC 0021;	
    // (𐊼) CARIAN LETTER K	[461C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102BC, 0x0021 };
    uint32_t const ces[9] = { 0x461C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_485)
{
    // 102BC 003F;	
    // (𐊼) CARIAN LETTER K	[461C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102BC, 0x003F };
    uint32_t const ces[9] = { 0x461C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_486)
{
    // 102BC 0061;	
    // (𐊼) CARIAN LETTER K	[461C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102BC, 0x0061 };
    uint32_t const ces[9] = { 0x461C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_487)
{
    // 102BC 0041;	
    // (𐊼) CARIAN LETTER K	[461C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102BC, 0x0041 };
    uint32_t const ces[9] = { 0x461C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_488)
{
    // 102BC 0062;	
    // (𐊼) CARIAN LETTER K	[461C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102BC, 0x0062 };
    uint32_t const ces[9] = { 0x461C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_489)
{
    // 102BD 0021;	
    // (𐊽) CARIAN LETTER K2	[461D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102BD, 0x0021 };
    uint32_t const ces[9] = { 0x461D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_490)
{
    // 102BD 003F;	
    // (𐊽) CARIAN LETTER K2	[461D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102BD, 0x003F };
    uint32_t const ces[9] = { 0x461D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_491)
{
    // 102BD 0061;	
    // (𐊽) CARIAN LETTER K2	[461D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102BD, 0x0061 };
    uint32_t const ces[9] = { 0x461D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_492)
{
    // 102BD 0041;	
    // (𐊽) CARIAN LETTER K2	[461D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102BD, 0x0041 };
    uint32_t const ces[9] = { 0x461D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_493)
{
    // 102BD 0062;	
    // (𐊽) CARIAN LETTER K2	[461D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102BD, 0x0062 };
    uint32_t const ces[9] = { 0x461D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_494)
{
    // 102BE 0021;	
    // (𐊾) CARIAN LETTER ND	[461E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102BE, 0x0021 };
    uint32_t const ces[9] = { 0x461E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_495)
{
    // 102BE 003F;	
    // (𐊾) CARIAN LETTER ND	[461E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102BE, 0x003F };
    uint32_t const ces[9] = { 0x461E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_496)
{
    // 102BE 0061;	
    // (𐊾) CARIAN LETTER ND	[461E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102BE, 0x0061 };
    uint32_t const ces[9] = { 0x461E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_497)
{
    // 102BE 0041;	
    // (𐊾) CARIAN LETTER ND	[461E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102BE, 0x0041 };
    uint32_t const ces[9] = { 0x461E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_498)
{
    // 102BE 0062;	
    // (𐊾) CARIAN LETTER ND	[461E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102BE, 0x0062 };
    uint32_t const ces[9] = { 0x461E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_269_499)
{
    // 102BF 0021;	
    // (𐊿) CARIAN LETTER UU	[461F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102BF, 0x0021 };
    uint32_t const ces[9] = { 0x461F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

