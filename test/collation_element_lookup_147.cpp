// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_147_000)
{
    // 1227E ; [.4E6C.0020.0002] 
    // CUNEIFORM SIGN PESH2

    uint32_t const cps[1] = { 0x1227e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e6c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_001)
{
    // 1227F ; [.4E6D.0020.0002] 
    // CUNEIFORM SIGN PI

    uint32_t const cps[1] = { 0x1227f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e6d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_002)
{
    // 12280 ; [.4E6E.0020.0002] 
    // CUNEIFORM SIGN PI TIMES A

    uint32_t const cps[1] = { 0x12280 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e6e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_003)
{
    // 12281 ; [.4E6F.0020.0002] 
    // CUNEIFORM SIGN PI TIMES AB

    uint32_t const cps[1] = { 0x12281 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e6f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_004)
{
    // 12282 ; [.4E70.0020.0002] 
    // CUNEIFORM SIGN PI TIMES BI

    uint32_t const cps[1] = { 0x12282 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e70), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_005)
{
    // 12283 ; [.4E71.0020.0002] 
    // CUNEIFORM SIGN PI TIMES BU

    uint32_t const cps[1] = { 0x12283 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e71), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_006)
{
    // 12284 ; [.4E72.0020.0002] 
    // CUNEIFORM SIGN PI TIMES E

    uint32_t const cps[1] = { 0x12284 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e72), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_007)
{
    // 12285 ; [.4E73.0020.0002] 
    // CUNEIFORM SIGN PI TIMES I

    uint32_t const cps[1] = { 0x12285 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e73), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_008)
{
    // 12286 ; [.4E74.0020.0002] 
    // CUNEIFORM SIGN PI TIMES IB

    uint32_t const cps[1] = { 0x12286 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e74), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_009)
{
    // 12287 ; [.4E75.0020.0002] 
    // CUNEIFORM SIGN PI TIMES U

    uint32_t const cps[1] = { 0x12287 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e75), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_010)
{
    // 12288 ; [.4E76.0020.0002] 
    // CUNEIFORM SIGN PI TIMES U2

    uint32_t const cps[1] = { 0x12288 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e76), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_011)
{
    // 12289 ; [.4E77.0020.0002] 
    // CUNEIFORM SIGN PI CROSSING PI

    uint32_t const cps[1] = { 0x12289 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e77), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_012)
{
    // 1228A ; [.4E78.0020.0002] 
    // CUNEIFORM SIGN PIRIG

    uint32_t const cps[1] = { 0x1228a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e78), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_013)
{
    // 1228B ; [.4E79.0020.0002] 
    // CUNEIFORM SIGN PIRIG TIMES KAL

    uint32_t const cps[1] = { 0x1228b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e79), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_014)
{
    // 1228C ; [.4E7A.0020.0002] 
    // CUNEIFORM SIGN PIRIG TIMES UD

    uint32_t const cps[1] = { 0x1228c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e7a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_015)
{
    // 1228D ; [.4E7B.0020.0002] 
    // CUNEIFORM SIGN PIRIG TIMES ZA

    uint32_t const cps[1] = { 0x1228d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e7b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_016)
{
    // 1228E ; [.4E7C.0020.0002] 
    // CUNEIFORM SIGN PIRIG OPPOSING PIRIG

    uint32_t const cps[1] = { 0x1228e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e7c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_017)
{
    // 1228F ; [.4E7D.0020.0002] 
    // CUNEIFORM SIGN RA

    uint32_t const cps[1] = { 0x1228f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e7d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_018)
{
    // 12290 ; [.4E7E.0020.0002] 
    // CUNEIFORM SIGN RAB

    uint32_t const cps[1] = { 0x12290 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e7e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_019)
{
    // 12291 ; [.4E7F.0020.0002] 
    // CUNEIFORM SIGN RI

    uint32_t const cps[1] = { 0x12291 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e7f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_020)
{
    // 12292 ; [.4E80.0020.0002] 
    // CUNEIFORM SIGN RU

    uint32_t const cps[1] = { 0x12292 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e80), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_021)
{
    // 12293 ; [.4E81.0020.0002] 
    // CUNEIFORM SIGN SA

    uint32_t const cps[1] = { 0x12293 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e81), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_022)
{
    // 12294 ; [.4E82.0020.0002] 
    // CUNEIFORM SIGN SAG NUTILLU

    uint32_t const cps[1] = { 0x12294 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e82), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_023)
{
    // 12295 ; [.4E83.0020.0002] 
    // CUNEIFORM SIGN SAG

    uint32_t const cps[1] = { 0x12295 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e83), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_024)
{
    // 12296 ; [.4E84.0020.0002] 
    // CUNEIFORM SIGN SAG TIMES A

    uint32_t const cps[1] = { 0x12296 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e84), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_025)
{
    // 12297 ; [.4E85.0020.0002] 
    // CUNEIFORM SIGN SAG TIMES DU

    uint32_t const cps[1] = { 0x12297 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e85), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_026)
{
    // 12298 ; [.4E86.0020.0002] 
    // CUNEIFORM SIGN SAG TIMES DUB

    uint32_t const cps[1] = { 0x12298 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e86), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_027)
{
    // 12299 ; [.4E87.0020.0002] 
    // CUNEIFORM SIGN SAG TIMES HA

    uint32_t const cps[1] = { 0x12299 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e87), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_028)
{
    // 1229A ; [.4E88.0020.0002] 
    // CUNEIFORM SIGN SAG TIMES KAK

    uint32_t const cps[1] = { 0x1229a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e88), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_029)
{
    // 1229B ; [.4E89.0020.0002] 
    // CUNEIFORM SIGN SAG TIMES KUR

    uint32_t const cps[1] = { 0x1229b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e89), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_030)
{
    // 1229C ; [.4E8A.0020.0002] 
    // CUNEIFORM SIGN SAG TIMES LUM

    uint32_t const cps[1] = { 0x1229c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e8a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_031)
{
    // 1229D ; [.4E8B.0020.0002] 
    // CUNEIFORM SIGN SAG TIMES MI

    uint32_t const cps[1] = { 0x1229d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_032)
{
    // 1229E ; [.4E8C.0020.0002] 
    // CUNEIFORM SIGN SAG TIMES NUN

    uint32_t const cps[1] = { 0x1229e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_033)
{
    // 1229F ; [.4E8D.0020.0002] 
    // CUNEIFORM SIGN SAG TIMES SAL

    uint32_t const cps[1] = { 0x1229f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_034)
{
    // 122A0 ; [.4E8E.0020.0002] 
    // CUNEIFORM SIGN SAG TIMES SHID

    uint32_t const cps[1] = { 0x122a0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_035)
{
    // 122A1 ; [.4E8F.0020.0002] 
    // CUNEIFORM SIGN SAG TIMES TAB

    uint32_t const cps[1] = { 0x122a1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_036)
{
    // 122A2 ; [.4E90.0020.0002] 
    // CUNEIFORM SIGN SAG TIMES U2

    uint32_t const cps[1] = { 0x122a2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e90), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_037)
{
    // 122A3 ; [.4E91.0020.0002] 
    // CUNEIFORM SIGN SAG TIMES UB

    uint32_t const cps[1] = { 0x122a3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e91), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_038)
{
    // 122A4 ; [.4E92.0020.0002] 
    // CUNEIFORM SIGN SAG TIMES UM

    uint32_t const cps[1] = { 0x122a4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e92), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_039)
{
    // 122A5 ; [.4E93.0020.0002] 
    // CUNEIFORM SIGN SAG TIMES UR

    uint32_t const cps[1] = { 0x122a5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e93), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_040)
{
    // 122A6 ; [.4E94.0020.0002] 
    // CUNEIFORM SIGN SAG TIMES USH

    uint32_t const cps[1] = { 0x122a6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e94), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_041)
{
    // 122A7 ; [.4E95.0020.0002] 
    // CUNEIFORM SIGN SAG OVER SAG

    uint32_t const cps[1] = { 0x122a7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e95), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_042)
{
    // 122A8 ; [.4E96.0020.0002] 
    // CUNEIFORM SIGN SAG GUNU

    uint32_t const cps[1] = { 0x122a8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e96), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_043)
{
    // 122A9 ; [.4E97.0020.0002] 
    // CUNEIFORM SIGN SAL

    uint32_t const cps[1] = { 0x122a9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e97), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_044)
{
    // 122AA ; [.4E98.0020.0002] 
    // CUNEIFORM SIGN SAL LAGAB TIMES ASH2

    uint32_t const cps[1] = { 0x122aa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e98), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_045)
{
    // 122AB ; [.4E99.0020.0002] 
    // CUNEIFORM SIGN SANGA2

    uint32_t const cps[1] = { 0x122ab };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e99), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_046)
{
    // 122AC ; [.4E9A.0020.0002] 
    // CUNEIFORM SIGN SAR

    uint32_t const cps[1] = { 0x122ac };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e9a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_047)
{
    // 122AD ; [.4E9B.0020.0002] 
    // CUNEIFORM SIGN SHA

    uint32_t const cps[1] = { 0x122ad };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e9b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_048)
{
    // 122AE ; [.4E9C.0020.0002] 
    // CUNEIFORM SIGN SHA3

    uint32_t const cps[1] = { 0x122ae };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e9c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_049)
{
    // 122AF ; [.4E9D.0020.0002] 
    // CUNEIFORM SIGN SHA3 TIMES A

    uint32_t const cps[1] = { 0x122af };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e9d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_050)
{
    // 122B0 ; [.4E9E.0020.0002] 
    // CUNEIFORM SIGN SHA3 TIMES BAD

    uint32_t const cps[1] = { 0x122b0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e9e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_051)
{
    // 122B1 ; [.4E9F.0020.0002] 
    // CUNEIFORM SIGN SHA3 TIMES GISH

    uint32_t const cps[1] = { 0x122b1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e9f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_052)
{
    // 122B2 ; [.4EA0.0020.0002] 
    // CUNEIFORM SIGN SHA3 TIMES NE

    uint32_t const cps[1] = { 0x122b2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ea0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_053)
{
    // 122B3 ; [.4EA1.0020.0002] 
    // CUNEIFORM SIGN SHA3 TIMES SHU2

    uint32_t const cps[1] = { 0x122b3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ea1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_054)
{
    // 122B4 ; [.4EA2.0020.0002] 
    // CUNEIFORM SIGN SHA3 TIMES TUR

    uint32_t const cps[1] = { 0x122b4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ea2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_055)
{
    // 122B5 ; [.4EA3.0020.0002] 
    // CUNEIFORM SIGN SHA3 TIMES U

    uint32_t const cps[1] = { 0x122b5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ea3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_056)
{
    // 122B6 ; [.4EA4.0020.0002] 
    // CUNEIFORM SIGN SHA3 TIMES U PLUS A

    uint32_t const cps[1] = { 0x122b6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ea4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_057)
{
    // 122B7 ; [.4EA5.0020.0002] 
    // CUNEIFORM SIGN SHA6

    uint32_t const cps[1] = { 0x122b7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ea5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_058)
{
    // 122B8 ; [.4EA6.0020.0002] 
    // CUNEIFORM SIGN SHAB6

    uint32_t const cps[1] = { 0x122b8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ea6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_059)
{
    // 122B9 ; [.4EA7.0020.0002] 
    // CUNEIFORM SIGN SHAR2

    uint32_t const cps[1] = { 0x122b9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ea7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_060)
{
    // 122BA ; [.4EA8.0020.0002] 
    // CUNEIFORM SIGN SHE

    uint32_t const cps[1] = { 0x122ba };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ea8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_061)
{
    // 122BB ; [.4EA9.0020.0002] 
    // CUNEIFORM SIGN SHE HU

    uint32_t const cps[1] = { 0x122bb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ea9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_062)
{
    // 122BC ; [.4EAA.0020.0002] 
    // CUNEIFORM SIGN SHE OVER SHE GAD OVER GAD GAR OVER GAR

    uint32_t const cps[1] = { 0x122bc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4eaa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_063)
{
    // 122BD ; [.4EAB.0020.0002] 
    // CUNEIFORM SIGN SHE OVER SHE TAB OVER TAB GAR OVER GAR

    uint32_t const cps[1] = { 0x122bd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4eab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_064)
{
    // 122BE ; [.4EAC.0020.0002] 
    // CUNEIFORM SIGN SHEG9

    uint32_t const cps[1] = { 0x122be };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4eac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_065)
{
    // 122BF ; [.4EAD.0020.0002] 
    // CUNEIFORM SIGN SHEN

    uint32_t const cps[1] = { 0x122bf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ead), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_066)
{
    // 122C0 ; [.4EAE.0020.0002] 
    // CUNEIFORM SIGN SHESH

    uint32_t const cps[1] = { 0x122c0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4eae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_067)
{
    // 122C1 ; [.4EAF.0020.0002] 
    // CUNEIFORM SIGN SHESH2

    uint32_t const cps[1] = { 0x122c1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4eaf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_068)
{
    // 122C2 ; [.4EB0.0020.0002] 
    // CUNEIFORM SIGN SHESHLAM

    uint32_t const cps[1] = { 0x122c2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4eb0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_069)
{
    // 122C3 ; [.4EB1.0020.0002] 
    // CUNEIFORM SIGN SHID

    uint32_t const cps[1] = { 0x122c3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4eb1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_070)
{
    // 122C4 ; [.4EB2.0020.0002] 
    // CUNEIFORM SIGN SHID TIMES A

    uint32_t const cps[1] = { 0x122c4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4eb2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_071)
{
    // 122C5 ; [.4EB3.0020.0002] 
    // CUNEIFORM SIGN SHID TIMES IM

    uint32_t const cps[1] = { 0x122c5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4eb3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_072)
{
    // 122C6 ; [.4EB4.0020.0002] 
    // CUNEIFORM SIGN SHIM

    uint32_t const cps[1] = { 0x122c6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4eb4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_073)
{
    // 122C7 ; [.4EB5.0020.0002] 
    // CUNEIFORM SIGN SHIM TIMES A

    uint32_t const cps[1] = { 0x122c7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4eb5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_074)
{
    // 122C8 ; [.4EB6.0020.0002] 
    // CUNEIFORM SIGN SHIM TIMES BAL

    uint32_t const cps[1] = { 0x122c8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4eb6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_075)
{
    // 122C9 ; [.4EB7.0020.0002] 
    // CUNEIFORM SIGN SHIM TIMES BULUG

    uint32_t const cps[1] = { 0x122c9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4eb7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_076)
{
    // 122CA ; [.4EB8.0020.0002] 
    // CUNEIFORM SIGN SHIM TIMES DIN

    uint32_t const cps[1] = { 0x122ca };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4eb8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_077)
{
    // 122CB ; [.4EB9.0020.0002] 
    // CUNEIFORM SIGN SHIM TIMES GAR

    uint32_t const cps[1] = { 0x122cb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4eb9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_078)
{
    // 122CC ; [.4EBA.0020.0002] 
    // CUNEIFORM SIGN SHIM TIMES IGI

    uint32_t const cps[1] = { 0x122cc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4eba), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_079)
{
    // 122CD ; [.4EBB.0020.0002] 
    // CUNEIFORM SIGN SHIM TIMES IGI GUNU

    uint32_t const cps[1] = { 0x122cd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ebb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_080)
{
    // 122CE ; [.4EBC.0020.0002] 
    // CUNEIFORM SIGN SHIM TIMES KUSHU2

    uint32_t const cps[1] = { 0x122ce };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ebc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_081)
{
    // 122CF ; [.4EBD.0020.0002] 
    // CUNEIFORM SIGN SHIM TIMES LUL

    uint32_t const cps[1] = { 0x122cf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ebd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_082)
{
    // 122D0 ; [.4EBE.0020.0002] 
    // CUNEIFORM SIGN SHIM TIMES MUG

    uint32_t const cps[1] = { 0x122d0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ebe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_083)
{
    // 122D1 ; [.4EBF.0020.0002] 
    // CUNEIFORM SIGN SHIM TIMES SAL

    uint32_t const cps[1] = { 0x122d1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ebf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_084)
{
    // 122D2 ; [.4EC0.0020.0002] 
    // CUNEIFORM SIGN SHINIG

    uint32_t const cps[1] = { 0x122d2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ec0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_085)
{
    // 122D3 ; [.4EC1.0020.0002] 
    // CUNEIFORM SIGN SHIR

    uint32_t const cps[1] = { 0x122d3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ec1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_086)
{
    // 122D4 ; [.4E4F.0020.0002] 
    // CUNEIFORM SIGN SHIR TENU

    uint32_t const cps[1] = { 0x122d4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e4f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_087)
{
    // 122D5 ; [.4E50.0020.0002] 
    // CUNEIFORM SIGN SHIR OVER SHIR BUR OVER BUR

    uint32_t const cps[1] = { 0x122d5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4e50), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_088)
{
    // 122D6 ; [.4EC2.0020.0002] 
    // CUNEIFORM SIGN SHITA

    uint32_t const cps[1] = { 0x122d6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ec2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_089)
{
    // 122D7 ; [.4EC3.0020.0002] 
    // CUNEIFORM SIGN SHU

    uint32_t const cps[1] = { 0x122d7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ec3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_090)
{
    // 122D8 ; [.4EC4.0020.0002] 
    // CUNEIFORM SIGN SHU OVER INVERTED SHU

    uint32_t const cps[1] = { 0x122d8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ec4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_091)
{
    // 122D9 ; [.4EC5.0020.0002] 
    // CUNEIFORM SIGN SHU2

    uint32_t const cps[1] = { 0x122d9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_092)
{
    // 122DA ; [.4EC6.0020.0002] 
    // CUNEIFORM SIGN SHUBUR

    uint32_t const cps[1] = { 0x122da };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ec6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_093)
{
    // 122DB ; [.4EC7.0020.0002] 
    // CUNEIFORM SIGN SI

    uint32_t const cps[1] = { 0x122db };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ec7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_094)
{
    // 122DC ; [.4EC8.0020.0002] 
    // CUNEIFORM SIGN SI GUNU

    uint32_t const cps[1] = { 0x122dc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ec8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_095)
{
    // 122DD ; [.4EC9.0020.0002] 
    // CUNEIFORM SIGN SIG

    uint32_t const cps[1] = { 0x122dd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ec9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_096)
{
    // 122DE ; [.4ECA.0020.0002] 
    // CUNEIFORM SIGN SIG4

    uint32_t const cps[1] = { 0x122de };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4eca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_097)
{
    // 122DF ; [.4ECB.0020.0002] 
    // CUNEIFORM SIGN SIG4 OVER SIG4 SHU2

    uint32_t const cps[1] = { 0x122df };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ecb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_098)
{
    // 122E0 ; [.4ECC.0020.0002] 
    // CUNEIFORM SIGN SIK2

    uint32_t const cps[1] = { 0x122e0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ecc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_099)
{
    // 122E1 ; [.4ECD.0020.0002] 
    // CUNEIFORM SIGN SILA3

    uint32_t const cps[1] = { 0x122e1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ecd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_100)
{
    // 122E2 ; [.4ECE.0020.0002] 
    // CUNEIFORM SIGN SU

    uint32_t const cps[1] = { 0x122e2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ece), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_101)
{
    // 122E3 ; [.4ECF.0020.0002] 
    // CUNEIFORM SIGN SU OVER SU

    uint32_t const cps[1] = { 0x122e3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ecf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_102)
{
    // 122E4 ; [.4ED0.0020.0002] 
    // CUNEIFORM SIGN SUD

    uint32_t const cps[1] = { 0x122e4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ed0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_103)
{
    // 122E5 ; [.4ED1.0020.0002] 
    // CUNEIFORM SIGN SUD2

    uint32_t const cps[1] = { 0x122e5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ed1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_104)
{
    // 122E6 ; [.4ED2.0020.0002] 
    // CUNEIFORM SIGN SUHUR

    uint32_t const cps[1] = { 0x122e6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ed2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_105)
{
    // 122E7 ; [.4ED3.0020.0002] 
    // CUNEIFORM SIGN SUM

    uint32_t const cps[1] = { 0x122e7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ed3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_106)
{
    // 122E8 ; [.4ED4.0020.0002] 
    // CUNEIFORM SIGN SUMASH

    uint32_t const cps[1] = { 0x122e8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ed4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_107)
{
    // 122E9 ; [.4ED5.0020.0002] 
    // CUNEIFORM SIGN SUR

    uint32_t const cps[1] = { 0x122e9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ed5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_108)
{
    // 122EA ; [.4ED6.0020.0002] 
    // CUNEIFORM SIGN SUR9

    uint32_t const cps[1] = { 0x122ea };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ed6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_109)
{
    // 122EB ; [.4ED7.0020.0002] 
    // CUNEIFORM SIGN TA

    uint32_t const cps[1] = { 0x122eb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ed7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_110)
{
    // 122EC ; [.4ED8.0020.0002] 
    // CUNEIFORM SIGN TA ASTERISK

    uint32_t const cps[1] = { 0x122ec };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ed8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_111)
{
    // 122ED ; [.4ED9.0020.0002] 
    // CUNEIFORM SIGN TA TIMES HI

    uint32_t const cps[1] = { 0x122ed };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ed9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_112)
{
    // 122EE ; [.4EDA.0020.0002] 
    // CUNEIFORM SIGN TA TIMES MI

    uint32_t const cps[1] = { 0x122ee };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4eda), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_113)
{
    // 122EF ; [.4EDB.0020.0002] 
    // CUNEIFORM SIGN TA GUNU

    uint32_t const cps[1] = { 0x122ef };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4edb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_114)
{
    // 122F0 ; [.4EDC.0020.0002] 
    // CUNEIFORM SIGN TAB

    uint32_t const cps[1] = { 0x122f0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4edc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_115)
{
    // 122F1 ; [.4EDD.0020.0002] 
    // CUNEIFORM SIGN TAB OVER TAB NI OVER NI DISH OVER DISH

    uint32_t const cps[1] = { 0x122f1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4edd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_116)
{
    // 122F2 ; [.4EDE.0020.0002] 
    // CUNEIFORM SIGN TAB SQUARED

    uint32_t const cps[1] = { 0x122f2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ede), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_117)
{
    // 122F3 ; [.4EDF.0020.0002] 
    // CUNEIFORM SIGN TAG

    uint32_t const cps[1] = { 0x122f3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4edf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_118)
{
    // 122F4 ; [.4EE0.0020.0002] 
    // CUNEIFORM SIGN TAG TIMES BI

    uint32_t const cps[1] = { 0x122f4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ee0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_119)
{
    // 122F5 ; [.4EE1.0020.0002] 
    // CUNEIFORM SIGN TAG TIMES GUD

    uint32_t const cps[1] = { 0x122f5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ee1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_120)
{
    // 122F6 ; [.4EE2.0020.0002] 
    // CUNEIFORM SIGN TAG TIMES SHE

    uint32_t const cps[1] = { 0x122f6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ee2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_121)
{
    // 122F7 ; [.4EE3.0020.0002] 
    // CUNEIFORM SIGN TAG TIMES SHU

    uint32_t const cps[1] = { 0x122f7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ee3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_122)
{
    // 122F8 ; [.4EE4.0020.0002] 
    // CUNEIFORM SIGN TAG TIMES TUG2

    uint32_t const cps[1] = { 0x122f8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ee4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_123)
{
    // 122F9 ; [.4EE5.0020.0002] 
    // CUNEIFORM SIGN TAG TIMES UD

    uint32_t const cps[1] = { 0x122f9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ee5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_124)
{
    // 122FA ; [.4EE6.0020.0002] 
    // CUNEIFORM SIGN TAK4

    uint32_t const cps[1] = { 0x122fa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ee6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_125)
{
    // 122FB ; [.4EE7.0020.0002] 
    // CUNEIFORM SIGN TAR

    uint32_t const cps[1] = { 0x122fb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ee7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_126)
{
    // 122FC ; [.4EE8.0020.0002] 
    // CUNEIFORM SIGN TE

    uint32_t const cps[1] = { 0x122fc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ee8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_127)
{
    // 122FD ; [.4EE9.0020.0002] 
    // CUNEIFORM SIGN TE GUNU

    uint32_t const cps[1] = { 0x122fd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ee9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_128)
{
    // 122FE ; [.4EEA.0020.0002] 
    // CUNEIFORM SIGN TI

    uint32_t const cps[1] = { 0x122fe };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4eea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_129)
{
    // 122FF ; [.4EEB.0020.0002] 
    // CUNEIFORM SIGN TI TENU

    uint32_t const cps[1] = { 0x122ff };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4eeb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_130)
{
    // 12300 ; [.4EEC.0020.0002] 
    // CUNEIFORM SIGN TIL

    uint32_t const cps[1] = { 0x12300 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4eec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_131)
{
    // 12301 ; [.4EED.0020.0002] 
    // CUNEIFORM SIGN TIR

    uint32_t const cps[1] = { 0x12301 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4eed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_132)
{
    // 12302 ; [.4EEE.0020.0002] 
    // CUNEIFORM SIGN TIR TIMES TAK4

    uint32_t const cps[1] = { 0x12302 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4eee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_133)
{
    // 12303 ; [.4EEF.0020.0002] 
    // CUNEIFORM SIGN TIR OVER TIR

    uint32_t const cps[1] = { 0x12303 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4eef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_134)
{
    // 12304 ; [.4EF0.0020.0002] 
    // CUNEIFORM SIGN TIR OVER TIR GAD OVER GAD GAR OVER GAR

    uint32_t const cps[1] = { 0x12304 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ef0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_135)
{
    // 12305 ; [.4EF1.0020.0002] 
    // CUNEIFORM SIGN TU

    uint32_t const cps[1] = { 0x12305 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ef1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_136)
{
    // 12306 ; [.4EF2.0020.0002] 
    // CUNEIFORM SIGN TUG2

    uint32_t const cps[1] = { 0x12306 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ef2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_137)
{
    // 12307 ; [.4EF3.0020.0002] 
    // CUNEIFORM SIGN TUK

    uint32_t const cps[1] = { 0x12307 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ef3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_138)
{
    // 12308 ; [.4EF4.0020.0002] 
    // CUNEIFORM SIGN TUM

    uint32_t const cps[1] = { 0x12308 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ef4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_139)
{
    // 12309 ; [.4EF5.0020.0002] 
    // CUNEIFORM SIGN TUR

    uint32_t const cps[1] = { 0x12309 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ef5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_140)
{
    // 1230A ; [.4EF6.0020.0002] 
    // CUNEIFORM SIGN TUR OVER TUR ZA OVER ZA

    uint32_t const cps[1] = { 0x1230a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ef6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_141)
{
    // 1230B ; [.4EF7.0020.0002] 
    // CUNEIFORM SIGN U

    uint32_t const cps[1] = { 0x1230b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ef7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_142)
{
    // 1230C ; [.4EF8.0020.0002] 
    // CUNEIFORM SIGN U GUD

    uint32_t const cps[1] = { 0x1230c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ef8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_143)
{
    // 1230D ; [.4EF9.0020.0002] 
    // CUNEIFORM SIGN U U U

    uint32_t const cps[1] = { 0x1230d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ef9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_144)
{
    // 1230E ; [.4EFA.0020.0002] 
    // CUNEIFORM SIGN U OVER U PA OVER PA GAR OVER GAR

    uint32_t const cps[1] = { 0x1230e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4efa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_145)
{
    // 1230F ; [.4EFB.0020.0002] 
    // CUNEIFORM SIGN U OVER U SUR OVER SUR

    uint32_t const cps[1] = { 0x1230f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4efb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_146)
{
    // 12310 ; [.4EFC.0020.0002] 
    // CUNEIFORM SIGN U OVER U U REVERSED OVER U REVERSED

    uint32_t const cps[1] = { 0x12310 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4efc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_147)
{
    // 12311 ; [.4EFD.0020.0002] 
    // CUNEIFORM SIGN U2

    uint32_t const cps[1] = { 0x12311 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4efd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_148)
{
    // 12312 ; [.4EFE.0020.0002] 
    // CUNEIFORM SIGN UB

    uint32_t const cps[1] = { 0x12312 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4efe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_147_149)
{
    // 12313 ; [.4EFF.0020.0002] 
    // CUNEIFORM SIGN UD

    uint32_t const cps[1] = { 0x12313 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4eff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

