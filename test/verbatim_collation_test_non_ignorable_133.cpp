// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_133_000)
{
    // 03D9 0061;	
    // (ϙ) GREEK SMALL LETTER ARCHAIC KOPPA	[2039 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03D9, 0x0061 };
    uint32_t const ces[9] = { 0x2039, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_001)
{
    // 03D9 0041;	
    // (ϙ) GREEK SMALL LETTER ARCHAIC KOPPA	[2039 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x03D9, 0x0041 };
    uint32_t const ces[9] = { 0x2039, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_002)
{
    // 03D8 0061;	
    // (Ϙ) GREEK LETTER ARCHAIC KOPPA	[2039 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03D8, 0x0061 };
    uint32_t const ces[9] = { 0x2039, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_003)
{
    // 03D8 0041;	
    // (Ϙ) GREEK LETTER ARCHAIC KOPPA	[2039 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x03D8, 0x0041 };
    uint32_t const ces[9] = { 0x2039, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_004)
{
    // 03D9 0062;	
    // (ϙ) GREEK SMALL LETTER ARCHAIC KOPPA	[2039 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03D9, 0x0062 };
    uint32_t const ces[9] = { 0x2039, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_005)
{
    // 03D8 0062;	
    // (Ϙ) GREEK LETTER ARCHAIC KOPPA	[2039 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03D8, 0x0062 };
    uint32_t const ces[9] = { 0x2039, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_006)
{
    // 03C1 0313 0334;	
    // (ῤ) GREEK SMALL LETTER RHO, COMBINING COMMA ABOVE	[203A | 0020 004A 0022 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C1, 0x0313, 0x0334 };
    uint32_t const ces[10] = { 0x203A, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_007)
{
    // 03C1 0334 0313;	
    // (ρ̴) GREEK SMALL LETTER RHO, COMBINING TILDE OVERLAY	[203A | 0020 004A 0022 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C1, 0x0334, 0x0313 };
    uint32_t const ces[10] = { 0x203A, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_008)
{
    // 03C1 0343 0334;	
    // (ῤ) GREEK SMALL LETTER RHO, COMBINING GREEK KORONIS	[203A | 0020 004A 0022 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C1, 0x0343, 0x0334 };
    uint32_t const ces[10] = { 0x203A, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_009)
{
    // 1FE4 0334;	
    // (ῤ) GREEK SMALL LETTER RHO WITH PSILI	[203A | 0020 004A 0022 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE4, 0x0334 };
    uint32_t const ces[10] = { 0x203A, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_010)
{
    // 03C1 0314 0334;	
    // (ῥ) GREEK SMALL LETTER RHO, COMBINING REVERSED COMMA ABOVE	[203A | 0020 004A 0023 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C1, 0x0314, 0x0334 };
    uint32_t const ces[10] = { 0x203A, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_011)
{
    // 03C1 0334 0314;	
    // (ρ̴) GREEK SMALL LETTER RHO, COMBINING TILDE OVERLAY	[203A | 0020 004A 0023 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C1, 0x0334, 0x0314 };
    uint32_t const ces[10] = { 0x203A, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_012)
{
    // 1FE5 0334;	
    // (ῥ) GREEK SMALL LETTER RHO WITH DASIA	[203A | 0020 004A 0023 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE5, 0x0334 };
    uint32_t const ces[10] = { 0x203A, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_013)
{
    // 03A1 0314 0334;	
    // (Ῥ) GREEK CAPITAL LETTER RHO, COMBINING REVERSED COMMA ABOVE	[203A | 0020 004A 0023 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A1, 0x0314, 0x0334 };
    uint32_t const ces[10] = { 0x203A, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_014)
{
    // 03A1 0334 0314;	
    // (Ρ̴) GREEK CAPITAL LETTER RHO, COMBINING TILDE OVERLAY	[203A | 0020 004A 0023 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A1, 0x0334, 0x0314 };
    uint32_t const ces[10] = { 0x203A, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_015)
{
    // 1FEC 0334;	
    // (Ῥ) GREEK CAPITAL LETTER RHO WITH DASIA	[203A | 0020 004A 0023 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FEC, 0x0334 };
    uint32_t const ces[10] = { 0x203A, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_016)
{
    // 03C1 0021;	
    // (ρ) GREEK SMALL LETTER RHO	[203A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C1, 0x0021 };
    uint32_t const ces[9] = { 0x203A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_017)
{
    // 03F1 0021;	
    // (ϱ) GREEK RHO SYMBOL	[203A 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x03F1, 0x0021 };
    uint32_t const ces[9] = { 0x203A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_018)
{
    // 1D6D2 0021;	
    // (𝛒) MATHEMATICAL BOLD SMALL RHO	[203A 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D2, 0x0021 };
    uint32_t const ces[9] = { 0x203A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_019)
{
    // 1D6E0 0021;	
    // (𝛠) MATHEMATICAL BOLD RHO SYMBOL	[203A 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6E0, 0x0021 };
    uint32_t const ces[9] = { 0x203A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_020)
{
    // 1D70C 0021;	
    // (𝜌) MATHEMATICAL ITALIC SMALL RHO	[203A 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D70C, 0x0021 };
    uint32_t const ces[9] = { 0x203A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_021)
{
    // 1D71A 0021;	
    // (𝜚) MATHEMATICAL ITALIC RHO SYMBOL	[203A 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D71A, 0x0021 };
    uint32_t const ces[9] = { 0x203A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_022)
{
    // 1D746 0021;	
    // (𝝆) MATHEMATICAL BOLD ITALIC SMALL RHO	[203A 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D746, 0x0021 };
    uint32_t const ces[9] = { 0x203A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_023)
{
    // 1D754 0021;	
    // (𝝔) MATHEMATICAL BOLD ITALIC RHO SYMBOL	[203A 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D754, 0x0021 };
    uint32_t const ces[9] = { 0x203A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_024)
{
    // 1D780 0021;	
    // (𝞀) MATHEMATICAL SANS-SERIF BOLD SMALL RHO	[203A 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D780, 0x0021 };
    uint32_t const ces[9] = { 0x203A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_025)
{
    // 1D78E 0021;	
    // (𝞎) MATHEMATICAL SANS-SERIF BOLD RHO SYMBOL	[203A 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D78E, 0x0021 };
    uint32_t const ces[9] = { 0x203A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_026)
{
    // 1D7BA 0021;	
    // (𝞺) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL RHO	[203A 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7BA, 0x0021 };
    uint32_t const ces[9] = { 0x203A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_027)
{
    // 1D7C8 0021;	
    // (𝟈) MATHEMATICAL SANS-SERIF BOLD ITALIC RHO SYMBOL	[203A 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C8, 0x0021 };
    uint32_t const ces[9] = { 0x203A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_028)
{
    // 03A1 0021;	
    // (Ρ) GREEK CAPITAL LETTER RHO	[203A 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A1, 0x0021 };
    uint32_t const ces[9] = { 0x203A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_029)
{
    // 1D6B8 0021;	
    // (𝚸) MATHEMATICAL BOLD CAPITAL RHO	[203A 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B8, 0x0021 };
    uint32_t const ces[9] = { 0x203A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_030)
{
    // 1D6F2 0021;	
    // (𝛲) MATHEMATICAL ITALIC CAPITAL RHO	[203A 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F2, 0x0021 };
    uint32_t const ces[9] = { 0x203A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_031)
{
    // 1D72C 0021;	
    // (𝜬) MATHEMATICAL BOLD ITALIC CAPITAL RHO	[203A 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D72C, 0x0021 };
    uint32_t const ces[9] = { 0x203A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_032)
{
    // 1D766 0021;	
    // (𝝦) MATHEMATICAL SANS-SERIF BOLD CAPITAL RHO	[203A 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D766, 0x0021 };
    uint32_t const ces[9] = { 0x203A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_033)
{
    // 1D7A0 0021;	
    // (𝞠) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL RHO	[203A 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A0, 0x0021 };
    uint32_t const ces[9] = { 0x203A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_034)
{
    // 1D68 0021;	
    // (ᵨ) GREEK SUBSCRIPT SMALL LETTER RHO	[203A 0261 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x1D68, 0x0021 };
    uint32_t const ces[9] = { 0x203A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_035)
{
    // 1FE4 0021;	
    // (ῤ) GREEK SMALL LETTER RHO WITH PSILI	[203A 0261 | 0020 0022 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE4, 0x0021 };
    uint32_t const ces[11] = { 0x203A, 0x0261, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_036)
{
    // 1FE5 0021;	
    // (ῥ) GREEK SMALL LETTER RHO WITH DASIA	[203A 0261 | 0020 0023 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE5, 0x0021 };
    uint32_t const ces[11] = { 0x203A, 0x0261, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_037)
{
    // 1FEC 0021;	
    // (Ῥ) GREEK CAPITAL LETTER RHO WITH DASIA	[203A 0261 | 0020 0023 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FEC, 0x0021 };
    uint32_t const ces[11] = { 0x203A, 0x0261, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_038)
{
    // 03C1 003F;	
    // (ρ) GREEK SMALL LETTER RHO	[203A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C1, 0x003F };
    uint32_t const ces[9] = { 0x203A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_039)
{
    // 03F1 003F;	
    // (ϱ) GREEK RHO SYMBOL	[203A 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x03F1, 0x003F };
    uint32_t const ces[9] = { 0x203A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_040)
{
    // 1D6D2 003F;	
    // (𝛒) MATHEMATICAL BOLD SMALL RHO	[203A 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D2, 0x003F };
    uint32_t const ces[9] = { 0x203A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_041)
{
    // 1D6E0 003F;	
    // (𝛠) MATHEMATICAL BOLD RHO SYMBOL	[203A 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6E0, 0x003F };
    uint32_t const ces[9] = { 0x203A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_042)
{
    // 1D70C 003F;	
    // (𝜌) MATHEMATICAL ITALIC SMALL RHO	[203A 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D70C, 0x003F };
    uint32_t const ces[9] = { 0x203A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_043)
{
    // 1D71A 003F;	
    // (𝜚) MATHEMATICAL ITALIC RHO SYMBOL	[203A 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D71A, 0x003F };
    uint32_t const ces[9] = { 0x203A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_044)
{
    // 1D746 003F;	
    // (𝝆) MATHEMATICAL BOLD ITALIC SMALL RHO	[203A 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D746, 0x003F };
    uint32_t const ces[9] = { 0x203A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_045)
{
    // 1D754 003F;	
    // (𝝔) MATHEMATICAL BOLD ITALIC RHO SYMBOL	[203A 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D754, 0x003F };
    uint32_t const ces[9] = { 0x203A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_046)
{
    // 1D780 003F;	
    // (𝞀) MATHEMATICAL SANS-SERIF BOLD SMALL RHO	[203A 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D780, 0x003F };
    uint32_t const ces[9] = { 0x203A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_047)
{
    // 1D78E 003F;	
    // (𝞎) MATHEMATICAL SANS-SERIF BOLD RHO SYMBOL	[203A 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D78E, 0x003F };
    uint32_t const ces[9] = { 0x203A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_048)
{
    // 1D7BA 003F;	
    // (𝞺) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL RHO	[203A 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7BA, 0x003F };
    uint32_t const ces[9] = { 0x203A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_049)
{
    // 1D7C8 003F;	
    // (𝟈) MATHEMATICAL SANS-SERIF BOLD ITALIC RHO SYMBOL	[203A 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C8, 0x003F };
    uint32_t const ces[9] = { 0x203A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_050)
{
    // 03A1 003F;	
    // (Ρ) GREEK CAPITAL LETTER RHO	[203A 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A1, 0x003F };
    uint32_t const ces[9] = { 0x203A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_051)
{
    // 1D6B8 003F;	
    // (𝚸) MATHEMATICAL BOLD CAPITAL RHO	[203A 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B8, 0x003F };
    uint32_t const ces[9] = { 0x203A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_052)
{
    // 1D6F2 003F;	
    // (𝛲) MATHEMATICAL ITALIC CAPITAL RHO	[203A 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F2, 0x003F };
    uint32_t const ces[9] = { 0x203A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_053)
{
    // 1D72C 003F;	
    // (𝜬) MATHEMATICAL BOLD ITALIC CAPITAL RHO	[203A 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D72C, 0x003F };
    uint32_t const ces[9] = { 0x203A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_054)
{
    // 1D766 003F;	
    // (𝝦) MATHEMATICAL SANS-SERIF BOLD CAPITAL RHO	[203A 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D766, 0x003F };
    uint32_t const ces[9] = { 0x203A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_055)
{
    // 1D7A0 003F;	
    // (𝞠) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL RHO	[203A 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A0, 0x003F };
    uint32_t const ces[9] = { 0x203A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_056)
{
    // 1D68 003F;	
    // (ᵨ) GREEK SUBSCRIPT SMALL LETTER RHO	[203A 0267 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x1D68, 0x003F };
    uint32_t const ces[9] = { 0x203A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_057)
{
    // 1FE4 003F;	
    // (ῤ) GREEK SMALL LETTER RHO WITH PSILI	[203A 0267 | 0020 0022 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE4, 0x003F };
    uint32_t const ces[11] = { 0x203A, 0x0267, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_058)
{
    // 1FE5 003F;	
    // (ῥ) GREEK SMALL LETTER RHO WITH DASIA	[203A 0267 | 0020 0023 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE5, 0x003F };
    uint32_t const ces[11] = { 0x203A, 0x0267, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_059)
{
    // 1FEC 003F;	
    // (Ῥ) GREEK CAPITAL LETTER RHO WITH DASIA	[203A 0267 | 0020 0023 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FEC, 0x003F };
    uint32_t const ces[11] = { 0x203A, 0x0267, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_060)
{
    // 03C1 0061;	
    // (ρ) GREEK SMALL LETTER RHO	[203A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C1, 0x0061 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_061)
{
    // 03C1 0041;	
    // (ρ) GREEK SMALL LETTER RHO	[203A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x03C1, 0x0041 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_062)
{
    // 03F1 0061;	
    // (ϱ) GREEK RHO SYMBOL	[203A 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x03F1, 0x0061 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_063)
{
    // 03F1 0041;	
    // (ϱ) GREEK RHO SYMBOL	[203A 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x03F1, 0x0041 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_064)
{
    // 1D6D2 0061;	
    // (𝛒) MATHEMATICAL BOLD SMALL RHO	[203A 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D2, 0x0061 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_065)
{
    // 1D6E0 0061;	
    // (𝛠) MATHEMATICAL BOLD RHO SYMBOL	[203A 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6E0, 0x0061 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_066)
{
    // 1D70C 0061;	
    // (𝜌) MATHEMATICAL ITALIC SMALL RHO	[203A 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D70C, 0x0061 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_067)
{
    // 1D71A 0061;	
    // (𝜚) MATHEMATICAL ITALIC RHO SYMBOL	[203A 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D71A, 0x0061 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_068)
{
    // 1D746 0061;	
    // (𝝆) MATHEMATICAL BOLD ITALIC SMALL RHO	[203A 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D746, 0x0061 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_069)
{
    // 1D754 0061;	
    // (𝝔) MATHEMATICAL BOLD ITALIC RHO SYMBOL	[203A 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D754, 0x0061 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_070)
{
    // 1D780 0061;	
    // (𝞀) MATHEMATICAL SANS-SERIF BOLD SMALL RHO	[203A 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D780, 0x0061 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_071)
{
    // 1D78E 0061;	
    // (𝞎) MATHEMATICAL SANS-SERIF BOLD RHO SYMBOL	[203A 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D78E, 0x0061 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_072)
{
    // 1D7BA 0061;	
    // (𝞺) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL RHO	[203A 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7BA, 0x0061 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_073)
{
    // 1D7C8 0061;	
    // (𝟈) MATHEMATICAL SANS-SERIF BOLD ITALIC RHO SYMBOL	[203A 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C8, 0x0061 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_074)
{
    // 1D6D2 0041;	
    // (𝛒) MATHEMATICAL BOLD SMALL RHO	[203A 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6D2, 0x0041 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_075)
{
    // 1D6E0 0041;	
    // (𝛠) MATHEMATICAL BOLD RHO SYMBOL	[203A 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6E0, 0x0041 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_076)
{
    // 1D70C 0041;	
    // (𝜌) MATHEMATICAL ITALIC SMALL RHO	[203A 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D70C, 0x0041 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_077)
{
    // 1D71A 0041;	
    // (𝜚) MATHEMATICAL ITALIC RHO SYMBOL	[203A 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D71A, 0x0041 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_078)
{
    // 1D746 0041;	
    // (𝝆) MATHEMATICAL BOLD ITALIC SMALL RHO	[203A 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D746, 0x0041 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_079)
{
    // 1D754 0041;	
    // (𝝔) MATHEMATICAL BOLD ITALIC RHO SYMBOL	[203A 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D754, 0x0041 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_080)
{
    // 1D780 0041;	
    // (𝞀) MATHEMATICAL SANS-SERIF BOLD SMALL RHO	[203A 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D780, 0x0041 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_081)
{
    // 1D78E 0041;	
    // (𝞎) MATHEMATICAL SANS-SERIF BOLD RHO SYMBOL	[203A 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D78E, 0x0041 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_082)
{
    // 1D7BA 0041;	
    // (𝞺) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL RHO	[203A 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7BA, 0x0041 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_083)
{
    // 1D7C8 0041;	
    // (𝟈) MATHEMATICAL SANS-SERIF BOLD ITALIC RHO SYMBOL	[203A 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7C8, 0x0041 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_084)
{
    // 03A1 0061;	
    // (Ρ) GREEK CAPITAL LETTER RHO	[203A 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A1, 0x0061 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_085)
{
    // 03A1 0041;	
    // (Ρ) GREEK CAPITAL LETTER RHO	[203A 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x03A1, 0x0041 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_086)
{
    // 1D6B8 0061;	
    // (𝚸) MATHEMATICAL BOLD CAPITAL RHO	[203A 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B8, 0x0061 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_087)
{
    // 1D6F2 0061;	
    // (𝛲) MATHEMATICAL ITALIC CAPITAL RHO	[203A 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F2, 0x0061 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_088)
{
    // 1D72C 0061;	
    // (𝜬) MATHEMATICAL BOLD ITALIC CAPITAL RHO	[203A 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D72C, 0x0061 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_089)
{
    // 1D766 0061;	
    // (𝝦) MATHEMATICAL SANS-SERIF BOLD CAPITAL RHO	[203A 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D766, 0x0061 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_090)
{
    // 1D7A0 0061;	
    // (𝞠) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL RHO	[203A 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A0, 0x0061 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_091)
{
    // 1D6B8 0041;	
    // (𝚸) MATHEMATICAL BOLD CAPITAL RHO	[203A 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6B8, 0x0041 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_092)
{
    // 1D6F2 0041;	
    // (𝛲) MATHEMATICAL ITALIC CAPITAL RHO	[203A 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6F2, 0x0041 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_093)
{
    // 1D72C 0041;	
    // (𝜬) MATHEMATICAL BOLD ITALIC CAPITAL RHO	[203A 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D72C, 0x0041 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_094)
{
    // 1D766 0041;	
    // (𝝦) MATHEMATICAL SANS-SERIF BOLD CAPITAL RHO	[203A 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D766, 0x0041 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_095)
{
    // 1D7A0 0041;	
    // (𝞠) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL RHO	[203A 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D7A0, 0x0041 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_096)
{
    // 1D68 0061;	
    // (ᵨ) GREEK SUBSCRIPT SMALL LETTER RHO	[203A 1CAD | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x1D68, 0x0061 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_097)
{
    // 1D68 0041;	
    // (ᵨ) GREEK SUBSCRIPT SMALL LETTER RHO	[203A 1CAD | 0020 0020 | 0015 0008 |]

    uint32_t cps[2] = { 0x1D68, 0x0041 };
    uint32_t const ces[9] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_098)
{
    // 1FE4 0061;	
    // (ῤ) GREEK SMALL LETTER RHO WITH PSILI	[203A 1CAD | 0020 0022 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE4, 0x0061 };
    uint32_t const ces[11] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_099)
{
    // 1FE4 0041;	
    // (ῤ) GREEK SMALL LETTER RHO WITH PSILI	[203A 1CAD | 0020 0022 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FE4, 0x0041 };
    uint32_t const ces[11] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_100)
{
    // 1FE5 0061;	
    // (ῥ) GREEK SMALL LETTER RHO WITH DASIA	[203A 1CAD | 0020 0023 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE5, 0x0061 };
    uint32_t const ces[11] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_101)
{
    // 1FE5 0041;	
    // (ῥ) GREEK SMALL LETTER RHO WITH DASIA	[203A 1CAD | 0020 0023 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FE5, 0x0041 };
    uint32_t const ces[11] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_102)
{
    // 1FEC 0061;	
    // (Ῥ) GREEK CAPITAL LETTER RHO WITH DASIA	[203A 1CAD | 0020 0023 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FEC, 0x0061 };
    uint32_t const ces[11] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_103)
{
    // 1FEC 0041;	
    // (Ῥ) GREEK CAPITAL LETTER RHO WITH DASIA	[203A 1CAD | 0020 0023 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1FEC, 0x0041 };
    uint32_t const ces[11] = { 0x203A, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_104)
{
    // 03C1 0062;	
    // (ρ) GREEK SMALL LETTER RHO	[203A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C1, 0x0062 };
    uint32_t const ces[9] = { 0x203A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_105)
{
    // 03F1 0062;	
    // (ϱ) GREEK RHO SYMBOL	[203A 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x03F1, 0x0062 };
    uint32_t const ces[9] = { 0x203A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_106)
{
    // 1D6D2 0062;	
    // (𝛒) MATHEMATICAL BOLD SMALL RHO	[203A 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D2, 0x0062 };
    uint32_t const ces[9] = { 0x203A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_107)
{
    // 1D6E0 0062;	
    // (𝛠) MATHEMATICAL BOLD RHO SYMBOL	[203A 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6E0, 0x0062 };
    uint32_t const ces[9] = { 0x203A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_108)
{
    // 1D70C 0062;	
    // (𝜌) MATHEMATICAL ITALIC SMALL RHO	[203A 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D70C, 0x0062 };
    uint32_t const ces[9] = { 0x203A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_109)
{
    // 1D71A 0062;	
    // (𝜚) MATHEMATICAL ITALIC RHO SYMBOL	[203A 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D71A, 0x0062 };
    uint32_t const ces[9] = { 0x203A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_110)
{
    // 1D746 0062;	
    // (𝝆) MATHEMATICAL BOLD ITALIC SMALL RHO	[203A 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D746, 0x0062 };
    uint32_t const ces[9] = { 0x203A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_111)
{
    // 1D754 0062;	
    // (𝝔) MATHEMATICAL BOLD ITALIC RHO SYMBOL	[203A 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D754, 0x0062 };
    uint32_t const ces[9] = { 0x203A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_112)
{
    // 1D780 0062;	
    // (𝞀) MATHEMATICAL SANS-SERIF BOLD SMALL RHO	[203A 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D780, 0x0062 };
    uint32_t const ces[9] = { 0x203A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_113)
{
    // 1D78E 0062;	
    // (𝞎) MATHEMATICAL SANS-SERIF BOLD RHO SYMBOL	[203A 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D78E, 0x0062 };
    uint32_t const ces[9] = { 0x203A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_114)
{
    // 1D7BA 0062;	
    // (𝞺) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL RHO	[203A 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7BA, 0x0062 };
    uint32_t const ces[9] = { 0x203A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_115)
{
    // 1D7C8 0062;	
    // (𝟈) MATHEMATICAL SANS-SERIF BOLD ITALIC RHO SYMBOL	[203A 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C8, 0x0062 };
    uint32_t const ces[9] = { 0x203A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_116)
{
    // 03A1 0062;	
    // (Ρ) GREEK CAPITAL LETTER RHO	[203A 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A1, 0x0062 };
    uint32_t const ces[9] = { 0x203A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_117)
{
    // 1D6B8 0062;	
    // (𝚸) MATHEMATICAL BOLD CAPITAL RHO	[203A 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B8, 0x0062 };
    uint32_t const ces[9] = { 0x203A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_118)
{
    // 1D6F2 0062;	
    // (𝛲) MATHEMATICAL ITALIC CAPITAL RHO	[203A 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F2, 0x0062 };
    uint32_t const ces[9] = { 0x203A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_119)
{
    // 1D72C 0062;	
    // (𝜬) MATHEMATICAL BOLD ITALIC CAPITAL RHO	[203A 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D72C, 0x0062 };
    uint32_t const ces[9] = { 0x203A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_120)
{
    // 1D766 0062;	
    // (𝝦) MATHEMATICAL SANS-SERIF BOLD CAPITAL RHO	[203A 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D766, 0x0062 };
    uint32_t const ces[9] = { 0x203A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_121)
{
    // 1D7A0 0062;	
    // (𝞠) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL RHO	[203A 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A0, 0x0062 };
    uint32_t const ces[9] = { 0x203A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_122)
{
    // 1D68 0062;	
    // (ᵨ) GREEK SUBSCRIPT SMALL LETTER RHO	[203A 1CC6 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x1D68, 0x0062 };
    uint32_t const ces[9] = { 0x203A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_123)
{
    // 1FE4 0062;	
    // (ῤ) GREEK SMALL LETTER RHO WITH PSILI	[203A 1CC6 | 0020 0022 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE4, 0x0062 };
    uint32_t const ces[11] = { 0x203A, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_124)
{
    // 1FE5 0062;	
    // (ῥ) GREEK SMALL LETTER RHO WITH DASIA	[203A 1CC6 | 0020 0023 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE5, 0x0062 };
    uint32_t const ces[11] = { 0x203A, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_125)
{
    // 1FEC 0062;	
    // (Ῥ) GREEK CAPITAL LETTER RHO WITH DASIA	[203A 1CC6 | 0020 0023 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FEC, 0x0062 };
    uint32_t const ces[11] = { 0x203A, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_126)
{
    // 1D29 0021;	
    // (ᴩ) GREEK LETTER SMALL CAPITAL RHO	[203B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D29, 0x0021 };
    uint32_t const ces[9] = { 0x203B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_127)
{
    // 1D29 003F;	
    // (ᴩ) GREEK LETTER SMALL CAPITAL RHO	[203B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D29, 0x003F };
    uint32_t const ces[9] = { 0x203B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_128)
{
    // 1D29 0061;	
    // (ᴩ) GREEK LETTER SMALL CAPITAL RHO	[203B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D29, 0x0061 };
    uint32_t const ces[9] = { 0x203B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_129)
{
    // 1D29 0041;	
    // (ᴩ) GREEK LETTER SMALL CAPITAL RHO	[203B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D29, 0x0041 };
    uint32_t const ces[9] = { 0x203B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_130)
{
    // 1D29 0062;	
    // (ᴩ) GREEK LETTER SMALL CAPITAL RHO	[203B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D29, 0x0062 };
    uint32_t const ces[9] = { 0x203B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_131)
{
    // 03FC 0021;	
    // (ϼ) GREEK RHO WITH STROKE SYMBOL	[203C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03FC, 0x0021 };
    uint32_t const ces[9] = { 0x203C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_132)
{
    // 03FC 003F;	
    // (ϼ) GREEK RHO WITH STROKE SYMBOL	[203C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03FC, 0x003F };
    uint32_t const ces[9] = { 0x203C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_133)
{
    // 03FC 0061;	
    // (ϼ) GREEK RHO WITH STROKE SYMBOL	[203C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03FC, 0x0061 };
    uint32_t const ces[9] = { 0x203C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_134)
{
    // 03FC 0041;	
    // (ϼ) GREEK RHO WITH STROKE SYMBOL	[203C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x03FC, 0x0041 };
    uint32_t const ces[9] = { 0x203C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_135)
{
    // 03FC 0062;	
    // (ϼ) GREEK RHO WITH STROKE SYMBOL	[203C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03FC, 0x0062 };
    uint32_t const ces[9] = { 0x203C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_136)
{
    // 03C3 0021;	
    // (σ) GREEK SMALL LETTER SIGMA	[203D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C3, 0x0021 };
    uint32_t const ces[9] = { 0x203D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_137)
{
    // 03F2 0021;	
    // (ϲ) GREEK LUNATE SIGMA SYMBOL	[203D 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x03F2, 0x0021 };
    uint32_t const ces[9] = { 0x203D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_138)
{
    // 1D6D3 0021;	
    // (𝛓) MATHEMATICAL BOLD SMALL FINAL SIGMA	[203D 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D3, 0x0021 };
    uint32_t const ces[9] = { 0x203D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_139)
{
    // 1D6D4 0021;	
    // (𝛔) MATHEMATICAL BOLD SMALL SIGMA	[203D 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D4, 0x0021 };
    uint32_t const ces[9] = { 0x203D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_140)
{
    // 1D70D 0021;	
    // (𝜍) MATHEMATICAL ITALIC SMALL FINAL SIGMA	[203D 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D70D, 0x0021 };
    uint32_t const ces[9] = { 0x203D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_141)
{
    // 1D70E 0021;	
    // (𝜎) MATHEMATICAL ITALIC SMALL SIGMA	[203D 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D70E, 0x0021 };
    uint32_t const ces[9] = { 0x203D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_142)
{
    // 1D747 0021;	
    // (𝝇) MATHEMATICAL BOLD ITALIC SMALL FINAL SIGMA	[203D 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D747, 0x0021 };
    uint32_t const ces[9] = { 0x203D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_143)
{
    // 1D748 0021;	
    // (𝝈) MATHEMATICAL BOLD ITALIC SMALL SIGMA	[203D 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D748, 0x0021 };
    uint32_t const ces[9] = { 0x203D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_144)
{
    // 1D781 0021;	
    // (𝞁) MATHEMATICAL SANS-SERIF BOLD SMALL FINAL SIGMA	[203D 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D781, 0x0021 };
    uint32_t const ces[9] = { 0x203D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_145)
{
    // 1D782 0021;	
    // (𝞂) MATHEMATICAL SANS-SERIF BOLD SMALL SIGMA	[203D 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D782, 0x0021 };
    uint32_t const ces[9] = { 0x203D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_146)
{
    // 1D7BB 0021;	
    // (𝞻) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL FINAL SIGMA	[203D 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7BB, 0x0021 };
    uint32_t const ces[9] = { 0x203D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_147)
{
    // 1D7BC 0021;	
    // (𝞼) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL SIGMA	[203D 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7BC, 0x0021 };
    uint32_t const ces[9] = { 0x203D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_148)
{
    // 03A3 0021;	
    // (Σ) GREEK CAPITAL LETTER SIGMA	[203D 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A3, 0x0021 };
    uint32_t const ces[9] = { 0x203D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_149)
{
    // 03F9 0021;	
    // (Ϲ) GREEK CAPITAL LUNATE SIGMA SYMBOL	[203D 0261 | 0020 0020 | 000A 0002 |]

    uint32_t cps[2] = { 0x03F9, 0x0021 };
    uint32_t const ces[9] = { 0x203D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_150)
{
    // 1D6BA 0021;	
    // (𝚺) MATHEMATICAL BOLD CAPITAL SIGMA	[203D 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6BA, 0x0021 };
    uint32_t const ces[9] = { 0x203D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_151)
{
    // 1D6F4 0021;	
    // (𝛴) MATHEMATICAL ITALIC CAPITAL SIGMA	[203D 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F4, 0x0021 };
    uint32_t const ces[9] = { 0x203D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_152)
{
    // 1D72E 0021;	
    // (𝜮) MATHEMATICAL BOLD ITALIC CAPITAL SIGMA	[203D 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D72E, 0x0021 };
    uint32_t const ces[9] = { 0x203D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_153)
{
    // 1D768 0021;	
    // (𝝨) MATHEMATICAL SANS-SERIF BOLD CAPITAL SIGMA	[203D 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D768, 0x0021 };
    uint32_t const ces[9] = { 0x203D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_154)
{
    // 1D7A2 0021;	
    // (𝞢) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL SIGMA	[203D 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A2, 0x0021 };
    uint32_t const ces[9] = { 0x203D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_155)
{
    // 03C2 0021;	
    // (ς) GREEK SMALL LETTER FINAL SIGMA	[203D 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x03C2, 0x0021 };
    uint32_t const ces[9] = { 0x203D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_156)
{
    // 03C3 003F;	
    // (σ) GREEK SMALL LETTER SIGMA	[203D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C3, 0x003F };
    uint32_t const ces[9] = { 0x203D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_157)
{
    // 03F2 003F;	
    // (ϲ) GREEK LUNATE SIGMA SYMBOL	[203D 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x03F2, 0x003F };
    uint32_t const ces[9] = { 0x203D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_158)
{
    // 1D6D3 003F;	
    // (𝛓) MATHEMATICAL BOLD SMALL FINAL SIGMA	[203D 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D3, 0x003F };
    uint32_t const ces[9] = { 0x203D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_159)
{
    // 1D6D4 003F;	
    // (𝛔) MATHEMATICAL BOLD SMALL SIGMA	[203D 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D4, 0x003F };
    uint32_t const ces[9] = { 0x203D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_160)
{
    // 1D70D 003F;	
    // (𝜍) MATHEMATICAL ITALIC SMALL FINAL SIGMA	[203D 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D70D, 0x003F };
    uint32_t const ces[9] = { 0x203D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_161)
{
    // 1D70E 003F;	
    // (𝜎) MATHEMATICAL ITALIC SMALL SIGMA	[203D 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D70E, 0x003F };
    uint32_t const ces[9] = { 0x203D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_162)
{
    // 1D747 003F;	
    // (𝝇) MATHEMATICAL BOLD ITALIC SMALL FINAL SIGMA	[203D 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D747, 0x003F };
    uint32_t const ces[9] = { 0x203D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_163)
{
    // 1D748 003F;	
    // (𝝈) MATHEMATICAL BOLD ITALIC SMALL SIGMA	[203D 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D748, 0x003F };
    uint32_t const ces[9] = { 0x203D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_164)
{
    // 1D781 003F;	
    // (𝞁) MATHEMATICAL SANS-SERIF BOLD SMALL FINAL SIGMA	[203D 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D781, 0x003F };
    uint32_t const ces[9] = { 0x203D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_165)
{
    // 1D782 003F;	
    // (𝞂) MATHEMATICAL SANS-SERIF BOLD SMALL SIGMA	[203D 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D782, 0x003F };
    uint32_t const ces[9] = { 0x203D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_166)
{
    // 1D7BB 003F;	
    // (𝞻) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL FINAL SIGMA	[203D 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7BB, 0x003F };
    uint32_t const ces[9] = { 0x203D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_167)
{
    // 1D7BC 003F;	
    // (𝞼) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL SIGMA	[203D 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7BC, 0x003F };
    uint32_t const ces[9] = { 0x203D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_168)
{
    // 03A3 003F;	
    // (Σ) GREEK CAPITAL LETTER SIGMA	[203D 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A3, 0x003F };
    uint32_t const ces[9] = { 0x203D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_169)
{
    // 03F9 003F;	
    // (Ϲ) GREEK CAPITAL LUNATE SIGMA SYMBOL	[203D 0267 | 0020 0020 | 000A 0002 |]

    uint32_t cps[2] = { 0x03F9, 0x003F };
    uint32_t const ces[9] = { 0x203D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_170)
{
    // 1D6BA 003F;	
    // (𝚺) MATHEMATICAL BOLD CAPITAL SIGMA	[203D 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6BA, 0x003F };
    uint32_t const ces[9] = { 0x203D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_171)
{
    // 1D6F4 003F;	
    // (𝛴) MATHEMATICAL ITALIC CAPITAL SIGMA	[203D 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F4, 0x003F };
    uint32_t const ces[9] = { 0x203D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_172)
{
    // 1D72E 003F;	
    // (𝜮) MATHEMATICAL BOLD ITALIC CAPITAL SIGMA	[203D 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D72E, 0x003F };
    uint32_t const ces[9] = { 0x203D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_173)
{
    // 1D768 003F;	
    // (𝝨) MATHEMATICAL SANS-SERIF BOLD CAPITAL SIGMA	[203D 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D768, 0x003F };
    uint32_t const ces[9] = { 0x203D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_174)
{
    // 1D7A2 003F;	
    // (𝞢) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL SIGMA	[203D 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A2, 0x003F };
    uint32_t const ces[9] = { 0x203D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_175)
{
    // 03C2 003F;	
    // (ς) GREEK SMALL LETTER FINAL SIGMA	[203D 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x03C2, 0x003F };
    uint32_t const ces[9] = { 0x203D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_176)
{
    // 03C3 0061;	
    // (σ) GREEK SMALL LETTER SIGMA	[203D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C3, 0x0061 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_177)
{
    // 03C3 0041;	
    // (σ) GREEK SMALL LETTER SIGMA	[203D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x03C3, 0x0041 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_178)
{
    // 03F2 0061;	
    // (ϲ) GREEK LUNATE SIGMA SYMBOL	[203D 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x03F2, 0x0061 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_179)
{
    // 03F2 0041;	
    // (ϲ) GREEK LUNATE SIGMA SYMBOL	[203D 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x03F2, 0x0041 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_180)
{
    // 1D6D3 0061;	
    // (𝛓) MATHEMATICAL BOLD SMALL FINAL SIGMA	[203D 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D3, 0x0061 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_181)
{
    // 1D6D4 0061;	
    // (𝛔) MATHEMATICAL BOLD SMALL SIGMA	[203D 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D4, 0x0061 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_182)
{
    // 1D70D 0061;	
    // (𝜍) MATHEMATICAL ITALIC SMALL FINAL SIGMA	[203D 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D70D, 0x0061 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_183)
{
    // 1D70E 0061;	
    // (𝜎) MATHEMATICAL ITALIC SMALL SIGMA	[203D 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D70E, 0x0061 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_184)
{
    // 1D747 0061;	
    // (𝝇) MATHEMATICAL BOLD ITALIC SMALL FINAL SIGMA	[203D 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D747, 0x0061 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_185)
{
    // 1D748 0061;	
    // (𝝈) MATHEMATICAL BOLD ITALIC SMALL SIGMA	[203D 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D748, 0x0061 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_186)
{
    // 1D781 0061;	
    // (𝞁) MATHEMATICAL SANS-SERIF BOLD SMALL FINAL SIGMA	[203D 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D781, 0x0061 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_187)
{
    // 1D782 0061;	
    // (𝞂) MATHEMATICAL SANS-SERIF BOLD SMALL SIGMA	[203D 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D782, 0x0061 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_188)
{
    // 1D7BB 0061;	
    // (𝞻) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL FINAL SIGMA	[203D 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7BB, 0x0061 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_189)
{
    // 1D7BC 0061;	
    // (𝞼) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL SIGMA	[203D 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7BC, 0x0061 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_190)
{
    // 1D6D3 0041;	
    // (𝛓) MATHEMATICAL BOLD SMALL FINAL SIGMA	[203D 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6D3, 0x0041 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_191)
{
    // 1D6D4 0041;	
    // (𝛔) MATHEMATICAL BOLD SMALL SIGMA	[203D 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6D4, 0x0041 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_192)
{
    // 1D70D 0041;	
    // (𝜍) MATHEMATICAL ITALIC SMALL FINAL SIGMA	[203D 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D70D, 0x0041 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_193)
{
    // 1D70E 0041;	
    // (𝜎) MATHEMATICAL ITALIC SMALL SIGMA	[203D 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D70E, 0x0041 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_194)
{
    // 1D747 0041;	
    // (𝝇) MATHEMATICAL BOLD ITALIC SMALL FINAL SIGMA	[203D 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D747, 0x0041 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_195)
{
    // 1D748 0041;	
    // (𝝈) MATHEMATICAL BOLD ITALIC SMALL SIGMA	[203D 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D748, 0x0041 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_196)
{
    // 1D781 0041;	
    // (𝞁) MATHEMATICAL SANS-SERIF BOLD SMALL FINAL SIGMA	[203D 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D781, 0x0041 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_197)
{
    // 1D782 0041;	
    // (𝞂) MATHEMATICAL SANS-SERIF BOLD SMALL SIGMA	[203D 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D782, 0x0041 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_198)
{
    // 1D7BB 0041;	
    // (𝞻) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL FINAL SIGMA	[203D 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7BB, 0x0041 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_199)
{
    // 1D7BC 0041;	
    // (𝞼) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL SIGMA	[203D 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7BC, 0x0041 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_200)
{
    // 03A3 0061;	
    // (Σ) GREEK CAPITAL LETTER SIGMA	[203D 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A3, 0x0061 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_201)
{
    // 03A3 0041;	
    // (Σ) GREEK CAPITAL LETTER SIGMA	[203D 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x03A3, 0x0041 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_202)
{
    // 03F9 0061;	
    // (Ϲ) GREEK CAPITAL LUNATE SIGMA SYMBOL	[203D 1CAD | 0020 0020 | 000A 0002 |]

    uint32_t cps[2] = { 0x03F9, 0x0061 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_203)
{
    // 03F9 0041;	
    // (Ϲ) GREEK CAPITAL LUNATE SIGMA SYMBOL	[203D 1CAD | 0020 0020 | 000A 0008 |]

    uint32_t cps[2] = { 0x03F9, 0x0041 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_204)
{
    // 1D6BA 0061;	
    // (𝚺) MATHEMATICAL BOLD CAPITAL SIGMA	[203D 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6BA, 0x0061 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_205)
{
    // 1D6F4 0061;	
    // (𝛴) MATHEMATICAL ITALIC CAPITAL SIGMA	[203D 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F4, 0x0061 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_206)
{
    // 1D72E 0061;	
    // (𝜮) MATHEMATICAL BOLD ITALIC CAPITAL SIGMA	[203D 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D72E, 0x0061 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_207)
{
    // 1D768 0061;	
    // (𝝨) MATHEMATICAL SANS-SERIF BOLD CAPITAL SIGMA	[203D 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D768, 0x0061 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_208)
{
    // 1D7A2 0061;	
    // (𝞢) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL SIGMA	[203D 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A2, 0x0061 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_209)
{
    // 1D6BA 0041;	
    // (𝚺) MATHEMATICAL BOLD CAPITAL SIGMA	[203D 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6BA, 0x0041 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_210)
{
    // 1D6F4 0041;	
    // (𝛴) MATHEMATICAL ITALIC CAPITAL SIGMA	[203D 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6F4, 0x0041 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_211)
{
    // 1D72E 0041;	
    // (𝜮) MATHEMATICAL BOLD ITALIC CAPITAL SIGMA	[203D 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D72E, 0x0041 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_212)
{
    // 1D768 0041;	
    // (𝝨) MATHEMATICAL SANS-SERIF BOLD CAPITAL SIGMA	[203D 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D768, 0x0041 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_213)
{
    // 1D7A2 0041;	
    // (𝞢) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL SIGMA	[203D 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D7A2, 0x0041 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_214)
{
    // 03C2 0061;	
    // (ς) GREEK SMALL LETTER FINAL SIGMA	[203D 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x03C2, 0x0061 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_215)
{
    // 03C2 0041;	
    // (ς) GREEK SMALL LETTER FINAL SIGMA	[203D 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0x03C2, 0x0041 };
    uint32_t const ces[9] = { 0x203D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_216)
{
    // 03C3 0062;	
    // (σ) GREEK SMALL LETTER SIGMA	[203D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C3, 0x0062 };
    uint32_t const ces[9] = { 0x203D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_217)
{
    // 03F2 0062;	
    // (ϲ) GREEK LUNATE SIGMA SYMBOL	[203D 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x03F2, 0x0062 };
    uint32_t const ces[9] = { 0x203D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_218)
{
    // 1D6D3 0062;	
    // (𝛓) MATHEMATICAL BOLD SMALL FINAL SIGMA	[203D 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D3, 0x0062 };
    uint32_t const ces[9] = { 0x203D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_219)
{
    // 1D6D4 0062;	
    // (𝛔) MATHEMATICAL BOLD SMALL SIGMA	[203D 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D4, 0x0062 };
    uint32_t const ces[9] = { 0x203D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_220)
{
    // 1D70D 0062;	
    // (𝜍) MATHEMATICAL ITALIC SMALL FINAL SIGMA	[203D 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D70D, 0x0062 };
    uint32_t const ces[9] = { 0x203D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_221)
{
    // 1D70E 0062;	
    // (𝜎) MATHEMATICAL ITALIC SMALL SIGMA	[203D 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D70E, 0x0062 };
    uint32_t const ces[9] = { 0x203D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_222)
{
    // 1D747 0062;	
    // (𝝇) MATHEMATICAL BOLD ITALIC SMALL FINAL SIGMA	[203D 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D747, 0x0062 };
    uint32_t const ces[9] = { 0x203D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_223)
{
    // 1D748 0062;	
    // (𝝈) MATHEMATICAL BOLD ITALIC SMALL SIGMA	[203D 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D748, 0x0062 };
    uint32_t const ces[9] = { 0x203D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_224)
{
    // 1D781 0062;	
    // (𝞁) MATHEMATICAL SANS-SERIF BOLD SMALL FINAL SIGMA	[203D 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D781, 0x0062 };
    uint32_t const ces[9] = { 0x203D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_225)
{
    // 1D782 0062;	
    // (𝞂) MATHEMATICAL SANS-SERIF BOLD SMALL SIGMA	[203D 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D782, 0x0062 };
    uint32_t const ces[9] = { 0x203D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_226)
{
    // 1D7BB 0062;	
    // (𝞻) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL FINAL SIGMA	[203D 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7BB, 0x0062 };
    uint32_t const ces[9] = { 0x203D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_227)
{
    // 1D7BC 0062;	
    // (𝞼) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL SIGMA	[203D 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7BC, 0x0062 };
    uint32_t const ces[9] = { 0x203D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_228)
{
    // 03A3 0062;	
    // (Σ) GREEK CAPITAL LETTER SIGMA	[203D 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A3, 0x0062 };
    uint32_t const ces[9] = { 0x203D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_229)
{
    // 03F9 0062;	
    // (Ϲ) GREEK CAPITAL LUNATE SIGMA SYMBOL	[203D 1CC6 | 0020 0020 | 000A 0002 |]

    uint32_t cps[2] = { 0x03F9, 0x0062 };
    uint32_t const ces[9] = { 0x203D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_230)
{
    // 1D6BA 0062;	
    // (𝚺) MATHEMATICAL BOLD CAPITAL SIGMA	[203D 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6BA, 0x0062 };
    uint32_t const ces[9] = { 0x203D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_231)
{
    // 1D6F4 0062;	
    // (𝛴) MATHEMATICAL ITALIC CAPITAL SIGMA	[203D 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F4, 0x0062 };
    uint32_t const ces[9] = { 0x203D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_232)
{
    // 1D72E 0062;	
    // (𝜮) MATHEMATICAL BOLD ITALIC CAPITAL SIGMA	[203D 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D72E, 0x0062 };
    uint32_t const ces[9] = { 0x203D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_233)
{
    // 1D768 0062;	
    // (𝝨) MATHEMATICAL SANS-SERIF BOLD CAPITAL SIGMA	[203D 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D768, 0x0062 };
    uint32_t const ces[9] = { 0x203D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_234)
{
    // 1D7A2 0062;	
    // (𝞢) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL SIGMA	[203D 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A2, 0x0062 };
    uint32_t const ces[9] = { 0x203D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_235)
{
    // 03C2 0062;	
    // (ς) GREEK SMALL LETTER FINAL SIGMA	[203D 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x03C2, 0x0062 };
    uint32_t const ces[9] = { 0x203D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_236)
{
    // 037C 0021;	
    // (ͼ) GREEK SMALL DOTTED LUNATE SIGMA SYMBOL	[203E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x037C, 0x0021 };
    uint32_t const ces[9] = { 0x203E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_237)
{
    // 03FE 0021;	
    // (Ͼ) GREEK CAPITAL DOTTED LUNATE SIGMA SYMBOL	[203E 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03FE, 0x0021 };
    uint32_t const ces[9] = { 0x203E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_238)
{
    // 037C 003F;	
    // (ͼ) GREEK SMALL DOTTED LUNATE SIGMA SYMBOL	[203E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x037C, 0x003F };
    uint32_t const ces[9] = { 0x203E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_239)
{
    // 03FE 003F;	
    // (Ͼ) GREEK CAPITAL DOTTED LUNATE SIGMA SYMBOL	[203E 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03FE, 0x003F };
    uint32_t const ces[9] = { 0x203E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_240)
{
    // 037C 0061;	
    // (ͼ) GREEK SMALL DOTTED LUNATE SIGMA SYMBOL	[203E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x037C, 0x0061 };
    uint32_t const ces[9] = { 0x203E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_241)
{
    // 037C 0041;	
    // (ͼ) GREEK SMALL DOTTED LUNATE SIGMA SYMBOL	[203E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x037C, 0x0041 };
    uint32_t const ces[9] = { 0x203E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_242)
{
    // 03FE 0061;	
    // (Ͼ) GREEK CAPITAL DOTTED LUNATE SIGMA SYMBOL	[203E 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03FE, 0x0061 };
    uint32_t const ces[9] = { 0x203E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_243)
{
    // 03FE 0041;	
    // (Ͼ) GREEK CAPITAL DOTTED LUNATE SIGMA SYMBOL	[203E 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x03FE, 0x0041 };
    uint32_t const ces[9] = { 0x203E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_244)
{
    // 037C 0062;	
    // (ͼ) GREEK SMALL DOTTED LUNATE SIGMA SYMBOL	[203E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x037C, 0x0062 };
    uint32_t const ces[9] = { 0x203E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_245)
{
    // 03FE 0062;	
    // (Ͼ) GREEK CAPITAL DOTTED LUNATE SIGMA SYMBOL	[203E 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03FE, 0x0062 };
    uint32_t const ces[9] = { 0x203E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_246)
{
    // 037B 0021;	
    // (ͻ) GREEK SMALL REVERSED LUNATE SIGMA SYMBOL	[203F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x037B, 0x0021 };
    uint32_t const ces[9] = { 0x203F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_247)
{
    // 03FD 0021;	
    // (Ͻ) GREEK CAPITAL REVERSED LUNATE SIGMA SYMBOL	[203F 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03FD, 0x0021 };
    uint32_t const ces[9] = { 0x203F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_248)
{
    // 037B 003F;	
    // (ͻ) GREEK SMALL REVERSED LUNATE SIGMA SYMBOL	[203F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x037B, 0x003F };
    uint32_t const ces[9] = { 0x203F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_249)
{
    // 03FD 003F;	
    // (Ͻ) GREEK CAPITAL REVERSED LUNATE SIGMA SYMBOL	[203F 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03FD, 0x003F };
    uint32_t const ces[9] = { 0x203F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_250)
{
    // 037B 0061;	
    // (ͻ) GREEK SMALL REVERSED LUNATE SIGMA SYMBOL	[203F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x037B, 0x0061 };
    uint32_t const ces[9] = { 0x203F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_251)
{
    // 037B 0041;	
    // (ͻ) GREEK SMALL REVERSED LUNATE SIGMA SYMBOL	[203F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x037B, 0x0041 };
    uint32_t const ces[9] = { 0x203F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_252)
{
    // 03FD 0061;	
    // (Ͻ) GREEK CAPITAL REVERSED LUNATE SIGMA SYMBOL	[203F 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03FD, 0x0061 };
    uint32_t const ces[9] = { 0x203F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_253)
{
    // 03FD 0041;	
    // (Ͻ) GREEK CAPITAL REVERSED LUNATE SIGMA SYMBOL	[203F 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x03FD, 0x0041 };
    uint32_t const ces[9] = { 0x203F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_254)
{
    // 037B 0062;	
    // (ͻ) GREEK SMALL REVERSED LUNATE SIGMA SYMBOL	[203F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x037B, 0x0062 };
    uint32_t const ces[9] = { 0x203F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_255)
{
    // 03FD 0062;	
    // (Ͻ) GREEK CAPITAL REVERSED LUNATE SIGMA SYMBOL	[203F 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03FD, 0x0062 };
    uint32_t const ces[9] = { 0x203F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_256)
{
    // 037D 0021;	
    // (ͽ) GREEK SMALL REVERSED DOTTED LUNATE SIGMA SYMBOL	[2040 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x037D, 0x0021 };
    uint32_t const ces[9] = { 0x2040, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_257)
{
    // 03FF 0021;	
    // (Ͽ) GREEK CAPITAL REVERSED DOTTED LUNATE SIGMA SYMBOL	[2040 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03FF, 0x0021 };
    uint32_t const ces[9] = { 0x2040, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_258)
{
    // 037D 003F;	
    // (ͽ) GREEK SMALL REVERSED DOTTED LUNATE SIGMA SYMBOL	[2040 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x037D, 0x003F };
    uint32_t const ces[9] = { 0x2040, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_259)
{
    // 03FF 003F;	
    // (Ͽ) GREEK CAPITAL REVERSED DOTTED LUNATE SIGMA SYMBOL	[2040 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03FF, 0x003F };
    uint32_t const ces[9] = { 0x2040, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_260)
{
    // 037D 0061;	
    // (ͽ) GREEK SMALL REVERSED DOTTED LUNATE SIGMA SYMBOL	[2040 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x037D, 0x0061 };
    uint32_t const ces[9] = { 0x2040, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_261)
{
    // 037D 0041;	
    // (ͽ) GREEK SMALL REVERSED DOTTED LUNATE SIGMA SYMBOL	[2040 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x037D, 0x0041 };
    uint32_t const ces[9] = { 0x2040, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_262)
{
    // 03FF 0061;	
    // (Ͽ) GREEK CAPITAL REVERSED DOTTED LUNATE SIGMA SYMBOL	[2040 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03FF, 0x0061 };
    uint32_t const ces[9] = { 0x2040, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_263)
{
    // 03FF 0041;	
    // (Ͽ) GREEK CAPITAL REVERSED DOTTED LUNATE SIGMA SYMBOL	[2040 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x03FF, 0x0041 };
    uint32_t const ces[9] = { 0x2040, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_264)
{
    // 037D 0062;	
    // (ͽ) GREEK SMALL REVERSED DOTTED LUNATE SIGMA SYMBOL	[2040 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x037D, 0x0062 };
    uint32_t const ces[9] = { 0x2040, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_265)
{
    // 03FF 0062;	
    // (Ͽ) GREEK CAPITAL REVERSED DOTTED LUNATE SIGMA SYMBOL	[2040 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03FF, 0x0062 };
    uint32_t const ces[9] = { 0x2040, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_266)
{
    // 03C4 0021;	
    // (τ) GREEK SMALL LETTER TAU	[2041 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C4, 0x0021 };
    uint32_t const ces[9] = { 0x2041, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_267)
{
    // 1D6D5 0021;	
    // (𝛕) MATHEMATICAL BOLD SMALL TAU	[2041 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D5, 0x0021 };
    uint32_t const ces[9] = { 0x2041, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_268)
{
    // 1D70F 0021;	
    // (𝜏) MATHEMATICAL ITALIC SMALL TAU	[2041 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D70F, 0x0021 };
    uint32_t const ces[9] = { 0x2041, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_269)
{
    // 1D749 0021;	
    // (𝝉) MATHEMATICAL BOLD ITALIC SMALL TAU	[2041 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D749, 0x0021 };
    uint32_t const ces[9] = { 0x2041, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_270)
{
    // 1D783 0021;	
    // (𝞃) MATHEMATICAL SANS-SERIF BOLD SMALL TAU	[2041 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D783, 0x0021 };
    uint32_t const ces[9] = { 0x2041, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_271)
{
    // 1D7BD 0021;	
    // (𝞽) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL TAU	[2041 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7BD, 0x0021 };
    uint32_t const ces[9] = { 0x2041, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_272)
{
    // 03A4 0021;	
    // (Τ) GREEK CAPITAL LETTER TAU	[2041 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A4, 0x0021 };
    uint32_t const ces[9] = { 0x2041, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_273)
{
    // 1D6BB 0021;	
    // (𝚻) MATHEMATICAL BOLD CAPITAL TAU	[2041 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6BB, 0x0021 };
    uint32_t const ces[9] = { 0x2041, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_274)
{
    // 1D6F5 0021;	
    // (𝛵) MATHEMATICAL ITALIC CAPITAL TAU	[2041 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F5, 0x0021 };
    uint32_t const ces[9] = { 0x2041, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_275)
{
    // 1D72F 0021;	
    // (𝜯) MATHEMATICAL BOLD ITALIC CAPITAL TAU	[2041 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D72F, 0x0021 };
    uint32_t const ces[9] = { 0x2041, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_276)
{
    // 1D769 0021;	
    // (𝝩) MATHEMATICAL SANS-SERIF BOLD CAPITAL TAU	[2041 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D769, 0x0021 };
    uint32_t const ces[9] = { 0x2041, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_277)
{
    // 1D7A3 0021;	
    // (𝞣) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL TAU	[2041 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A3, 0x0021 };
    uint32_t const ces[9] = { 0x2041, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_278)
{
    // 03C4 003F;	
    // (τ) GREEK SMALL LETTER TAU	[2041 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C4, 0x003F };
    uint32_t const ces[9] = { 0x2041, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_279)
{
    // 1D6D5 003F;	
    // (𝛕) MATHEMATICAL BOLD SMALL TAU	[2041 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D5, 0x003F };
    uint32_t const ces[9] = { 0x2041, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_280)
{
    // 1D70F 003F;	
    // (𝜏) MATHEMATICAL ITALIC SMALL TAU	[2041 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D70F, 0x003F };
    uint32_t const ces[9] = { 0x2041, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_281)
{
    // 1D749 003F;	
    // (𝝉) MATHEMATICAL BOLD ITALIC SMALL TAU	[2041 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D749, 0x003F };
    uint32_t const ces[9] = { 0x2041, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_282)
{
    // 1D783 003F;	
    // (𝞃) MATHEMATICAL SANS-SERIF BOLD SMALL TAU	[2041 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D783, 0x003F };
    uint32_t const ces[9] = { 0x2041, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_283)
{
    // 1D7BD 003F;	
    // (𝞽) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL TAU	[2041 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7BD, 0x003F };
    uint32_t const ces[9] = { 0x2041, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_284)
{
    // 03A4 003F;	
    // (Τ) GREEK CAPITAL LETTER TAU	[2041 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A4, 0x003F };
    uint32_t const ces[9] = { 0x2041, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_285)
{
    // 1D6BB 003F;	
    // (𝚻) MATHEMATICAL BOLD CAPITAL TAU	[2041 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6BB, 0x003F };
    uint32_t const ces[9] = { 0x2041, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_286)
{
    // 1D6F5 003F;	
    // (𝛵) MATHEMATICAL ITALIC CAPITAL TAU	[2041 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F5, 0x003F };
    uint32_t const ces[9] = { 0x2041, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_287)
{
    // 1D72F 003F;	
    // (𝜯) MATHEMATICAL BOLD ITALIC CAPITAL TAU	[2041 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D72F, 0x003F };
    uint32_t const ces[9] = { 0x2041, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_288)
{
    // 1D769 003F;	
    // (𝝩) MATHEMATICAL SANS-SERIF BOLD CAPITAL TAU	[2041 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D769, 0x003F };
    uint32_t const ces[9] = { 0x2041, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_289)
{
    // 1D7A3 003F;	
    // (𝞣) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL TAU	[2041 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A3, 0x003F };
    uint32_t const ces[9] = { 0x2041, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_290)
{
    // 03C4 0061;	
    // (τ) GREEK SMALL LETTER TAU	[2041 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C4, 0x0061 };
    uint32_t const ces[9] = { 0x2041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_291)
{
    // 03C4 0041;	
    // (τ) GREEK SMALL LETTER TAU	[2041 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x03C4, 0x0041 };
    uint32_t const ces[9] = { 0x2041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_292)
{
    // 1D6D5 0061;	
    // (𝛕) MATHEMATICAL BOLD SMALL TAU	[2041 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D5, 0x0061 };
    uint32_t const ces[9] = { 0x2041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_293)
{
    // 1D70F 0061;	
    // (𝜏) MATHEMATICAL ITALIC SMALL TAU	[2041 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D70F, 0x0061 };
    uint32_t const ces[9] = { 0x2041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_294)
{
    // 1D749 0061;	
    // (𝝉) MATHEMATICAL BOLD ITALIC SMALL TAU	[2041 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D749, 0x0061 };
    uint32_t const ces[9] = { 0x2041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_295)
{
    // 1D783 0061;	
    // (𝞃) MATHEMATICAL SANS-SERIF BOLD SMALL TAU	[2041 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D783, 0x0061 };
    uint32_t const ces[9] = { 0x2041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_296)
{
    // 1D7BD 0061;	
    // (𝞽) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL TAU	[2041 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7BD, 0x0061 };
    uint32_t const ces[9] = { 0x2041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_297)
{
    // 1D6D5 0041;	
    // (𝛕) MATHEMATICAL BOLD SMALL TAU	[2041 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6D5, 0x0041 };
    uint32_t const ces[9] = { 0x2041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_298)
{
    // 1D70F 0041;	
    // (𝜏) MATHEMATICAL ITALIC SMALL TAU	[2041 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D70F, 0x0041 };
    uint32_t const ces[9] = { 0x2041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_299)
{
    // 1D749 0041;	
    // (𝝉) MATHEMATICAL BOLD ITALIC SMALL TAU	[2041 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D749, 0x0041 };
    uint32_t const ces[9] = { 0x2041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_300)
{
    // 1D783 0041;	
    // (𝞃) MATHEMATICAL SANS-SERIF BOLD SMALL TAU	[2041 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D783, 0x0041 };
    uint32_t const ces[9] = { 0x2041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_301)
{
    // 1D7BD 0041;	
    // (𝞽) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL TAU	[2041 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7BD, 0x0041 };
    uint32_t const ces[9] = { 0x2041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_302)
{
    // 03A4 0061;	
    // (Τ) GREEK CAPITAL LETTER TAU	[2041 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A4, 0x0061 };
    uint32_t const ces[9] = { 0x2041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_303)
{
    // 03A4 0041;	
    // (Τ) GREEK CAPITAL LETTER TAU	[2041 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x03A4, 0x0041 };
    uint32_t const ces[9] = { 0x2041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_304)
{
    // 1D6BB 0061;	
    // (𝚻) MATHEMATICAL BOLD CAPITAL TAU	[2041 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6BB, 0x0061 };
    uint32_t const ces[9] = { 0x2041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_305)
{
    // 1D6F5 0061;	
    // (𝛵) MATHEMATICAL ITALIC CAPITAL TAU	[2041 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F5, 0x0061 };
    uint32_t const ces[9] = { 0x2041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_306)
{
    // 1D72F 0061;	
    // (𝜯) MATHEMATICAL BOLD ITALIC CAPITAL TAU	[2041 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D72F, 0x0061 };
    uint32_t const ces[9] = { 0x2041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_307)
{
    // 1D769 0061;	
    // (𝝩) MATHEMATICAL SANS-SERIF BOLD CAPITAL TAU	[2041 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D769, 0x0061 };
    uint32_t const ces[9] = { 0x2041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_308)
{
    // 1D7A3 0061;	
    // (𝞣) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL TAU	[2041 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A3, 0x0061 };
    uint32_t const ces[9] = { 0x2041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_309)
{
    // 1D6BB 0041;	
    // (𝚻) MATHEMATICAL BOLD CAPITAL TAU	[2041 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6BB, 0x0041 };
    uint32_t const ces[9] = { 0x2041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_310)
{
    // 1D6F5 0041;	
    // (𝛵) MATHEMATICAL ITALIC CAPITAL TAU	[2041 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6F5, 0x0041 };
    uint32_t const ces[9] = { 0x2041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_311)
{
    // 1D72F 0041;	
    // (𝜯) MATHEMATICAL BOLD ITALIC CAPITAL TAU	[2041 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D72F, 0x0041 };
    uint32_t const ces[9] = { 0x2041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_312)
{
    // 1D769 0041;	
    // (𝝩) MATHEMATICAL SANS-SERIF BOLD CAPITAL TAU	[2041 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D769, 0x0041 };
    uint32_t const ces[9] = { 0x2041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_313)
{
    // 1D7A3 0041;	
    // (𝞣) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL TAU	[2041 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D7A3, 0x0041 };
    uint32_t const ces[9] = { 0x2041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_314)
{
    // 03C4 0062;	
    // (τ) GREEK SMALL LETTER TAU	[2041 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C4, 0x0062 };
    uint32_t const ces[9] = { 0x2041, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_315)
{
    // 1D6D5 0062;	
    // (𝛕) MATHEMATICAL BOLD SMALL TAU	[2041 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D5, 0x0062 };
    uint32_t const ces[9] = { 0x2041, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_316)
{
    // 1D70F 0062;	
    // (𝜏) MATHEMATICAL ITALIC SMALL TAU	[2041 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D70F, 0x0062 };
    uint32_t const ces[9] = { 0x2041, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_317)
{
    // 1D749 0062;	
    // (𝝉) MATHEMATICAL BOLD ITALIC SMALL TAU	[2041 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D749, 0x0062 };
    uint32_t const ces[9] = { 0x2041, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_318)
{
    // 1D783 0062;	
    // (𝞃) MATHEMATICAL SANS-SERIF BOLD SMALL TAU	[2041 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D783, 0x0062 };
    uint32_t const ces[9] = { 0x2041, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_319)
{
    // 1D7BD 0062;	
    // (𝞽) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL TAU	[2041 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7BD, 0x0062 };
    uint32_t const ces[9] = { 0x2041, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_320)
{
    // 03A4 0062;	
    // (Τ) GREEK CAPITAL LETTER TAU	[2041 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A4, 0x0062 };
    uint32_t const ces[9] = { 0x2041, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_321)
{
    // 1D6BB 0062;	
    // (𝚻) MATHEMATICAL BOLD CAPITAL TAU	[2041 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6BB, 0x0062 };
    uint32_t const ces[9] = { 0x2041, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_322)
{
    // 1D6F5 0062;	
    // (𝛵) MATHEMATICAL ITALIC CAPITAL TAU	[2041 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F5, 0x0062 };
    uint32_t const ces[9] = { 0x2041, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_323)
{
    // 1D72F 0062;	
    // (𝜯) MATHEMATICAL BOLD ITALIC CAPITAL TAU	[2041 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D72F, 0x0062 };
    uint32_t const ces[9] = { 0x2041, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_324)
{
    // 1D769 0062;	
    // (𝝩) MATHEMATICAL SANS-SERIF BOLD CAPITAL TAU	[2041 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D769, 0x0062 };
    uint32_t const ces[9] = { 0x2041, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_325)
{
    // 1D7A3 0062;	
    // (𝞣) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL TAU	[2041 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A3, 0x0062 };
    uint32_t const ces[9] = { 0x2041, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_326)
{
    // 03C5 0313 0334;	
    // (ὐ) GREEK SMALL LETTER UPSILON, COMBINING COMMA ABOVE	[2042 | 0020 004A 0022 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C5, 0x0313, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_327)
{
    // 03C5 0334 0313;	
    // (υ̴) GREEK SMALL LETTER UPSILON, COMBINING TILDE OVERLAY	[2042 | 0020 004A 0022 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C5, 0x0334, 0x0313 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_328)
{
    // 03C5 0343 0334;	
    // (ὐ) GREEK SMALL LETTER UPSILON, COMBINING GREEK KORONIS	[2042 | 0020 004A 0022 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C5, 0x0343, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_329)
{
    // 1F50 0334;	
    // (ὐ) GREEK SMALL LETTER UPSILON WITH PSILI	[2042 | 0020 004A 0022 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F50, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_330)
{
    // 03C5 0313 0301 0334;	
    // (ὔ) GREEK SMALL LETTER UPSILON, COMBINING COMMA ABOVE, COMBINING ACUTE ACCENT	[2042 | 0020 004A 0022 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C5, 0x0313, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_331)
{
    // 03C5 0313 0341 0334;	
    // (ὔ) GREEK SMALL LETTER UPSILON, COMBINING COMMA ABOVE, COMBINING ACUTE TONE MARK	[2042 | 0020 004A 0022 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C5, 0x0313, 0x0341, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_332)
{
    // 1F50 0334 0301;	
    // (ὐ̴) GREEK SMALL LETTER UPSILON WITH PSILI, COMBINING TILDE OVERLAY	[2042 | 0020 004A 0022 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F50, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_333)
{
    // 1F54 0334;	
    // (ὔ) GREEK SMALL LETTER UPSILON WITH PSILI AND OXIA	[2042 | 0020 004A 0022 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F54, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_334)
{
    // 03C5 0313 0300 0334;	
    // (ὒ) GREEK SMALL LETTER UPSILON, COMBINING COMMA ABOVE, COMBINING GRAVE ACCENT	[2042 | 0020 004A 0022 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C5, 0x0313, 0x0300, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_335)
{
    // 03C5 0313 0340 0334;	
    // (ὒ) GREEK SMALL LETTER UPSILON, COMBINING COMMA ABOVE, COMBINING GRAVE TONE MARK	[2042 | 0020 004A 0022 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C5, 0x0313, 0x0340, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_336)
{
    // 1F50 0334 0300;	
    // (ὐ̴) GREEK SMALL LETTER UPSILON WITH PSILI, COMBINING TILDE OVERLAY	[2042 | 0020 004A 0022 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F50, 0x0334, 0x0300 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_337)
{
    // 1F52 0334;	
    // (ὒ) GREEK SMALL LETTER UPSILON WITH PSILI AND VARIA	[2042 | 0020 004A 0022 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F52, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_338)
{
    // 03C5 0313 0342 0334;	
    // (ὖ) GREEK SMALL LETTER UPSILON, COMBINING COMMA ABOVE, COMBINING GREEK PERISPOMENI	[2042 | 0020 004A 0022 002A | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C5, 0x0313, 0x0342, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_339)
{
    // 03C5 0343 0342 0334;	
    // (ὖ) GREEK SMALL LETTER UPSILON, COMBINING GREEK KORONIS, COMBINING GREEK PERISPOMENI	[2042 | 0020 004A 0022 002A | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C5, 0x0343, 0x0342, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_340)
{
    // 1F50 0334 0342;	
    // (ὐ̴) GREEK SMALL LETTER UPSILON WITH PSILI, COMBINING TILDE OVERLAY	[2042 | 0020 004A 0022 002A | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F50, 0x0334, 0x0342 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_341)
{
    // 1F50 0342 0334;	
    // (ὖ) GREEK SMALL LETTER UPSILON WITH PSILI, COMBINING GREEK PERISPOMENI	[2042 | 0020 004A 0022 002A | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F50, 0x0342, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_342)
{
    // 03C5 0314 0334;	
    // (ὑ) GREEK SMALL LETTER UPSILON, COMBINING REVERSED COMMA ABOVE	[2042 | 0020 004A 0023 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C5, 0x0314, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_343)
{
    // 03C5 0334 0314;	
    // (υ̴) GREEK SMALL LETTER UPSILON, COMBINING TILDE OVERLAY	[2042 | 0020 004A 0023 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C5, 0x0334, 0x0314 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_344)
{
    // 1F51 0334;	
    // (ὑ) GREEK SMALL LETTER UPSILON WITH DASIA	[2042 | 0020 004A 0023 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F51, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_345)
{
    // 03A5 0314 0334;	
    // (Ὑ) GREEK CAPITAL LETTER UPSILON, COMBINING REVERSED COMMA ABOVE	[2042 | 0020 004A 0023 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A5, 0x0314, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_346)
{
    // 03A5 0334 0314;	
    // (Υ̴) GREEK CAPITAL LETTER UPSILON, COMBINING TILDE OVERLAY	[2042 | 0020 004A 0023 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A5, 0x0334, 0x0314 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_347)
{
    // 1F59 0334;	
    // (Ὑ) GREEK CAPITAL LETTER UPSILON WITH DASIA	[2042 | 0020 004A 0023 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F59, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_348)
{
    // 03C5 0314 0301 0334;	
    // (ὕ) GREEK SMALL LETTER UPSILON, COMBINING REVERSED COMMA ABOVE, COMBINING ACUTE ACCENT	[2042 | 0020 004A 0023 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C5, 0x0314, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_349)
{
    // 03C5 0314 0341 0334;	
    // (ὕ) GREEK SMALL LETTER UPSILON, COMBINING REVERSED COMMA ABOVE, COMBINING ACUTE TONE MARK	[2042 | 0020 004A 0023 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C5, 0x0314, 0x0341, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_350)
{
    // 1F51 0301 0334;	
    // (ὕ) GREEK SMALL LETTER UPSILON WITH DASIA, COMBINING ACUTE ACCENT	[2042 | 0020 004A 0023 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F51, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_351)
{
    // 1F51 0341 0334;	
    // (ὕ) GREEK SMALL LETTER UPSILON WITH DASIA, COMBINING ACUTE TONE MARK	[2042 | 0020 004A 0023 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F51, 0x0341, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_352)
{
    // 03A5 0314 0301 0334;	
    // (Ὕ) GREEK CAPITAL LETTER UPSILON, COMBINING REVERSED COMMA ABOVE, COMBINING ACUTE ACCENT	[2042 | 0020 004A 0023 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03A5, 0x0314, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_353)
{
    // 1F59 0334 0301;	
    // (Ὑ̴) GREEK CAPITAL LETTER UPSILON WITH DASIA, COMBINING TILDE OVERLAY	[2042 | 0020 004A 0023 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F59, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_354)
{
    // 1F59 0334 0341;	
    // (Ὑ̴) GREEK CAPITAL LETTER UPSILON WITH DASIA, COMBINING TILDE OVERLAY	[2042 | 0020 004A 0023 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F59, 0x0334, 0x0341 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_355)
{
    // 1F5D 0334;	
    // (Ὕ) GREEK CAPITAL LETTER UPSILON WITH DASIA AND OXIA	[2042 | 0020 004A 0023 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_356)
{
    // 03C5 0314 0300 0334;	
    // (ὓ) GREEK SMALL LETTER UPSILON, COMBINING REVERSED COMMA ABOVE, COMBINING GRAVE ACCENT	[2042 | 0020 004A 0023 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C5, 0x0314, 0x0300, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_357)
{
    // 03C5 0314 0340 0334;	
    // (ὓ) GREEK SMALL LETTER UPSILON, COMBINING REVERSED COMMA ABOVE, COMBINING GRAVE TONE MARK	[2042 | 0020 004A 0023 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C5, 0x0314, 0x0340, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_358)
{
    // 1F51 0300 0334;	
    // (ὓ) GREEK SMALL LETTER UPSILON WITH DASIA, COMBINING GRAVE ACCENT	[2042 | 0020 004A 0023 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F51, 0x0300, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_359)
{
    // 1F51 0340 0334;	
    // (ὓ) GREEK SMALL LETTER UPSILON WITH DASIA, COMBINING GRAVE TONE MARK	[2042 | 0020 004A 0023 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F51, 0x0340, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_360)
{
    // 03A5 0314 0300 0334;	
    // (Ὓ) GREEK CAPITAL LETTER UPSILON, COMBINING REVERSED COMMA ABOVE, COMBINING GRAVE ACCENT	[2042 | 0020 004A 0023 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03A5, 0x0314, 0x0300, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_361)
{
    // 03A5 0314 0340 0334;	
    // (Ὓ) GREEK CAPITAL LETTER UPSILON, COMBINING REVERSED COMMA ABOVE, COMBINING GRAVE TONE MARK	[2042 | 0020 004A 0023 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03A5, 0x0314, 0x0340, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_362)
{
    // 1F59 0334 0300;	
    // (Ὑ̴) GREEK CAPITAL LETTER UPSILON WITH DASIA, COMBINING TILDE OVERLAY	[2042 | 0020 004A 0023 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F59, 0x0334, 0x0300 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_363)
{
    // 1F59 0334 0340;	
    // (Ὑ̴) GREEK CAPITAL LETTER UPSILON WITH DASIA, COMBINING TILDE OVERLAY	[2042 | 0020 004A 0023 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F59, 0x0334, 0x0340 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_364)
{
    // 03C5 0314 0342 0334;	
    // (ὗ) GREEK SMALL LETTER UPSILON, COMBINING REVERSED COMMA ABOVE, COMBINING GREEK PERISPOMENI	[2042 | 0020 004A 0023 002A | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C5, 0x0314, 0x0342, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_365)
{
    // 03C5 0334 0314 0342;	
    // (ὑ̴) GREEK SMALL LETTER UPSILON, COMBINING TILDE OVERLAY, COMBINING REVERSED COMMA ABOVE	[2042 | 0020 004A 0023 002A | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C5, 0x0334, 0x0314, 0x0342 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_366)
{
    // 1F51 0334 0342;	
    // (ὑ̴) GREEK SMALL LETTER UPSILON WITH DASIA, COMBINING TILDE OVERLAY	[2042 | 0020 004A 0023 002A | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F51, 0x0334, 0x0342 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_367)
{
    // 1F51 0342 0334;	
    // (ὗ) GREEK SMALL LETTER UPSILON WITH DASIA, COMBINING GREEK PERISPOMENI	[2042 | 0020 004A 0023 002A | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F51, 0x0342, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_368)
{
    // 03A5 0314 0334 0342;	
    // (Ὑ̴) GREEK CAPITAL LETTER UPSILON, COMBINING REVERSED COMMA ABOVE, COMBINING TILDE OVERLAY	[2042 | 0020 004A 0023 002A | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03A5, 0x0314, 0x0334, 0x0342 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_369)
{
    // 03A5 0314 0342 0334;	
    // (Ὗ) GREEK CAPITAL LETTER UPSILON, COMBINING REVERSED COMMA ABOVE, COMBINING GREEK PERISPOMENI	[2042 | 0020 004A 0023 002A | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03A5, 0x0314, 0x0342, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_370)
{
    // 1F59 0334 0342;	
    // (Ὑ̴) GREEK CAPITAL LETTER UPSILON WITH DASIA, COMBINING TILDE OVERLAY	[2042 | 0020 004A 0023 002A | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F59, 0x0334, 0x0342 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_371)
{
    // 1F5F 0334;	
    // (Ὗ) GREEK CAPITAL LETTER UPSILON WITH DASIA AND PERISPOMENI	[2042 | 0020 004A 0023 002A | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_372)
{
    // 03C5 0301 0334;	
    // (ύ) GREEK SMALL LETTER UPSILON, COMBINING ACUTE ACCENT	[2042 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C5, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_373)
{
    // 03C5 0341 0334;	
    // (ύ) GREEK SMALL LETTER UPSILON, COMBINING ACUTE TONE MARK	[2042 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C5, 0x0341, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_374)
{
    // 03CD 0334;	
    // (ύ) GREEK SMALL LETTER UPSILON WITH TONOS	[2042 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03CD, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_375)
{
    // 1F7B 0334;	
    // (ύ) GREEK SMALL LETTER UPSILON WITH OXIA	[2042 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_376)
{
    // 038E 0334;	
    // (Ύ) GREEK CAPITAL LETTER UPSILON WITH TONOS	[2042 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x038E, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_377)
{
    // 03A5 0301 0334;	
    // (Ύ) GREEK CAPITAL LETTER UPSILON, COMBINING ACUTE ACCENT	[2042 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A5, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_378)
{
    // 03A5 0341 0334;	
    // (Ύ) GREEK CAPITAL LETTER UPSILON, COMBINING ACUTE TONE MARK	[2042 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A5, 0x0341, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_379)
{
    // 1FEB 0334;	
    // (Ύ) GREEK CAPITAL LETTER UPSILON WITH OXIA	[2042 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FEB, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_380)
{
    // 03D2 0301 0334;	
    // (ϓ) GREEK UPSILON WITH HOOK SYMBOL, COMBINING ACUTE ACCENT	[2042 | 0020 004A 0024 | 000A 0002 0002 |]

    uint32_t cps[3] = { 0x03D2, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x000A, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_381)
{
    // 03D2 0334 0301;	
    // (ϒ̴) GREEK UPSILON WITH HOOK SYMBOL, COMBINING TILDE OVERLAY	[2042 | 0020 004A 0024 | 000A 0002 0002 |]

    uint32_t cps[3] = { 0x03D2, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x000A, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_382)
{
    // 03D2 0334 0341;	
    // (ϒ̴) GREEK UPSILON WITH HOOK SYMBOL, COMBINING TILDE OVERLAY	[2042 | 0020 004A 0024 | 000A 0002 0002 |]

    uint32_t cps[3] = { 0x03D2, 0x0334, 0x0341 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x000A, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_383)
{
    // 03D3 0334;	
    // (ϓ) GREEK UPSILON WITH ACUTE AND HOOK SYMBOL	[2042 | 0020 004A 0024 | 000A 0002 0002 |]

    uint32_t cps[2] = { 0x03D3, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x000A, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_384)
{
    // 03C5 0300 0334;	
    // (ὺ) GREEK SMALL LETTER UPSILON, COMBINING GRAVE ACCENT	[2042 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C5, 0x0300, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_385)
{
    // 03C5 0334 0300;	
    // (υ̴) GREEK SMALL LETTER UPSILON, COMBINING TILDE OVERLAY	[2042 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C5, 0x0334, 0x0300 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_386)
{
    // 03C5 0340 0334;	
    // (ὺ) GREEK SMALL LETTER UPSILON, COMBINING GRAVE TONE MARK	[2042 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C5, 0x0340, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_387)
{
    // 1F7A 0334;	
    // (ὺ) GREEK SMALL LETTER UPSILON WITH VARIA	[2042 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_388)
{
    // 03A5 0300 0334;	
    // (Ὺ) GREEK CAPITAL LETTER UPSILON, COMBINING GRAVE ACCENT	[2042 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A5, 0x0300, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_389)
{
    // 03A5 0334 0300;	
    // (Υ̴) GREEK CAPITAL LETTER UPSILON, COMBINING TILDE OVERLAY	[2042 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A5, 0x0334, 0x0300 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_390)
{
    // 03A5 0340 0334;	
    // (Ὺ) GREEK CAPITAL LETTER UPSILON, COMBINING GRAVE TONE MARK	[2042 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A5, 0x0340, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_391)
{
    // 1FEA 0334;	
    // (Ὺ) GREEK CAPITAL LETTER UPSILON WITH VARIA	[2042 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FEA, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_392)
{
    // 03C5 0306 0334;	
    // (ῠ) GREEK SMALL LETTER UPSILON, COMBINING BREVE	[2042 | 0020 004A 0026 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C5, 0x0306, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_393)
{
    // 03C5 0334 0306;	
    // (υ̴) GREEK SMALL LETTER UPSILON, COMBINING TILDE OVERLAY	[2042 | 0020 004A 0026 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C5, 0x0334, 0x0306 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_394)
{
    // 1FE0 0334;	
    // (ῠ) GREEK SMALL LETTER UPSILON WITH VRACHY	[2042 | 0020 004A 0026 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE0, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_395)
{
    // 03A5 0306 0334;	
    // (Ῠ) GREEK CAPITAL LETTER UPSILON, COMBINING BREVE	[2042 | 0020 004A 0026 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A5, 0x0306, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_396)
{
    // 03A5 0334 0306;	
    // (Υ̴) GREEK CAPITAL LETTER UPSILON, COMBINING TILDE OVERLAY	[2042 | 0020 004A 0026 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A5, 0x0334, 0x0306 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_397)
{
    // 1FE8 0334;	
    // (Ῠ) GREEK CAPITAL LETTER UPSILON WITH VRACHY	[2042 | 0020 004A 0026 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FE8, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_398)
{
    // 03C5 0334 0342;	
    // (υ̴) GREEK SMALL LETTER UPSILON, COMBINING TILDE OVERLAY	[2042 | 0020 004A 002A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C5, 0x0334, 0x0342 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_399)
{
    // 03C5 0342 0334;	
    // (ῦ) GREEK SMALL LETTER UPSILON, COMBINING GREEK PERISPOMENI	[2042 | 0020 004A 002A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C5, 0x0342, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_400)
{
    // 1FE6 0334;	
    // (ῦ) GREEK SMALL LETTER UPSILON WITH PERISPOMENI	[2042 | 0020 004A 002A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE6, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_401)
{
    // 03C5 0308 0334;	
    // (ϋ) GREEK SMALL LETTER UPSILON, COMBINING DIAERESIS	[2042 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C5, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_402)
{
    // 03C5 0334 0308;	
    // (υ̴) GREEK SMALL LETTER UPSILON, COMBINING TILDE OVERLAY	[2042 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C5, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_403)
{
    // 03CB 0334;	
    // (ϋ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA	[2042 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03CB, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_404)
{
    // 03A5 0308 0334;	
    // (Ϋ) GREEK CAPITAL LETTER UPSILON, COMBINING DIAERESIS	[2042 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A5, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_405)
{
    // 03A5 0334 0308;	
    // (Υ̴) GREEK CAPITAL LETTER UPSILON, COMBINING TILDE OVERLAY	[2042 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A5, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_406)
{
    // 03AB 0334;	
    // (Ϋ) GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA	[2042 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x03AB, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_407)
{
    // 03D2 0308 0334;	
    // (ϔ) GREEK UPSILON WITH HOOK SYMBOL, COMBINING DIAERESIS	[2042 | 0020 004A 002B | 000A 0002 0002 |]

    uint32_t cps[3] = { 0x03D2, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x000A, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_408)
{
    // 03D2 0334 0308;	
    // (ϒ̴) GREEK UPSILON WITH HOOK SYMBOL, COMBINING TILDE OVERLAY	[2042 | 0020 004A 002B | 000A 0002 0002 |]

    uint32_t cps[3] = { 0x03D2, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x000A, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_409)
{
    // 03D4 0334;	
    // (ϔ) GREEK UPSILON WITH DIAERESIS AND HOOK SYMBOL	[2042 | 0020 004A 002B | 000A 0002 0002 |]

    uint32_t cps[2] = { 0x03D4, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x000A, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_410)
{
    // 03B0 0334;	
    // (ΰ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS	[2042 | 0020 004A 002B 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03B0, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x002B, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_411)
{
    // 03C5 0334 0308 0301;	
    // (ϋ̴) GREEK SMALL LETTER UPSILON, COMBINING TILDE OVERLAY, COMBINING DIAERESIS	[2042 | 0020 004A 002B 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C5, 0x0334, 0x0308, 0x0301 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x002B, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_412)
{
    // 03C5 0334 0308 0341;	
    // (ϋ̴) GREEK SMALL LETTER UPSILON, COMBINING TILDE OVERLAY, COMBINING DIAERESIS	[2042 | 0020 004A 002B 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C5, 0x0334, 0x0308, 0x0341 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x002B, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_413)
{
    // 03CB 0301 0334;	
    // (ΰ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA, COMBINING ACUTE ACCENT	[2042 | 0020 004A 002B 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03CB, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x002B, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_414)
{
    // 03C5 0334 0308 0300;	
    // (ϋ̴) GREEK SMALL LETTER UPSILON, COMBINING TILDE OVERLAY, COMBINING DIAERESIS	[2042 | 0020 004A 002B 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C5, 0x0334, 0x0308, 0x0300 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x002B, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_415)
{
    // 03CB 0300 0334;	
    // (ῢ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA, COMBINING GRAVE ACCENT	[2042 | 0020 004A 002B 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03CB, 0x0300, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x002B, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_416)
{
    // 03CB 0340 0334;	
    // (ῢ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA, COMBINING GRAVE TONE MARK	[2042 | 0020 004A 002B 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03CB, 0x0340, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x002B, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_417)
{
    // 1FE2 0334;	
    // (ῢ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND VARIA	[2042 | 0020 004A 002B 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE2, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x002B, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_418)
{
    // 03C5 0308 0334 0342;	
    // (ϋ̴) GREEK SMALL LETTER UPSILON, COMBINING DIAERESIS, COMBINING TILDE OVERLAY	[2042 | 0020 004A 002B 002A | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C5, 0x0308, 0x0334, 0x0342 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x002B, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_419)
{
    // 03C5 0308 0342 0334;	
    // (ῧ) GREEK SMALL LETTER UPSILON, COMBINING DIAERESIS, COMBINING GREEK PERISPOMENI	[2042 | 0020 004A 002B 002A | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C5, 0x0308, 0x0342, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x002B, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_420)
{
    // 03CB 0334 0342;	
    // (ϋ̴) GREEK SMALL LETTER UPSILON WITH DIALYTIKA, COMBINING TILDE OVERLAY	[2042 | 0020 004A 002B 002A | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03CB, 0x0334, 0x0342 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x002B, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_421)
{
    // 03CB 0342 0334;	
    // (ῧ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA, COMBINING GREEK PERISPOMENI	[2042 | 0020 004A 002B 002A | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03CB, 0x0342, 0x0334 };
    uint32_t const ces[12] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x002B, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_422)
{
    // 03C5 0304 0334;	
    // (ῡ) GREEK SMALL LETTER UPSILON, COMBINING MACRON	[2042 | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C5, 0x0304, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_423)
{
    // 03C5 0334 0304;	
    // (υ̴) GREEK SMALL LETTER UPSILON, COMBINING TILDE OVERLAY	[2042 | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C5, 0x0334, 0x0304 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_424)
{
    // 1FE1 0334;	
    // (ῡ) GREEK SMALL LETTER UPSILON WITH MACRON	[2042 | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE1, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_425)
{
    // 03A5 0304 0334;	
    // (Ῡ) GREEK CAPITAL LETTER UPSILON, COMBINING MACRON	[2042 | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A5, 0x0304, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_426)
{
    // 03A5 0334 0304;	
    // (Υ̴) GREEK CAPITAL LETTER UPSILON, COMBINING TILDE OVERLAY	[2042 | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A5, 0x0334, 0x0304 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_427)
{
    // 1FE9 0334;	
    // (Ῡ) GREEK CAPITAL LETTER UPSILON WITH MACRON	[2042 | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FE9, 0x0334 };
    uint32_t const ces[10] = { 0x2042, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_428)
{
    // 03C5 0021;	
    // (υ) GREEK SMALL LETTER UPSILON	[2042 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C5, 0x0021 };
    uint32_t const ces[9] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_429)
{
    // 1D6D6 0021;	
    // (𝛖) MATHEMATICAL BOLD SMALL UPSILON	[2042 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D6, 0x0021 };
    uint32_t const ces[9] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_430)
{
    // 1D710 0021;	
    // (𝜐) MATHEMATICAL ITALIC SMALL UPSILON	[2042 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D710, 0x0021 };
    uint32_t const ces[9] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_431)
{
    // 1D74A 0021;	
    // (𝝊) MATHEMATICAL BOLD ITALIC SMALL UPSILON	[2042 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D74A, 0x0021 };
    uint32_t const ces[9] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_432)
{
    // 1D784 0021;	
    // (𝞄) MATHEMATICAL SANS-SERIF BOLD SMALL UPSILON	[2042 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D784, 0x0021 };
    uint32_t const ces[9] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_433)
{
    // 1D7BE 0021;	
    // (𝞾) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL UPSILON	[2042 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7BE, 0x0021 };
    uint32_t const ces[9] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_434)
{
    // 03A5 0021;	
    // (Υ) GREEK CAPITAL LETTER UPSILON	[2042 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A5, 0x0021 };
    uint32_t const ces[9] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_435)
{
    // 03D2 0021;	
    // (ϒ) GREEK UPSILON WITH HOOK SYMBOL	[2042 0261 | 0020 0020 | 000A 0002 |]

    uint32_t cps[2] = { 0x03D2, 0x0021 };
    uint32_t const ces[9] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_436)
{
    // 1D6BC 0021;	
    // (𝚼) MATHEMATICAL BOLD CAPITAL UPSILON	[2042 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6BC, 0x0021 };
    uint32_t const ces[9] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_437)
{
    // 1D6F6 0021;	
    // (𝛶) MATHEMATICAL ITALIC CAPITAL UPSILON	[2042 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F6, 0x0021 };
    uint32_t const ces[9] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_438)
{
    // 1D730 0021;	
    // (𝜰) MATHEMATICAL BOLD ITALIC CAPITAL UPSILON	[2042 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D730, 0x0021 };
    uint32_t const ces[9] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_439)
{
    // 1D76A 0021;	
    // (𝝪) MATHEMATICAL SANS-SERIF BOLD CAPITAL UPSILON	[2042 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D76A, 0x0021 };
    uint32_t const ces[9] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_440)
{
    // 1D7A4 0021;	
    // (𝞤) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL UPSILON	[2042 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A4, 0x0021 };
    uint32_t const ces[9] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_441)
{
    // 1F50 0021;	
    // (ὐ) GREEK SMALL LETTER UPSILON WITH PSILI	[2042 0261 | 0020 0022 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F50, 0x0021 };
    uint32_t const ces[11] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_442)
{
    // 1F54 0021;	
    // (ὔ) GREEK SMALL LETTER UPSILON WITH PSILI AND OXIA	[2042 0261 | 0020 0022 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F54, 0x0021 };
    uint32_t const ces[13] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_443)
{
    // 1F52 0021;	
    // (ὒ) GREEK SMALL LETTER UPSILON WITH PSILI AND VARIA	[2042 0261 | 0020 0022 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F52, 0x0021 };
    uint32_t const ces[13] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_444)
{
    // 1F56 0021;	
    // (ὖ) GREEK SMALL LETTER UPSILON WITH PSILI AND PERISPOMENI	[2042 0261 | 0020 0022 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F56, 0x0021 };
    uint32_t const ces[13] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_445)
{
    // 1F51 0021;	
    // (ὑ) GREEK SMALL LETTER UPSILON WITH DASIA	[2042 0261 | 0020 0023 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F51, 0x0021 };
    uint32_t const ces[11] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_446)
{
    // 1F59 0021;	
    // (Ὑ) GREEK CAPITAL LETTER UPSILON WITH DASIA	[2042 0261 | 0020 0023 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F59, 0x0021 };
    uint32_t const ces[11] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_447)
{
    // 1F55 0021;	
    // (ὕ) GREEK SMALL LETTER UPSILON WITH DASIA AND OXIA	[2042 0261 | 0020 0023 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F55, 0x0021 };
    uint32_t const ces[13] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_448)
{
    // 1F5D 0021;	
    // (Ὕ) GREEK CAPITAL LETTER UPSILON WITH DASIA AND OXIA	[2042 0261 | 0020 0023 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D, 0x0021 };
    uint32_t const ces[13] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_449)
{
    // 1F53 0021;	
    // (ὓ) GREEK SMALL LETTER UPSILON WITH DASIA AND VARIA	[2042 0261 | 0020 0023 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F53, 0x0021 };
    uint32_t const ces[13] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_450)
{
    // 1F5B 0021;	
    // (Ὓ) GREEK CAPITAL LETTER UPSILON WITH DASIA AND VARIA	[2042 0261 | 0020 0023 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B, 0x0021 };
    uint32_t const ces[13] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_451)
{
    // 1F57 0021;	
    // (ὗ) GREEK SMALL LETTER UPSILON WITH DASIA AND PERISPOMENI	[2042 0261 | 0020 0023 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F57, 0x0021 };
    uint32_t const ces[13] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_452)
{
    // 1F5F 0021;	
    // (Ὗ) GREEK CAPITAL LETTER UPSILON WITH DASIA AND PERISPOMENI	[2042 0261 | 0020 0023 002A 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F, 0x0021 };
    uint32_t const ces[13] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_453)
{
    // 03CD 0021;	
    // (ύ) GREEK SMALL LETTER UPSILON WITH TONOS	[2042 0261 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03CD, 0x0021 };
    uint32_t const ces[11] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_454)
{
    // 1F7B 0021;	
    // (ύ) GREEK SMALL LETTER UPSILON WITH OXIA	[2042 0261 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B, 0x0021 };
    uint32_t const ces[11] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_455)
{
    // 038E 0021;	
    // (Ύ) GREEK CAPITAL LETTER UPSILON WITH TONOS	[2042 0261 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x038E, 0x0021 };
    uint32_t const ces[11] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_456)
{
    // 1FEB 0021;	
    // (Ύ) GREEK CAPITAL LETTER UPSILON WITH OXIA	[2042 0261 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FEB, 0x0021 };
    uint32_t const ces[11] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_457)
{
    // 03D3 0021;	
    // (ϓ) GREEK UPSILON WITH ACUTE AND HOOK SYMBOL	[2042 0261 | 0020 0024 0020 | 000A 0002 0002 |]

    uint32_t cps[2] = { 0x03D3, 0x0021 };
    uint32_t const ces[11] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x000A, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_458)
{
    // 1F7A 0021;	
    // (ὺ) GREEK SMALL LETTER UPSILON WITH VARIA	[2042 0261 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A, 0x0021 };
    uint32_t const ces[11] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_459)
{
    // 1FEA 0021;	
    // (Ὺ) GREEK CAPITAL LETTER UPSILON WITH VARIA	[2042 0261 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FEA, 0x0021 };
    uint32_t const ces[11] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_460)
{
    // 1FE0 0021;	
    // (ῠ) GREEK SMALL LETTER UPSILON WITH VRACHY	[2042 0261 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE0, 0x0021 };
    uint32_t const ces[11] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_461)
{
    // 1FE8 0021;	
    // (Ῠ) GREEK CAPITAL LETTER UPSILON WITH VRACHY	[2042 0261 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FE8, 0x0021 };
    uint32_t const ces[11] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_462)
{
    // 1FE6 0021;	
    // (ῦ) GREEK SMALL LETTER UPSILON WITH PERISPOMENI	[2042 0261 | 0020 002A 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE6, 0x0021 };
    uint32_t const ces[11] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_463)
{
    // 03CB 0021;	
    // (ϋ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA	[2042 0261 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03CB, 0x0021 };
    uint32_t const ces[11] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_464)
{
    // 03AB 0021;	
    // (Ϋ) GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA	[2042 0261 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x03AB, 0x0021 };
    uint32_t const ces[11] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_465)
{
    // 03D4 0021;	
    // (ϔ) GREEK UPSILON WITH DIAERESIS AND HOOK SYMBOL	[2042 0261 | 0020 002B 0020 | 000A 0002 0002 |]

    uint32_t cps[2] = { 0x03D4, 0x0021 };
    uint32_t const ces[11] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x000A, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_466)
{
    // 03B0 0021;	
    // (ΰ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS	[2042 0261 | 0020 002B 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03B0, 0x0021 };
    uint32_t const ces[13] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_467)
{
    // 1FE3 0021;	
    // (ΰ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA	[2042 0261 | 0020 002B 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE3, 0x0021 };
    uint32_t const ces[13] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_468)
{
    // 1FE2 0021;	
    // (ῢ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND VARIA	[2042 0261 | 0020 002B 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE2, 0x0021 };
    uint32_t const ces[13] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x002B, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_469)
{
    // 1FE7 0021;	
    // (ῧ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND PERISPOMENI	[2042 0261 | 0020 002B 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE7, 0x0021 };
    uint32_t const ces[13] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x002B, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_470)
{
    // 1FE1 0021;	
    // (ῡ) GREEK SMALL LETTER UPSILON WITH MACRON	[2042 0261 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE1, 0x0021 };
    uint32_t const ces[11] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_471)
{
    // 1FE9 0021;	
    // (Ῡ) GREEK CAPITAL LETTER UPSILON WITH MACRON	[2042 0261 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FE9, 0x0021 };
    uint32_t const ces[11] = { 0x2042, 0x0261, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_472)
{
    // 03C5 003F;	
    // (υ) GREEK SMALL LETTER UPSILON	[2042 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C5, 0x003F };
    uint32_t const ces[9] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_473)
{
    // 1D6D6 003F;	
    // (𝛖) MATHEMATICAL BOLD SMALL UPSILON	[2042 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D6, 0x003F };
    uint32_t const ces[9] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_474)
{
    // 1D710 003F;	
    // (𝜐) MATHEMATICAL ITALIC SMALL UPSILON	[2042 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D710, 0x003F };
    uint32_t const ces[9] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_475)
{
    // 1D74A 003F;	
    // (𝝊) MATHEMATICAL BOLD ITALIC SMALL UPSILON	[2042 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D74A, 0x003F };
    uint32_t const ces[9] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_476)
{
    // 1D784 003F;	
    // (𝞄) MATHEMATICAL SANS-SERIF BOLD SMALL UPSILON	[2042 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D784, 0x003F };
    uint32_t const ces[9] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_477)
{
    // 1D7BE 003F;	
    // (𝞾) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL UPSILON	[2042 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7BE, 0x003F };
    uint32_t const ces[9] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_478)
{
    // 03A5 003F;	
    // (Υ) GREEK CAPITAL LETTER UPSILON	[2042 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A5, 0x003F };
    uint32_t const ces[9] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_479)
{
    // 03D2 003F;	
    // (ϒ) GREEK UPSILON WITH HOOK SYMBOL	[2042 0267 | 0020 0020 | 000A 0002 |]

    uint32_t cps[2] = { 0x03D2, 0x003F };
    uint32_t const ces[9] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_480)
{
    // 1D6BC 003F;	
    // (𝚼) MATHEMATICAL BOLD CAPITAL UPSILON	[2042 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6BC, 0x003F };
    uint32_t const ces[9] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_481)
{
    // 1D6F6 003F;	
    // (𝛶) MATHEMATICAL ITALIC CAPITAL UPSILON	[2042 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F6, 0x003F };
    uint32_t const ces[9] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_482)
{
    // 1D730 003F;	
    // (𝜰) MATHEMATICAL BOLD ITALIC CAPITAL UPSILON	[2042 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D730, 0x003F };
    uint32_t const ces[9] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_483)
{
    // 1D76A 003F;	
    // (𝝪) MATHEMATICAL SANS-SERIF BOLD CAPITAL UPSILON	[2042 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D76A, 0x003F };
    uint32_t const ces[9] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_484)
{
    // 1D7A4 003F;	
    // (𝞤) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL UPSILON	[2042 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A4, 0x003F };
    uint32_t const ces[9] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_485)
{
    // 1F50 003F;	
    // (ὐ) GREEK SMALL LETTER UPSILON WITH PSILI	[2042 0267 | 0020 0022 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F50, 0x003F };
    uint32_t const ces[11] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_486)
{
    // 1F54 003F;	
    // (ὔ) GREEK SMALL LETTER UPSILON WITH PSILI AND OXIA	[2042 0267 | 0020 0022 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F54, 0x003F };
    uint32_t const ces[13] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_487)
{
    // 1F52 003F;	
    // (ὒ) GREEK SMALL LETTER UPSILON WITH PSILI AND VARIA	[2042 0267 | 0020 0022 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F52, 0x003F };
    uint32_t const ces[13] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_488)
{
    // 1F56 003F;	
    // (ὖ) GREEK SMALL LETTER UPSILON WITH PSILI AND PERISPOMENI	[2042 0267 | 0020 0022 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F56, 0x003F };
    uint32_t const ces[13] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_489)
{
    // 1F51 003F;	
    // (ὑ) GREEK SMALL LETTER UPSILON WITH DASIA	[2042 0267 | 0020 0023 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F51, 0x003F };
    uint32_t const ces[11] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_490)
{
    // 1F59 003F;	
    // (Ὑ) GREEK CAPITAL LETTER UPSILON WITH DASIA	[2042 0267 | 0020 0023 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F59, 0x003F };
    uint32_t const ces[11] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_491)
{
    // 1F55 003F;	
    // (ὕ) GREEK SMALL LETTER UPSILON WITH DASIA AND OXIA	[2042 0267 | 0020 0023 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F55, 0x003F };
    uint32_t const ces[13] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_492)
{
    // 1F5D 003F;	
    // (Ὕ) GREEK CAPITAL LETTER UPSILON WITH DASIA AND OXIA	[2042 0267 | 0020 0023 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D, 0x003F };
    uint32_t const ces[13] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_493)
{
    // 1F53 003F;	
    // (ὓ) GREEK SMALL LETTER UPSILON WITH DASIA AND VARIA	[2042 0267 | 0020 0023 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F53, 0x003F };
    uint32_t const ces[13] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_494)
{
    // 1F5B 003F;	
    // (Ὓ) GREEK CAPITAL LETTER UPSILON WITH DASIA AND VARIA	[2042 0267 | 0020 0023 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B, 0x003F };
    uint32_t const ces[13] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_495)
{
    // 1F57 003F;	
    // (ὗ) GREEK SMALL LETTER UPSILON WITH DASIA AND PERISPOMENI	[2042 0267 | 0020 0023 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F57, 0x003F };
    uint32_t const ces[13] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_496)
{
    // 1F5F 003F;	
    // (Ὗ) GREEK CAPITAL LETTER UPSILON WITH DASIA AND PERISPOMENI	[2042 0267 | 0020 0023 002A 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F, 0x003F };
    uint32_t const ces[13] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_497)
{
    // 03CD 003F;	
    // (ύ) GREEK SMALL LETTER UPSILON WITH TONOS	[2042 0267 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03CD, 0x003F };
    uint32_t const ces[11] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_498)
{
    // 1F7B 003F;	
    // (ύ) GREEK SMALL LETTER UPSILON WITH OXIA	[2042 0267 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B, 0x003F };
    uint32_t const ces[11] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_133_499)
{
    // 038E 003F;	
    // (Ύ) GREEK CAPITAL LETTER UPSILON WITH TONOS	[2042 0267 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x038E, 0x003F };
    uint32_t const ces[11] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

