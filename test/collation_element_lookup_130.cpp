// Warning! This file is autogenerated.
#include <boost/text/detail/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_130_000)
{
    // 10C07 ; [.3849.0020.0002] 
    // OLD TURKIC LETTER ORKHON OE

    uint32_t const cps[1] = { 0x10c07 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3849), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_001)
{
    // 10C08 ; [.3849.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI OE

    uint32_t const cps[1] = { 0x10c08 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3849), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_002)
{
    // 10C09 ; [.384A.0020.0002] 
    // OLD TURKIC LETTER ORKHON AB

    uint32_t const cps[1] = { 0x10c09 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x384a), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_003)
{
    // 10C0A ; [.384A.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI AB

    uint32_t const cps[1] = { 0x10c0a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x384a), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_004)
{
    // 10C0B ; [.384B.0020.0002] 
    // OLD TURKIC LETTER ORKHON AEB

    uint32_t const cps[1] = { 0x10c0b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x384b), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_005)
{
    // 10C0C ; [.384B.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI AEB

    uint32_t const cps[1] = { 0x10c0c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x384b), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_006)
{
    // 10C0D ; [.384C.0020.0002] 
    // OLD TURKIC LETTER ORKHON AG

    uint32_t const cps[1] = { 0x10c0d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x384c), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_007)
{
    // 10C0E ; [.384C.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI AG

    uint32_t const cps[1] = { 0x10c0e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x384c), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_008)
{
    // 10C0F ; [.384D.0020.0002] 
    // OLD TURKIC LETTER ORKHON AEG

    uint32_t const cps[1] = { 0x10c0f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x384d), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_009)
{
    // 10C10 ; [.384D.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI AEG

    uint32_t const cps[1] = { 0x10c10 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x384d), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_010)
{
    // 10C11 ; [.384E.0020.0002] 
    // OLD TURKIC LETTER ORKHON AD

    uint32_t const cps[1] = { 0x10c11 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x384e), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_011)
{
    // 10C12 ; [.384E.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI AD

    uint32_t const cps[1] = { 0x10c12 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x384e), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_012)
{
    // 10C13 ; [.384F.0020.0002] 
    // OLD TURKIC LETTER ORKHON AED

    uint32_t const cps[1] = { 0x10c13 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x384f), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_013)
{
    // 10C14 ; [.3850.0020.0002] 
    // OLD TURKIC LETTER ORKHON EZ

    uint32_t const cps[1] = { 0x10c14 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3850), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_014)
{
    // 10C15 ; [.3850.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI EZ

    uint32_t const cps[1] = { 0x10c15 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3850), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_015)
{
    // 10C16 ; [.3851.0020.0002] 
    // OLD TURKIC LETTER ORKHON AY

    uint32_t const cps[1] = { 0x10c16 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3851), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_016)
{
    // 10C17 ; [.3851.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI AY

    uint32_t const cps[1] = { 0x10c17 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3851), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_017)
{
    // 10C18 ; [.3852.0020.0002] 
    // OLD TURKIC LETTER ORKHON AEY

    uint32_t const cps[1] = { 0x10c18 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3852), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_018)
{
    // 10C19 ; [.3852.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI AEY

    uint32_t const cps[1] = { 0x10c19 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3852), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_019)
{
    // 10C1A ; [.3853.0020.0002] 
    // OLD TURKIC LETTER ORKHON AEK

    uint32_t const cps[1] = { 0x10c1a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3853), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_020)
{
    // 10C1B ; [.3853.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI AEK

    uint32_t const cps[1] = { 0x10c1b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3853), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_021)
{
    // 10C1C ; [.3854.0020.0002] 
    // OLD TURKIC LETTER ORKHON OEK

    uint32_t const cps[1] = { 0x10c1c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3854), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_022)
{
    // 10C1D ; [.3854.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI OEK

    uint32_t const cps[1] = { 0x10c1d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3854), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_023)
{
    // 10C1E ; [.3855.0020.0002] 
    // OLD TURKIC LETTER ORKHON AL

    uint32_t const cps[1] = { 0x10c1e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3855), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_024)
{
    // 10C1F ; [.3855.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI AL

    uint32_t const cps[1] = { 0x10c1f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3855), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_025)
{
    // 10C20 ; [.3856.0020.0002] 
    // OLD TURKIC LETTER ORKHON AEL

    uint32_t const cps[1] = { 0x10c20 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3856), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_026)
{
    // 10C21 ; [.3857.0020.0002] 
    // OLD TURKIC LETTER ORKHON ELT

    uint32_t const cps[1] = { 0x10c21 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3857), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_027)
{
    // 10C22 ; [.3858.0020.0002] 
    // OLD TURKIC LETTER ORKHON EM

    uint32_t const cps[1] = { 0x10c22 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3858), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_028)
{
    // 10C23 ; [.3859.0020.0002] 
    // OLD TURKIC LETTER ORKHON AN

    uint32_t const cps[1] = { 0x10c23 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3859), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_029)
{
    // 10C24 ; [.385A.0020.0002] 
    // OLD TURKIC LETTER ORKHON AEN

    uint32_t const cps[1] = { 0x10c24 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x385a), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_030)
{
    // 10C25 ; [.385A.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI AEN

    uint32_t const cps[1] = { 0x10c25 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x385a), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_031)
{
    // 10C26 ; [.385B.0020.0002] 
    // OLD TURKIC LETTER ORKHON ENT

    uint32_t const cps[1] = { 0x10c26 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x385b), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_032)
{
    // 10C27 ; [.385B.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI ENT

    uint32_t const cps[1] = { 0x10c27 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x385b), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_033)
{
    // 10C28 ; [.385C.0020.0002] 
    // OLD TURKIC LETTER ORKHON ENC

    uint32_t const cps[1] = { 0x10c28 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x385c), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_034)
{
    // 10C29 ; [.385C.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI ENC

    uint32_t const cps[1] = { 0x10c29 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x385c), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_035)
{
    // 10C2A ; [.385D.0020.0002] 
    // OLD TURKIC LETTER ORKHON ENY

    uint32_t const cps[1] = { 0x10c2a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x385d), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_036)
{
    // 10C2B ; [.385D.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI ENY

    uint32_t const cps[1] = { 0x10c2b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x385d), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_037)
{
    // 10C2C ; [.385E.0020.0002] 
    // OLD TURKIC LETTER YENISEI ANG

    uint32_t const cps[1] = { 0x10c2c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x385e), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_038)
{
    // 10C2D ; [.385F.0020.0002] 
    // OLD TURKIC LETTER ORKHON ENG

    uint32_t const cps[1] = { 0x10c2d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x385f), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_039)
{
    // 10C2E ; [.385F.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI AENG

    uint32_t const cps[1] = { 0x10c2e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x385f), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_040)
{
    // 10C2F ; [.3860.0020.0002] 
    // OLD TURKIC LETTER ORKHON EP

    uint32_t const cps[1] = { 0x10c2f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3860), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_041)
{
    // 10C30 ; [.3861.0020.0002] 
    // OLD TURKIC LETTER ORKHON OP

    uint32_t const cps[1] = { 0x10c30 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3861), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_042)
{
    // 10C31 ; [.3862.0020.0002] 
    // OLD TURKIC LETTER ORKHON IC

    uint32_t const cps[1] = { 0x10c31 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3862), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_043)
{
    // 10C32 ; [.3863.0020.0002] 
    // OLD TURKIC LETTER ORKHON EC

    uint32_t const cps[1] = { 0x10c32 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3863), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_044)
{
    // 10C33 ; [.3863.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI EC

    uint32_t const cps[1] = { 0x10c33 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3863), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_045)
{
    // 10C34 ; [.3864.0020.0002] 
    // OLD TURKIC LETTER ORKHON AQ

    uint32_t const cps[1] = { 0x10c34 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3864), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_046)
{
    // 10C35 ; [.3864.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI AQ

    uint32_t const cps[1] = { 0x10c35 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3864), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_047)
{
    // 10C36 ; [.3865.0020.0002] 
    // OLD TURKIC LETTER ORKHON IQ

    uint32_t const cps[1] = { 0x10c36 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3865), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_048)
{
    // 10C37 ; [.3865.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI IQ

    uint32_t const cps[1] = { 0x10c37 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3865), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_049)
{
    // 10C38 ; [.3866.0020.0002] 
    // OLD TURKIC LETTER ORKHON OQ

    uint32_t const cps[1] = { 0x10c38 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3866), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_050)
{
    // 10C39 ; [.3866.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI OQ

    uint32_t const cps[1] = { 0x10c39 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3866), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_051)
{
    // 10C3A ; [.3867.0020.0002] 
    // OLD TURKIC LETTER ORKHON AR

    uint32_t const cps[1] = { 0x10c3a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3867), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_052)
{
    // 10C3B ; [.3867.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI AR

    uint32_t const cps[1] = { 0x10c3b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3867), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_053)
{
    // 10C3C ; [.3868.0020.0002] 
    // OLD TURKIC LETTER ORKHON AER

    uint32_t const cps[1] = { 0x10c3c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3868), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_054)
{
    // 10C3D ; [.3869.0020.0002] 
    // OLD TURKIC LETTER ORKHON AS

    uint32_t const cps[1] = { 0x10c3d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3869), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_055)
{
    // 10C3E ; [.386A.0020.0002] 
    // OLD TURKIC LETTER ORKHON AES

    uint32_t const cps[1] = { 0x10c3e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x386a), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_056)
{
    // 10C3F ; [.386B.0020.0002] 
    // OLD TURKIC LETTER ORKHON ASH

    uint32_t const cps[1] = { 0x10c3f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x386b), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_057)
{
    // 10C40 ; [.386B.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI ASH

    uint32_t const cps[1] = { 0x10c40 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x386b), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_058)
{
    // 10C41 ; [.386C.0020.0002] 
    // OLD TURKIC LETTER ORKHON ESH

    uint32_t const cps[1] = { 0x10c41 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x386c), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_059)
{
    // 10C42 ; [.386C.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI ESH

    uint32_t const cps[1] = { 0x10c42 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x386c), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_060)
{
    // 10C43 ; [.386D.0020.0002] 
    // OLD TURKIC LETTER ORKHON AT

    uint32_t const cps[1] = { 0x10c43 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x386d), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_061)
{
    // 10C44 ; [.386D.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI AT

    uint32_t const cps[1] = { 0x10c44 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x386d), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_062)
{
    // 10C45 ; [.386E.0020.0002] 
    // OLD TURKIC LETTER ORKHON AET

    uint32_t const cps[1] = { 0x10c45 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x386e), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_063)
{
    // 10C46 ; [.386E.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI AET

    uint32_t const cps[1] = { 0x10c46 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x386e), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_064)
{
    // 10C47 ; [.386F.0020.0002] 
    // OLD TURKIC LETTER ORKHON OT

    uint32_t const cps[1] = { 0x10c47 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x386f), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_065)
{
    // 10C48 ; [.3870.0020.0002] 
    // OLD TURKIC LETTER ORKHON BASH

    uint32_t const cps[1] = { 0x10c48 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3870), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_066)
{
    // 10C80 ; [.381B.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER A

    uint32_t const cps[1] = { 0x10c80 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x381b), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_067)
{
    // 10C81 ; [.381B.0020.000A][.0000.0111.0004] 
    // OLD HUNGARIAN CAPITAL LETTER AA

    uint32_t const cps[1] = { 0x10c81 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x381b), uint8_t(0x1), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_068)
{
    // 10C82 ; [.381C.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER EB

    uint32_t const cps[1] = { 0x10c82 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x381c), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_069)
{
    // 10C83 ; [.381D.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER AMB

    uint32_t const cps[1] = { 0x10c83 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x381d), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_070)
{
    // 10C84 ; [.381E.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER EC

    uint32_t const cps[1] = { 0x10c84 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x381e), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_071)
{
    // 10C85 ; [.381F.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER ENC

    uint32_t const cps[1] = { 0x10c85 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x381f), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_072)
{
    // 10C86 ; [.3820.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER ECS

    uint32_t const cps[1] = { 0x10c86 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3820), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_073)
{
    // 10C87 ; [.3821.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER ED

    uint32_t const cps[1] = { 0x10c87 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3821), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_074)
{
    // 10C88 ; [.3822.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER AND

    uint32_t const cps[1] = { 0x10c88 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3822), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_075)
{
    // 10C89 ; [.3823.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER E

    uint32_t const cps[1] = { 0x10c89 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3823), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_076)
{
    // 10C8A ; [.3823.0020.000A][.0000.0111.0004] 
    // OLD HUNGARIAN CAPITAL LETTER CLOSE E

    uint32_t const cps[1] = { 0x10c8a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3823), uint8_t(0x1), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_077)
{
    // 10C8B ; [.3823.0020.000A][.0000.0112.0004] 
    // OLD HUNGARIAN CAPITAL LETTER EE

    uint32_t const cps[1] = { 0x10c8b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3823), uint8_t(0x1), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0xf3), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_078)
{
    // 10C8C ; [.3824.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER EF

    uint32_t const cps[1] = { 0x10c8c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3824), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_079)
{
    // 10C8D ; [.3825.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER EG

    uint32_t const cps[1] = { 0x10c8d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3825), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_080)
{
    // 10C8E ; [.3826.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER EGY

    uint32_t const cps[1] = { 0x10c8e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3826), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_081)
{
    // 10C8F ; [.3827.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER EH

    uint32_t const cps[1] = { 0x10c8f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3827), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_082)
{
    // 10C90 ; [.3828.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER I

    uint32_t const cps[1] = { 0x10c90 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3828), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_083)
{
    // 10C91 ; [.3828.0020.000A][.0000.0111.0004] 
    // OLD HUNGARIAN CAPITAL LETTER II

    uint32_t const cps[1] = { 0x10c91 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3828), uint8_t(0x1), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_084)
{
    // 10C92 ; [.3829.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER EJ

    uint32_t const cps[1] = { 0x10c92 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3829), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_085)
{
    // 10C93 ; [.382A.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER EK

    uint32_t const cps[1] = { 0x10c93 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x382a), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_086)
{
    // 10C94 ; [.382B.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER AK

    uint32_t const cps[1] = { 0x10c94 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x382b), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_087)
{
    // 10C95 ; [.382C.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER UNK

    uint32_t const cps[1] = { 0x10c95 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x382c), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_088)
{
    // 10C96 ; [.382D.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER EL

    uint32_t const cps[1] = { 0x10c96 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x382d), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_089)
{
    // 10C97 ; [.382E.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER ELY

    uint32_t const cps[1] = { 0x10c97 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x382e), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_090)
{
    // 10C98 ; [.382F.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER EM

    uint32_t const cps[1] = { 0x10c98 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x382f), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_091)
{
    // 10C99 ; [.3830.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER EN

    uint32_t const cps[1] = { 0x10c99 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3830), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_092)
{
    // 10C9A ; [.3831.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER ENY

    uint32_t const cps[1] = { 0x10c9a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3831), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_093)
{
    // 10C9B ; [.3832.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER O

    uint32_t const cps[1] = { 0x10c9b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3832), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_094)
{
    // 10C9C ; [.3832.0020.000A][.0000.0111.0004] 
    // OLD HUNGARIAN CAPITAL LETTER OO

    uint32_t const cps[1] = { 0x10c9c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3832), uint8_t(0x1), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_095)
{
    // 10C9D ; [.3833.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER NIKOLSBURG OE

    uint32_t const cps[1] = { 0x10c9d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3833), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_096)
{
    // 10C9E ; [.3833.0020.000A][.0000.0111.0004] 
    // OLD HUNGARIAN CAPITAL LETTER RUDIMENTA OE

    uint32_t const cps[1] = { 0x10c9e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3833), uint8_t(0x1), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_097)
{
    // 10C9F ; [.3833.0020.000A][.0000.0112.0004] 
    // OLD HUNGARIAN CAPITAL LETTER OEE

    uint32_t const cps[1] = { 0x10c9f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3833), uint8_t(0x1), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0xf3), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_098)
{
    // 10CA0 ; [.3834.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER EP

    uint32_t const cps[1] = { 0x10ca0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3834), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_099)
{
    // 10CA1 ; [.3835.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER EMP

    uint32_t const cps[1] = { 0x10ca1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3835), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_100)
{
    // 10CA2 ; [.3836.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER ER

    uint32_t const cps[1] = { 0x10ca2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3836), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_101)
{
    // 10CA3 ; [.3836.0020.000A][.0000.0111.0004] 
    // OLD HUNGARIAN CAPITAL LETTER SHORT ER

    uint32_t const cps[1] = { 0x10ca3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3836), uint8_t(0x1), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_102)
{
    // 10CA4 ; [.3837.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER ES

    uint32_t const cps[1] = { 0x10ca4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3837), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_103)
{
    // 10CA5 ; [.3838.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER ESZ

    uint32_t const cps[1] = { 0x10ca5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3838), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_104)
{
    // 10CA6 ; [.3839.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER ET

    uint32_t const cps[1] = { 0x10ca6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3839), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_105)
{
    // 10CA7 ; [.383A.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER ENT

    uint32_t const cps[1] = { 0x10ca7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x383a), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_106)
{
    // 10CA8 ; [.383B.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER ETY

    uint32_t const cps[1] = { 0x10ca8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x383b), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_107)
{
    // 10CA9 ; [.383C.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER ECH

    uint32_t const cps[1] = { 0x10ca9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x383c), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_108)
{
    // 10CAA ; [.383D.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER U

    uint32_t const cps[1] = { 0x10caa };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x383d), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_109)
{
    // 10CAB ; [.383D.0020.000A][.0000.0111.0004] 
    // OLD HUNGARIAN CAPITAL LETTER UU

    uint32_t const cps[1] = { 0x10cab };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x383d), uint8_t(0x1), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_110)
{
    // 10CAC ; [.383E.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER NIKOLSBURG UE

    uint32_t const cps[1] = { 0x10cac };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x383e), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_111)
{
    // 10CAD ; [.383E.0020.000A][.0000.0111.0004] 
    // OLD HUNGARIAN CAPITAL LETTER RUDIMENTA UE

    uint32_t const cps[1] = { 0x10cad };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x383e), uint8_t(0x1), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_112)
{
    // 10CAE ; [.383F.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER EV

    uint32_t const cps[1] = { 0x10cae };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x383f), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_113)
{
    // 10CAF ; [.3840.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER EZ

    uint32_t const cps[1] = { 0x10caf };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3840), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_114)
{
    // 10CB0 ; [.3841.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER EZS

    uint32_t const cps[1] = { 0x10cb0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3841), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_115)
{
    // 10CB1 ; [.3842.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER ENT-SHAPED SIGN

    uint32_t const cps[1] = { 0x10cb1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3842), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_116)
{
    // 10CB2 ; [.3843.0020.0008] 
    // OLD HUNGARIAN CAPITAL LETTER US

    uint32_t const cps[1] = { 0x10cb2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3843), uint8_t(0x1), uint8_t(0x8)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_117)
{
    // 10CC0 ; [.381B.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER A

    uint32_t const cps[1] = { 0x10cc0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x381b), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_118)
{
    // 10CC1 ; [.381B.0020.0004][.0000.0111.0004] 
    // OLD HUNGARIAN SMALL LETTER AA

    uint32_t const cps[1] = { 0x10cc1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x381b), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_119)
{
    // 10CC2 ; [.381C.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER EB

    uint32_t const cps[1] = { 0x10cc2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x381c), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_120)
{
    // 10CC3 ; [.381D.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER AMB

    uint32_t const cps[1] = { 0x10cc3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x381d), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_121)
{
    // 10CC4 ; [.381E.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER EC

    uint32_t const cps[1] = { 0x10cc4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x381e), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_122)
{
    // 10CC5 ; [.381F.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER ENC

    uint32_t const cps[1] = { 0x10cc5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x381f), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_123)
{
    // 10CC6 ; [.3820.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER ECS

    uint32_t const cps[1] = { 0x10cc6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3820), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_124)
{
    // 10CC7 ; [.3821.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER ED

    uint32_t const cps[1] = { 0x10cc7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3821), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_125)
{
    // 10CC8 ; [.3822.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER AND

    uint32_t const cps[1] = { 0x10cc8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3822), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_126)
{
    // 10CC9 ; [.3823.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER E

    uint32_t const cps[1] = { 0x10cc9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3823), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_127)
{
    // 10CCA ; [.3823.0020.0004][.0000.0111.0004] 
    // OLD HUNGARIAN SMALL LETTER CLOSE E

    uint32_t const cps[1] = { 0x10cca };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3823), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_128)
{
    // 10CCB ; [.3823.0020.0004][.0000.0112.0004] 
    // OLD HUNGARIAN SMALL LETTER EE

    uint32_t const cps[1] = { 0x10ccb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3823), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf3), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_129)
{
    // 10CCC ; [.3824.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER EF

    uint32_t const cps[1] = { 0x10ccc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3824), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_130)
{
    // 10CCD ; [.3825.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER EG

    uint32_t const cps[1] = { 0x10ccd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3825), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_131)
{
    // 10CCE ; [.3826.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER EGY

    uint32_t const cps[1] = { 0x10cce };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3826), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_132)
{
    // 10CCF ; [.3827.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER EH

    uint32_t const cps[1] = { 0x10ccf };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3827), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_133)
{
    // 10CD0 ; [.3828.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER I

    uint32_t const cps[1] = { 0x10cd0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3828), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_134)
{
    // 10CD1 ; [.3828.0020.0004][.0000.0111.0004] 
    // OLD HUNGARIAN SMALL LETTER II

    uint32_t const cps[1] = { 0x10cd1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3828), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_135)
{
    // 10CD2 ; [.3829.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER EJ

    uint32_t const cps[1] = { 0x10cd2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3829), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_136)
{
    // 10CD3 ; [.382A.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER EK

    uint32_t const cps[1] = { 0x10cd3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x382a), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_137)
{
    // 10CD4 ; [.382B.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER AK

    uint32_t const cps[1] = { 0x10cd4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x382b), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_138)
{
    // 10CD5 ; [.382C.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER UNK

    uint32_t const cps[1] = { 0x10cd5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x382c), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_139)
{
    // 10CD6 ; [.382D.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER EL

    uint32_t const cps[1] = { 0x10cd6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x382d), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_140)
{
    // 10CD7 ; [.382E.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER ELY

    uint32_t const cps[1] = { 0x10cd7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x382e), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_141)
{
    // 10CD8 ; [.382F.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER EM

    uint32_t const cps[1] = { 0x10cd8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x382f), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_142)
{
    // 10CD9 ; [.3830.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER EN

    uint32_t const cps[1] = { 0x10cd9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3830), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_143)
{
    // 10CDA ; [.3831.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER ENY

    uint32_t const cps[1] = { 0x10cda };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3831), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_144)
{
    // 10CDB ; [.3832.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER O

    uint32_t const cps[1] = { 0x10cdb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3832), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_145)
{
    // 10CDC ; [.3832.0020.0004][.0000.0111.0004] 
    // OLD HUNGARIAN SMALL LETTER OO

    uint32_t const cps[1] = { 0x10cdc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3832), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_146)
{
    // 10CDD ; [.3833.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER NIKOLSBURG OE

    uint32_t const cps[1] = { 0x10cdd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3833), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_130_147)
{
    // 10CDE ; [.3833.0020.0004][.0000.0111.0004] 
    // OLD HUNGARIAN SMALL LETTER RUDIMENTA OE

    uint32_t const cps[1] = { 0x10cde };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3833), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_148)
{
    // 10CDF ; [.3833.0020.0004][.0000.0112.0004] 
    // OLD HUNGARIAN SMALL LETTER OEE

    uint32_t const cps[1] = { 0x10cdf };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3833), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf3), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_130_149)
{
    // 10CE0 ; [.3834.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER EP

    uint32_t const cps[1] = { 0x10ce0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3834), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

