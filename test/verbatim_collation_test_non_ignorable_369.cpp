// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_369_000)
{
    // 4452 003F;	
    // (䑒) CJK UNIFIED IDEOGRAPH-4452	[FB80 C452 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4452, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC452, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_001)
{
    // 4452 0061;	
    // (䑒) CJK UNIFIED IDEOGRAPH-4452	[FB80 C452 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4452, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC452, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_002)
{
    // 4452 0041;	
    // (䑒) CJK UNIFIED IDEOGRAPH-4452	[FB80 C452 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4452, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC452, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_003)
{
    // 4452 0062;	
    // (䑒) CJK UNIFIED IDEOGRAPH-4452	[FB80 C452 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4452, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC452, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_004)
{
    // 4453 0021;	
    // (䑓) CJK UNIFIED IDEOGRAPH-4453	[FB80 C453 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4453, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC453, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_005)
{
    // 4453 003F;	
    // (䑓) CJK UNIFIED IDEOGRAPH-4453	[FB80 C453 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4453, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC453, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_006)
{
    // 4453 0061;	
    // (䑓) CJK UNIFIED IDEOGRAPH-4453	[FB80 C453 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4453, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC453, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_007)
{
    // 4453 0041;	
    // (䑓) CJK UNIFIED IDEOGRAPH-4453	[FB80 C453 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4453, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC453, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_008)
{
    // 4453 0062;	
    // (䑓) CJK UNIFIED IDEOGRAPH-4453	[FB80 C453 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4453, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC453, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_009)
{
    // 4454 0021;	
    // (䑔) CJK UNIFIED IDEOGRAPH-4454	[FB80 C454 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4454, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC454, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_010)
{
    // 4454 003F;	
    // (䑔) CJK UNIFIED IDEOGRAPH-4454	[FB80 C454 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4454, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC454, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_011)
{
    // 4454 0061;	
    // (䑔) CJK UNIFIED IDEOGRAPH-4454	[FB80 C454 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4454, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC454, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_012)
{
    // 4454 0041;	
    // (䑔) CJK UNIFIED IDEOGRAPH-4454	[FB80 C454 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4454, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC454, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_013)
{
    // 4454 0062;	
    // (䑔) CJK UNIFIED IDEOGRAPH-4454	[FB80 C454 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4454, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC454, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_014)
{
    // 4455 0021;	
    // (䑕) CJK UNIFIED IDEOGRAPH-4455	[FB80 C455 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4455, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC455, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_015)
{
    // 4455 003F;	
    // (䑕) CJK UNIFIED IDEOGRAPH-4455	[FB80 C455 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4455, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC455, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_016)
{
    // 4455 0061;	
    // (䑕) CJK UNIFIED IDEOGRAPH-4455	[FB80 C455 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4455, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC455, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_017)
{
    // 4455 0041;	
    // (䑕) CJK UNIFIED IDEOGRAPH-4455	[FB80 C455 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4455, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC455, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_018)
{
    // 4455 0062;	
    // (䑕) CJK UNIFIED IDEOGRAPH-4455	[FB80 C455 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4455, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC455, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_019)
{
    // 4456 0021;	
    // (䑖) CJK UNIFIED IDEOGRAPH-4456	[FB80 C456 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4456, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC456, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_020)
{
    // 4456 003F;	
    // (䑖) CJK UNIFIED IDEOGRAPH-4456	[FB80 C456 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4456, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC456, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_021)
{
    // 4456 0061;	
    // (䑖) CJK UNIFIED IDEOGRAPH-4456	[FB80 C456 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4456, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC456, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_022)
{
    // 4456 0041;	
    // (䑖) CJK UNIFIED IDEOGRAPH-4456	[FB80 C456 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4456, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC456, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_023)
{
    // 4456 0062;	
    // (䑖) CJK UNIFIED IDEOGRAPH-4456	[FB80 C456 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4456, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC456, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_024)
{
    // 4457 0021;	
    // (䑗) CJK UNIFIED IDEOGRAPH-4457	[FB80 C457 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4457, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC457, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_025)
{
    // 4457 003F;	
    // (䑗) CJK UNIFIED IDEOGRAPH-4457	[FB80 C457 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4457, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC457, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_026)
{
    // 4457 0061;	
    // (䑗) CJK UNIFIED IDEOGRAPH-4457	[FB80 C457 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4457, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC457, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_027)
{
    // 4457 0041;	
    // (䑗) CJK UNIFIED IDEOGRAPH-4457	[FB80 C457 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4457, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC457, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_028)
{
    // 4457 0062;	
    // (䑗) CJK UNIFIED IDEOGRAPH-4457	[FB80 C457 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4457, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC457, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_029)
{
    // 4458 0021;	
    // (䑘) CJK UNIFIED IDEOGRAPH-4458	[FB80 C458 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4458, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC458, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_030)
{
    // 4458 003F;	
    // (䑘) CJK UNIFIED IDEOGRAPH-4458	[FB80 C458 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4458, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC458, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_031)
{
    // 4458 0061;	
    // (䑘) CJK UNIFIED IDEOGRAPH-4458	[FB80 C458 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4458, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC458, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_032)
{
    // 4458 0041;	
    // (䑘) CJK UNIFIED IDEOGRAPH-4458	[FB80 C458 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4458, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC458, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_033)
{
    // 4458 0062;	
    // (䑘) CJK UNIFIED IDEOGRAPH-4458	[FB80 C458 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4458, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC458, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_034)
{
    // 4459 0021;	
    // (䑙) CJK UNIFIED IDEOGRAPH-4459	[FB80 C459 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4459, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC459, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_035)
{
    // 4459 003F;	
    // (䑙) CJK UNIFIED IDEOGRAPH-4459	[FB80 C459 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4459, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC459, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_036)
{
    // 4459 0061;	
    // (䑙) CJK UNIFIED IDEOGRAPH-4459	[FB80 C459 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4459, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC459, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_037)
{
    // 4459 0041;	
    // (䑙) CJK UNIFIED IDEOGRAPH-4459	[FB80 C459 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4459, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC459, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_038)
{
    // 4459 0062;	
    // (䑙) CJK UNIFIED IDEOGRAPH-4459	[FB80 C459 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4459, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC459, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_039)
{
    // 445A 0021;	
    // (䑚) CJK UNIFIED IDEOGRAPH-445A	[FB80 C45A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x445A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC45A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_040)
{
    // 445A 003F;	
    // (䑚) CJK UNIFIED IDEOGRAPH-445A	[FB80 C45A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x445A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC45A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_041)
{
    // 445A 0061;	
    // (䑚) CJK UNIFIED IDEOGRAPH-445A	[FB80 C45A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x445A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC45A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_042)
{
    // 445A 0041;	
    // (䑚) CJK UNIFIED IDEOGRAPH-445A	[FB80 C45A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x445A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC45A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_043)
{
    // 445A 0062;	
    // (䑚) CJK UNIFIED IDEOGRAPH-445A	[FB80 C45A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x445A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC45A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_044)
{
    // 445B 0021;	
    // (䑛) CJK UNIFIED IDEOGRAPH-445B	[FB80 C45B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x445B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC45B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_045)
{
    // 445B 003F;	
    // (䑛) CJK UNIFIED IDEOGRAPH-445B	[FB80 C45B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x445B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC45B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_046)
{
    // 445B 0061;	
    // (䑛) CJK UNIFIED IDEOGRAPH-445B	[FB80 C45B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x445B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC45B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_047)
{
    // 445B 0041;	
    // (䑛) CJK UNIFIED IDEOGRAPH-445B	[FB80 C45B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x445B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC45B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_048)
{
    // 445B 0062;	
    // (䑛) CJK UNIFIED IDEOGRAPH-445B	[FB80 C45B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x445B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC45B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_049)
{
    // 445C 0021;	
    // (䑜) CJK UNIFIED IDEOGRAPH-445C	[FB80 C45C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x445C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC45C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_050)
{
    // 445C 003F;	
    // (䑜) CJK UNIFIED IDEOGRAPH-445C	[FB80 C45C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x445C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC45C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_051)
{
    // 445C 0061;	
    // (䑜) CJK UNIFIED IDEOGRAPH-445C	[FB80 C45C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x445C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC45C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_052)
{
    // 445C 0041;	
    // (䑜) CJK UNIFIED IDEOGRAPH-445C	[FB80 C45C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x445C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC45C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_053)
{
    // 445C 0062;	
    // (䑜) CJK UNIFIED IDEOGRAPH-445C	[FB80 C45C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x445C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC45C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_054)
{
    // 445D 0021;	
    // (䑝) CJK UNIFIED IDEOGRAPH-445D	[FB80 C45D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x445D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC45D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_055)
{
    // 445D 003F;	
    // (䑝) CJK UNIFIED IDEOGRAPH-445D	[FB80 C45D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x445D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC45D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_056)
{
    // 445D 0061;	
    // (䑝) CJK UNIFIED IDEOGRAPH-445D	[FB80 C45D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x445D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC45D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_057)
{
    // 445D 0041;	
    // (䑝) CJK UNIFIED IDEOGRAPH-445D	[FB80 C45D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x445D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC45D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_058)
{
    // 445D 0062;	
    // (䑝) CJK UNIFIED IDEOGRAPH-445D	[FB80 C45D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x445D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC45D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_059)
{
    // 445E 0021;	
    // (䑞) CJK UNIFIED IDEOGRAPH-445E	[FB80 C45E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x445E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC45E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_060)
{
    // 445E 003F;	
    // (䑞) CJK UNIFIED IDEOGRAPH-445E	[FB80 C45E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x445E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC45E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_061)
{
    // 445E 0061;	
    // (䑞) CJK UNIFIED IDEOGRAPH-445E	[FB80 C45E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x445E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC45E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_062)
{
    // 445E 0041;	
    // (䑞) CJK UNIFIED IDEOGRAPH-445E	[FB80 C45E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x445E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC45E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_063)
{
    // 445E 0062;	
    // (䑞) CJK UNIFIED IDEOGRAPH-445E	[FB80 C45E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x445E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC45E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_064)
{
    // 445F 0021;	
    // (䑟) CJK UNIFIED IDEOGRAPH-445F	[FB80 C45F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x445F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC45F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_065)
{
    // 445F 003F;	
    // (䑟) CJK UNIFIED IDEOGRAPH-445F	[FB80 C45F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x445F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC45F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_066)
{
    // 445F 0061;	
    // (䑟) CJK UNIFIED IDEOGRAPH-445F	[FB80 C45F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x445F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC45F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_067)
{
    // 445F 0041;	
    // (䑟) CJK UNIFIED IDEOGRAPH-445F	[FB80 C45F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x445F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC45F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_068)
{
    // 445F 0062;	
    // (䑟) CJK UNIFIED IDEOGRAPH-445F	[FB80 C45F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x445F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC45F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_069)
{
    // 4460 0021;	
    // (䑠) CJK UNIFIED IDEOGRAPH-4460	[FB80 C460 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4460, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC460, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_070)
{
    // 4460 003F;	
    // (䑠) CJK UNIFIED IDEOGRAPH-4460	[FB80 C460 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4460, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC460, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_071)
{
    // 4460 0061;	
    // (䑠) CJK UNIFIED IDEOGRAPH-4460	[FB80 C460 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4460, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC460, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_072)
{
    // 4460 0041;	
    // (䑠) CJK UNIFIED IDEOGRAPH-4460	[FB80 C460 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4460, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC460, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_073)
{
    // 4460 0062;	
    // (䑠) CJK UNIFIED IDEOGRAPH-4460	[FB80 C460 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4460, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC460, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_074)
{
    // 4461 0021;	
    // (䑡) CJK UNIFIED IDEOGRAPH-4461	[FB80 C461 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4461, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC461, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_075)
{
    // 4461 003F;	
    // (䑡) CJK UNIFIED IDEOGRAPH-4461	[FB80 C461 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4461, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC461, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_076)
{
    // 4461 0061;	
    // (䑡) CJK UNIFIED IDEOGRAPH-4461	[FB80 C461 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4461, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC461, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_077)
{
    // 4461 0041;	
    // (䑡) CJK UNIFIED IDEOGRAPH-4461	[FB80 C461 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4461, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC461, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_078)
{
    // 4461 0062;	
    // (䑡) CJK UNIFIED IDEOGRAPH-4461	[FB80 C461 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4461, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC461, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_079)
{
    // 4462 0021;	
    // (䑢) CJK UNIFIED IDEOGRAPH-4462	[FB80 C462 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4462, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC462, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_080)
{
    // 4462 003F;	
    // (䑢) CJK UNIFIED IDEOGRAPH-4462	[FB80 C462 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4462, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC462, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_081)
{
    // 4462 0061;	
    // (䑢) CJK UNIFIED IDEOGRAPH-4462	[FB80 C462 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4462, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC462, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_082)
{
    // 4462 0041;	
    // (䑢) CJK UNIFIED IDEOGRAPH-4462	[FB80 C462 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4462, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC462, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_083)
{
    // 4462 0062;	
    // (䑢) CJK UNIFIED IDEOGRAPH-4462	[FB80 C462 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4462, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC462, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_084)
{
    // 4463 0021;	
    // (䑣) CJK UNIFIED IDEOGRAPH-4463	[FB80 C463 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4463, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC463, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_085)
{
    // 4463 003F;	
    // (䑣) CJK UNIFIED IDEOGRAPH-4463	[FB80 C463 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4463, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC463, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_086)
{
    // 4463 0061;	
    // (䑣) CJK UNIFIED IDEOGRAPH-4463	[FB80 C463 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4463, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC463, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_087)
{
    // 4463 0041;	
    // (䑣) CJK UNIFIED IDEOGRAPH-4463	[FB80 C463 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4463, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC463, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_088)
{
    // 4463 0062;	
    // (䑣) CJK UNIFIED IDEOGRAPH-4463	[FB80 C463 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4463, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC463, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_089)
{
    // 4464 0021;	
    // (䑤) CJK UNIFIED IDEOGRAPH-4464	[FB80 C464 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4464, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC464, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_090)
{
    // 4464 003F;	
    // (䑤) CJK UNIFIED IDEOGRAPH-4464	[FB80 C464 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4464, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC464, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_091)
{
    // 4464 0061;	
    // (䑤) CJK UNIFIED IDEOGRAPH-4464	[FB80 C464 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4464, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC464, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_092)
{
    // 4464 0041;	
    // (䑤) CJK UNIFIED IDEOGRAPH-4464	[FB80 C464 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4464, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC464, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_093)
{
    // 4464 0062;	
    // (䑤) CJK UNIFIED IDEOGRAPH-4464	[FB80 C464 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4464, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC464, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_094)
{
    // 4465 0021;	
    // (䑥) CJK UNIFIED IDEOGRAPH-4465	[FB80 C465 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4465, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC465, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_095)
{
    // 4465 003F;	
    // (䑥) CJK UNIFIED IDEOGRAPH-4465	[FB80 C465 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4465, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC465, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_096)
{
    // 4465 0061;	
    // (䑥) CJK UNIFIED IDEOGRAPH-4465	[FB80 C465 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4465, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC465, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_097)
{
    // 4465 0041;	
    // (䑥) CJK UNIFIED IDEOGRAPH-4465	[FB80 C465 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4465, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC465, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_098)
{
    // 4465 0062;	
    // (䑥) CJK UNIFIED IDEOGRAPH-4465	[FB80 C465 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4465, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC465, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_099)
{
    // 4466 0021;	
    // (䑦) CJK UNIFIED IDEOGRAPH-4466	[FB80 C466 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4466, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC466, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_100)
{
    // 4466 003F;	
    // (䑦) CJK UNIFIED IDEOGRAPH-4466	[FB80 C466 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4466, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC466, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_101)
{
    // 4466 0061;	
    // (䑦) CJK UNIFIED IDEOGRAPH-4466	[FB80 C466 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4466, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC466, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_102)
{
    // 4466 0041;	
    // (䑦) CJK UNIFIED IDEOGRAPH-4466	[FB80 C466 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4466, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC466, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_103)
{
    // 4466 0062;	
    // (䑦) CJK UNIFIED IDEOGRAPH-4466	[FB80 C466 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4466, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC466, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_104)
{
    // 4467 0021;	
    // (䑧) CJK UNIFIED IDEOGRAPH-4467	[FB80 C467 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4467, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC467, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_105)
{
    // 4467 003F;	
    // (䑧) CJK UNIFIED IDEOGRAPH-4467	[FB80 C467 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4467, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC467, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_106)
{
    // 4467 0061;	
    // (䑧) CJK UNIFIED IDEOGRAPH-4467	[FB80 C467 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4467, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC467, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_107)
{
    // 4467 0041;	
    // (䑧) CJK UNIFIED IDEOGRAPH-4467	[FB80 C467 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4467, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC467, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_108)
{
    // 4467 0062;	
    // (䑧) CJK UNIFIED IDEOGRAPH-4467	[FB80 C467 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4467, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC467, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_109)
{
    // 4468 0021;	
    // (䑨) CJK UNIFIED IDEOGRAPH-4468	[FB80 C468 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4468, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC468, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_110)
{
    // 4468 003F;	
    // (䑨) CJK UNIFIED IDEOGRAPH-4468	[FB80 C468 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4468, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC468, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_111)
{
    // 4468 0061;	
    // (䑨) CJK UNIFIED IDEOGRAPH-4468	[FB80 C468 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4468, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC468, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_112)
{
    // 4468 0041;	
    // (䑨) CJK UNIFIED IDEOGRAPH-4468	[FB80 C468 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4468, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC468, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_113)
{
    // 4468 0062;	
    // (䑨) CJK UNIFIED IDEOGRAPH-4468	[FB80 C468 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4468, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC468, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_114)
{
    // 4469 0021;	
    // (䑩) CJK UNIFIED IDEOGRAPH-4469	[FB80 C469 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4469, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC469, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_115)
{
    // 4469 003F;	
    // (䑩) CJK UNIFIED IDEOGRAPH-4469	[FB80 C469 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4469, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC469, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_116)
{
    // 4469 0061;	
    // (䑩) CJK UNIFIED IDEOGRAPH-4469	[FB80 C469 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4469, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC469, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_117)
{
    // 4469 0041;	
    // (䑩) CJK UNIFIED IDEOGRAPH-4469	[FB80 C469 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4469, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC469, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_118)
{
    // 4469 0062;	
    // (䑩) CJK UNIFIED IDEOGRAPH-4469	[FB80 C469 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4469, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC469, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_119)
{
    // 446A 0021;	
    // (䑪) CJK UNIFIED IDEOGRAPH-446A	[FB80 C46A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x446A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC46A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_120)
{
    // 446A 003F;	
    // (䑪) CJK UNIFIED IDEOGRAPH-446A	[FB80 C46A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x446A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC46A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_121)
{
    // 446A 0061;	
    // (䑪) CJK UNIFIED IDEOGRAPH-446A	[FB80 C46A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x446A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC46A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_122)
{
    // 446A 0041;	
    // (䑪) CJK UNIFIED IDEOGRAPH-446A	[FB80 C46A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x446A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC46A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_123)
{
    // 446A 0062;	
    // (䑪) CJK UNIFIED IDEOGRAPH-446A	[FB80 C46A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x446A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC46A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_124)
{
    // 446B 0021;	
    // (䑫) CJK UNIFIED IDEOGRAPH-446B	[FB80 C46B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x446B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC46B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_125)
{
    // 2F98E 0021;	
    // (䑫) CJK COMPATIBILITY IDEOGRAPH-2F98E	[FB80 C46B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F98E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC46B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_126)
{
    // 446B 003F;	
    // (䑫) CJK UNIFIED IDEOGRAPH-446B	[FB80 C46B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x446B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC46B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_127)
{
    // 2F98E 003F;	
    // (䑫) CJK COMPATIBILITY IDEOGRAPH-2F98E	[FB80 C46B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F98E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC46B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_128)
{
    // 446B 0061;	
    // (䑫) CJK UNIFIED IDEOGRAPH-446B	[FB80 C46B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x446B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC46B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_129)
{
    // 2F98E 0061;	
    // (䑫) CJK COMPATIBILITY IDEOGRAPH-2F98E	[FB80 C46B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F98E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC46B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_130)
{
    // 446B 0041;	
    // (䑫) CJK UNIFIED IDEOGRAPH-446B	[FB80 C46B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x446B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC46B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_131)
{
    // 2F98E 0041;	
    // (䑫) CJK COMPATIBILITY IDEOGRAPH-2F98E	[FB80 C46B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F98E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC46B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_132)
{
    // 446B 0062;	
    // (䑫) CJK UNIFIED IDEOGRAPH-446B	[FB80 C46B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x446B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC46B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_133)
{
    // 2F98E 0062;	
    // (䑫) CJK COMPATIBILITY IDEOGRAPH-2F98E	[FB80 C46B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F98E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC46B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_134)
{
    // 446C 0021;	
    // (䑬) CJK UNIFIED IDEOGRAPH-446C	[FB80 C46C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x446C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC46C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_135)
{
    // 446C 003F;	
    // (䑬) CJK UNIFIED IDEOGRAPH-446C	[FB80 C46C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x446C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC46C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_136)
{
    // 446C 0061;	
    // (䑬) CJK UNIFIED IDEOGRAPH-446C	[FB80 C46C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x446C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC46C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_137)
{
    // 446C 0041;	
    // (䑬) CJK UNIFIED IDEOGRAPH-446C	[FB80 C46C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x446C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC46C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_138)
{
    // 446C 0062;	
    // (䑬) CJK UNIFIED IDEOGRAPH-446C	[FB80 C46C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x446C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC46C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_139)
{
    // 446D 0021;	
    // (䑭) CJK UNIFIED IDEOGRAPH-446D	[FB80 C46D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x446D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC46D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_140)
{
    // 446D 003F;	
    // (䑭) CJK UNIFIED IDEOGRAPH-446D	[FB80 C46D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x446D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC46D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_141)
{
    // 446D 0061;	
    // (䑭) CJK UNIFIED IDEOGRAPH-446D	[FB80 C46D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x446D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC46D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_142)
{
    // 446D 0041;	
    // (䑭) CJK UNIFIED IDEOGRAPH-446D	[FB80 C46D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x446D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC46D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_143)
{
    // 446D 0062;	
    // (䑭) CJK UNIFIED IDEOGRAPH-446D	[FB80 C46D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x446D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC46D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_144)
{
    // 446E 0021;	
    // (䑮) CJK UNIFIED IDEOGRAPH-446E	[FB80 C46E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x446E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC46E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_145)
{
    // 446E 003F;	
    // (䑮) CJK UNIFIED IDEOGRAPH-446E	[FB80 C46E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x446E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC46E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_146)
{
    // 446E 0061;	
    // (䑮) CJK UNIFIED IDEOGRAPH-446E	[FB80 C46E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x446E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC46E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_147)
{
    // 446E 0041;	
    // (䑮) CJK UNIFIED IDEOGRAPH-446E	[FB80 C46E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x446E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC46E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_148)
{
    // 446E 0062;	
    // (䑮) CJK UNIFIED IDEOGRAPH-446E	[FB80 C46E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x446E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC46E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_149)
{
    // 446F 0021;	
    // (䑯) CJK UNIFIED IDEOGRAPH-446F	[FB80 C46F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x446F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC46F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_150)
{
    // 446F 003F;	
    // (䑯) CJK UNIFIED IDEOGRAPH-446F	[FB80 C46F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x446F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC46F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_151)
{
    // 446F 0061;	
    // (䑯) CJK UNIFIED IDEOGRAPH-446F	[FB80 C46F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x446F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC46F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_152)
{
    // 446F 0041;	
    // (䑯) CJK UNIFIED IDEOGRAPH-446F	[FB80 C46F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x446F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC46F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_153)
{
    // 446F 0062;	
    // (䑯) CJK UNIFIED IDEOGRAPH-446F	[FB80 C46F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x446F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC46F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_154)
{
    // 4470 0021;	
    // (䑰) CJK UNIFIED IDEOGRAPH-4470	[FB80 C470 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4470, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC470, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_155)
{
    // 4470 003F;	
    // (䑰) CJK UNIFIED IDEOGRAPH-4470	[FB80 C470 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4470, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC470, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_156)
{
    // 4470 0061;	
    // (䑰) CJK UNIFIED IDEOGRAPH-4470	[FB80 C470 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4470, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC470, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_157)
{
    // 4470 0041;	
    // (䑰) CJK UNIFIED IDEOGRAPH-4470	[FB80 C470 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4470, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC470, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_158)
{
    // 4470 0062;	
    // (䑰) CJK UNIFIED IDEOGRAPH-4470	[FB80 C470 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4470, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC470, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_159)
{
    // 4471 0021;	
    // (䑱) CJK UNIFIED IDEOGRAPH-4471	[FB80 C471 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4471, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC471, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_160)
{
    // 4471 003F;	
    // (䑱) CJK UNIFIED IDEOGRAPH-4471	[FB80 C471 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4471, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC471, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_161)
{
    // 4471 0061;	
    // (䑱) CJK UNIFIED IDEOGRAPH-4471	[FB80 C471 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4471, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC471, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_162)
{
    // 4471 0041;	
    // (䑱) CJK UNIFIED IDEOGRAPH-4471	[FB80 C471 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4471, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC471, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_163)
{
    // 4471 0062;	
    // (䑱) CJK UNIFIED IDEOGRAPH-4471	[FB80 C471 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4471, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC471, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_164)
{
    // 4472 0021;	
    // (䑲) CJK UNIFIED IDEOGRAPH-4472	[FB80 C472 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4472, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC472, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_165)
{
    // 4472 003F;	
    // (䑲) CJK UNIFIED IDEOGRAPH-4472	[FB80 C472 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4472, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC472, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_166)
{
    // 4472 0061;	
    // (䑲) CJK UNIFIED IDEOGRAPH-4472	[FB80 C472 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4472, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC472, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_167)
{
    // 4472 0041;	
    // (䑲) CJK UNIFIED IDEOGRAPH-4472	[FB80 C472 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4472, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC472, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_168)
{
    // 4472 0062;	
    // (䑲) CJK UNIFIED IDEOGRAPH-4472	[FB80 C472 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4472, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC472, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_169)
{
    // 4473 0021;	
    // (䑳) CJK UNIFIED IDEOGRAPH-4473	[FB80 C473 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4473, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC473, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_170)
{
    // 4473 003F;	
    // (䑳) CJK UNIFIED IDEOGRAPH-4473	[FB80 C473 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4473, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC473, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_171)
{
    // 4473 0061;	
    // (䑳) CJK UNIFIED IDEOGRAPH-4473	[FB80 C473 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4473, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC473, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_172)
{
    // 4473 0041;	
    // (䑳) CJK UNIFIED IDEOGRAPH-4473	[FB80 C473 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4473, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC473, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_173)
{
    // 4473 0062;	
    // (䑳) CJK UNIFIED IDEOGRAPH-4473	[FB80 C473 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4473, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC473, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_174)
{
    // 4474 0021;	
    // (䑴) CJK UNIFIED IDEOGRAPH-4474	[FB80 C474 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4474, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC474, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_175)
{
    // 4474 003F;	
    // (䑴) CJK UNIFIED IDEOGRAPH-4474	[FB80 C474 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4474, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC474, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_176)
{
    // 4474 0061;	
    // (䑴) CJK UNIFIED IDEOGRAPH-4474	[FB80 C474 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4474, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC474, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_177)
{
    // 4474 0041;	
    // (䑴) CJK UNIFIED IDEOGRAPH-4474	[FB80 C474 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4474, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC474, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_178)
{
    // 4474 0062;	
    // (䑴) CJK UNIFIED IDEOGRAPH-4474	[FB80 C474 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4474, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC474, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_179)
{
    // 4475 0021;	
    // (䑵) CJK UNIFIED IDEOGRAPH-4475	[FB80 C475 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4475, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC475, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_180)
{
    // 4475 003F;	
    // (䑵) CJK UNIFIED IDEOGRAPH-4475	[FB80 C475 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4475, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC475, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_181)
{
    // 4475 0061;	
    // (䑵) CJK UNIFIED IDEOGRAPH-4475	[FB80 C475 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4475, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC475, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_182)
{
    // 4475 0041;	
    // (䑵) CJK UNIFIED IDEOGRAPH-4475	[FB80 C475 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4475, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC475, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_183)
{
    // 4475 0062;	
    // (䑵) CJK UNIFIED IDEOGRAPH-4475	[FB80 C475 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4475, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC475, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_184)
{
    // 4476 0021;	
    // (䑶) CJK UNIFIED IDEOGRAPH-4476	[FB80 C476 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4476, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC476, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_185)
{
    // 4476 003F;	
    // (䑶) CJK UNIFIED IDEOGRAPH-4476	[FB80 C476 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4476, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC476, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_186)
{
    // 4476 0061;	
    // (䑶) CJK UNIFIED IDEOGRAPH-4476	[FB80 C476 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4476, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC476, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_187)
{
    // 4476 0041;	
    // (䑶) CJK UNIFIED IDEOGRAPH-4476	[FB80 C476 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4476, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC476, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_188)
{
    // 4476 0062;	
    // (䑶) CJK UNIFIED IDEOGRAPH-4476	[FB80 C476 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4476, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC476, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_189)
{
    // 4477 0021;	
    // (䑷) CJK UNIFIED IDEOGRAPH-4477	[FB80 C477 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4477, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC477, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_190)
{
    // 4477 003F;	
    // (䑷) CJK UNIFIED IDEOGRAPH-4477	[FB80 C477 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4477, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC477, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_191)
{
    // 4477 0061;	
    // (䑷) CJK UNIFIED IDEOGRAPH-4477	[FB80 C477 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4477, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC477, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_192)
{
    // 4477 0041;	
    // (䑷) CJK UNIFIED IDEOGRAPH-4477	[FB80 C477 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4477, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC477, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_193)
{
    // 4477 0062;	
    // (䑷) CJK UNIFIED IDEOGRAPH-4477	[FB80 C477 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4477, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC477, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_194)
{
    // 4478 0021;	
    // (䑸) CJK UNIFIED IDEOGRAPH-4478	[FB80 C478 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4478, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC478, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_195)
{
    // 4478 003F;	
    // (䑸) CJK UNIFIED IDEOGRAPH-4478	[FB80 C478 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4478, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC478, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_196)
{
    // 4478 0061;	
    // (䑸) CJK UNIFIED IDEOGRAPH-4478	[FB80 C478 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4478, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC478, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_197)
{
    // 4478 0041;	
    // (䑸) CJK UNIFIED IDEOGRAPH-4478	[FB80 C478 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4478, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC478, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_198)
{
    // 4478 0062;	
    // (䑸) CJK UNIFIED IDEOGRAPH-4478	[FB80 C478 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4478, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC478, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_199)
{
    // 4479 0021;	
    // (䑹) CJK UNIFIED IDEOGRAPH-4479	[FB80 C479 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4479, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC479, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_200)
{
    // 4479 003F;	
    // (䑹) CJK UNIFIED IDEOGRAPH-4479	[FB80 C479 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4479, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC479, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_201)
{
    // 4479 0061;	
    // (䑹) CJK UNIFIED IDEOGRAPH-4479	[FB80 C479 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4479, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC479, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_202)
{
    // 4479 0041;	
    // (䑹) CJK UNIFIED IDEOGRAPH-4479	[FB80 C479 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4479, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC479, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_203)
{
    // 4479 0062;	
    // (䑹) CJK UNIFIED IDEOGRAPH-4479	[FB80 C479 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4479, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC479, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_204)
{
    // 447A 0021;	
    // (䑺) CJK UNIFIED IDEOGRAPH-447A	[FB80 C47A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x447A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC47A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_205)
{
    // 447A 003F;	
    // (䑺) CJK UNIFIED IDEOGRAPH-447A	[FB80 C47A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x447A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC47A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_206)
{
    // 447A 0061;	
    // (䑺) CJK UNIFIED IDEOGRAPH-447A	[FB80 C47A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x447A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC47A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_207)
{
    // 447A 0041;	
    // (䑺) CJK UNIFIED IDEOGRAPH-447A	[FB80 C47A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x447A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC47A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_208)
{
    // 447A 0062;	
    // (䑺) CJK UNIFIED IDEOGRAPH-447A	[FB80 C47A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x447A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC47A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_209)
{
    // 447B 0021;	
    // (䑻) CJK UNIFIED IDEOGRAPH-447B	[FB80 C47B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x447B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC47B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_210)
{
    // 447B 003F;	
    // (䑻) CJK UNIFIED IDEOGRAPH-447B	[FB80 C47B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x447B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC47B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_211)
{
    // 447B 0061;	
    // (䑻) CJK UNIFIED IDEOGRAPH-447B	[FB80 C47B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x447B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC47B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_212)
{
    // 447B 0041;	
    // (䑻) CJK UNIFIED IDEOGRAPH-447B	[FB80 C47B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x447B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC47B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_213)
{
    // 447B 0062;	
    // (䑻) CJK UNIFIED IDEOGRAPH-447B	[FB80 C47B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x447B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC47B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_214)
{
    // 447C 0021;	
    // (䑼) CJK UNIFIED IDEOGRAPH-447C	[FB80 C47C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x447C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC47C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_215)
{
    // 447C 003F;	
    // (䑼) CJK UNIFIED IDEOGRAPH-447C	[FB80 C47C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x447C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC47C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_216)
{
    // 447C 0061;	
    // (䑼) CJK UNIFIED IDEOGRAPH-447C	[FB80 C47C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x447C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC47C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_217)
{
    // 447C 0041;	
    // (䑼) CJK UNIFIED IDEOGRAPH-447C	[FB80 C47C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x447C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC47C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_218)
{
    // 447C 0062;	
    // (䑼) CJK UNIFIED IDEOGRAPH-447C	[FB80 C47C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x447C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC47C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_219)
{
    // 447D 0021;	
    // (䑽) CJK UNIFIED IDEOGRAPH-447D	[FB80 C47D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x447D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC47D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_220)
{
    // 447D 003F;	
    // (䑽) CJK UNIFIED IDEOGRAPH-447D	[FB80 C47D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x447D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC47D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_221)
{
    // 447D 0061;	
    // (䑽) CJK UNIFIED IDEOGRAPH-447D	[FB80 C47D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x447D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC47D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_222)
{
    // 447D 0041;	
    // (䑽) CJK UNIFIED IDEOGRAPH-447D	[FB80 C47D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x447D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC47D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_223)
{
    // 447D 0062;	
    // (䑽) CJK UNIFIED IDEOGRAPH-447D	[FB80 C47D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x447D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC47D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_224)
{
    // 447E 0021;	
    // (䑾) CJK UNIFIED IDEOGRAPH-447E	[FB80 C47E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x447E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC47E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_225)
{
    // 447E 003F;	
    // (䑾) CJK UNIFIED IDEOGRAPH-447E	[FB80 C47E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x447E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC47E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_226)
{
    // 447E 0061;	
    // (䑾) CJK UNIFIED IDEOGRAPH-447E	[FB80 C47E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x447E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC47E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_227)
{
    // 447E 0041;	
    // (䑾) CJK UNIFIED IDEOGRAPH-447E	[FB80 C47E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x447E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC47E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_228)
{
    // 447E 0062;	
    // (䑾) CJK UNIFIED IDEOGRAPH-447E	[FB80 C47E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x447E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC47E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_229)
{
    // 447F 0021;	
    // (䑿) CJK UNIFIED IDEOGRAPH-447F	[FB80 C47F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x447F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC47F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_230)
{
    // 447F 003F;	
    // (䑿) CJK UNIFIED IDEOGRAPH-447F	[FB80 C47F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x447F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC47F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_231)
{
    // 447F 0061;	
    // (䑿) CJK UNIFIED IDEOGRAPH-447F	[FB80 C47F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x447F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC47F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_232)
{
    // 447F 0041;	
    // (䑿) CJK UNIFIED IDEOGRAPH-447F	[FB80 C47F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x447F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC47F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_233)
{
    // 447F 0062;	
    // (䑿) CJK UNIFIED IDEOGRAPH-447F	[FB80 C47F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x447F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC47F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_234)
{
    // 4480 0021;	
    // (䒀) CJK UNIFIED IDEOGRAPH-4480	[FB80 C480 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4480, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC480, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_235)
{
    // 4480 003F;	
    // (䒀) CJK UNIFIED IDEOGRAPH-4480	[FB80 C480 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4480, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC480, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_236)
{
    // 4480 0061;	
    // (䒀) CJK UNIFIED IDEOGRAPH-4480	[FB80 C480 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4480, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC480, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_237)
{
    // 4480 0041;	
    // (䒀) CJK UNIFIED IDEOGRAPH-4480	[FB80 C480 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4480, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC480, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_238)
{
    // 4480 0062;	
    // (䒀) CJK UNIFIED IDEOGRAPH-4480	[FB80 C480 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4480, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC480, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_239)
{
    // 4481 0021;	
    // (䒁) CJK UNIFIED IDEOGRAPH-4481	[FB80 C481 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4481, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC481, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_240)
{
    // 4481 003F;	
    // (䒁) CJK UNIFIED IDEOGRAPH-4481	[FB80 C481 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4481, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC481, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_241)
{
    // 4481 0061;	
    // (䒁) CJK UNIFIED IDEOGRAPH-4481	[FB80 C481 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4481, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC481, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_242)
{
    // 4481 0041;	
    // (䒁) CJK UNIFIED IDEOGRAPH-4481	[FB80 C481 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4481, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC481, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_243)
{
    // 4481 0062;	
    // (䒁) CJK UNIFIED IDEOGRAPH-4481	[FB80 C481 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4481, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC481, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_244)
{
    // 4482 0021;	
    // (䒂) CJK UNIFIED IDEOGRAPH-4482	[FB80 C482 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4482, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC482, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_245)
{
    // 4482 003F;	
    // (䒂) CJK UNIFIED IDEOGRAPH-4482	[FB80 C482 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4482, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC482, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_246)
{
    // 4482 0061;	
    // (䒂) CJK UNIFIED IDEOGRAPH-4482	[FB80 C482 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4482, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC482, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_247)
{
    // 4482 0041;	
    // (䒂) CJK UNIFIED IDEOGRAPH-4482	[FB80 C482 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4482, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC482, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_248)
{
    // 4482 0062;	
    // (䒂) CJK UNIFIED IDEOGRAPH-4482	[FB80 C482 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4482, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC482, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_249)
{
    // 4483 0021;	
    // (䒃) CJK UNIFIED IDEOGRAPH-4483	[FB80 C483 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4483, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC483, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_250)
{
    // 4483 003F;	
    // (䒃) CJK UNIFIED IDEOGRAPH-4483	[FB80 C483 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4483, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC483, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_251)
{
    // 4483 0061;	
    // (䒃) CJK UNIFIED IDEOGRAPH-4483	[FB80 C483 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4483, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC483, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_252)
{
    // 4483 0041;	
    // (䒃) CJK UNIFIED IDEOGRAPH-4483	[FB80 C483 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4483, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC483, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_253)
{
    // 4483 0062;	
    // (䒃) CJK UNIFIED IDEOGRAPH-4483	[FB80 C483 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4483, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC483, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_254)
{
    // 4484 0021;	
    // (䒄) CJK UNIFIED IDEOGRAPH-4484	[FB80 C484 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4484, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC484, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_255)
{
    // 4484 003F;	
    // (䒄) CJK UNIFIED IDEOGRAPH-4484	[FB80 C484 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4484, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC484, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_256)
{
    // 4484 0061;	
    // (䒄) CJK UNIFIED IDEOGRAPH-4484	[FB80 C484 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4484, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC484, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_257)
{
    // 4484 0041;	
    // (䒄) CJK UNIFIED IDEOGRAPH-4484	[FB80 C484 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4484, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC484, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_258)
{
    // 4484 0062;	
    // (䒄) CJK UNIFIED IDEOGRAPH-4484	[FB80 C484 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4484, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC484, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_259)
{
    // 4485 0021;	
    // (䒅) CJK UNIFIED IDEOGRAPH-4485	[FB80 C485 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4485, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC485, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_260)
{
    // 4485 003F;	
    // (䒅) CJK UNIFIED IDEOGRAPH-4485	[FB80 C485 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4485, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC485, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_261)
{
    // 4485 0061;	
    // (䒅) CJK UNIFIED IDEOGRAPH-4485	[FB80 C485 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4485, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC485, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_262)
{
    // 4485 0041;	
    // (䒅) CJK UNIFIED IDEOGRAPH-4485	[FB80 C485 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4485, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC485, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_263)
{
    // 4485 0062;	
    // (䒅) CJK UNIFIED IDEOGRAPH-4485	[FB80 C485 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4485, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC485, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_264)
{
    // 4486 0021;	
    // (䒆) CJK UNIFIED IDEOGRAPH-4486	[FB80 C486 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4486, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC486, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_265)
{
    // 4486 003F;	
    // (䒆) CJK UNIFIED IDEOGRAPH-4486	[FB80 C486 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4486, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC486, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_266)
{
    // 4486 0061;	
    // (䒆) CJK UNIFIED IDEOGRAPH-4486	[FB80 C486 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4486, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC486, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_267)
{
    // 4486 0041;	
    // (䒆) CJK UNIFIED IDEOGRAPH-4486	[FB80 C486 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4486, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC486, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_268)
{
    // 4486 0062;	
    // (䒆) CJK UNIFIED IDEOGRAPH-4486	[FB80 C486 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4486, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC486, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_269)
{
    // 4487 0021;	
    // (䒇) CJK UNIFIED IDEOGRAPH-4487	[FB80 C487 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4487, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC487, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_270)
{
    // 4487 003F;	
    // (䒇) CJK UNIFIED IDEOGRAPH-4487	[FB80 C487 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4487, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC487, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_271)
{
    // 4487 0061;	
    // (䒇) CJK UNIFIED IDEOGRAPH-4487	[FB80 C487 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4487, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC487, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_272)
{
    // 4487 0041;	
    // (䒇) CJK UNIFIED IDEOGRAPH-4487	[FB80 C487 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4487, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC487, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_273)
{
    // 4487 0062;	
    // (䒇) CJK UNIFIED IDEOGRAPH-4487	[FB80 C487 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4487, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC487, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_274)
{
    // 4488 0021;	
    // (䒈) CJK UNIFIED IDEOGRAPH-4488	[FB80 C488 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4488, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC488, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_275)
{
    // 4488 003F;	
    // (䒈) CJK UNIFIED IDEOGRAPH-4488	[FB80 C488 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4488, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC488, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_276)
{
    // 4488 0061;	
    // (䒈) CJK UNIFIED IDEOGRAPH-4488	[FB80 C488 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4488, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC488, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_277)
{
    // 4488 0041;	
    // (䒈) CJK UNIFIED IDEOGRAPH-4488	[FB80 C488 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4488, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC488, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_278)
{
    // 4488 0062;	
    // (䒈) CJK UNIFIED IDEOGRAPH-4488	[FB80 C488 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4488, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC488, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_279)
{
    // 4489 0021;	
    // (䒉) CJK UNIFIED IDEOGRAPH-4489	[FB80 C489 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4489, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC489, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_280)
{
    // 4489 003F;	
    // (䒉) CJK UNIFIED IDEOGRAPH-4489	[FB80 C489 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4489, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC489, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_281)
{
    // 4489 0061;	
    // (䒉) CJK UNIFIED IDEOGRAPH-4489	[FB80 C489 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4489, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC489, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_282)
{
    // 4489 0041;	
    // (䒉) CJK UNIFIED IDEOGRAPH-4489	[FB80 C489 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4489, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC489, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_283)
{
    // 4489 0062;	
    // (䒉) CJK UNIFIED IDEOGRAPH-4489	[FB80 C489 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4489, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC489, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_284)
{
    // 448A 0021;	
    // (䒊) CJK UNIFIED IDEOGRAPH-448A	[FB80 C48A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x448A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC48A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_285)
{
    // 448A 003F;	
    // (䒊) CJK UNIFIED IDEOGRAPH-448A	[FB80 C48A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x448A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC48A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_286)
{
    // 448A 0061;	
    // (䒊) CJK UNIFIED IDEOGRAPH-448A	[FB80 C48A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x448A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC48A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_287)
{
    // 448A 0041;	
    // (䒊) CJK UNIFIED IDEOGRAPH-448A	[FB80 C48A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x448A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC48A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_288)
{
    // 448A 0062;	
    // (䒊) CJK UNIFIED IDEOGRAPH-448A	[FB80 C48A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x448A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC48A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_289)
{
    // 448B 0021;	
    // (䒋) CJK UNIFIED IDEOGRAPH-448B	[FB80 C48B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x448B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC48B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_290)
{
    // 448B 003F;	
    // (䒋) CJK UNIFIED IDEOGRAPH-448B	[FB80 C48B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x448B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC48B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_291)
{
    // 448B 0061;	
    // (䒋) CJK UNIFIED IDEOGRAPH-448B	[FB80 C48B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x448B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC48B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_292)
{
    // 448B 0041;	
    // (䒋) CJK UNIFIED IDEOGRAPH-448B	[FB80 C48B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x448B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC48B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_293)
{
    // 448B 0062;	
    // (䒋) CJK UNIFIED IDEOGRAPH-448B	[FB80 C48B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x448B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC48B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_294)
{
    // 448C 0021;	
    // (䒌) CJK UNIFIED IDEOGRAPH-448C	[FB80 C48C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x448C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC48C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_295)
{
    // 448C 003F;	
    // (䒌) CJK UNIFIED IDEOGRAPH-448C	[FB80 C48C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x448C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC48C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_296)
{
    // 448C 0061;	
    // (䒌) CJK UNIFIED IDEOGRAPH-448C	[FB80 C48C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x448C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC48C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_297)
{
    // 448C 0041;	
    // (䒌) CJK UNIFIED IDEOGRAPH-448C	[FB80 C48C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x448C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC48C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_298)
{
    // 448C 0062;	
    // (䒌) CJK UNIFIED IDEOGRAPH-448C	[FB80 C48C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x448C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC48C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_299)
{
    // 448D 0021;	
    // (䒍) CJK UNIFIED IDEOGRAPH-448D	[FB80 C48D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x448D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC48D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_300)
{
    // 448D 003F;	
    // (䒍) CJK UNIFIED IDEOGRAPH-448D	[FB80 C48D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x448D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC48D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_301)
{
    // 448D 0061;	
    // (䒍) CJK UNIFIED IDEOGRAPH-448D	[FB80 C48D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x448D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC48D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_302)
{
    // 448D 0041;	
    // (䒍) CJK UNIFIED IDEOGRAPH-448D	[FB80 C48D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x448D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC48D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_303)
{
    // 448D 0062;	
    // (䒍) CJK UNIFIED IDEOGRAPH-448D	[FB80 C48D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x448D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC48D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_304)
{
    // 448E 0021;	
    // (䒎) CJK UNIFIED IDEOGRAPH-448E	[FB80 C48E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x448E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC48E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_305)
{
    // 448E 003F;	
    // (䒎) CJK UNIFIED IDEOGRAPH-448E	[FB80 C48E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x448E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC48E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_306)
{
    // 448E 0061;	
    // (䒎) CJK UNIFIED IDEOGRAPH-448E	[FB80 C48E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x448E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC48E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_307)
{
    // 448E 0041;	
    // (䒎) CJK UNIFIED IDEOGRAPH-448E	[FB80 C48E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x448E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC48E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_308)
{
    // 448E 0062;	
    // (䒎) CJK UNIFIED IDEOGRAPH-448E	[FB80 C48E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x448E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC48E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_309)
{
    // 448F 0021;	
    // (䒏) CJK UNIFIED IDEOGRAPH-448F	[FB80 C48F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x448F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC48F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_310)
{
    // 448F 003F;	
    // (䒏) CJK UNIFIED IDEOGRAPH-448F	[FB80 C48F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x448F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC48F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_311)
{
    // 448F 0061;	
    // (䒏) CJK UNIFIED IDEOGRAPH-448F	[FB80 C48F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x448F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC48F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_312)
{
    // 448F 0041;	
    // (䒏) CJK UNIFIED IDEOGRAPH-448F	[FB80 C48F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x448F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC48F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_313)
{
    // 448F 0062;	
    // (䒏) CJK UNIFIED IDEOGRAPH-448F	[FB80 C48F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x448F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC48F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_314)
{
    // 4490 0021;	
    // (䒐) CJK UNIFIED IDEOGRAPH-4490	[FB80 C490 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4490, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC490, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_315)
{
    // 4490 003F;	
    // (䒐) CJK UNIFIED IDEOGRAPH-4490	[FB80 C490 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4490, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC490, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_316)
{
    // 4490 0061;	
    // (䒐) CJK UNIFIED IDEOGRAPH-4490	[FB80 C490 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4490, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC490, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_317)
{
    // 4490 0041;	
    // (䒐) CJK UNIFIED IDEOGRAPH-4490	[FB80 C490 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4490, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC490, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_318)
{
    // 4490 0062;	
    // (䒐) CJK UNIFIED IDEOGRAPH-4490	[FB80 C490 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4490, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC490, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_319)
{
    // 4491 0021;	
    // (䒑) CJK UNIFIED IDEOGRAPH-4491	[FB80 C491 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4491, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC491, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_320)
{
    // 4491 003F;	
    // (䒑) CJK UNIFIED IDEOGRAPH-4491	[FB80 C491 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4491, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC491, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_321)
{
    // 4491 0061;	
    // (䒑) CJK UNIFIED IDEOGRAPH-4491	[FB80 C491 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4491, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC491, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_322)
{
    // 4491 0041;	
    // (䒑) CJK UNIFIED IDEOGRAPH-4491	[FB80 C491 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4491, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC491, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_323)
{
    // 4491 0062;	
    // (䒑) CJK UNIFIED IDEOGRAPH-4491	[FB80 C491 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4491, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC491, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_324)
{
    // 4492 0021;	
    // (䒒) CJK UNIFIED IDEOGRAPH-4492	[FB80 C492 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4492, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC492, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_325)
{
    // 4492 003F;	
    // (䒒) CJK UNIFIED IDEOGRAPH-4492	[FB80 C492 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4492, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC492, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_326)
{
    // 4492 0061;	
    // (䒒) CJK UNIFIED IDEOGRAPH-4492	[FB80 C492 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4492, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC492, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_327)
{
    // 4492 0041;	
    // (䒒) CJK UNIFIED IDEOGRAPH-4492	[FB80 C492 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4492, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC492, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_328)
{
    // 4492 0062;	
    // (䒒) CJK UNIFIED IDEOGRAPH-4492	[FB80 C492 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4492, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC492, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_329)
{
    // 4493 0021;	
    // (䒓) CJK UNIFIED IDEOGRAPH-4493	[FB80 C493 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4493, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC493, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_330)
{
    // 4493 003F;	
    // (䒓) CJK UNIFIED IDEOGRAPH-4493	[FB80 C493 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4493, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC493, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_331)
{
    // 4493 0061;	
    // (䒓) CJK UNIFIED IDEOGRAPH-4493	[FB80 C493 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4493, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC493, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_332)
{
    // 4493 0041;	
    // (䒓) CJK UNIFIED IDEOGRAPH-4493	[FB80 C493 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4493, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC493, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_333)
{
    // 4493 0062;	
    // (䒓) CJK UNIFIED IDEOGRAPH-4493	[FB80 C493 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4493, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC493, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_334)
{
    // 4494 0021;	
    // (䒔) CJK UNIFIED IDEOGRAPH-4494	[FB80 C494 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4494, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC494, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_335)
{
    // 4494 003F;	
    // (䒔) CJK UNIFIED IDEOGRAPH-4494	[FB80 C494 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4494, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC494, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_336)
{
    // 4494 0061;	
    // (䒔) CJK UNIFIED IDEOGRAPH-4494	[FB80 C494 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4494, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC494, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_337)
{
    // 4494 0041;	
    // (䒔) CJK UNIFIED IDEOGRAPH-4494	[FB80 C494 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4494, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC494, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_338)
{
    // 4494 0062;	
    // (䒔) CJK UNIFIED IDEOGRAPH-4494	[FB80 C494 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4494, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC494, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_339)
{
    // 4495 0021;	
    // (䒕) CJK UNIFIED IDEOGRAPH-4495	[FB80 C495 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4495, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC495, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_340)
{
    // 4495 003F;	
    // (䒕) CJK UNIFIED IDEOGRAPH-4495	[FB80 C495 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4495, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC495, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_341)
{
    // 4495 0061;	
    // (䒕) CJK UNIFIED IDEOGRAPH-4495	[FB80 C495 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4495, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC495, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_342)
{
    // 4495 0041;	
    // (䒕) CJK UNIFIED IDEOGRAPH-4495	[FB80 C495 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4495, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC495, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_343)
{
    // 4495 0062;	
    // (䒕) CJK UNIFIED IDEOGRAPH-4495	[FB80 C495 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4495, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC495, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_344)
{
    // 4496 0021;	
    // (䒖) CJK UNIFIED IDEOGRAPH-4496	[FB80 C496 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4496, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC496, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_345)
{
    // 4496 003F;	
    // (䒖) CJK UNIFIED IDEOGRAPH-4496	[FB80 C496 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4496, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC496, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_346)
{
    // 4496 0061;	
    // (䒖) CJK UNIFIED IDEOGRAPH-4496	[FB80 C496 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4496, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC496, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_347)
{
    // 4496 0041;	
    // (䒖) CJK UNIFIED IDEOGRAPH-4496	[FB80 C496 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4496, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC496, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_348)
{
    // 4496 0062;	
    // (䒖) CJK UNIFIED IDEOGRAPH-4496	[FB80 C496 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4496, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC496, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_349)
{
    // 4497 0021;	
    // (䒗) CJK UNIFIED IDEOGRAPH-4497	[FB80 C497 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4497, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC497, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_350)
{
    // 4497 003F;	
    // (䒗) CJK UNIFIED IDEOGRAPH-4497	[FB80 C497 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4497, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC497, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_351)
{
    // 4497 0061;	
    // (䒗) CJK UNIFIED IDEOGRAPH-4497	[FB80 C497 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4497, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC497, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_352)
{
    // 4497 0041;	
    // (䒗) CJK UNIFIED IDEOGRAPH-4497	[FB80 C497 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4497, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC497, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_353)
{
    // 4497 0062;	
    // (䒗) CJK UNIFIED IDEOGRAPH-4497	[FB80 C497 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4497, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC497, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_354)
{
    // 4498 0021;	
    // (䒘) CJK UNIFIED IDEOGRAPH-4498	[FB80 C498 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4498, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC498, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_355)
{
    // 4498 003F;	
    // (䒘) CJK UNIFIED IDEOGRAPH-4498	[FB80 C498 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4498, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC498, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_356)
{
    // 4498 0061;	
    // (䒘) CJK UNIFIED IDEOGRAPH-4498	[FB80 C498 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4498, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC498, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_357)
{
    // 4498 0041;	
    // (䒘) CJK UNIFIED IDEOGRAPH-4498	[FB80 C498 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4498, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC498, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_358)
{
    // 4498 0062;	
    // (䒘) CJK UNIFIED IDEOGRAPH-4498	[FB80 C498 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4498, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC498, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_359)
{
    // 4499 0021;	
    // (䒙) CJK UNIFIED IDEOGRAPH-4499	[FB80 C499 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4499, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC499, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_360)
{
    // 4499 003F;	
    // (䒙) CJK UNIFIED IDEOGRAPH-4499	[FB80 C499 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4499, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC499, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_361)
{
    // 4499 0061;	
    // (䒙) CJK UNIFIED IDEOGRAPH-4499	[FB80 C499 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4499, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC499, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_362)
{
    // 4499 0041;	
    // (䒙) CJK UNIFIED IDEOGRAPH-4499	[FB80 C499 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4499, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC499, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_363)
{
    // 4499 0062;	
    // (䒙) CJK UNIFIED IDEOGRAPH-4499	[FB80 C499 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4499, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC499, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_364)
{
    // 449A 0021;	
    // (䒚) CJK UNIFIED IDEOGRAPH-449A	[FB80 C49A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x449A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC49A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_365)
{
    // 449A 003F;	
    // (䒚) CJK UNIFIED IDEOGRAPH-449A	[FB80 C49A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x449A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC49A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_366)
{
    // 449A 0061;	
    // (䒚) CJK UNIFIED IDEOGRAPH-449A	[FB80 C49A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x449A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC49A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_367)
{
    // 449A 0041;	
    // (䒚) CJK UNIFIED IDEOGRAPH-449A	[FB80 C49A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x449A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC49A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_368)
{
    // 449A 0062;	
    // (䒚) CJK UNIFIED IDEOGRAPH-449A	[FB80 C49A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x449A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC49A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_369)
{
    // 449B 0021;	
    // (䒛) CJK UNIFIED IDEOGRAPH-449B	[FB80 C49B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x449B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC49B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_370)
{
    // 449B 003F;	
    // (䒛) CJK UNIFIED IDEOGRAPH-449B	[FB80 C49B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x449B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC49B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_371)
{
    // 449B 0061;	
    // (䒛) CJK UNIFIED IDEOGRAPH-449B	[FB80 C49B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x449B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC49B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_372)
{
    // 449B 0041;	
    // (䒛) CJK UNIFIED IDEOGRAPH-449B	[FB80 C49B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x449B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC49B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_373)
{
    // 449B 0062;	
    // (䒛) CJK UNIFIED IDEOGRAPH-449B	[FB80 C49B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x449B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC49B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_374)
{
    // 449C 0021;	
    // (䒜) CJK UNIFIED IDEOGRAPH-449C	[FB80 C49C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x449C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC49C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_375)
{
    // 449C 003F;	
    // (䒜) CJK UNIFIED IDEOGRAPH-449C	[FB80 C49C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x449C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC49C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_376)
{
    // 449C 0061;	
    // (䒜) CJK UNIFIED IDEOGRAPH-449C	[FB80 C49C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x449C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC49C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_377)
{
    // 449C 0041;	
    // (䒜) CJK UNIFIED IDEOGRAPH-449C	[FB80 C49C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x449C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC49C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_378)
{
    // 449C 0062;	
    // (䒜) CJK UNIFIED IDEOGRAPH-449C	[FB80 C49C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x449C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC49C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_379)
{
    // 449D 0021;	
    // (䒝) CJK UNIFIED IDEOGRAPH-449D	[FB80 C49D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x449D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC49D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_380)
{
    // 449D 003F;	
    // (䒝) CJK UNIFIED IDEOGRAPH-449D	[FB80 C49D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x449D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC49D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_381)
{
    // 449D 0061;	
    // (䒝) CJK UNIFIED IDEOGRAPH-449D	[FB80 C49D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x449D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC49D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_382)
{
    // 449D 0041;	
    // (䒝) CJK UNIFIED IDEOGRAPH-449D	[FB80 C49D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x449D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC49D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_383)
{
    // 449D 0062;	
    // (䒝) CJK UNIFIED IDEOGRAPH-449D	[FB80 C49D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x449D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC49D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_384)
{
    // 449E 0021;	
    // (䒞) CJK UNIFIED IDEOGRAPH-449E	[FB80 C49E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x449E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC49E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_385)
{
    // 449E 003F;	
    // (䒞) CJK UNIFIED IDEOGRAPH-449E	[FB80 C49E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x449E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC49E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_386)
{
    // 449E 0061;	
    // (䒞) CJK UNIFIED IDEOGRAPH-449E	[FB80 C49E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x449E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC49E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_387)
{
    // 449E 0041;	
    // (䒞) CJK UNIFIED IDEOGRAPH-449E	[FB80 C49E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x449E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC49E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_388)
{
    // 449E 0062;	
    // (䒞) CJK UNIFIED IDEOGRAPH-449E	[FB80 C49E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x449E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC49E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_389)
{
    // 449F 0021;	
    // (䒟) CJK UNIFIED IDEOGRAPH-449F	[FB80 C49F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x449F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC49F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_390)
{
    // 449F 003F;	
    // (䒟) CJK UNIFIED IDEOGRAPH-449F	[FB80 C49F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x449F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC49F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_391)
{
    // 449F 0061;	
    // (䒟) CJK UNIFIED IDEOGRAPH-449F	[FB80 C49F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x449F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC49F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_392)
{
    // 449F 0041;	
    // (䒟) CJK UNIFIED IDEOGRAPH-449F	[FB80 C49F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x449F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC49F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_393)
{
    // 449F 0062;	
    // (䒟) CJK UNIFIED IDEOGRAPH-449F	[FB80 C49F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x449F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC49F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_394)
{
    // 44A0 0021;	
    // (䒠) CJK UNIFIED IDEOGRAPH-44A0	[FB80 C4A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_395)
{
    // 44A0 003F;	
    // (䒠) CJK UNIFIED IDEOGRAPH-44A0	[FB80 C4A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_396)
{
    // 44A0 0061;	
    // (䒠) CJK UNIFIED IDEOGRAPH-44A0	[FB80 C4A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_397)
{
    // 44A0 0041;	
    // (䒠) CJK UNIFIED IDEOGRAPH-44A0	[FB80 C4A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44A0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_398)
{
    // 44A0 0062;	
    // (䒠) CJK UNIFIED IDEOGRAPH-44A0	[FB80 C4A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_399)
{
    // 44A1 0021;	
    // (䒡) CJK UNIFIED IDEOGRAPH-44A1	[FB80 C4A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_400)
{
    // 44A1 003F;	
    // (䒡) CJK UNIFIED IDEOGRAPH-44A1	[FB80 C4A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_401)
{
    // 44A1 0061;	
    // (䒡) CJK UNIFIED IDEOGRAPH-44A1	[FB80 C4A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_402)
{
    // 44A1 0041;	
    // (䒡) CJK UNIFIED IDEOGRAPH-44A1	[FB80 C4A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44A1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_403)
{
    // 44A1 0062;	
    // (䒡) CJK UNIFIED IDEOGRAPH-44A1	[FB80 C4A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_404)
{
    // 44A2 0021;	
    // (䒢) CJK UNIFIED IDEOGRAPH-44A2	[FB80 C4A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_405)
{
    // 44A2 003F;	
    // (䒢) CJK UNIFIED IDEOGRAPH-44A2	[FB80 C4A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_406)
{
    // 44A2 0061;	
    // (䒢) CJK UNIFIED IDEOGRAPH-44A2	[FB80 C4A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_407)
{
    // 44A2 0041;	
    // (䒢) CJK UNIFIED IDEOGRAPH-44A2	[FB80 C4A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44A2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_408)
{
    // 44A2 0062;	
    // (䒢) CJK UNIFIED IDEOGRAPH-44A2	[FB80 C4A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_409)
{
    // 44A3 0021;	
    // (䒣) CJK UNIFIED IDEOGRAPH-44A3	[FB80 C4A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_410)
{
    // 44A3 003F;	
    // (䒣) CJK UNIFIED IDEOGRAPH-44A3	[FB80 C4A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_411)
{
    // 44A3 0061;	
    // (䒣) CJK UNIFIED IDEOGRAPH-44A3	[FB80 C4A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_412)
{
    // 44A3 0041;	
    // (䒣) CJK UNIFIED IDEOGRAPH-44A3	[FB80 C4A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44A3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_413)
{
    // 44A3 0062;	
    // (䒣) CJK UNIFIED IDEOGRAPH-44A3	[FB80 C4A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_414)
{
    // 44A4 0021;	
    // (䒤) CJK UNIFIED IDEOGRAPH-44A4	[FB80 C4A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_415)
{
    // 44A4 003F;	
    // (䒤) CJK UNIFIED IDEOGRAPH-44A4	[FB80 C4A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_416)
{
    // 44A4 0061;	
    // (䒤) CJK UNIFIED IDEOGRAPH-44A4	[FB80 C4A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_417)
{
    // 44A4 0041;	
    // (䒤) CJK UNIFIED IDEOGRAPH-44A4	[FB80 C4A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44A4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_418)
{
    // 44A4 0062;	
    // (䒤) CJK UNIFIED IDEOGRAPH-44A4	[FB80 C4A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_419)
{
    // 44A5 0021;	
    // (䒥) CJK UNIFIED IDEOGRAPH-44A5	[FB80 C4A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_420)
{
    // 44A5 003F;	
    // (䒥) CJK UNIFIED IDEOGRAPH-44A5	[FB80 C4A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_421)
{
    // 44A5 0061;	
    // (䒥) CJK UNIFIED IDEOGRAPH-44A5	[FB80 C4A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_422)
{
    // 44A5 0041;	
    // (䒥) CJK UNIFIED IDEOGRAPH-44A5	[FB80 C4A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44A5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_423)
{
    // 44A5 0062;	
    // (䒥) CJK UNIFIED IDEOGRAPH-44A5	[FB80 C4A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_424)
{
    // 44A6 0021;	
    // (䒦) CJK UNIFIED IDEOGRAPH-44A6	[FB80 C4A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_425)
{
    // 44A6 003F;	
    // (䒦) CJK UNIFIED IDEOGRAPH-44A6	[FB80 C4A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_426)
{
    // 44A6 0061;	
    // (䒦) CJK UNIFIED IDEOGRAPH-44A6	[FB80 C4A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_427)
{
    // 44A6 0041;	
    // (䒦) CJK UNIFIED IDEOGRAPH-44A6	[FB80 C4A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44A6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_428)
{
    // 44A6 0062;	
    // (䒦) CJK UNIFIED IDEOGRAPH-44A6	[FB80 C4A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_429)
{
    // 44A7 0021;	
    // (䒧) CJK UNIFIED IDEOGRAPH-44A7	[FB80 C4A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_430)
{
    // 44A7 003F;	
    // (䒧) CJK UNIFIED IDEOGRAPH-44A7	[FB80 C4A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_431)
{
    // 44A7 0061;	
    // (䒧) CJK UNIFIED IDEOGRAPH-44A7	[FB80 C4A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_432)
{
    // 44A7 0041;	
    // (䒧) CJK UNIFIED IDEOGRAPH-44A7	[FB80 C4A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44A7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_433)
{
    // 44A7 0062;	
    // (䒧) CJK UNIFIED IDEOGRAPH-44A7	[FB80 C4A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_434)
{
    // 44A8 0021;	
    // (䒨) CJK UNIFIED IDEOGRAPH-44A8	[FB80 C4A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_435)
{
    // 44A8 003F;	
    // (䒨) CJK UNIFIED IDEOGRAPH-44A8	[FB80 C4A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_436)
{
    // 44A8 0061;	
    // (䒨) CJK UNIFIED IDEOGRAPH-44A8	[FB80 C4A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_437)
{
    // 44A8 0041;	
    // (䒨) CJK UNIFIED IDEOGRAPH-44A8	[FB80 C4A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44A8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_438)
{
    // 44A8 0062;	
    // (䒨) CJK UNIFIED IDEOGRAPH-44A8	[FB80 C4A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_439)
{
    // 44A9 0021;	
    // (䒩) CJK UNIFIED IDEOGRAPH-44A9	[FB80 C4A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_440)
{
    // 44A9 003F;	
    // (䒩) CJK UNIFIED IDEOGRAPH-44A9	[FB80 C4A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_441)
{
    // 44A9 0061;	
    // (䒩) CJK UNIFIED IDEOGRAPH-44A9	[FB80 C4A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_442)
{
    // 44A9 0041;	
    // (䒩) CJK UNIFIED IDEOGRAPH-44A9	[FB80 C4A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44A9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_443)
{
    // 44A9 0062;	
    // (䒩) CJK UNIFIED IDEOGRAPH-44A9	[FB80 C4A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44A9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_444)
{
    // 44AA 0021;	
    // (䒪) CJK UNIFIED IDEOGRAPH-44AA	[FB80 C4AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44AA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_445)
{
    // 44AA 003F;	
    // (䒪) CJK UNIFIED IDEOGRAPH-44AA	[FB80 C4AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44AA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_446)
{
    // 44AA 0061;	
    // (䒪) CJK UNIFIED IDEOGRAPH-44AA	[FB80 C4AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44AA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_447)
{
    // 44AA 0041;	
    // (䒪) CJK UNIFIED IDEOGRAPH-44AA	[FB80 C4AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44AA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_448)
{
    // 44AA 0062;	
    // (䒪) CJK UNIFIED IDEOGRAPH-44AA	[FB80 C4AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44AA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_449)
{
    // 44AB 0021;	
    // (䒫) CJK UNIFIED IDEOGRAPH-44AB	[FB80 C4AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44AB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_450)
{
    // 44AB 003F;	
    // (䒫) CJK UNIFIED IDEOGRAPH-44AB	[FB80 C4AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44AB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_451)
{
    // 44AB 0061;	
    // (䒫) CJK UNIFIED IDEOGRAPH-44AB	[FB80 C4AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44AB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_452)
{
    // 44AB 0041;	
    // (䒫) CJK UNIFIED IDEOGRAPH-44AB	[FB80 C4AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44AB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_453)
{
    // 44AB 0062;	
    // (䒫) CJK UNIFIED IDEOGRAPH-44AB	[FB80 C4AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44AB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_454)
{
    // 44AC 0021;	
    // (䒬) CJK UNIFIED IDEOGRAPH-44AC	[FB80 C4AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44AC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_455)
{
    // 44AC 003F;	
    // (䒬) CJK UNIFIED IDEOGRAPH-44AC	[FB80 C4AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44AC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_456)
{
    // 44AC 0061;	
    // (䒬) CJK UNIFIED IDEOGRAPH-44AC	[FB80 C4AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44AC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_457)
{
    // 44AC 0041;	
    // (䒬) CJK UNIFIED IDEOGRAPH-44AC	[FB80 C4AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44AC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_458)
{
    // 44AC 0062;	
    // (䒬) CJK UNIFIED IDEOGRAPH-44AC	[FB80 C4AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44AC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_459)
{
    // 44AD 0021;	
    // (䒭) CJK UNIFIED IDEOGRAPH-44AD	[FB80 C4AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44AD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_460)
{
    // 44AD 003F;	
    // (䒭) CJK UNIFIED IDEOGRAPH-44AD	[FB80 C4AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44AD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_461)
{
    // 44AD 0061;	
    // (䒭) CJK UNIFIED IDEOGRAPH-44AD	[FB80 C4AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44AD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_462)
{
    // 44AD 0041;	
    // (䒭) CJK UNIFIED IDEOGRAPH-44AD	[FB80 C4AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44AD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_463)
{
    // 44AD 0062;	
    // (䒭) CJK UNIFIED IDEOGRAPH-44AD	[FB80 C4AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44AD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_464)
{
    // 44AE 0021;	
    // (䒮) CJK UNIFIED IDEOGRAPH-44AE	[FB80 C4AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44AE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_465)
{
    // 44AE 003F;	
    // (䒮) CJK UNIFIED IDEOGRAPH-44AE	[FB80 C4AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44AE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_466)
{
    // 44AE 0061;	
    // (䒮) CJK UNIFIED IDEOGRAPH-44AE	[FB80 C4AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44AE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_467)
{
    // 44AE 0041;	
    // (䒮) CJK UNIFIED IDEOGRAPH-44AE	[FB80 C4AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44AE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_468)
{
    // 44AE 0062;	
    // (䒮) CJK UNIFIED IDEOGRAPH-44AE	[FB80 C4AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44AE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_469)
{
    // 44AF 0021;	
    // (䒯) CJK UNIFIED IDEOGRAPH-44AF	[FB80 C4AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44AF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_470)
{
    // 44AF 003F;	
    // (䒯) CJK UNIFIED IDEOGRAPH-44AF	[FB80 C4AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44AF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_471)
{
    // 44AF 0061;	
    // (䒯) CJK UNIFIED IDEOGRAPH-44AF	[FB80 C4AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44AF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_472)
{
    // 44AF 0041;	
    // (䒯) CJK UNIFIED IDEOGRAPH-44AF	[FB80 C4AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44AF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_473)
{
    // 44AF 0062;	
    // (䒯) CJK UNIFIED IDEOGRAPH-44AF	[FB80 C4AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44AF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_474)
{
    // 44B0 0021;	
    // (䒰) CJK UNIFIED IDEOGRAPH-44B0	[FB80 C4B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_475)
{
    // 44B0 003F;	
    // (䒰) CJK UNIFIED IDEOGRAPH-44B0	[FB80 C4B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_476)
{
    // 44B0 0061;	
    // (䒰) CJK UNIFIED IDEOGRAPH-44B0	[FB80 C4B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_477)
{
    // 44B0 0041;	
    // (䒰) CJK UNIFIED IDEOGRAPH-44B0	[FB80 C4B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44B0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_478)
{
    // 44B0 0062;	
    // (䒰) CJK UNIFIED IDEOGRAPH-44B0	[FB80 C4B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_479)
{
    // 44B1 0021;	
    // (䒱) CJK UNIFIED IDEOGRAPH-44B1	[FB80 C4B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_480)
{
    // 44B1 003F;	
    // (䒱) CJK UNIFIED IDEOGRAPH-44B1	[FB80 C4B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_481)
{
    // 44B1 0061;	
    // (䒱) CJK UNIFIED IDEOGRAPH-44B1	[FB80 C4B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_482)
{
    // 44B1 0041;	
    // (䒱) CJK UNIFIED IDEOGRAPH-44B1	[FB80 C4B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44B1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_483)
{
    // 44B1 0062;	
    // (䒱) CJK UNIFIED IDEOGRAPH-44B1	[FB80 C4B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_484)
{
    // 44B2 0021;	
    // (䒲) CJK UNIFIED IDEOGRAPH-44B2	[FB80 C4B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_485)
{
    // 44B2 003F;	
    // (䒲) CJK UNIFIED IDEOGRAPH-44B2	[FB80 C4B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_486)
{
    // 44B2 0061;	
    // (䒲) CJK UNIFIED IDEOGRAPH-44B2	[FB80 C4B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_487)
{
    // 44B2 0041;	
    // (䒲) CJK UNIFIED IDEOGRAPH-44B2	[FB80 C4B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44B2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_488)
{
    // 44B2 0062;	
    // (䒲) CJK UNIFIED IDEOGRAPH-44B2	[FB80 C4B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_489)
{
    // 44B3 0021;	
    // (䒳) CJK UNIFIED IDEOGRAPH-44B3	[FB80 C4B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_490)
{
    // 44B3 003F;	
    // (䒳) CJK UNIFIED IDEOGRAPH-44B3	[FB80 C4B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_491)
{
    // 44B3 0061;	
    // (䒳) CJK UNIFIED IDEOGRAPH-44B3	[FB80 C4B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_492)
{
    // 44B3 0041;	
    // (䒳) CJK UNIFIED IDEOGRAPH-44B3	[FB80 C4B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44B3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_493)
{
    // 44B3 0062;	
    // (䒳) CJK UNIFIED IDEOGRAPH-44B3	[FB80 C4B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_494)
{
    // 44B4 0021;	
    // (䒴) CJK UNIFIED IDEOGRAPH-44B4	[FB80 C4B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_495)
{
    // 44B4 003F;	
    // (䒴) CJK UNIFIED IDEOGRAPH-44B4	[FB80 C4B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_496)
{
    // 44B4 0061;	
    // (䒴) CJK UNIFIED IDEOGRAPH-44B4	[FB80 C4B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_497)
{
    // 44B4 0041;	
    // (䒴) CJK UNIFIED IDEOGRAPH-44B4	[FB80 C4B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44B4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_498)
{
    // 44B4 0062;	
    // (䒴) CJK UNIFIED IDEOGRAPH-44B4	[FB80 C4B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_369_499)
{
    // 44B5 0021;	
    // (䒵) CJK UNIFIED IDEOGRAPH-44B5	[FB80 C4B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

