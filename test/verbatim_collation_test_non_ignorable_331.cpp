// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_331_000)
{
    // 35A6 003F;	
    // (㖦) CJK UNIFIED IDEOGRAPH-35A6	[FB80 B5A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_001)
{
    // 35A6 0061;	
    // (㖦) CJK UNIFIED IDEOGRAPH-35A6	[FB80 B5A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_002)
{
    // 35A6 0041;	
    // (㖦) CJK UNIFIED IDEOGRAPH-35A6	[FB80 B5A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35A6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_003)
{
    // 35A6 0062;	
    // (㖦) CJK UNIFIED IDEOGRAPH-35A6	[FB80 B5A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_004)
{
    // 35A7 0021;	
    // (㖧) CJK UNIFIED IDEOGRAPH-35A7	[FB80 B5A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_005)
{
    // 35A7 003F;	
    // (㖧) CJK UNIFIED IDEOGRAPH-35A7	[FB80 B5A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_006)
{
    // 35A7 0061;	
    // (㖧) CJK UNIFIED IDEOGRAPH-35A7	[FB80 B5A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_007)
{
    // 35A7 0041;	
    // (㖧) CJK UNIFIED IDEOGRAPH-35A7	[FB80 B5A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35A7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_008)
{
    // 35A7 0062;	
    // (㖧) CJK UNIFIED IDEOGRAPH-35A7	[FB80 B5A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_009)
{
    // 35A8 0021;	
    // (㖨) CJK UNIFIED IDEOGRAPH-35A8	[FB80 B5A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_010)
{
    // 35A8 003F;	
    // (㖨) CJK UNIFIED IDEOGRAPH-35A8	[FB80 B5A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_011)
{
    // 35A8 0061;	
    // (㖨) CJK UNIFIED IDEOGRAPH-35A8	[FB80 B5A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_012)
{
    // 35A8 0041;	
    // (㖨) CJK UNIFIED IDEOGRAPH-35A8	[FB80 B5A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35A8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_013)
{
    // 35A8 0062;	
    // (㖨) CJK UNIFIED IDEOGRAPH-35A8	[FB80 B5A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_014)
{
    // 35A9 0021;	
    // (㖩) CJK UNIFIED IDEOGRAPH-35A9	[FB80 B5A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_015)
{
    // 35A9 003F;	
    // (㖩) CJK UNIFIED IDEOGRAPH-35A9	[FB80 B5A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_016)
{
    // 35A9 0061;	
    // (㖩) CJK UNIFIED IDEOGRAPH-35A9	[FB80 B5A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_017)
{
    // 35A9 0041;	
    // (㖩) CJK UNIFIED IDEOGRAPH-35A9	[FB80 B5A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35A9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_018)
{
    // 35A9 0062;	
    // (㖩) CJK UNIFIED IDEOGRAPH-35A9	[FB80 B5A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_019)
{
    // 35AA 0021;	
    // (㖪) CJK UNIFIED IDEOGRAPH-35AA	[FB80 B5AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35AA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_020)
{
    // 35AA 003F;	
    // (㖪) CJK UNIFIED IDEOGRAPH-35AA	[FB80 B5AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35AA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_021)
{
    // 35AA 0061;	
    // (㖪) CJK UNIFIED IDEOGRAPH-35AA	[FB80 B5AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35AA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_022)
{
    // 35AA 0041;	
    // (㖪) CJK UNIFIED IDEOGRAPH-35AA	[FB80 B5AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35AA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_023)
{
    // 35AA 0062;	
    // (㖪) CJK UNIFIED IDEOGRAPH-35AA	[FB80 B5AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35AA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_024)
{
    // 35AB 0021;	
    // (㖫) CJK UNIFIED IDEOGRAPH-35AB	[FB80 B5AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35AB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_025)
{
    // 35AB 003F;	
    // (㖫) CJK UNIFIED IDEOGRAPH-35AB	[FB80 B5AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35AB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_026)
{
    // 35AB 0061;	
    // (㖫) CJK UNIFIED IDEOGRAPH-35AB	[FB80 B5AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35AB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_027)
{
    // 35AB 0041;	
    // (㖫) CJK UNIFIED IDEOGRAPH-35AB	[FB80 B5AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35AB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_028)
{
    // 35AB 0062;	
    // (㖫) CJK UNIFIED IDEOGRAPH-35AB	[FB80 B5AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35AB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_029)
{
    // 35AC 0021;	
    // (㖬) CJK UNIFIED IDEOGRAPH-35AC	[FB80 B5AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35AC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_030)
{
    // 35AC 003F;	
    // (㖬) CJK UNIFIED IDEOGRAPH-35AC	[FB80 B5AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35AC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_031)
{
    // 35AC 0061;	
    // (㖬) CJK UNIFIED IDEOGRAPH-35AC	[FB80 B5AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35AC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_032)
{
    // 35AC 0041;	
    // (㖬) CJK UNIFIED IDEOGRAPH-35AC	[FB80 B5AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35AC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_033)
{
    // 35AC 0062;	
    // (㖬) CJK UNIFIED IDEOGRAPH-35AC	[FB80 B5AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35AC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_034)
{
    // 35AD 0021;	
    // (㖭) CJK UNIFIED IDEOGRAPH-35AD	[FB80 B5AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35AD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_035)
{
    // 35AD 003F;	
    // (㖭) CJK UNIFIED IDEOGRAPH-35AD	[FB80 B5AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35AD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_036)
{
    // 35AD 0061;	
    // (㖭) CJK UNIFIED IDEOGRAPH-35AD	[FB80 B5AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35AD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_037)
{
    // 35AD 0041;	
    // (㖭) CJK UNIFIED IDEOGRAPH-35AD	[FB80 B5AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35AD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_038)
{
    // 35AD 0062;	
    // (㖭) CJK UNIFIED IDEOGRAPH-35AD	[FB80 B5AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35AD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_039)
{
    // 35AE 0021;	
    // (㖮) CJK UNIFIED IDEOGRAPH-35AE	[FB80 B5AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35AE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_040)
{
    // 35AE 003F;	
    // (㖮) CJK UNIFIED IDEOGRAPH-35AE	[FB80 B5AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35AE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_041)
{
    // 35AE 0061;	
    // (㖮) CJK UNIFIED IDEOGRAPH-35AE	[FB80 B5AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35AE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_042)
{
    // 35AE 0041;	
    // (㖮) CJK UNIFIED IDEOGRAPH-35AE	[FB80 B5AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35AE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_043)
{
    // 35AE 0062;	
    // (㖮) CJK UNIFIED IDEOGRAPH-35AE	[FB80 B5AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35AE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_044)
{
    // 35AF 0021;	
    // (㖯) CJK UNIFIED IDEOGRAPH-35AF	[FB80 B5AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35AF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_045)
{
    // 35AF 003F;	
    // (㖯) CJK UNIFIED IDEOGRAPH-35AF	[FB80 B5AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35AF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_046)
{
    // 35AF 0061;	
    // (㖯) CJK UNIFIED IDEOGRAPH-35AF	[FB80 B5AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35AF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_047)
{
    // 35AF 0041;	
    // (㖯) CJK UNIFIED IDEOGRAPH-35AF	[FB80 B5AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35AF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_048)
{
    // 35AF 0062;	
    // (㖯) CJK UNIFIED IDEOGRAPH-35AF	[FB80 B5AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35AF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_049)
{
    // 35B0 0021;	
    // (㖰) CJK UNIFIED IDEOGRAPH-35B0	[FB80 B5B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_050)
{
    // 35B0 003F;	
    // (㖰) CJK UNIFIED IDEOGRAPH-35B0	[FB80 B5B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_051)
{
    // 35B0 0061;	
    // (㖰) CJK UNIFIED IDEOGRAPH-35B0	[FB80 B5B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_052)
{
    // 35B0 0041;	
    // (㖰) CJK UNIFIED IDEOGRAPH-35B0	[FB80 B5B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35B0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_053)
{
    // 35B0 0062;	
    // (㖰) CJK UNIFIED IDEOGRAPH-35B0	[FB80 B5B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_054)
{
    // 35B1 0021;	
    // (㖱) CJK UNIFIED IDEOGRAPH-35B1	[FB80 B5B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_055)
{
    // 35B1 003F;	
    // (㖱) CJK UNIFIED IDEOGRAPH-35B1	[FB80 B5B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_056)
{
    // 35B1 0061;	
    // (㖱) CJK UNIFIED IDEOGRAPH-35B1	[FB80 B5B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_057)
{
    // 35B1 0041;	
    // (㖱) CJK UNIFIED IDEOGRAPH-35B1	[FB80 B5B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35B1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_058)
{
    // 35B1 0062;	
    // (㖱) CJK UNIFIED IDEOGRAPH-35B1	[FB80 B5B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_059)
{
    // 35B2 0021;	
    // (㖲) CJK UNIFIED IDEOGRAPH-35B2	[FB80 B5B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_060)
{
    // 35B2 003F;	
    // (㖲) CJK UNIFIED IDEOGRAPH-35B2	[FB80 B5B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_061)
{
    // 35B2 0061;	
    // (㖲) CJK UNIFIED IDEOGRAPH-35B2	[FB80 B5B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_062)
{
    // 35B2 0041;	
    // (㖲) CJK UNIFIED IDEOGRAPH-35B2	[FB80 B5B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35B2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_063)
{
    // 35B2 0062;	
    // (㖲) CJK UNIFIED IDEOGRAPH-35B2	[FB80 B5B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_064)
{
    // 35B3 0021;	
    // (㖳) CJK UNIFIED IDEOGRAPH-35B3	[FB80 B5B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_065)
{
    // 35B3 003F;	
    // (㖳) CJK UNIFIED IDEOGRAPH-35B3	[FB80 B5B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_066)
{
    // 35B3 0061;	
    // (㖳) CJK UNIFIED IDEOGRAPH-35B3	[FB80 B5B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_067)
{
    // 35B3 0041;	
    // (㖳) CJK UNIFIED IDEOGRAPH-35B3	[FB80 B5B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35B3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_068)
{
    // 35B3 0062;	
    // (㖳) CJK UNIFIED IDEOGRAPH-35B3	[FB80 B5B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_069)
{
    // 35B4 0021;	
    // (㖴) CJK UNIFIED IDEOGRAPH-35B4	[FB80 B5B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_070)
{
    // 35B4 003F;	
    // (㖴) CJK UNIFIED IDEOGRAPH-35B4	[FB80 B5B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_071)
{
    // 35B4 0061;	
    // (㖴) CJK UNIFIED IDEOGRAPH-35B4	[FB80 B5B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_072)
{
    // 35B4 0041;	
    // (㖴) CJK UNIFIED IDEOGRAPH-35B4	[FB80 B5B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35B4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_073)
{
    // 35B4 0062;	
    // (㖴) CJK UNIFIED IDEOGRAPH-35B4	[FB80 B5B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_074)
{
    // 35B5 0021;	
    // (㖵) CJK UNIFIED IDEOGRAPH-35B5	[FB80 B5B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_075)
{
    // 35B5 003F;	
    // (㖵) CJK UNIFIED IDEOGRAPH-35B5	[FB80 B5B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_076)
{
    // 35B5 0061;	
    // (㖵) CJK UNIFIED IDEOGRAPH-35B5	[FB80 B5B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_077)
{
    // 35B5 0041;	
    // (㖵) CJK UNIFIED IDEOGRAPH-35B5	[FB80 B5B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35B5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_078)
{
    // 35B5 0062;	
    // (㖵) CJK UNIFIED IDEOGRAPH-35B5	[FB80 B5B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_079)
{
    // 35B6 0021;	
    // (㖶) CJK UNIFIED IDEOGRAPH-35B6	[FB80 B5B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_080)
{
    // 35B6 003F;	
    // (㖶) CJK UNIFIED IDEOGRAPH-35B6	[FB80 B5B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_081)
{
    // 35B6 0061;	
    // (㖶) CJK UNIFIED IDEOGRAPH-35B6	[FB80 B5B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_082)
{
    // 35B6 0041;	
    // (㖶) CJK UNIFIED IDEOGRAPH-35B6	[FB80 B5B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35B6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_083)
{
    // 35B6 0062;	
    // (㖶) CJK UNIFIED IDEOGRAPH-35B6	[FB80 B5B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_084)
{
    // 35B7 0021;	
    // (㖷) CJK UNIFIED IDEOGRAPH-35B7	[FB80 B5B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_085)
{
    // 35B7 003F;	
    // (㖷) CJK UNIFIED IDEOGRAPH-35B7	[FB80 B5B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_086)
{
    // 35B7 0061;	
    // (㖷) CJK UNIFIED IDEOGRAPH-35B7	[FB80 B5B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_087)
{
    // 35B7 0041;	
    // (㖷) CJK UNIFIED IDEOGRAPH-35B7	[FB80 B5B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35B7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_088)
{
    // 35B7 0062;	
    // (㖷) CJK UNIFIED IDEOGRAPH-35B7	[FB80 B5B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_089)
{
    // 35B8 0021;	
    // (㖸) CJK UNIFIED IDEOGRAPH-35B8	[FB80 B5B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_090)
{
    // 35B8 003F;	
    // (㖸) CJK UNIFIED IDEOGRAPH-35B8	[FB80 B5B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_091)
{
    // 35B8 0061;	
    // (㖸) CJK UNIFIED IDEOGRAPH-35B8	[FB80 B5B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_092)
{
    // 35B8 0041;	
    // (㖸) CJK UNIFIED IDEOGRAPH-35B8	[FB80 B5B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35B8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_093)
{
    // 35B8 0062;	
    // (㖸) CJK UNIFIED IDEOGRAPH-35B8	[FB80 B5B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_094)
{
    // 35B9 0021;	
    // (㖹) CJK UNIFIED IDEOGRAPH-35B9	[FB80 B5B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_095)
{
    // 35B9 003F;	
    // (㖹) CJK UNIFIED IDEOGRAPH-35B9	[FB80 B5B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_096)
{
    // 35B9 0061;	
    // (㖹) CJK UNIFIED IDEOGRAPH-35B9	[FB80 B5B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_097)
{
    // 35B9 0041;	
    // (㖹) CJK UNIFIED IDEOGRAPH-35B9	[FB80 B5B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35B9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_098)
{
    // 35B9 0062;	
    // (㖹) CJK UNIFIED IDEOGRAPH-35B9	[FB80 B5B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35B9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_099)
{
    // 35BA 0021;	
    // (㖺) CJK UNIFIED IDEOGRAPH-35BA	[FB80 B5BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35BA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_100)
{
    // 35BA 003F;	
    // (㖺) CJK UNIFIED IDEOGRAPH-35BA	[FB80 B5BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35BA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_101)
{
    // 35BA 0061;	
    // (㖺) CJK UNIFIED IDEOGRAPH-35BA	[FB80 B5BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35BA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_102)
{
    // 35BA 0041;	
    // (㖺) CJK UNIFIED IDEOGRAPH-35BA	[FB80 B5BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35BA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_103)
{
    // 35BA 0062;	
    // (㖺) CJK UNIFIED IDEOGRAPH-35BA	[FB80 B5BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35BA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_104)
{
    // 35BB 0021;	
    // (㖻) CJK UNIFIED IDEOGRAPH-35BB	[FB80 B5BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35BB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_105)
{
    // 35BB 003F;	
    // (㖻) CJK UNIFIED IDEOGRAPH-35BB	[FB80 B5BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35BB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_106)
{
    // 35BB 0061;	
    // (㖻) CJK UNIFIED IDEOGRAPH-35BB	[FB80 B5BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35BB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_107)
{
    // 35BB 0041;	
    // (㖻) CJK UNIFIED IDEOGRAPH-35BB	[FB80 B5BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35BB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_108)
{
    // 35BB 0062;	
    // (㖻) CJK UNIFIED IDEOGRAPH-35BB	[FB80 B5BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35BB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_109)
{
    // 35BC 0021;	
    // (㖼) CJK UNIFIED IDEOGRAPH-35BC	[FB80 B5BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35BC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_110)
{
    // 35BC 003F;	
    // (㖼) CJK UNIFIED IDEOGRAPH-35BC	[FB80 B5BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35BC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_111)
{
    // 35BC 0061;	
    // (㖼) CJK UNIFIED IDEOGRAPH-35BC	[FB80 B5BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35BC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_112)
{
    // 35BC 0041;	
    // (㖼) CJK UNIFIED IDEOGRAPH-35BC	[FB80 B5BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35BC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_113)
{
    // 35BC 0062;	
    // (㖼) CJK UNIFIED IDEOGRAPH-35BC	[FB80 B5BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35BC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_114)
{
    // 35BD 0021;	
    // (㖽) CJK UNIFIED IDEOGRAPH-35BD	[FB80 B5BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35BD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_115)
{
    // 35BD 003F;	
    // (㖽) CJK UNIFIED IDEOGRAPH-35BD	[FB80 B5BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35BD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_116)
{
    // 35BD 0061;	
    // (㖽) CJK UNIFIED IDEOGRAPH-35BD	[FB80 B5BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35BD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_117)
{
    // 35BD 0041;	
    // (㖽) CJK UNIFIED IDEOGRAPH-35BD	[FB80 B5BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35BD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_118)
{
    // 35BD 0062;	
    // (㖽) CJK UNIFIED IDEOGRAPH-35BD	[FB80 B5BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35BD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_119)
{
    // 35BE 0021;	
    // (㖾) CJK UNIFIED IDEOGRAPH-35BE	[FB80 B5BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35BE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_120)
{
    // 35BE 003F;	
    // (㖾) CJK UNIFIED IDEOGRAPH-35BE	[FB80 B5BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35BE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_121)
{
    // 35BE 0061;	
    // (㖾) CJK UNIFIED IDEOGRAPH-35BE	[FB80 B5BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35BE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_122)
{
    // 35BE 0041;	
    // (㖾) CJK UNIFIED IDEOGRAPH-35BE	[FB80 B5BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35BE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_123)
{
    // 35BE 0062;	
    // (㖾) CJK UNIFIED IDEOGRAPH-35BE	[FB80 B5BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35BE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_124)
{
    // 35BF 0021;	
    // (㖿) CJK UNIFIED IDEOGRAPH-35BF	[FB80 B5BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35BF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_125)
{
    // 35BF 003F;	
    // (㖿) CJK UNIFIED IDEOGRAPH-35BF	[FB80 B5BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35BF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_126)
{
    // 35BF 0061;	
    // (㖿) CJK UNIFIED IDEOGRAPH-35BF	[FB80 B5BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35BF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_127)
{
    // 35BF 0041;	
    // (㖿) CJK UNIFIED IDEOGRAPH-35BF	[FB80 B5BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35BF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_128)
{
    // 35BF 0062;	
    // (㖿) CJK UNIFIED IDEOGRAPH-35BF	[FB80 B5BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35BF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_129)
{
    // 35C0 0021;	
    // (㗀) CJK UNIFIED IDEOGRAPH-35C0	[FB80 B5C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_130)
{
    // 35C0 003F;	
    // (㗀) CJK UNIFIED IDEOGRAPH-35C0	[FB80 B5C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_131)
{
    // 35C0 0061;	
    // (㗀) CJK UNIFIED IDEOGRAPH-35C0	[FB80 B5C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_132)
{
    // 35C0 0041;	
    // (㗀) CJK UNIFIED IDEOGRAPH-35C0	[FB80 B5C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35C0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_133)
{
    // 35C0 0062;	
    // (㗀) CJK UNIFIED IDEOGRAPH-35C0	[FB80 B5C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_134)
{
    // 35C1 0021;	
    // (㗁) CJK UNIFIED IDEOGRAPH-35C1	[FB80 B5C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_135)
{
    // 35C1 003F;	
    // (㗁) CJK UNIFIED IDEOGRAPH-35C1	[FB80 B5C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_136)
{
    // 35C1 0061;	
    // (㗁) CJK UNIFIED IDEOGRAPH-35C1	[FB80 B5C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_137)
{
    // 35C1 0041;	
    // (㗁) CJK UNIFIED IDEOGRAPH-35C1	[FB80 B5C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35C1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_138)
{
    // 35C1 0062;	
    // (㗁) CJK UNIFIED IDEOGRAPH-35C1	[FB80 B5C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_139)
{
    // 35C2 0021;	
    // (㗂) CJK UNIFIED IDEOGRAPH-35C2	[FB80 B5C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_140)
{
    // 35C2 003F;	
    // (㗂) CJK UNIFIED IDEOGRAPH-35C2	[FB80 B5C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_141)
{
    // 35C2 0061;	
    // (㗂) CJK UNIFIED IDEOGRAPH-35C2	[FB80 B5C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_142)
{
    // 35C2 0041;	
    // (㗂) CJK UNIFIED IDEOGRAPH-35C2	[FB80 B5C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35C2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_143)
{
    // 35C2 0062;	
    // (㗂) CJK UNIFIED IDEOGRAPH-35C2	[FB80 B5C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_144)
{
    // 35C3 0021;	
    // (㗃) CJK UNIFIED IDEOGRAPH-35C3	[FB80 B5C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_145)
{
    // 35C3 003F;	
    // (㗃) CJK UNIFIED IDEOGRAPH-35C3	[FB80 B5C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_146)
{
    // 35C3 0061;	
    // (㗃) CJK UNIFIED IDEOGRAPH-35C3	[FB80 B5C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_147)
{
    // 35C3 0041;	
    // (㗃) CJK UNIFIED IDEOGRAPH-35C3	[FB80 B5C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35C3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_148)
{
    // 35C3 0062;	
    // (㗃) CJK UNIFIED IDEOGRAPH-35C3	[FB80 B5C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_149)
{
    // 35C4 0021;	
    // (㗄) CJK UNIFIED IDEOGRAPH-35C4	[FB80 B5C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_150)
{
    // 35C4 003F;	
    // (㗄) CJK UNIFIED IDEOGRAPH-35C4	[FB80 B5C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_151)
{
    // 35C4 0061;	
    // (㗄) CJK UNIFIED IDEOGRAPH-35C4	[FB80 B5C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_152)
{
    // 35C4 0041;	
    // (㗄) CJK UNIFIED IDEOGRAPH-35C4	[FB80 B5C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35C4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_153)
{
    // 35C4 0062;	
    // (㗄) CJK UNIFIED IDEOGRAPH-35C4	[FB80 B5C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_154)
{
    // 35C5 0021;	
    // (㗅) CJK UNIFIED IDEOGRAPH-35C5	[FB80 B5C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_155)
{
    // 35C5 003F;	
    // (㗅) CJK UNIFIED IDEOGRAPH-35C5	[FB80 B5C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_156)
{
    // 35C5 0061;	
    // (㗅) CJK UNIFIED IDEOGRAPH-35C5	[FB80 B5C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_157)
{
    // 35C5 0041;	
    // (㗅) CJK UNIFIED IDEOGRAPH-35C5	[FB80 B5C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35C5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_158)
{
    // 35C5 0062;	
    // (㗅) CJK UNIFIED IDEOGRAPH-35C5	[FB80 B5C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_159)
{
    // 35C6 0021;	
    // (㗆) CJK UNIFIED IDEOGRAPH-35C6	[FB80 B5C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_160)
{
    // 35C6 003F;	
    // (㗆) CJK UNIFIED IDEOGRAPH-35C6	[FB80 B5C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_161)
{
    // 35C6 0061;	
    // (㗆) CJK UNIFIED IDEOGRAPH-35C6	[FB80 B5C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_162)
{
    // 35C6 0041;	
    // (㗆) CJK UNIFIED IDEOGRAPH-35C6	[FB80 B5C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35C6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_163)
{
    // 35C6 0062;	
    // (㗆) CJK UNIFIED IDEOGRAPH-35C6	[FB80 B5C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_164)
{
    // 35C7 0021;	
    // (㗇) CJK UNIFIED IDEOGRAPH-35C7	[FB80 B5C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_165)
{
    // 35C7 003F;	
    // (㗇) CJK UNIFIED IDEOGRAPH-35C7	[FB80 B5C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_166)
{
    // 35C7 0061;	
    // (㗇) CJK UNIFIED IDEOGRAPH-35C7	[FB80 B5C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_167)
{
    // 35C7 0041;	
    // (㗇) CJK UNIFIED IDEOGRAPH-35C7	[FB80 B5C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35C7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_168)
{
    // 35C7 0062;	
    // (㗇) CJK UNIFIED IDEOGRAPH-35C7	[FB80 B5C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_169)
{
    // 35C8 0021;	
    // (㗈) CJK UNIFIED IDEOGRAPH-35C8	[FB80 B5C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_170)
{
    // 35C8 003F;	
    // (㗈) CJK UNIFIED IDEOGRAPH-35C8	[FB80 B5C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_171)
{
    // 35C8 0061;	
    // (㗈) CJK UNIFIED IDEOGRAPH-35C8	[FB80 B5C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_172)
{
    // 35C8 0041;	
    // (㗈) CJK UNIFIED IDEOGRAPH-35C8	[FB80 B5C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35C8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_173)
{
    // 35C8 0062;	
    // (㗈) CJK UNIFIED IDEOGRAPH-35C8	[FB80 B5C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_174)
{
    // 35C9 0021;	
    // (㗉) CJK UNIFIED IDEOGRAPH-35C9	[FB80 B5C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_175)
{
    // 35C9 003F;	
    // (㗉) CJK UNIFIED IDEOGRAPH-35C9	[FB80 B5C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_176)
{
    // 35C9 0061;	
    // (㗉) CJK UNIFIED IDEOGRAPH-35C9	[FB80 B5C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_177)
{
    // 35C9 0041;	
    // (㗉) CJK UNIFIED IDEOGRAPH-35C9	[FB80 B5C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35C9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_178)
{
    // 35C9 0062;	
    // (㗉) CJK UNIFIED IDEOGRAPH-35C9	[FB80 B5C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35C9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_179)
{
    // 35CA 0021;	
    // (㗊) CJK UNIFIED IDEOGRAPH-35CA	[FB80 B5CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35CA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_180)
{
    // 35CA 003F;	
    // (㗊) CJK UNIFIED IDEOGRAPH-35CA	[FB80 B5CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35CA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_181)
{
    // 35CA 0061;	
    // (㗊) CJK UNIFIED IDEOGRAPH-35CA	[FB80 B5CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35CA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_182)
{
    // 35CA 0041;	
    // (㗊) CJK UNIFIED IDEOGRAPH-35CA	[FB80 B5CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35CA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_183)
{
    // 35CA 0062;	
    // (㗊) CJK UNIFIED IDEOGRAPH-35CA	[FB80 B5CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35CA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_184)
{
    // 35CB 0021;	
    // (㗋) CJK UNIFIED IDEOGRAPH-35CB	[FB80 B5CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35CB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_185)
{
    // 35CB 003F;	
    // (㗋) CJK UNIFIED IDEOGRAPH-35CB	[FB80 B5CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35CB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_186)
{
    // 35CB 0061;	
    // (㗋) CJK UNIFIED IDEOGRAPH-35CB	[FB80 B5CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35CB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_187)
{
    // 35CB 0041;	
    // (㗋) CJK UNIFIED IDEOGRAPH-35CB	[FB80 B5CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35CB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_188)
{
    // 35CB 0062;	
    // (㗋) CJK UNIFIED IDEOGRAPH-35CB	[FB80 B5CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35CB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_189)
{
    // 35CC 0021;	
    // (㗌) CJK UNIFIED IDEOGRAPH-35CC	[FB80 B5CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35CC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_190)
{
    // 35CC 003F;	
    // (㗌) CJK UNIFIED IDEOGRAPH-35CC	[FB80 B5CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35CC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_191)
{
    // 35CC 0061;	
    // (㗌) CJK UNIFIED IDEOGRAPH-35CC	[FB80 B5CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35CC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_192)
{
    // 35CC 0041;	
    // (㗌) CJK UNIFIED IDEOGRAPH-35CC	[FB80 B5CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35CC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_193)
{
    // 35CC 0062;	
    // (㗌) CJK UNIFIED IDEOGRAPH-35CC	[FB80 B5CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35CC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_194)
{
    // 35CD 0021;	
    // (㗍) CJK UNIFIED IDEOGRAPH-35CD	[FB80 B5CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35CD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_195)
{
    // 35CD 003F;	
    // (㗍) CJK UNIFIED IDEOGRAPH-35CD	[FB80 B5CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35CD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_196)
{
    // 35CD 0061;	
    // (㗍) CJK UNIFIED IDEOGRAPH-35CD	[FB80 B5CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35CD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_197)
{
    // 35CD 0041;	
    // (㗍) CJK UNIFIED IDEOGRAPH-35CD	[FB80 B5CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35CD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_198)
{
    // 35CD 0062;	
    // (㗍) CJK UNIFIED IDEOGRAPH-35CD	[FB80 B5CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35CD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_199)
{
    // 35CE 0021;	
    // (㗎) CJK UNIFIED IDEOGRAPH-35CE	[FB80 B5CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35CE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_200)
{
    // 35CE 003F;	
    // (㗎) CJK UNIFIED IDEOGRAPH-35CE	[FB80 B5CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35CE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_201)
{
    // 35CE 0061;	
    // (㗎) CJK UNIFIED IDEOGRAPH-35CE	[FB80 B5CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35CE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_202)
{
    // 35CE 0041;	
    // (㗎) CJK UNIFIED IDEOGRAPH-35CE	[FB80 B5CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35CE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_203)
{
    // 35CE 0062;	
    // (㗎) CJK UNIFIED IDEOGRAPH-35CE	[FB80 B5CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35CE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_204)
{
    // 35CF 0021;	
    // (㗏) CJK UNIFIED IDEOGRAPH-35CF	[FB80 B5CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35CF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_205)
{
    // 35CF 003F;	
    // (㗏) CJK UNIFIED IDEOGRAPH-35CF	[FB80 B5CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35CF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_206)
{
    // 35CF 0061;	
    // (㗏) CJK UNIFIED IDEOGRAPH-35CF	[FB80 B5CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35CF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_207)
{
    // 35CF 0041;	
    // (㗏) CJK UNIFIED IDEOGRAPH-35CF	[FB80 B5CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35CF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_208)
{
    // 35CF 0062;	
    // (㗏) CJK UNIFIED IDEOGRAPH-35CF	[FB80 B5CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35CF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_209)
{
    // 35D0 0021;	
    // (㗐) CJK UNIFIED IDEOGRAPH-35D0	[FB80 B5D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_210)
{
    // 35D0 003F;	
    // (㗐) CJK UNIFIED IDEOGRAPH-35D0	[FB80 B5D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_211)
{
    // 35D0 0061;	
    // (㗐) CJK UNIFIED IDEOGRAPH-35D0	[FB80 B5D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_212)
{
    // 35D0 0041;	
    // (㗐) CJK UNIFIED IDEOGRAPH-35D0	[FB80 B5D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35D0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_213)
{
    // 35D0 0062;	
    // (㗐) CJK UNIFIED IDEOGRAPH-35D0	[FB80 B5D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_214)
{
    // 35D1 0021;	
    // (㗑) CJK UNIFIED IDEOGRAPH-35D1	[FB80 B5D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_215)
{
    // 35D1 003F;	
    // (㗑) CJK UNIFIED IDEOGRAPH-35D1	[FB80 B5D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_216)
{
    // 35D1 0061;	
    // (㗑) CJK UNIFIED IDEOGRAPH-35D1	[FB80 B5D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_217)
{
    // 35D1 0041;	
    // (㗑) CJK UNIFIED IDEOGRAPH-35D1	[FB80 B5D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35D1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_218)
{
    // 35D1 0062;	
    // (㗑) CJK UNIFIED IDEOGRAPH-35D1	[FB80 B5D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_219)
{
    // 35D2 0021;	
    // (㗒) CJK UNIFIED IDEOGRAPH-35D2	[FB80 B5D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_220)
{
    // 35D2 003F;	
    // (㗒) CJK UNIFIED IDEOGRAPH-35D2	[FB80 B5D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_221)
{
    // 35D2 0061;	
    // (㗒) CJK UNIFIED IDEOGRAPH-35D2	[FB80 B5D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_222)
{
    // 35D2 0041;	
    // (㗒) CJK UNIFIED IDEOGRAPH-35D2	[FB80 B5D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35D2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_223)
{
    // 35D2 0062;	
    // (㗒) CJK UNIFIED IDEOGRAPH-35D2	[FB80 B5D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_224)
{
    // 35D3 0021;	
    // (㗓) CJK UNIFIED IDEOGRAPH-35D3	[FB80 B5D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_225)
{
    // 35D3 003F;	
    // (㗓) CJK UNIFIED IDEOGRAPH-35D3	[FB80 B5D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_226)
{
    // 35D3 0061;	
    // (㗓) CJK UNIFIED IDEOGRAPH-35D3	[FB80 B5D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_227)
{
    // 35D3 0041;	
    // (㗓) CJK UNIFIED IDEOGRAPH-35D3	[FB80 B5D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35D3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_228)
{
    // 35D3 0062;	
    // (㗓) CJK UNIFIED IDEOGRAPH-35D3	[FB80 B5D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_229)
{
    // 35D4 0021;	
    // (㗔) CJK UNIFIED IDEOGRAPH-35D4	[FB80 B5D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_230)
{
    // 35D4 003F;	
    // (㗔) CJK UNIFIED IDEOGRAPH-35D4	[FB80 B5D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_231)
{
    // 35D4 0061;	
    // (㗔) CJK UNIFIED IDEOGRAPH-35D4	[FB80 B5D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_232)
{
    // 35D4 0041;	
    // (㗔) CJK UNIFIED IDEOGRAPH-35D4	[FB80 B5D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35D4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_233)
{
    // 35D4 0062;	
    // (㗔) CJK UNIFIED IDEOGRAPH-35D4	[FB80 B5D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_234)
{
    // 35D5 0021;	
    // (㗕) CJK UNIFIED IDEOGRAPH-35D5	[FB80 B5D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_235)
{
    // 35D5 003F;	
    // (㗕) CJK UNIFIED IDEOGRAPH-35D5	[FB80 B5D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_236)
{
    // 35D5 0061;	
    // (㗕) CJK UNIFIED IDEOGRAPH-35D5	[FB80 B5D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_237)
{
    // 35D5 0041;	
    // (㗕) CJK UNIFIED IDEOGRAPH-35D5	[FB80 B5D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35D5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_238)
{
    // 35D5 0062;	
    // (㗕) CJK UNIFIED IDEOGRAPH-35D5	[FB80 B5D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_239)
{
    // 35D6 0021;	
    // (㗖) CJK UNIFIED IDEOGRAPH-35D6	[FB80 B5D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_240)
{
    // 35D6 003F;	
    // (㗖) CJK UNIFIED IDEOGRAPH-35D6	[FB80 B5D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_241)
{
    // 35D6 0061;	
    // (㗖) CJK UNIFIED IDEOGRAPH-35D6	[FB80 B5D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_242)
{
    // 35D6 0041;	
    // (㗖) CJK UNIFIED IDEOGRAPH-35D6	[FB80 B5D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35D6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_243)
{
    // 35D6 0062;	
    // (㗖) CJK UNIFIED IDEOGRAPH-35D6	[FB80 B5D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_244)
{
    // 35D7 0021;	
    // (㗗) CJK UNIFIED IDEOGRAPH-35D7	[FB80 B5D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_245)
{
    // 35D7 003F;	
    // (㗗) CJK UNIFIED IDEOGRAPH-35D7	[FB80 B5D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_246)
{
    // 35D7 0061;	
    // (㗗) CJK UNIFIED IDEOGRAPH-35D7	[FB80 B5D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_247)
{
    // 35D7 0041;	
    // (㗗) CJK UNIFIED IDEOGRAPH-35D7	[FB80 B5D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35D7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_248)
{
    // 35D7 0062;	
    // (㗗) CJK UNIFIED IDEOGRAPH-35D7	[FB80 B5D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_249)
{
    // 35D8 0021;	
    // (㗘) CJK UNIFIED IDEOGRAPH-35D8	[FB80 B5D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_250)
{
    // 35D8 003F;	
    // (㗘) CJK UNIFIED IDEOGRAPH-35D8	[FB80 B5D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_251)
{
    // 35D8 0061;	
    // (㗘) CJK UNIFIED IDEOGRAPH-35D8	[FB80 B5D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_252)
{
    // 35D8 0041;	
    // (㗘) CJK UNIFIED IDEOGRAPH-35D8	[FB80 B5D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35D8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_253)
{
    // 35D8 0062;	
    // (㗘) CJK UNIFIED IDEOGRAPH-35D8	[FB80 B5D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_254)
{
    // 35D9 0021;	
    // (㗙) CJK UNIFIED IDEOGRAPH-35D9	[FB80 B5D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_255)
{
    // 35D9 003F;	
    // (㗙) CJK UNIFIED IDEOGRAPH-35D9	[FB80 B5D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_256)
{
    // 35D9 0061;	
    // (㗙) CJK UNIFIED IDEOGRAPH-35D9	[FB80 B5D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_257)
{
    // 35D9 0041;	
    // (㗙) CJK UNIFIED IDEOGRAPH-35D9	[FB80 B5D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35D9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_258)
{
    // 35D9 0062;	
    // (㗙) CJK UNIFIED IDEOGRAPH-35D9	[FB80 B5D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35D9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_259)
{
    // 35DA 0021;	
    // (㗚) CJK UNIFIED IDEOGRAPH-35DA	[FB80 B5DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35DA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_260)
{
    // 35DA 003F;	
    // (㗚) CJK UNIFIED IDEOGRAPH-35DA	[FB80 B5DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35DA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_261)
{
    // 35DA 0061;	
    // (㗚) CJK UNIFIED IDEOGRAPH-35DA	[FB80 B5DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35DA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_262)
{
    // 35DA 0041;	
    // (㗚) CJK UNIFIED IDEOGRAPH-35DA	[FB80 B5DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35DA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_263)
{
    // 35DA 0062;	
    // (㗚) CJK UNIFIED IDEOGRAPH-35DA	[FB80 B5DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35DA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_264)
{
    // 35DB 0021;	
    // (㗛) CJK UNIFIED IDEOGRAPH-35DB	[FB80 B5DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35DB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_265)
{
    // 35DB 003F;	
    // (㗛) CJK UNIFIED IDEOGRAPH-35DB	[FB80 B5DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35DB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_266)
{
    // 35DB 0061;	
    // (㗛) CJK UNIFIED IDEOGRAPH-35DB	[FB80 B5DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35DB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_267)
{
    // 35DB 0041;	
    // (㗛) CJK UNIFIED IDEOGRAPH-35DB	[FB80 B5DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35DB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_268)
{
    // 35DB 0062;	
    // (㗛) CJK UNIFIED IDEOGRAPH-35DB	[FB80 B5DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35DB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_269)
{
    // 35DC 0021;	
    // (㗜) CJK UNIFIED IDEOGRAPH-35DC	[FB80 B5DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35DC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_270)
{
    // 35DC 003F;	
    // (㗜) CJK UNIFIED IDEOGRAPH-35DC	[FB80 B5DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35DC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_271)
{
    // 35DC 0061;	
    // (㗜) CJK UNIFIED IDEOGRAPH-35DC	[FB80 B5DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35DC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_272)
{
    // 35DC 0041;	
    // (㗜) CJK UNIFIED IDEOGRAPH-35DC	[FB80 B5DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35DC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_273)
{
    // 35DC 0062;	
    // (㗜) CJK UNIFIED IDEOGRAPH-35DC	[FB80 B5DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35DC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_274)
{
    // 35DD 0021;	
    // (㗝) CJK UNIFIED IDEOGRAPH-35DD	[FB80 B5DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35DD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_275)
{
    // 35DD 003F;	
    // (㗝) CJK UNIFIED IDEOGRAPH-35DD	[FB80 B5DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35DD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_276)
{
    // 35DD 0061;	
    // (㗝) CJK UNIFIED IDEOGRAPH-35DD	[FB80 B5DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35DD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_277)
{
    // 35DD 0041;	
    // (㗝) CJK UNIFIED IDEOGRAPH-35DD	[FB80 B5DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35DD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_278)
{
    // 35DD 0062;	
    // (㗝) CJK UNIFIED IDEOGRAPH-35DD	[FB80 B5DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35DD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_279)
{
    // 35DE 0021;	
    // (㗞) CJK UNIFIED IDEOGRAPH-35DE	[FB80 B5DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35DE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_280)
{
    // 35DE 003F;	
    // (㗞) CJK UNIFIED IDEOGRAPH-35DE	[FB80 B5DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35DE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_281)
{
    // 35DE 0061;	
    // (㗞) CJK UNIFIED IDEOGRAPH-35DE	[FB80 B5DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35DE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_282)
{
    // 35DE 0041;	
    // (㗞) CJK UNIFIED IDEOGRAPH-35DE	[FB80 B5DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35DE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_283)
{
    // 35DE 0062;	
    // (㗞) CJK UNIFIED IDEOGRAPH-35DE	[FB80 B5DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35DE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_284)
{
    // 35DF 0021;	
    // (㗟) CJK UNIFIED IDEOGRAPH-35DF	[FB80 B5DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35DF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_285)
{
    // 35DF 003F;	
    // (㗟) CJK UNIFIED IDEOGRAPH-35DF	[FB80 B5DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35DF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_286)
{
    // 35DF 0061;	
    // (㗟) CJK UNIFIED IDEOGRAPH-35DF	[FB80 B5DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35DF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_287)
{
    // 35DF 0041;	
    // (㗟) CJK UNIFIED IDEOGRAPH-35DF	[FB80 B5DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35DF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_288)
{
    // 35DF 0062;	
    // (㗟) CJK UNIFIED IDEOGRAPH-35DF	[FB80 B5DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35DF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_289)
{
    // 35E0 0021;	
    // (㗠) CJK UNIFIED IDEOGRAPH-35E0	[FB80 B5E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_290)
{
    // 35E0 003F;	
    // (㗠) CJK UNIFIED IDEOGRAPH-35E0	[FB80 B5E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_291)
{
    // 35E0 0061;	
    // (㗠) CJK UNIFIED IDEOGRAPH-35E0	[FB80 B5E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_292)
{
    // 35E0 0041;	
    // (㗠) CJK UNIFIED IDEOGRAPH-35E0	[FB80 B5E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35E0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_293)
{
    // 35E0 0062;	
    // (㗠) CJK UNIFIED IDEOGRAPH-35E0	[FB80 B5E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_294)
{
    // 35E1 0021;	
    // (㗡) CJK UNIFIED IDEOGRAPH-35E1	[FB80 B5E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_295)
{
    // 35E1 003F;	
    // (㗡) CJK UNIFIED IDEOGRAPH-35E1	[FB80 B5E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_296)
{
    // 35E1 0061;	
    // (㗡) CJK UNIFIED IDEOGRAPH-35E1	[FB80 B5E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_297)
{
    // 35E1 0041;	
    // (㗡) CJK UNIFIED IDEOGRAPH-35E1	[FB80 B5E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35E1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_298)
{
    // 35E1 0062;	
    // (㗡) CJK UNIFIED IDEOGRAPH-35E1	[FB80 B5E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_299)
{
    // 35E2 0021;	
    // (㗢) CJK UNIFIED IDEOGRAPH-35E2	[FB80 B5E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_300)
{
    // 35E2 003F;	
    // (㗢) CJK UNIFIED IDEOGRAPH-35E2	[FB80 B5E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_301)
{
    // 35E2 0061;	
    // (㗢) CJK UNIFIED IDEOGRAPH-35E2	[FB80 B5E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_302)
{
    // 35E2 0041;	
    // (㗢) CJK UNIFIED IDEOGRAPH-35E2	[FB80 B5E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35E2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_303)
{
    // 35E2 0062;	
    // (㗢) CJK UNIFIED IDEOGRAPH-35E2	[FB80 B5E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_304)
{
    // 35E3 0021;	
    // (㗣) CJK UNIFIED IDEOGRAPH-35E3	[FB80 B5E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_305)
{
    // 35E3 003F;	
    // (㗣) CJK UNIFIED IDEOGRAPH-35E3	[FB80 B5E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_306)
{
    // 35E3 0061;	
    // (㗣) CJK UNIFIED IDEOGRAPH-35E3	[FB80 B5E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_307)
{
    // 35E3 0041;	
    // (㗣) CJK UNIFIED IDEOGRAPH-35E3	[FB80 B5E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35E3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_308)
{
    // 35E3 0062;	
    // (㗣) CJK UNIFIED IDEOGRAPH-35E3	[FB80 B5E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_309)
{
    // 35E4 0021;	
    // (㗤) CJK UNIFIED IDEOGRAPH-35E4	[FB80 B5E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_310)
{
    // 35E4 003F;	
    // (㗤) CJK UNIFIED IDEOGRAPH-35E4	[FB80 B5E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_311)
{
    // 35E4 0061;	
    // (㗤) CJK UNIFIED IDEOGRAPH-35E4	[FB80 B5E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_312)
{
    // 35E4 0041;	
    // (㗤) CJK UNIFIED IDEOGRAPH-35E4	[FB80 B5E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35E4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_313)
{
    // 35E4 0062;	
    // (㗤) CJK UNIFIED IDEOGRAPH-35E4	[FB80 B5E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_314)
{
    // 35E5 0021;	
    // (㗥) CJK UNIFIED IDEOGRAPH-35E5	[FB80 B5E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_315)
{
    // 35E5 003F;	
    // (㗥) CJK UNIFIED IDEOGRAPH-35E5	[FB80 B5E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_316)
{
    // 35E5 0061;	
    // (㗥) CJK UNIFIED IDEOGRAPH-35E5	[FB80 B5E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_317)
{
    // 35E5 0041;	
    // (㗥) CJK UNIFIED IDEOGRAPH-35E5	[FB80 B5E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35E5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_318)
{
    // 35E5 0062;	
    // (㗥) CJK UNIFIED IDEOGRAPH-35E5	[FB80 B5E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_319)
{
    // 35E6 0021;	
    // (㗦) CJK UNIFIED IDEOGRAPH-35E6	[FB80 B5E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_320)
{
    // 35E6 003F;	
    // (㗦) CJK UNIFIED IDEOGRAPH-35E6	[FB80 B5E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_321)
{
    // 35E6 0061;	
    // (㗦) CJK UNIFIED IDEOGRAPH-35E6	[FB80 B5E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_322)
{
    // 35E6 0041;	
    // (㗦) CJK UNIFIED IDEOGRAPH-35E6	[FB80 B5E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35E6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_323)
{
    // 35E6 0062;	
    // (㗦) CJK UNIFIED IDEOGRAPH-35E6	[FB80 B5E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_324)
{
    // 35E7 0021;	
    // (㗧) CJK UNIFIED IDEOGRAPH-35E7	[FB80 B5E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_325)
{
    // 35E7 003F;	
    // (㗧) CJK UNIFIED IDEOGRAPH-35E7	[FB80 B5E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_326)
{
    // 35E7 0061;	
    // (㗧) CJK UNIFIED IDEOGRAPH-35E7	[FB80 B5E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_327)
{
    // 35E7 0041;	
    // (㗧) CJK UNIFIED IDEOGRAPH-35E7	[FB80 B5E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35E7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_328)
{
    // 35E7 0062;	
    // (㗧) CJK UNIFIED IDEOGRAPH-35E7	[FB80 B5E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_329)
{
    // 35E8 0021;	
    // (㗨) CJK UNIFIED IDEOGRAPH-35E8	[FB80 B5E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_330)
{
    // 35E8 003F;	
    // (㗨) CJK UNIFIED IDEOGRAPH-35E8	[FB80 B5E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_331)
{
    // 35E8 0061;	
    // (㗨) CJK UNIFIED IDEOGRAPH-35E8	[FB80 B5E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_332)
{
    // 35E8 0041;	
    // (㗨) CJK UNIFIED IDEOGRAPH-35E8	[FB80 B5E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35E8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_333)
{
    // 35E8 0062;	
    // (㗨) CJK UNIFIED IDEOGRAPH-35E8	[FB80 B5E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_334)
{
    // 35E9 0021;	
    // (㗩) CJK UNIFIED IDEOGRAPH-35E9	[FB80 B5E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_335)
{
    // 35E9 003F;	
    // (㗩) CJK UNIFIED IDEOGRAPH-35E9	[FB80 B5E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_336)
{
    // 35E9 0061;	
    // (㗩) CJK UNIFIED IDEOGRAPH-35E9	[FB80 B5E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_337)
{
    // 35E9 0041;	
    // (㗩) CJK UNIFIED IDEOGRAPH-35E9	[FB80 B5E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35E9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_338)
{
    // 35E9 0062;	
    // (㗩) CJK UNIFIED IDEOGRAPH-35E9	[FB80 B5E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35E9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_339)
{
    // 35EA 0021;	
    // (㗪) CJK UNIFIED IDEOGRAPH-35EA	[FB80 B5EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35EA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_340)
{
    // 35EA 003F;	
    // (㗪) CJK UNIFIED IDEOGRAPH-35EA	[FB80 B5EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35EA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_341)
{
    // 35EA 0061;	
    // (㗪) CJK UNIFIED IDEOGRAPH-35EA	[FB80 B5EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35EA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_342)
{
    // 35EA 0041;	
    // (㗪) CJK UNIFIED IDEOGRAPH-35EA	[FB80 B5EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35EA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_343)
{
    // 35EA 0062;	
    // (㗪) CJK UNIFIED IDEOGRAPH-35EA	[FB80 B5EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35EA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_344)
{
    // 35EB 0021;	
    // (㗫) CJK UNIFIED IDEOGRAPH-35EB	[FB80 B5EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35EB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_345)
{
    // 35EB 003F;	
    // (㗫) CJK UNIFIED IDEOGRAPH-35EB	[FB80 B5EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35EB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_346)
{
    // 35EB 0061;	
    // (㗫) CJK UNIFIED IDEOGRAPH-35EB	[FB80 B5EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35EB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_347)
{
    // 35EB 0041;	
    // (㗫) CJK UNIFIED IDEOGRAPH-35EB	[FB80 B5EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35EB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_348)
{
    // 35EB 0062;	
    // (㗫) CJK UNIFIED IDEOGRAPH-35EB	[FB80 B5EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35EB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_349)
{
    // 35EC 0021;	
    // (㗬) CJK UNIFIED IDEOGRAPH-35EC	[FB80 B5EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35EC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_350)
{
    // 35EC 003F;	
    // (㗬) CJK UNIFIED IDEOGRAPH-35EC	[FB80 B5EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35EC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_351)
{
    // 35EC 0061;	
    // (㗬) CJK UNIFIED IDEOGRAPH-35EC	[FB80 B5EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35EC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_352)
{
    // 35EC 0041;	
    // (㗬) CJK UNIFIED IDEOGRAPH-35EC	[FB80 B5EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35EC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_353)
{
    // 35EC 0062;	
    // (㗬) CJK UNIFIED IDEOGRAPH-35EC	[FB80 B5EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35EC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_354)
{
    // 35ED 0021;	
    // (㗭) CJK UNIFIED IDEOGRAPH-35ED	[FB80 B5ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35ED, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_355)
{
    // 35ED 003F;	
    // (㗭) CJK UNIFIED IDEOGRAPH-35ED	[FB80 B5ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35ED, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_356)
{
    // 35ED 0061;	
    // (㗭) CJK UNIFIED IDEOGRAPH-35ED	[FB80 B5ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35ED, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_357)
{
    // 35ED 0041;	
    // (㗭) CJK UNIFIED IDEOGRAPH-35ED	[FB80 B5ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35ED, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_358)
{
    // 35ED 0062;	
    // (㗭) CJK UNIFIED IDEOGRAPH-35ED	[FB80 B5ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35ED, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_359)
{
    // 35EE 0021;	
    // (㗮) CJK UNIFIED IDEOGRAPH-35EE	[FB80 B5EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35EE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_360)
{
    // 35EE 003F;	
    // (㗮) CJK UNIFIED IDEOGRAPH-35EE	[FB80 B5EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35EE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_361)
{
    // 35EE 0061;	
    // (㗮) CJK UNIFIED IDEOGRAPH-35EE	[FB80 B5EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35EE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_362)
{
    // 35EE 0041;	
    // (㗮) CJK UNIFIED IDEOGRAPH-35EE	[FB80 B5EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35EE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_363)
{
    // 35EE 0062;	
    // (㗮) CJK UNIFIED IDEOGRAPH-35EE	[FB80 B5EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35EE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_364)
{
    // 35EF 0021;	
    // (㗯) CJK UNIFIED IDEOGRAPH-35EF	[FB80 B5EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35EF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_365)
{
    // 35EF 003F;	
    // (㗯) CJK UNIFIED IDEOGRAPH-35EF	[FB80 B5EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35EF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_366)
{
    // 35EF 0061;	
    // (㗯) CJK UNIFIED IDEOGRAPH-35EF	[FB80 B5EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35EF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_367)
{
    // 35EF 0041;	
    // (㗯) CJK UNIFIED IDEOGRAPH-35EF	[FB80 B5EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35EF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_368)
{
    // 35EF 0062;	
    // (㗯) CJK UNIFIED IDEOGRAPH-35EF	[FB80 B5EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35EF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_369)
{
    // 35F0 0021;	
    // (㗰) CJK UNIFIED IDEOGRAPH-35F0	[FB80 B5F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_370)
{
    // 35F0 003F;	
    // (㗰) CJK UNIFIED IDEOGRAPH-35F0	[FB80 B5F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_371)
{
    // 35F0 0061;	
    // (㗰) CJK UNIFIED IDEOGRAPH-35F0	[FB80 B5F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_372)
{
    // 35F0 0041;	
    // (㗰) CJK UNIFIED IDEOGRAPH-35F0	[FB80 B5F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35F0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_373)
{
    // 35F0 0062;	
    // (㗰) CJK UNIFIED IDEOGRAPH-35F0	[FB80 B5F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_374)
{
    // 35F1 0021;	
    // (㗱) CJK UNIFIED IDEOGRAPH-35F1	[FB80 B5F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_375)
{
    // 35F1 003F;	
    // (㗱) CJK UNIFIED IDEOGRAPH-35F1	[FB80 B5F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_376)
{
    // 35F1 0061;	
    // (㗱) CJK UNIFIED IDEOGRAPH-35F1	[FB80 B5F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_377)
{
    // 35F1 0041;	
    // (㗱) CJK UNIFIED IDEOGRAPH-35F1	[FB80 B5F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35F1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_378)
{
    // 35F1 0062;	
    // (㗱) CJK UNIFIED IDEOGRAPH-35F1	[FB80 B5F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_379)
{
    // 35F2 0021;	
    // (㗲) CJK UNIFIED IDEOGRAPH-35F2	[FB80 B5F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_380)
{
    // 35F2 003F;	
    // (㗲) CJK UNIFIED IDEOGRAPH-35F2	[FB80 B5F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_381)
{
    // 35F2 0061;	
    // (㗲) CJK UNIFIED IDEOGRAPH-35F2	[FB80 B5F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_382)
{
    // 35F2 0041;	
    // (㗲) CJK UNIFIED IDEOGRAPH-35F2	[FB80 B5F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35F2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_383)
{
    // 35F2 0062;	
    // (㗲) CJK UNIFIED IDEOGRAPH-35F2	[FB80 B5F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_384)
{
    // 35F3 0021;	
    // (㗳) CJK UNIFIED IDEOGRAPH-35F3	[FB80 B5F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_385)
{
    // 35F3 003F;	
    // (㗳) CJK UNIFIED IDEOGRAPH-35F3	[FB80 B5F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_386)
{
    // 35F3 0061;	
    // (㗳) CJK UNIFIED IDEOGRAPH-35F3	[FB80 B5F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_387)
{
    // 35F3 0041;	
    // (㗳) CJK UNIFIED IDEOGRAPH-35F3	[FB80 B5F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35F3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_388)
{
    // 35F3 0062;	
    // (㗳) CJK UNIFIED IDEOGRAPH-35F3	[FB80 B5F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_389)
{
    // 35F4 0021;	
    // (㗴) CJK UNIFIED IDEOGRAPH-35F4	[FB80 B5F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_390)
{
    // 35F4 003F;	
    // (㗴) CJK UNIFIED IDEOGRAPH-35F4	[FB80 B5F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_391)
{
    // 35F4 0061;	
    // (㗴) CJK UNIFIED IDEOGRAPH-35F4	[FB80 B5F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_392)
{
    // 35F4 0041;	
    // (㗴) CJK UNIFIED IDEOGRAPH-35F4	[FB80 B5F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35F4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_393)
{
    // 35F4 0062;	
    // (㗴) CJK UNIFIED IDEOGRAPH-35F4	[FB80 B5F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_394)
{
    // 35F5 0021;	
    // (㗵) CJK UNIFIED IDEOGRAPH-35F5	[FB80 B5F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_395)
{
    // 35F5 003F;	
    // (㗵) CJK UNIFIED IDEOGRAPH-35F5	[FB80 B5F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_396)
{
    // 35F5 0061;	
    // (㗵) CJK UNIFIED IDEOGRAPH-35F5	[FB80 B5F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_397)
{
    // 35F5 0041;	
    // (㗵) CJK UNIFIED IDEOGRAPH-35F5	[FB80 B5F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35F5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_398)
{
    // 35F5 0062;	
    // (㗵) CJK UNIFIED IDEOGRAPH-35F5	[FB80 B5F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_399)
{
    // 35F6 0021;	
    // (㗶) CJK UNIFIED IDEOGRAPH-35F6	[FB80 B5F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_400)
{
    // 35F6 003F;	
    // (㗶) CJK UNIFIED IDEOGRAPH-35F6	[FB80 B5F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_401)
{
    // 35F6 0061;	
    // (㗶) CJK UNIFIED IDEOGRAPH-35F6	[FB80 B5F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_402)
{
    // 35F6 0041;	
    // (㗶) CJK UNIFIED IDEOGRAPH-35F6	[FB80 B5F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35F6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_403)
{
    // 35F6 0062;	
    // (㗶) CJK UNIFIED IDEOGRAPH-35F6	[FB80 B5F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_404)
{
    // 35F7 0021;	
    // (㗷) CJK UNIFIED IDEOGRAPH-35F7	[FB80 B5F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_405)
{
    // 35F7 003F;	
    // (㗷) CJK UNIFIED IDEOGRAPH-35F7	[FB80 B5F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_406)
{
    // 35F7 0061;	
    // (㗷) CJK UNIFIED IDEOGRAPH-35F7	[FB80 B5F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_407)
{
    // 35F7 0041;	
    // (㗷) CJK UNIFIED IDEOGRAPH-35F7	[FB80 B5F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35F7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_408)
{
    // 35F7 0062;	
    // (㗷) CJK UNIFIED IDEOGRAPH-35F7	[FB80 B5F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_409)
{
    // 35F8 0021;	
    // (㗸) CJK UNIFIED IDEOGRAPH-35F8	[FB80 B5F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_410)
{
    // 35F8 003F;	
    // (㗸) CJK UNIFIED IDEOGRAPH-35F8	[FB80 B5F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_411)
{
    // 35F8 0061;	
    // (㗸) CJK UNIFIED IDEOGRAPH-35F8	[FB80 B5F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_412)
{
    // 35F8 0041;	
    // (㗸) CJK UNIFIED IDEOGRAPH-35F8	[FB80 B5F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35F8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_413)
{
    // 35F8 0062;	
    // (㗸) CJK UNIFIED IDEOGRAPH-35F8	[FB80 B5F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_414)
{
    // 35F9 0021;	
    // (㗹) CJK UNIFIED IDEOGRAPH-35F9	[FB80 B5F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_415)
{
    // 35F9 003F;	
    // (㗹) CJK UNIFIED IDEOGRAPH-35F9	[FB80 B5F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_416)
{
    // 35F9 0061;	
    // (㗹) CJK UNIFIED IDEOGRAPH-35F9	[FB80 B5F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_417)
{
    // 35F9 0041;	
    // (㗹) CJK UNIFIED IDEOGRAPH-35F9	[FB80 B5F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35F9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_418)
{
    // 35F9 0062;	
    // (㗹) CJK UNIFIED IDEOGRAPH-35F9	[FB80 B5F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35F9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_419)
{
    // 35FA 0021;	
    // (㗺) CJK UNIFIED IDEOGRAPH-35FA	[FB80 B5FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35FA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_420)
{
    // 35FA 003F;	
    // (㗺) CJK UNIFIED IDEOGRAPH-35FA	[FB80 B5FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35FA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_421)
{
    // 35FA 0061;	
    // (㗺) CJK UNIFIED IDEOGRAPH-35FA	[FB80 B5FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35FA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_422)
{
    // 35FA 0041;	
    // (㗺) CJK UNIFIED IDEOGRAPH-35FA	[FB80 B5FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35FA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_423)
{
    // 35FA 0062;	
    // (㗺) CJK UNIFIED IDEOGRAPH-35FA	[FB80 B5FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35FA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_424)
{
    // 35FB 0021;	
    // (㗻) CJK UNIFIED IDEOGRAPH-35FB	[FB80 B5FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35FB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_425)
{
    // 35FB 003F;	
    // (㗻) CJK UNIFIED IDEOGRAPH-35FB	[FB80 B5FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35FB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_426)
{
    // 35FB 0061;	
    // (㗻) CJK UNIFIED IDEOGRAPH-35FB	[FB80 B5FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35FB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_427)
{
    // 35FB 0041;	
    // (㗻) CJK UNIFIED IDEOGRAPH-35FB	[FB80 B5FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35FB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_428)
{
    // 35FB 0062;	
    // (㗻) CJK UNIFIED IDEOGRAPH-35FB	[FB80 B5FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35FB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_429)
{
    // 35FC 0021;	
    // (㗼) CJK UNIFIED IDEOGRAPH-35FC	[FB80 B5FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35FC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_430)
{
    // 35FC 003F;	
    // (㗼) CJK UNIFIED IDEOGRAPH-35FC	[FB80 B5FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35FC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_431)
{
    // 35FC 0061;	
    // (㗼) CJK UNIFIED IDEOGRAPH-35FC	[FB80 B5FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35FC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_432)
{
    // 35FC 0041;	
    // (㗼) CJK UNIFIED IDEOGRAPH-35FC	[FB80 B5FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35FC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_433)
{
    // 35FC 0062;	
    // (㗼) CJK UNIFIED IDEOGRAPH-35FC	[FB80 B5FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35FC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_434)
{
    // 35FD 0021;	
    // (㗽) CJK UNIFIED IDEOGRAPH-35FD	[FB80 B5FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35FD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_435)
{
    // 35FD 003F;	
    // (㗽) CJK UNIFIED IDEOGRAPH-35FD	[FB80 B5FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35FD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_436)
{
    // 35FD 0061;	
    // (㗽) CJK UNIFIED IDEOGRAPH-35FD	[FB80 B5FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35FD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_437)
{
    // 35FD 0041;	
    // (㗽) CJK UNIFIED IDEOGRAPH-35FD	[FB80 B5FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35FD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_438)
{
    // 35FD 0062;	
    // (㗽) CJK UNIFIED IDEOGRAPH-35FD	[FB80 B5FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35FD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_439)
{
    // 35FE 0021;	
    // (㗾) CJK UNIFIED IDEOGRAPH-35FE	[FB80 B5FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35FE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_440)
{
    // 35FE 003F;	
    // (㗾) CJK UNIFIED IDEOGRAPH-35FE	[FB80 B5FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35FE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_441)
{
    // 35FE 0061;	
    // (㗾) CJK UNIFIED IDEOGRAPH-35FE	[FB80 B5FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35FE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_442)
{
    // 35FE 0041;	
    // (㗾) CJK UNIFIED IDEOGRAPH-35FE	[FB80 B5FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35FE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_443)
{
    // 35FE 0062;	
    // (㗾) CJK UNIFIED IDEOGRAPH-35FE	[FB80 B5FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35FE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_444)
{
    // 35FF 0021;	
    // (㗿) CJK UNIFIED IDEOGRAPH-35FF	[FB80 B5FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35FF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_445)
{
    // 35FF 003F;	
    // (㗿) CJK UNIFIED IDEOGRAPH-35FF	[FB80 B5FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35FF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_446)
{
    // 35FF 0061;	
    // (㗿) CJK UNIFIED IDEOGRAPH-35FF	[FB80 B5FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35FF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_447)
{
    // 35FF 0041;	
    // (㗿) CJK UNIFIED IDEOGRAPH-35FF	[FB80 B5FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35FF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_448)
{
    // 35FF 0062;	
    // (㗿) CJK UNIFIED IDEOGRAPH-35FF	[FB80 B5FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35FF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_449)
{
    // 3600 0021;	
    // (㘀) CJK UNIFIED IDEOGRAPH-3600	[FB80 B600 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3600, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB600, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_450)
{
    // 3600 003F;	
    // (㘀) CJK UNIFIED IDEOGRAPH-3600	[FB80 B600 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3600, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB600, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_451)
{
    // 3600 0061;	
    // (㘀) CJK UNIFIED IDEOGRAPH-3600	[FB80 B600 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3600, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB600, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_452)
{
    // 3600 0041;	
    // (㘀) CJK UNIFIED IDEOGRAPH-3600	[FB80 B600 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3600, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB600, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_453)
{
    // 3600 0062;	
    // (㘀) CJK UNIFIED IDEOGRAPH-3600	[FB80 B600 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3600, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB600, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_454)
{
    // 3601 0021;	
    // (㘁) CJK UNIFIED IDEOGRAPH-3601	[FB80 B601 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3601, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB601, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_455)
{
    // 3601 003F;	
    // (㘁) CJK UNIFIED IDEOGRAPH-3601	[FB80 B601 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3601, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB601, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_456)
{
    // 3601 0061;	
    // (㘁) CJK UNIFIED IDEOGRAPH-3601	[FB80 B601 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3601, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB601, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_457)
{
    // 3601 0041;	
    // (㘁) CJK UNIFIED IDEOGRAPH-3601	[FB80 B601 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3601, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB601, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_458)
{
    // 3601 0062;	
    // (㘁) CJK UNIFIED IDEOGRAPH-3601	[FB80 B601 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3601, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB601, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_459)
{
    // 3602 0021;	
    // (㘂) CJK UNIFIED IDEOGRAPH-3602	[FB80 B602 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3602, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB602, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_460)
{
    // 3602 003F;	
    // (㘂) CJK UNIFIED IDEOGRAPH-3602	[FB80 B602 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3602, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB602, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_461)
{
    // 3602 0061;	
    // (㘂) CJK UNIFIED IDEOGRAPH-3602	[FB80 B602 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3602, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB602, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_462)
{
    // 3602 0041;	
    // (㘂) CJK UNIFIED IDEOGRAPH-3602	[FB80 B602 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3602, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB602, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_463)
{
    // 3602 0062;	
    // (㘂) CJK UNIFIED IDEOGRAPH-3602	[FB80 B602 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3602, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB602, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_464)
{
    // 3603 0021;	
    // (㘃) CJK UNIFIED IDEOGRAPH-3603	[FB80 B603 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3603, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB603, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_465)
{
    // 3603 003F;	
    // (㘃) CJK UNIFIED IDEOGRAPH-3603	[FB80 B603 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3603, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB603, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_466)
{
    // 3603 0061;	
    // (㘃) CJK UNIFIED IDEOGRAPH-3603	[FB80 B603 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3603, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB603, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_467)
{
    // 3603 0041;	
    // (㘃) CJK UNIFIED IDEOGRAPH-3603	[FB80 B603 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3603, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB603, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_468)
{
    // 3603 0062;	
    // (㘃) CJK UNIFIED IDEOGRAPH-3603	[FB80 B603 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3603, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB603, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_469)
{
    // 3604 0021;	
    // (㘄) CJK UNIFIED IDEOGRAPH-3604	[FB80 B604 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3604, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB604, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_470)
{
    // 3604 003F;	
    // (㘄) CJK UNIFIED IDEOGRAPH-3604	[FB80 B604 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3604, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB604, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_471)
{
    // 3604 0061;	
    // (㘄) CJK UNIFIED IDEOGRAPH-3604	[FB80 B604 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3604, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB604, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_472)
{
    // 3604 0041;	
    // (㘄) CJK UNIFIED IDEOGRAPH-3604	[FB80 B604 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3604, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB604, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_473)
{
    // 3604 0062;	
    // (㘄) CJK UNIFIED IDEOGRAPH-3604	[FB80 B604 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3604, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB604, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_474)
{
    // 3605 0021;	
    // (㘅) CJK UNIFIED IDEOGRAPH-3605	[FB80 B605 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3605, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB605, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_475)
{
    // 3605 003F;	
    // (㘅) CJK UNIFIED IDEOGRAPH-3605	[FB80 B605 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3605, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB605, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_476)
{
    // 3605 0061;	
    // (㘅) CJK UNIFIED IDEOGRAPH-3605	[FB80 B605 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3605, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB605, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_477)
{
    // 3605 0041;	
    // (㘅) CJK UNIFIED IDEOGRAPH-3605	[FB80 B605 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3605, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB605, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_478)
{
    // 3605 0062;	
    // (㘅) CJK UNIFIED IDEOGRAPH-3605	[FB80 B605 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3605, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB605, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_479)
{
    // 3606 0021;	
    // (㘆) CJK UNIFIED IDEOGRAPH-3606	[FB80 B606 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3606, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB606, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_480)
{
    // 3606 003F;	
    // (㘆) CJK UNIFIED IDEOGRAPH-3606	[FB80 B606 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3606, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB606, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_481)
{
    // 3606 0061;	
    // (㘆) CJK UNIFIED IDEOGRAPH-3606	[FB80 B606 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3606, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB606, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_482)
{
    // 3606 0041;	
    // (㘆) CJK UNIFIED IDEOGRAPH-3606	[FB80 B606 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3606, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB606, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_483)
{
    // 3606 0062;	
    // (㘆) CJK UNIFIED IDEOGRAPH-3606	[FB80 B606 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3606, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB606, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_484)
{
    // 3607 0021;	
    // (㘇) CJK UNIFIED IDEOGRAPH-3607	[FB80 B607 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3607, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB607, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_485)
{
    // 3607 003F;	
    // (㘇) CJK UNIFIED IDEOGRAPH-3607	[FB80 B607 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3607, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB607, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_486)
{
    // 3607 0061;	
    // (㘇) CJK UNIFIED IDEOGRAPH-3607	[FB80 B607 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3607, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB607, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_487)
{
    // 3607 0041;	
    // (㘇) CJK UNIFIED IDEOGRAPH-3607	[FB80 B607 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3607, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB607, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_488)
{
    // 3607 0062;	
    // (㘇) CJK UNIFIED IDEOGRAPH-3607	[FB80 B607 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3607, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB607, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_489)
{
    // 3608 0021;	
    // (㘈) CJK UNIFIED IDEOGRAPH-3608	[FB80 B608 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3608, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB608, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_490)
{
    // 3608 003F;	
    // (㘈) CJK UNIFIED IDEOGRAPH-3608	[FB80 B608 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3608, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB608, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_491)
{
    // 3608 0061;	
    // (㘈) CJK UNIFIED IDEOGRAPH-3608	[FB80 B608 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3608, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB608, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_492)
{
    // 3608 0041;	
    // (㘈) CJK UNIFIED IDEOGRAPH-3608	[FB80 B608 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3608, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB608, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_493)
{
    // 3608 0062;	
    // (㘈) CJK UNIFIED IDEOGRAPH-3608	[FB80 B608 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3608, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB608, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_494)
{
    // 3609 0021;	
    // (㘉) CJK UNIFIED IDEOGRAPH-3609	[FB80 B609 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3609, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB609, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_495)
{
    // 3609 003F;	
    // (㘉) CJK UNIFIED IDEOGRAPH-3609	[FB80 B609 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3609, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB609, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_496)
{
    // 3609 0061;	
    // (㘉) CJK UNIFIED IDEOGRAPH-3609	[FB80 B609 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3609, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB609, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_497)
{
    // 3609 0041;	
    // (㘉) CJK UNIFIED IDEOGRAPH-3609	[FB80 B609 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3609, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB609, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_498)
{
    // 3609 0062;	
    // (㘉) CJK UNIFIED IDEOGRAPH-3609	[FB80 B609 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3609, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB609, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_331_499)
{
    // 360A 0021;	
    // (㘊) CJK UNIFIED IDEOGRAPH-360A	[FB80 B60A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x360A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB60A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

