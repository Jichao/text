// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_292_000)
{
    // 12295 003F;	
    // (𒊕) CUNEIFORM SIGN SAG	[4E83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12295, 0x003F };
    uint32_t const ces[9] = { 0x4E83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_001)
{
    // 12295 0061;	
    // (𒊕) CUNEIFORM SIGN SAG	[4E83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12295, 0x0061 };
    uint32_t const ces[9] = { 0x4E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_002)
{
    // 12295 0041;	
    // (𒊕) CUNEIFORM SIGN SAG	[4E83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12295, 0x0041 };
    uint32_t const ces[9] = { 0x4E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_003)
{
    // 12295 0062;	
    // (𒊕) CUNEIFORM SIGN SAG	[4E83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12295, 0x0062 };
    uint32_t const ces[9] = { 0x4E83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_004)
{
    // 12296 0021;	
    // (𒊖) CUNEIFORM SIGN SAG TIMES A	[4E84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12296, 0x0021 };
    uint32_t const ces[9] = { 0x4E84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_005)
{
    // 12296 003F;	
    // (𒊖) CUNEIFORM SIGN SAG TIMES A	[4E84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12296, 0x003F };
    uint32_t const ces[9] = { 0x4E84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_006)
{
    // 12296 0061;	
    // (𒊖) CUNEIFORM SIGN SAG TIMES A	[4E84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12296, 0x0061 };
    uint32_t const ces[9] = { 0x4E84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_007)
{
    // 12296 0041;	
    // (𒊖) CUNEIFORM SIGN SAG TIMES A	[4E84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12296, 0x0041 };
    uint32_t const ces[9] = { 0x4E84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_008)
{
    // 12296 0062;	
    // (𒊖) CUNEIFORM SIGN SAG TIMES A	[4E84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12296, 0x0062 };
    uint32_t const ces[9] = { 0x4E84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_009)
{
    // 12297 0021;	
    // (𒊗) CUNEIFORM SIGN SAG TIMES DU	[4E85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12297, 0x0021 };
    uint32_t const ces[9] = { 0x4E85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_010)
{
    // 12297 003F;	
    // (𒊗) CUNEIFORM SIGN SAG TIMES DU	[4E85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12297, 0x003F };
    uint32_t const ces[9] = { 0x4E85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_011)
{
    // 12297 0061;	
    // (𒊗) CUNEIFORM SIGN SAG TIMES DU	[4E85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12297, 0x0061 };
    uint32_t const ces[9] = { 0x4E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_012)
{
    // 12297 0041;	
    // (𒊗) CUNEIFORM SIGN SAG TIMES DU	[4E85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12297, 0x0041 };
    uint32_t const ces[9] = { 0x4E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_013)
{
    // 12297 0062;	
    // (𒊗) CUNEIFORM SIGN SAG TIMES DU	[4E85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12297, 0x0062 };
    uint32_t const ces[9] = { 0x4E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_014)
{
    // 12298 0021;	
    // (𒊘) CUNEIFORM SIGN SAG TIMES DUB	[4E86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12298, 0x0021 };
    uint32_t const ces[9] = { 0x4E86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_015)
{
    // 12298 003F;	
    // (𒊘) CUNEIFORM SIGN SAG TIMES DUB	[4E86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12298, 0x003F };
    uint32_t const ces[9] = { 0x4E86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_016)
{
    // 12298 0061;	
    // (𒊘) CUNEIFORM SIGN SAG TIMES DUB	[4E86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12298, 0x0061 };
    uint32_t const ces[9] = { 0x4E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_017)
{
    // 12298 0041;	
    // (𒊘) CUNEIFORM SIGN SAG TIMES DUB	[4E86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12298, 0x0041 };
    uint32_t const ces[9] = { 0x4E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_018)
{
    // 12298 0062;	
    // (𒊘) CUNEIFORM SIGN SAG TIMES DUB	[4E86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12298, 0x0062 };
    uint32_t const ces[9] = { 0x4E86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_019)
{
    // 12299 0021;	
    // (𒊙) CUNEIFORM SIGN SAG TIMES HA	[4E87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12299, 0x0021 };
    uint32_t const ces[9] = { 0x4E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_020)
{
    // 12299 003F;	
    // (𒊙) CUNEIFORM SIGN SAG TIMES HA	[4E87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12299, 0x003F };
    uint32_t const ces[9] = { 0x4E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_021)
{
    // 12299 0061;	
    // (𒊙) CUNEIFORM SIGN SAG TIMES HA	[4E87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12299, 0x0061 };
    uint32_t const ces[9] = { 0x4E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_022)
{
    // 12299 0041;	
    // (𒊙) CUNEIFORM SIGN SAG TIMES HA	[4E87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12299, 0x0041 };
    uint32_t const ces[9] = { 0x4E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_023)
{
    // 12299 0062;	
    // (𒊙) CUNEIFORM SIGN SAG TIMES HA	[4E87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12299, 0x0062 };
    uint32_t const ces[9] = { 0x4E87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_024)
{
    // 1229A 0021;	
    // (𒊚) CUNEIFORM SIGN SAG TIMES KAK	[4E88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229A, 0x0021 };
    uint32_t const ces[9] = { 0x4E88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_025)
{
    // 1229A 003F;	
    // (𒊚) CUNEIFORM SIGN SAG TIMES KAK	[4E88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229A, 0x003F };
    uint32_t const ces[9] = { 0x4E88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_026)
{
    // 1229A 0061;	
    // (𒊚) CUNEIFORM SIGN SAG TIMES KAK	[4E88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229A, 0x0061 };
    uint32_t const ces[9] = { 0x4E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_027)
{
    // 1229A 0041;	
    // (𒊚) CUNEIFORM SIGN SAG TIMES KAK	[4E88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1229A, 0x0041 };
    uint32_t const ces[9] = { 0x4E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_028)
{
    // 1229A 0062;	
    // (𒊚) CUNEIFORM SIGN SAG TIMES KAK	[4E88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229A, 0x0062 };
    uint32_t const ces[9] = { 0x4E88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_029)
{
    // 1229B 0021;	
    // (𒊛) CUNEIFORM SIGN SAG TIMES KUR	[4E89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229B, 0x0021 };
    uint32_t const ces[9] = { 0x4E89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_030)
{
    // 1229B 003F;	
    // (𒊛) CUNEIFORM SIGN SAG TIMES KUR	[4E89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229B, 0x003F };
    uint32_t const ces[9] = { 0x4E89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_031)
{
    // 1229B 0061;	
    // (𒊛) CUNEIFORM SIGN SAG TIMES KUR	[4E89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229B, 0x0061 };
    uint32_t const ces[9] = { 0x4E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_032)
{
    // 1229B 0041;	
    // (𒊛) CUNEIFORM SIGN SAG TIMES KUR	[4E89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1229B, 0x0041 };
    uint32_t const ces[9] = { 0x4E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_033)
{
    // 1229B 0062;	
    // (𒊛) CUNEIFORM SIGN SAG TIMES KUR	[4E89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229B, 0x0062 };
    uint32_t const ces[9] = { 0x4E89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_034)
{
    // 1229C 0021;	
    // (𒊜) CUNEIFORM SIGN SAG TIMES LUM	[4E8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229C, 0x0021 };
    uint32_t const ces[9] = { 0x4E8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_035)
{
    // 1229C 003F;	
    // (𒊜) CUNEIFORM SIGN SAG TIMES LUM	[4E8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229C, 0x003F };
    uint32_t const ces[9] = { 0x4E8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_036)
{
    // 1229C 0061;	
    // (𒊜) CUNEIFORM SIGN SAG TIMES LUM	[4E8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229C, 0x0061 };
    uint32_t const ces[9] = { 0x4E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_037)
{
    // 1229C 0041;	
    // (𒊜) CUNEIFORM SIGN SAG TIMES LUM	[4E8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1229C, 0x0041 };
    uint32_t const ces[9] = { 0x4E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_038)
{
    // 1229C 0062;	
    // (𒊜) CUNEIFORM SIGN SAG TIMES LUM	[4E8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229C, 0x0062 };
    uint32_t const ces[9] = { 0x4E8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_039)
{
    // 1229D 0021;	
    // (𒊝) CUNEIFORM SIGN SAG TIMES MI	[4E8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229D, 0x0021 };
    uint32_t const ces[9] = { 0x4E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_040)
{
    // 1229D 003F;	
    // (𒊝) CUNEIFORM SIGN SAG TIMES MI	[4E8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229D, 0x003F };
    uint32_t const ces[9] = { 0x4E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_041)
{
    // 1229D 0061;	
    // (𒊝) CUNEIFORM SIGN SAG TIMES MI	[4E8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229D, 0x0061 };
    uint32_t const ces[9] = { 0x4E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_042)
{
    // 1229D 0041;	
    // (𒊝) CUNEIFORM SIGN SAG TIMES MI	[4E8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1229D, 0x0041 };
    uint32_t const ces[9] = { 0x4E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_043)
{
    // 1229D 0062;	
    // (𒊝) CUNEIFORM SIGN SAG TIMES MI	[4E8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229D, 0x0062 };
    uint32_t const ces[9] = { 0x4E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_044)
{
    // 1229E 0021;	
    // (𒊞) CUNEIFORM SIGN SAG TIMES NUN	[4E8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229E, 0x0021 };
    uint32_t const ces[9] = { 0x4E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_045)
{
    // 1229E 003F;	
    // (𒊞) CUNEIFORM SIGN SAG TIMES NUN	[4E8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229E, 0x003F };
    uint32_t const ces[9] = { 0x4E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_046)
{
    // 1229E 0061;	
    // (𒊞) CUNEIFORM SIGN SAG TIMES NUN	[4E8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229E, 0x0061 };
    uint32_t const ces[9] = { 0x4E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_047)
{
    // 1229E 0041;	
    // (𒊞) CUNEIFORM SIGN SAG TIMES NUN	[4E8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1229E, 0x0041 };
    uint32_t const ces[9] = { 0x4E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_048)
{
    // 1229E 0062;	
    // (𒊞) CUNEIFORM SIGN SAG TIMES NUN	[4E8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229E, 0x0062 };
    uint32_t const ces[9] = { 0x4E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_049)
{
    // 1229F 0021;	
    // (𒊟) CUNEIFORM SIGN SAG TIMES SAL	[4E8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229F, 0x0021 };
    uint32_t const ces[9] = { 0x4E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_050)
{
    // 1229F 003F;	
    // (𒊟) CUNEIFORM SIGN SAG TIMES SAL	[4E8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229F, 0x003F };
    uint32_t const ces[9] = { 0x4E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_051)
{
    // 1229F 0061;	
    // (𒊟) CUNEIFORM SIGN SAG TIMES SAL	[4E8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229F, 0x0061 };
    uint32_t const ces[9] = { 0x4E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_052)
{
    // 1229F 0041;	
    // (𒊟) CUNEIFORM SIGN SAG TIMES SAL	[4E8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1229F, 0x0041 };
    uint32_t const ces[9] = { 0x4E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_053)
{
    // 1229F 0062;	
    // (𒊟) CUNEIFORM SIGN SAG TIMES SAL	[4E8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229F, 0x0062 };
    uint32_t const ces[9] = { 0x4E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_054)
{
    // 122A0 0021;	
    // (𒊠) CUNEIFORM SIGN SAG TIMES SHID	[4E8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A0, 0x0021 };
    uint32_t const ces[9] = { 0x4E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_055)
{
    // 122A0 003F;	
    // (𒊠) CUNEIFORM SIGN SAG TIMES SHID	[4E8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A0, 0x003F };
    uint32_t const ces[9] = { 0x4E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_056)
{
    // 122A0 0061;	
    // (𒊠) CUNEIFORM SIGN SAG TIMES SHID	[4E8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A0, 0x0061 };
    uint32_t const ces[9] = { 0x4E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_057)
{
    // 122A0 0041;	
    // (𒊠) CUNEIFORM SIGN SAG TIMES SHID	[4E8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122A0, 0x0041 };
    uint32_t const ces[9] = { 0x4E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_058)
{
    // 122A0 0062;	
    // (𒊠) CUNEIFORM SIGN SAG TIMES SHID	[4E8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A0, 0x0062 };
    uint32_t const ces[9] = { 0x4E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_059)
{
    // 122A1 0021;	
    // (𒊡) CUNEIFORM SIGN SAG TIMES TAB	[4E8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A1, 0x0021 };
    uint32_t const ces[9] = { 0x4E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_060)
{
    // 122A1 003F;	
    // (𒊡) CUNEIFORM SIGN SAG TIMES TAB	[4E8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A1, 0x003F };
    uint32_t const ces[9] = { 0x4E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_061)
{
    // 122A1 0061;	
    // (𒊡) CUNEIFORM SIGN SAG TIMES TAB	[4E8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A1, 0x0061 };
    uint32_t const ces[9] = { 0x4E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_062)
{
    // 122A1 0041;	
    // (𒊡) CUNEIFORM SIGN SAG TIMES TAB	[4E8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122A1, 0x0041 };
    uint32_t const ces[9] = { 0x4E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_063)
{
    // 122A1 0062;	
    // (𒊡) CUNEIFORM SIGN SAG TIMES TAB	[4E8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A1, 0x0062 };
    uint32_t const ces[9] = { 0x4E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_064)
{
    // 122A2 0021;	
    // (𒊢) CUNEIFORM SIGN SAG TIMES U2	[4E90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A2, 0x0021 };
    uint32_t const ces[9] = { 0x4E90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_065)
{
    // 122A2 003F;	
    // (𒊢) CUNEIFORM SIGN SAG TIMES U2	[4E90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A2, 0x003F };
    uint32_t const ces[9] = { 0x4E90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_066)
{
    // 122A2 0061;	
    // (𒊢) CUNEIFORM SIGN SAG TIMES U2	[4E90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A2, 0x0061 };
    uint32_t const ces[9] = { 0x4E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_067)
{
    // 122A2 0041;	
    // (𒊢) CUNEIFORM SIGN SAG TIMES U2	[4E90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122A2, 0x0041 };
    uint32_t const ces[9] = { 0x4E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_068)
{
    // 122A2 0062;	
    // (𒊢) CUNEIFORM SIGN SAG TIMES U2	[4E90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A2, 0x0062 };
    uint32_t const ces[9] = { 0x4E90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_069)
{
    // 122A3 0021;	
    // (𒊣) CUNEIFORM SIGN SAG TIMES UB	[4E91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A3, 0x0021 };
    uint32_t const ces[9] = { 0x4E91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_070)
{
    // 122A3 003F;	
    // (𒊣) CUNEIFORM SIGN SAG TIMES UB	[4E91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A3, 0x003F };
    uint32_t const ces[9] = { 0x4E91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_071)
{
    // 122A3 0061;	
    // (𒊣) CUNEIFORM SIGN SAG TIMES UB	[4E91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A3, 0x0061 };
    uint32_t const ces[9] = { 0x4E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_072)
{
    // 122A3 0041;	
    // (𒊣) CUNEIFORM SIGN SAG TIMES UB	[4E91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122A3, 0x0041 };
    uint32_t const ces[9] = { 0x4E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_073)
{
    // 122A3 0062;	
    // (𒊣) CUNEIFORM SIGN SAG TIMES UB	[4E91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A3, 0x0062 };
    uint32_t const ces[9] = { 0x4E91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_074)
{
    // 122A4 0021;	
    // (𒊤) CUNEIFORM SIGN SAG TIMES UM	[4E92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A4, 0x0021 };
    uint32_t const ces[9] = { 0x4E92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_075)
{
    // 122A4 003F;	
    // (𒊤) CUNEIFORM SIGN SAG TIMES UM	[4E92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A4, 0x003F };
    uint32_t const ces[9] = { 0x4E92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_076)
{
    // 122A4 0061;	
    // (𒊤) CUNEIFORM SIGN SAG TIMES UM	[4E92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A4, 0x0061 };
    uint32_t const ces[9] = { 0x4E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_077)
{
    // 122A4 0041;	
    // (𒊤) CUNEIFORM SIGN SAG TIMES UM	[4E92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122A4, 0x0041 };
    uint32_t const ces[9] = { 0x4E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_078)
{
    // 122A4 0062;	
    // (𒊤) CUNEIFORM SIGN SAG TIMES UM	[4E92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A4, 0x0062 };
    uint32_t const ces[9] = { 0x4E92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_079)
{
    // 122A5 0021;	
    // (𒊥) CUNEIFORM SIGN SAG TIMES UR	[4E93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A5, 0x0021 };
    uint32_t const ces[9] = { 0x4E93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_080)
{
    // 122A5 003F;	
    // (𒊥) CUNEIFORM SIGN SAG TIMES UR	[4E93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A5, 0x003F };
    uint32_t const ces[9] = { 0x4E93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_081)
{
    // 122A5 0061;	
    // (𒊥) CUNEIFORM SIGN SAG TIMES UR	[4E93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A5, 0x0061 };
    uint32_t const ces[9] = { 0x4E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_082)
{
    // 122A5 0041;	
    // (𒊥) CUNEIFORM SIGN SAG TIMES UR	[4E93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122A5, 0x0041 };
    uint32_t const ces[9] = { 0x4E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_083)
{
    // 122A5 0062;	
    // (𒊥) CUNEIFORM SIGN SAG TIMES UR	[4E93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A5, 0x0062 };
    uint32_t const ces[9] = { 0x4E93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_084)
{
    // 122A6 0021;	
    // (𒊦) CUNEIFORM SIGN SAG TIMES USH	[4E94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A6, 0x0021 };
    uint32_t const ces[9] = { 0x4E94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_085)
{
    // 122A6 003F;	
    // (𒊦) CUNEIFORM SIGN SAG TIMES USH	[4E94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A6, 0x003F };
    uint32_t const ces[9] = { 0x4E94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_086)
{
    // 122A6 0061;	
    // (𒊦) CUNEIFORM SIGN SAG TIMES USH	[4E94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A6, 0x0061 };
    uint32_t const ces[9] = { 0x4E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_087)
{
    // 122A6 0041;	
    // (𒊦) CUNEIFORM SIGN SAG TIMES USH	[4E94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122A6, 0x0041 };
    uint32_t const ces[9] = { 0x4E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_088)
{
    // 122A6 0062;	
    // (𒊦) CUNEIFORM SIGN SAG TIMES USH	[4E94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A6, 0x0062 };
    uint32_t const ces[9] = { 0x4E94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_089)
{
    // 122A7 0021;	
    // (𒊧) CUNEIFORM SIGN SAG OVER SAG	[4E95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A7, 0x0021 };
    uint32_t const ces[9] = { 0x4E95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_090)
{
    // 122A7 003F;	
    // (𒊧) CUNEIFORM SIGN SAG OVER SAG	[4E95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A7, 0x003F };
    uint32_t const ces[9] = { 0x4E95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_091)
{
    // 122A7 0061;	
    // (𒊧) CUNEIFORM SIGN SAG OVER SAG	[4E95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A7, 0x0061 };
    uint32_t const ces[9] = { 0x4E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_092)
{
    // 122A7 0041;	
    // (𒊧) CUNEIFORM SIGN SAG OVER SAG	[4E95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122A7, 0x0041 };
    uint32_t const ces[9] = { 0x4E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_093)
{
    // 122A7 0062;	
    // (𒊧) CUNEIFORM SIGN SAG OVER SAG	[4E95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A7, 0x0062 };
    uint32_t const ces[9] = { 0x4E95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_094)
{
    // 122A8 0021;	
    // (𒊨) CUNEIFORM SIGN SAG GUNU	[4E96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A8, 0x0021 };
    uint32_t const ces[9] = { 0x4E96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_095)
{
    // 122A8 003F;	
    // (𒊨) CUNEIFORM SIGN SAG GUNU	[4E96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A8, 0x003F };
    uint32_t const ces[9] = { 0x4E96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_096)
{
    // 122A8 0061;	
    // (𒊨) CUNEIFORM SIGN SAG GUNU	[4E96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A8, 0x0061 };
    uint32_t const ces[9] = { 0x4E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_097)
{
    // 122A8 0041;	
    // (𒊨) CUNEIFORM SIGN SAG GUNU	[4E96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122A8, 0x0041 };
    uint32_t const ces[9] = { 0x4E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_098)
{
    // 122A8 0062;	
    // (𒊨) CUNEIFORM SIGN SAG GUNU	[4E96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A8, 0x0062 };
    uint32_t const ces[9] = { 0x4E96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_099)
{
    // 122A9 0021;	
    // (𒊩) CUNEIFORM SIGN SAL	[4E97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A9, 0x0021 };
    uint32_t const ces[9] = { 0x4E97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_100)
{
    // 122A9 003F;	
    // (𒊩) CUNEIFORM SIGN SAL	[4E97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A9, 0x003F };
    uint32_t const ces[9] = { 0x4E97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_101)
{
    // 122A9 0061;	
    // (𒊩) CUNEIFORM SIGN SAL	[4E97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A9, 0x0061 };
    uint32_t const ces[9] = { 0x4E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_102)
{
    // 122A9 0041;	
    // (𒊩) CUNEIFORM SIGN SAL	[4E97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122A9, 0x0041 };
    uint32_t const ces[9] = { 0x4E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_103)
{
    // 122A9 0062;	
    // (𒊩) CUNEIFORM SIGN SAL	[4E97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A9, 0x0062 };
    uint32_t const ces[9] = { 0x4E97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_104)
{
    // 122AA 0021;	
    // (𒊪) CUNEIFORM SIGN SAL LAGAB TIMES ASH2	[4E98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122AA, 0x0021 };
    uint32_t const ces[9] = { 0x4E98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_105)
{
    // 122AA 003F;	
    // (𒊪) CUNEIFORM SIGN SAL LAGAB TIMES ASH2	[4E98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122AA, 0x003F };
    uint32_t const ces[9] = { 0x4E98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_106)
{
    // 122AA 0061;	
    // (𒊪) CUNEIFORM SIGN SAL LAGAB TIMES ASH2	[4E98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122AA, 0x0061 };
    uint32_t const ces[9] = { 0x4E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_107)
{
    // 122AA 0041;	
    // (𒊪) CUNEIFORM SIGN SAL LAGAB TIMES ASH2	[4E98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122AA, 0x0041 };
    uint32_t const ces[9] = { 0x4E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_108)
{
    // 122AA 0062;	
    // (𒊪) CUNEIFORM SIGN SAL LAGAB TIMES ASH2	[4E98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122AA, 0x0062 };
    uint32_t const ces[9] = { 0x4E98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_109)
{
    // 122AB 0021;	
    // (𒊫) CUNEIFORM SIGN SANGA2	[4E99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122AB, 0x0021 };
    uint32_t const ces[9] = { 0x4E99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_110)
{
    // 122AB 003F;	
    // (𒊫) CUNEIFORM SIGN SANGA2	[4E99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122AB, 0x003F };
    uint32_t const ces[9] = { 0x4E99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_111)
{
    // 122AB 0061;	
    // (𒊫) CUNEIFORM SIGN SANGA2	[4E99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122AB, 0x0061 };
    uint32_t const ces[9] = { 0x4E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_112)
{
    // 122AB 0041;	
    // (𒊫) CUNEIFORM SIGN SANGA2	[4E99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122AB, 0x0041 };
    uint32_t const ces[9] = { 0x4E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_113)
{
    // 122AB 0062;	
    // (𒊫) CUNEIFORM SIGN SANGA2	[4E99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122AB, 0x0062 };
    uint32_t const ces[9] = { 0x4E99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_114)
{
    // 122AC 0021;	
    // (𒊬) CUNEIFORM SIGN SAR	[4E9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122AC, 0x0021 };
    uint32_t const ces[9] = { 0x4E9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_115)
{
    // 122AC 003F;	
    // (𒊬) CUNEIFORM SIGN SAR	[4E9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122AC, 0x003F };
    uint32_t const ces[9] = { 0x4E9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_116)
{
    // 122AC 0061;	
    // (𒊬) CUNEIFORM SIGN SAR	[4E9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122AC, 0x0061 };
    uint32_t const ces[9] = { 0x4E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_117)
{
    // 122AC 0041;	
    // (𒊬) CUNEIFORM SIGN SAR	[4E9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122AC, 0x0041 };
    uint32_t const ces[9] = { 0x4E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_118)
{
    // 122AC 0062;	
    // (𒊬) CUNEIFORM SIGN SAR	[4E9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122AC, 0x0062 };
    uint32_t const ces[9] = { 0x4E9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_119)
{
    // 122AD 0021;	
    // (𒊭) CUNEIFORM SIGN SHA	[4E9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122AD, 0x0021 };
    uint32_t const ces[9] = { 0x4E9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_120)
{
    // 122AD 003F;	
    // (𒊭) CUNEIFORM SIGN SHA	[4E9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122AD, 0x003F };
    uint32_t const ces[9] = { 0x4E9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_121)
{
    // 122AD 0061;	
    // (𒊭) CUNEIFORM SIGN SHA	[4E9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122AD, 0x0061 };
    uint32_t const ces[9] = { 0x4E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_122)
{
    // 122AD 0041;	
    // (𒊭) CUNEIFORM SIGN SHA	[4E9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122AD, 0x0041 };
    uint32_t const ces[9] = { 0x4E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_123)
{
    // 122AD 0062;	
    // (𒊭) CUNEIFORM SIGN SHA	[4E9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122AD, 0x0062 };
    uint32_t const ces[9] = { 0x4E9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_124)
{
    // 122AE 0021;	
    // (𒊮) CUNEIFORM SIGN SHA3	[4E9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122AE, 0x0021 };
    uint32_t const ces[9] = { 0x4E9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_125)
{
    // 122AE 003F;	
    // (𒊮) CUNEIFORM SIGN SHA3	[4E9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122AE, 0x003F };
    uint32_t const ces[9] = { 0x4E9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_126)
{
    // 122AE 0061;	
    // (𒊮) CUNEIFORM SIGN SHA3	[4E9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122AE, 0x0061 };
    uint32_t const ces[9] = { 0x4E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_127)
{
    // 122AE 0041;	
    // (𒊮) CUNEIFORM SIGN SHA3	[4E9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122AE, 0x0041 };
    uint32_t const ces[9] = { 0x4E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_128)
{
    // 122AE 0062;	
    // (𒊮) CUNEIFORM SIGN SHA3	[4E9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122AE, 0x0062 };
    uint32_t const ces[9] = { 0x4E9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_129)
{
    // 122AF 0021;	
    // (𒊯) CUNEIFORM SIGN SHA3 TIMES A	[4E9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122AF, 0x0021 };
    uint32_t const ces[9] = { 0x4E9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_130)
{
    // 122AF 003F;	
    // (𒊯) CUNEIFORM SIGN SHA3 TIMES A	[4E9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122AF, 0x003F };
    uint32_t const ces[9] = { 0x4E9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_131)
{
    // 122AF 0061;	
    // (𒊯) CUNEIFORM SIGN SHA3 TIMES A	[4E9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122AF, 0x0061 };
    uint32_t const ces[9] = { 0x4E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_132)
{
    // 122AF 0041;	
    // (𒊯) CUNEIFORM SIGN SHA3 TIMES A	[4E9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122AF, 0x0041 };
    uint32_t const ces[9] = { 0x4E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_133)
{
    // 122AF 0062;	
    // (𒊯) CUNEIFORM SIGN SHA3 TIMES A	[4E9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122AF, 0x0062 };
    uint32_t const ces[9] = { 0x4E9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_134)
{
    // 122B0 0021;	
    // (𒊰) CUNEIFORM SIGN SHA3 TIMES BAD	[4E9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B0, 0x0021 };
    uint32_t const ces[9] = { 0x4E9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_135)
{
    // 122B0 003F;	
    // (𒊰) CUNEIFORM SIGN SHA3 TIMES BAD	[4E9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B0, 0x003F };
    uint32_t const ces[9] = { 0x4E9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_136)
{
    // 122B0 0061;	
    // (𒊰) CUNEIFORM SIGN SHA3 TIMES BAD	[4E9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B0, 0x0061 };
    uint32_t const ces[9] = { 0x4E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_137)
{
    // 122B0 0041;	
    // (𒊰) CUNEIFORM SIGN SHA3 TIMES BAD	[4E9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122B0, 0x0041 };
    uint32_t const ces[9] = { 0x4E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_138)
{
    // 122B0 0062;	
    // (𒊰) CUNEIFORM SIGN SHA3 TIMES BAD	[4E9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B0, 0x0062 };
    uint32_t const ces[9] = { 0x4E9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_139)
{
    // 122B1 0021;	
    // (𒊱) CUNEIFORM SIGN SHA3 TIMES GISH	[4E9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B1, 0x0021 };
    uint32_t const ces[9] = { 0x4E9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_140)
{
    // 122B1 003F;	
    // (𒊱) CUNEIFORM SIGN SHA3 TIMES GISH	[4E9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B1, 0x003F };
    uint32_t const ces[9] = { 0x4E9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_141)
{
    // 122B1 0061;	
    // (𒊱) CUNEIFORM SIGN SHA3 TIMES GISH	[4E9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B1, 0x0061 };
    uint32_t const ces[9] = { 0x4E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_142)
{
    // 122B1 0041;	
    // (𒊱) CUNEIFORM SIGN SHA3 TIMES GISH	[4E9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122B1, 0x0041 };
    uint32_t const ces[9] = { 0x4E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_143)
{
    // 122B1 0062;	
    // (𒊱) CUNEIFORM SIGN SHA3 TIMES GISH	[4E9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B1, 0x0062 };
    uint32_t const ces[9] = { 0x4E9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_144)
{
    // 122B2 0021;	
    // (𒊲) CUNEIFORM SIGN SHA3 TIMES NE	[4EA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B2, 0x0021 };
    uint32_t const ces[9] = { 0x4EA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_145)
{
    // 122B2 003F;	
    // (𒊲) CUNEIFORM SIGN SHA3 TIMES NE	[4EA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B2, 0x003F };
    uint32_t const ces[9] = { 0x4EA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_146)
{
    // 122B2 0061;	
    // (𒊲) CUNEIFORM SIGN SHA3 TIMES NE	[4EA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B2, 0x0061 };
    uint32_t const ces[9] = { 0x4EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_147)
{
    // 122B2 0041;	
    // (𒊲) CUNEIFORM SIGN SHA3 TIMES NE	[4EA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122B2, 0x0041 };
    uint32_t const ces[9] = { 0x4EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_148)
{
    // 122B2 0062;	
    // (𒊲) CUNEIFORM SIGN SHA3 TIMES NE	[4EA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B2, 0x0062 };
    uint32_t const ces[9] = { 0x4EA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_149)
{
    // 122B3 0021;	
    // (𒊳) CUNEIFORM SIGN SHA3 TIMES SHU2	[4EA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B3, 0x0021 };
    uint32_t const ces[9] = { 0x4EA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_150)
{
    // 122B3 003F;	
    // (𒊳) CUNEIFORM SIGN SHA3 TIMES SHU2	[4EA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B3, 0x003F };
    uint32_t const ces[9] = { 0x4EA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_151)
{
    // 122B3 0061;	
    // (𒊳) CUNEIFORM SIGN SHA3 TIMES SHU2	[4EA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B3, 0x0061 };
    uint32_t const ces[9] = { 0x4EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_152)
{
    // 122B3 0041;	
    // (𒊳) CUNEIFORM SIGN SHA3 TIMES SHU2	[4EA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122B3, 0x0041 };
    uint32_t const ces[9] = { 0x4EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_153)
{
    // 122B3 0062;	
    // (𒊳) CUNEIFORM SIGN SHA3 TIMES SHU2	[4EA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B3, 0x0062 };
    uint32_t const ces[9] = { 0x4EA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_154)
{
    // 122B4 0021;	
    // (𒊴) CUNEIFORM SIGN SHA3 TIMES TUR	[4EA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B4, 0x0021 };
    uint32_t const ces[9] = { 0x4EA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_155)
{
    // 122B4 003F;	
    // (𒊴) CUNEIFORM SIGN SHA3 TIMES TUR	[4EA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B4, 0x003F };
    uint32_t const ces[9] = { 0x4EA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_156)
{
    // 122B4 0061;	
    // (𒊴) CUNEIFORM SIGN SHA3 TIMES TUR	[4EA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B4, 0x0061 };
    uint32_t const ces[9] = { 0x4EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_157)
{
    // 122B4 0041;	
    // (𒊴) CUNEIFORM SIGN SHA3 TIMES TUR	[4EA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122B4, 0x0041 };
    uint32_t const ces[9] = { 0x4EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_158)
{
    // 122B4 0062;	
    // (𒊴) CUNEIFORM SIGN SHA3 TIMES TUR	[4EA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B4, 0x0062 };
    uint32_t const ces[9] = { 0x4EA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_159)
{
    // 122B5 0021;	
    // (𒊵) CUNEIFORM SIGN SHA3 TIMES U	[4EA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B5, 0x0021 };
    uint32_t const ces[9] = { 0x4EA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_160)
{
    // 122B5 003F;	
    // (𒊵) CUNEIFORM SIGN SHA3 TIMES U	[4EA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B5, 0x003F };
    uint32_t const ces[9] = { 0x4EA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_161)
{
    // 122B5 0061;	
    // (𒊵) CUNEIFORM SIGN SHA3 TIMES U	[4EA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B5, 0x0061 };
    uint32_t const ces[9] = { 0x4EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_162)
{
    // 122B5 0041;	
    // (𒊵) CUNEIFORM SIGN SHA3 TIMES U	[4EA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122B5, 0x0041 };
    uint32_t const ces[9] = { 0x4EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_163)
{
    // 122B5 0062;	
    // (𒊵) CUNEIFORM SIGN SHA3 TIMES U	[4EA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B5, 0x0062 };
    uint32_t const ces[9] = { 0x4EA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_164)
{
    // 122B6 0021;	
    // (𒊶) CUNEIFORM SIGN SHA3 TIMES U PLUS A	[4EA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B6, 0x0021 };
    uint32_t const ces[9] = { 0x4EA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_165)
{
    // 122B6 003F;	
    // (𒊶) CUNEIFORM SIGN SHA3 TIMES U PLUS A	[4EA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B6, 0x003F };
    uint32_t const ces[9] = { 0x4EA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_166)
{
    // 122B6 0061;	
    // (𒊶) CUNEIFORM SIGN SHA3 TIMES U PLUS A	[4EA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B6, 0x0061 };
    uint32_t const ces[9] = { 0x4EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_167)
{
    // 122B6 0041;	
    // (𒊶) CUNEIFORM SIGN SHA3 TIMES U PLUS A	[4EA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122B6, 0x0041 };
    uint32_t const ces[9] = { 0x4EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_168)
{
    // 122B6 0062;	
    // (𒊶) CUNEIFORM SIGN SHA3 TIMES U PLUS A	[4EA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B6, 0x0062 };
    uint32_t const ces[9] = { 0x4EA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_169)
{
    // 122B7 0021;	
    // (𒊷) CUNEIFORM SIGN SHA6	[4EA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B7, 0x0021 };
    uint32_t const ces[9] = { 0x4EA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_170)
{
    // 122B7 003F;	
    // (𒊷) CUNEIFORM SIGN SHA6	[4EA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B7, 0x003F };
    uint32_t const ces[9] = { 0x4EA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_171)
{
    // 122B7 0061;	
    // (𒊷) CUNEIFORM SIGN SHA6	[4EA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B7, 0x0061 };
    uint32_t const ces[9] = { 0x4EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_172)
{
    // 122B7 0041;	
    // (𒊷) CUNEIFORM SIGN SHA6	[4EA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122B7, 0x0041 };
    uint32_t const ces[9] = { 0x4EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_173)
{
    // 122B7 0062;	
    // (𒊷) CUNEIFORM SIGN SHA6	[4EA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B7, 0x0062 };
    uint32_t const ces[9] = { 0x4EA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_174)
{
    // 122B8 0021;	
    // (𒊸) CUNEIFORM SIGN SHAB6	[4EA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B8, 0x0021 };
    uint32_t const ces[9] = { 0x4EA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_175)
{
    // 122B8 003F;	
    // (𒊸) CUNEIFORM SIGN SHAB6	[4EA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B8, 0x003F };
    uint32_t const ces[9] = { 0x4EA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_176)
{
    // 122B8 0061;	
    // (𒊸) CUNEIFORM SIGN SHAB6	[4EA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B8, 0x0061 };
    uint32_t const ces[9] = { 0x4EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_177)
{
    // 122B8 0041;	
    // (𒊸) CUNEIFORM SIGN SHAB6	[4EA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122B8, 0x0041 };
    uint32_t const ces[9] = { 0x4EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_178)
{
    // 122B8 0062;	
    // (𒊸) CUNEIFORM SIGN SHAB6	[4EA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B8, 0x0062 };
    uint32_t const ces[9] = { 0x4EA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_179)
{
    // 122B9 0021;	
    // (𒊹) CUNEIFORM SIGN SHAR2	[4EA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B9, 0x0021 };
    uint32_t const ces[9] = { 0x4EA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_180)
{
    // 122B9 003F;	
    // (𒊹) CUNEIFORM SIGN SHAR2	[4EA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B9, 0x003F };
    uint32_t const ces[9] = { 0x4EA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_181)
{
    // 122B9 0061;	
    // (𒊹) CUNEIFORM SIGN SHAR2	[4EA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B9, 0x0061 };
    uint32_t const ces[9] = { 0x4EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_182)
{
    // 122B9 0041;	
    // (𒊹) CUNEIFORM SIGN SHAR2	[4EA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122B9, 0x0041 };
    uint32_t const ces[9] = { 0x4EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_183)
{
    // 122B9 0062;	
    // (𒊹) CUNEIFORM SIGN SHAR2	[4EA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B9, 0x0062 };
    uint32_t const ces[9] = { 0x4EA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_184)
{
    // 122BA 0021;	
    // (𒊺) CUNEIFORM SIGN SHE	[4EA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122BA, 0x0021 };
    uint32_t const ces[9] = { 0x4EA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_185)
{
    // 122BA 003F;	
    // (𒊺) CUNEIFORM SIGN SHE	[4EA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122BA, 0x003F };
    uint32_t const ces[9] = { 0x4EA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_186)
{
    // 122BA 0061;	
    // (𒊺) CUNEIFORM SIGN SHE	[4EA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122BA, 0x0061 };
    uint32_t const ces[9] = { 0x4EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_187)
{
    // 122BA 0041;	
    // (𒊺) CUNEIFORM SIGN SHE	[4EA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122BA, 0x0041 };
    uint32_t const ces[9] = { 0x4EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_188)
{
    // 122BA 0062;	
    // (𒊺) CUNEIFORM SIGN SHE	[4EA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122BA, 0x0062 };
    uint32_t const ces[9] = { 0x4EA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_189)
{
    // 122BB 0021;	
    // (𒊻) CUNEIFORM SIGN SHE HU	[4EA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122BB, 0x0021 };
    uint32_t const ces[9] = { 0x4EA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_190)
{
    // 122BB 003F;	
    // (𒊻) CUNEIFORM SIGN SHE HU	[4EA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122BB, 0x003F };
    uint32_t const ces[9] = { 0x4EA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_191)
{
    // 122BB 0061;	
    // (𒊻) CUNEIFORM SIGN SHE HU	[4EA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122BB, 0x0061 };
    uint32_t const ces[9] = { 0x4EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_192)
{
    // 122BB 0041;	
    // (𒊻) CUNEIFORM SIGN SHE HU	[4EA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122BB, 0x0041 };
    uint32_t const ces[9] = { 0x4EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_193)
{
    // 122BB 0062;	
    // (𒊻) CUNEIFORM SIGN SHE HU	[4EA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122BB, 0x0062 };
    uint32_t const ces[9] = { 0x4EA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_194)
{
    // 122BC 0021;	
    // (𒊼) CUNEIFORM SIGN SHE OVER SHE GAD OVER GAD GAR OVER GAR	[4EAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122BC, 0x0021 };
    uint32_t const ces[9] = { 0x4EAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_195)
{
    // 122BC 003F;	
    // (𒊼) CUNEIFORM SIGN SHE OVER SHE GAD OVER GAD GAR OVER GAR	[4EAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122BC, 0x003F };
    uint32_t const ces[9] = { 0x4EAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_196)
{
    // 122BC 0061;	
    // (𒊼) CUNEIFORM SIGN SHE OVER SHE GAD OVER GAD GAR OVER GAR	[4EAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122BC, 0x0061 };
    uint32_t const ces[9] = { 0x4EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_197)
{
    // 122BC 0041;	
    // (𒊼) CUNEIFORM SIGN SHE OVER SHE GAD OVER GAD GAR OVER GAR	[4EAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122BC, 0x0041 };
    uint32_t const ces[9] = { 0x4EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_198)
{
    // 122BC 0062;	
    // (𒊼) CUNEIFORM SIGN SHE OVER SHE GAD OVER GAD GAR OVER GAR	[4EAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122BC, 0x0062 };
    uint32_t const ces[9] = { 0x4EAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_199)
{
    // 122BD 0021;	
    // (𒊽) CUNEIFORM SIGN SHE OVER SHE TAB OVER TAB GAR OVER GAR	[4EAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122BD, 0x0021 };
    uint32_t const ces[9] = { 0x4EAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_200)
{
    // 122BD 003F;	
    // (𒊽) CUNEIFORM SIGN SHE OVER SHE TAB OVER TAB GAR OVER GAR	[4EAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122BD, 0x003F };
    uint32_t const ces[9] = { 0x4EAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_201)
{
    // 122BD 0061;	
    // (𒊽) CUNEIFORM SIGN SHE OVER SHE TAB OVER TAB GAR OVER GAR	[4EAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122BD, 0x0061 };
    uint32_t const ces[9] = { 0x4EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_202)
{
    // 122BD 0041;	
    // (𒊽) CUNEIFORM SIGN SHE OVER SHE TAB OVER TAB GAR OVER GAR	[4EAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122BD, 0x0041 };
    uint32_t const ces[9] = { 0x4EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_203)
{
    // 122BD 0062;	
    // (𒊽) CUNEIFORM SIGN SHE OVER SHE TAB OVER TAB GAR OVER GAR	[4EAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122BD, 0x0062 };
    uint32_t const ces[9] = { 0x4EAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_204)
{
    // 122BE 0021;	
    // (𒊾) CUNEIFORM SIGN SHEG9	[4EAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122BE, 0x0021 };
    uint32_t const ces[9] = { 0x4EAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_205)
{
    // 122BE 003F;	
    // (𒊾) CUNEIFORM SIGN SHEG9	[4EAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122BE, 0x003F };
    uint32_t const ces[9] = { 0x4EAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_206)
{
    // 122BE 0061;	
    // (𒊾) CUNEIFORM SIGN SHEG9	[4EAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122BE, 0x0061 };
    uint32_t const ces[9] = { 0x4EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_207)
{
    // 122BE 0041;	
    // (𒊾) CUNEIFORM SIGN SHEG9	[4EAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122BE, 0x0041 };
    uint32_t const ces[9] = { 0x4EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_208)
{
    // 122BE 0062;	
    // (𒊾) CUNEIFORM SIGN SHEG9	[4EAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122BE, 0x0062 };
    uint32_t const ces[9] = { 0x4EAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_209)
{
    // 122BF 0021;	
    // (𒊿) CUNEIFORM SIGN SHEN	[4EAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122BF, 0x0021 };
    uint32_t const ces[9] = { 0x4EAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_210)
{
    // 122BF 003F;	
    // (𒊿) CUNEIFORM SIGN SHEN	[4EAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122BF, 0x003F };
    uint32_t const ces[9] = { 0x4EAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_211)
{
    // 122BF 0061;	
    // (𒊿) CUNEIFORM SIGN SHEN	[4EAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122BF, 0x0061 };
    uint32_t const ces[9] = { 0x4EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_212)
{
    // 122BF 0041;	
    // (𒊿) CUNEIFORM SIGN SHEN	[4EAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122BF, 0x0041 };
    uint32_t const ces[9] = { 0x4EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_213)
{
    // 122BF 0062;	
    // (𒊿) CUNEIFORM SIGN SHEN	[4EAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122BF, 0x0062 };
    uint32_t const ces[9] = { 0x4EAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_214)
{
    // 122C0 0021;	
    // (𒋀) CUNEIFORM SIGN SHESH	[4EAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C0, 0x0021 };
    uint32_t const ces[9] = { 0x4EAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_215)
{
    // 122C0 003F;	
    // (𒋀) CUNEIFORM SIGN SHESH	[4EAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C0, 0x003F };
    uint32_t const ces[9] = { 0x4EAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_216)
{
    // 122C0 0061;	
    // (𒋀) CUNEIFORM SIGN SHESH	[4EAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C0, 0x0061 };
    uint32_t const ces[9] = { 0x4EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_217)
{
    // 122C0 0041;	
    // (𒋀) CUNEIFORM SIGN SHESH	[4EAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122C0, 0x0041 };
    uint32_t const ces[9] = { 0x4EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_218)
{
    // 122C0 0062;	
    // (𒋀) CUNEIFORM SIGN SHESH	[4EAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C0, 0x0062 };
    uint32_t const ces[9] = { 0x4EAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_219)
{
    // 122C1 0021;	
    // (𒋁) CUNEIFORM SIGN SHESH2	[4EAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C1, 0x0021 };
    uint32_t const ces[9] = { 0x4EAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_220)
{
    // 122C1 003F;	
    // (𒋁) CUNEIFORM SIGN SHESH2	[4EAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C1, 0x003F };
    uint32_t const ces[9] = { 0x4EAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_221)
{
    // 122C1 0061;	
    // (𒋁) CUNEIFORM SIGN SHESH2	[4EAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C1, 0x0061 };
    uint32_t const ces[9] = { 0x4EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_222)
{
    // 122C1 0041;	
    // (𒋁) CUNEIFORM SIGN SHESH2	[4EAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122C1, 0x0041 };
    uint32_t const ces[9] = { 0x4EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_223)
{
    // 122C1 0062;	
    // (𒋁) CUNEIFORM SIGN SHESH2	[4EAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C1, 0x0062 };
    uint32_t const ces[9] = { 0x4EAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_224)
{
    // 122C2 0021;	
    // (𒋂) CUNEIFORM SIGN SHESHLAM	[4EB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C2, 0x0021 };
    uint32_t const ces[9] = { 0x4EB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_225)
{
    // 122C2 003F;	
    // (𒋂) CUNEIFORM SIGN SHESHLAM	[4EB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C2, 0x003F };
    uint32_t const ces[9] = { 0x4EB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_226)
{
    // 122C2 0061;	
    // (𒋂) CUNEIFORM SIGN SHESHLAM	[4EB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C2, 0x0061 };
    uint32_t const ces[9] = { 0x4EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_227)
{
    // 122C2 0041;	
    // (𒋂) CUNEIFORM SIGN SHESHLAM	[4EB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122C2, 0x0041 };
    uint32_t const ces[9] = { 0x4EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_228)
{
    // 122C2 0062;	
    // (𒋂) CUNEIFORM SIGN SHESHLAM	[4EB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C2, 0x0062 };
    uint32_t const ces[9] = { 0x4EB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_229)
{
    // 122C3 0021;	
    // (𒋃) CUNEIFORM SIGN SHID	[4EB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C3, 0x0021 };
    uint32_t const ces[9] = { 0x4EB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_230)
{
    // 122C3 003F;	
    // (𒋃) CUNEIFORM SIGN SHID	[4EB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C3, 0x003F };
    uint32_t const ces[9] = { 0x4EB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_231)
{
    // 122C3 0061;	
    // (𒋃) CUNEIFORM SIGN SHID	[4EB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C3, 0x0061 };
    uint32_t const ces[9] = { 0x4EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_232)
{
    // 122C3 0041;	
    // (𒋃) CUNEIFORM SIGN SHID	[4EB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122C3, 0x0041 };
    uint32_t const ces[9] = { 0x4EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_233)
{
    // 122C3 0062;	
    // (𒋃) CUNEIFORM SIGN SHID	[4EB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C3, 0x0062 };
    uint32_t const ces[9] = { 0x4EB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_234)
{
    // 122C4 0021;	
    // (𒋄) CUNEIFORM SIGN SHID TIMES A	[4EB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C4, 0x0021 };
    uint32_t const ces[9] = { 0x4EB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_235)
{
    // 122C4 003F;	
    // (𒋄) CUNEIFORM SIGN SHID TIMES A	[4EB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C4, 0x003F };
    uint32_t const ces[9] = { 0x4EB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_236)
{
    // 122C4 0061;	
    // (𒋄) CUNEIFORM SIGN SHID TIMES A	[4EB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C4, 0x0061 };
    uint32_t const ces[9] = { 0x4EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_237)
{
    // 122C4 0041;	
    // (𒋄) CUNEIFORM SIGN SHID TIMES A	[4EB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122C4, 0x0041 };
    uint32_t const ces[9] = { 0x4EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_238)
{
    // 122C4 0062;	
    // (𒋄) CUNEIFORM SIGN SHID TIMES A	[4EB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C4, 0x0062 };
    uint32_t const ces[9] = { 0x4EB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_239)
{
    // 122C5 0021;	
    // (𒋅) CUNEIFORM SIGN SHID TIMES IM	[4EB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C5, 0x0021 };
    uint32_t const ces[9] = { 0x4EB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_240)
{
    // 122C5 003F;	
    // (𒋅) CUNEIFORM SIGN SHID TIMES IM	[4EB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C5, 0x003F };
    uint32_t const ces[9] = { 0x4EB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_241)
{
    // 122C5 0061;	
    // (𒋅) CUNEIFORM SIGN SHID TIMES IM	[4EB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C5, 0x0061 };
    uint32_t const ces[9] = { 0x4EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_242)
{
    // 122C5 0041;	
    // (𒋅) CUNEIFORM SIGN SHID TIMES IM	[4EB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122C5, 0x0041 };
    uint32_t const ces[9] = { 0x4EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_243)
{
    // 122C5 0062;	
    // (𒋅) CUNEIFORM SIGN SHID TIMES IM	[4EB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C5, 0x0062 };
    uint32_t const ces[9] = { 0x4EB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_244)
{
    // 122C6 0021;	
    // (𒋆) CUNEIFORM SIGN SHIM	[4EB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C6, 0x0021 };
    uint32_t const ces[9] = { 0x4EB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_245)
{
    // 122C6 003F;	
    // (𒋆) CUNEIFORM SIGN SHIM	[4EB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C6, 0x003F };
    uint32_t const ces[9] = { 0x4EB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_246)
{
    // 122C6 0061;	
    // (𒋆) CUNEIFORM SIGN SHIM	[4EB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C6, 0x0061 };
    uint32_t const ces[9] = { 0x4EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_247)
{
    // 122C6 0041;	
    // (𒋆) CUNEIFORM SIGN SHIM	[4EB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122C6, 0x0041 };
    uint32_t const ces[9] = { 0x4EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_248)
{
    // 122C6 0062;	
    // (𒋆) CUNEIFORM SIGN SHIM	[4EB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C6, 0x0062 };
    uint32_t const ces[9] = { 0x4EB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_249)
{
    // 122C7 0021;	
    // (𒋇) CUNEIFORM SIGN SHIM TIMES A	[4EB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C7, 0x0021 };
    uint32_t const ces[9] = { 0x4EB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_250)
{
    // 122C7 003F;	
    // (𒋇) CUNEIFORM SIGN SHIM TIMES A	[4EB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C7, 0x003F };
    uint32_t const ces[9] = { 0x4EB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_251)
{
    // 122C7 0061;	
    // (𒋇) CUNEIFORM SIGN SHIM TIMES A	[4EB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C7, 0x0061 };
    uint32_t const ces[9] = { 0x4EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_252)
{
    // 122C7 0041;	
    // (𒋇) CUNEIFORM SIGN SHIM TIMES A	[4EB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122C7, 0x0041 };
    uint32_t const ces[9] = { 0x4EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_253)
{
    // 122C7 0062;	
    // (𒋇) CUNEIFORM SIGN SHIM TIMES A	[4EB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C7, 0x0062 };
    uint32_t const ces[9] = { 0x4EB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_254)
{
    // 122C8 0021;	
    // (𒋈) CUNEIFORM SIGN SHIM TIMES BAL	[4EB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C8, 0x0021 };
    uint32_t const ces[9] = { 0x4EB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_255)
{
    // 122C8 003F;	
    // (𒋈) CUNEIFORM SIGN SHIM TIMES BAL	[4EB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C8, 0x003F };
    uint32_t const ces[9] = { 0x4EB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_256)
{
    // 122C8 0061;	
    // (𒋈) CUNEIFORM SIGN SHIM TIMES BAL	[4EB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C8, 0x0061 };
    uint32_t const ces[9] = { 0x4EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_257)
{
    // 122C8 0041;	
    // (𒋈) CUNEIFORM SIGN SHIM TIMES BAL	[4EB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122C8, 0x0041 };
    uint32_t const ces[9] = { 0x4EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_258)
{
    // 122C8 0062;	
    // (𒋈) CUNEIFORM SIGN SHIM TIMES BAL	[4EB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C8, 0x0062 };
    uint32_t const ces[9] = { 0x4EB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_259)
{
    // 122C9 0021;	
    // (𒋉) CUNEIFORM SIGN SHIM TIMES BULUG	[4EB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C9, 0x0021 };
    uint32_t const ces[9] = { 0x4EB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_260)
{
    // 122C9 003F;	
    // (𒋉) CUNEIFORM SIGN SHIM TIMES BULUG	[4EB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C9, 0x003F };
    uint32_t const ces[9] = { 0x4EB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_261)
{
    // 122C9 0061;	
    // (𒋉) CUNEIFORM SIGN SHIM TIMES BULUG	[4EB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C9, 0x0061 };
    uint32_t const ces[9] = { 0x4EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_262)
{
    // 122C9 0041;	
    // (𒋉) CUNEIFORM SIGN SHIM TIMES BULUG	[4EB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122C9, 0x0041 };
    uint32_t const ces[9] = { 0x4EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_263)
{
    // 122C9 0062;	
    // (𒋉) CUNEIFORM SIGN SHIM TIMES BULUG	[4EB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C9, 0x0062 };
    uint32_t const ces[9] = { 0x4EB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_264)
{
    // 122CA 0021;	
    // (𒋊) CUNEIFORM SIGN SHIM TIMES DIN	[4EB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122CA, 0x0021 };
    uint32_t const ces[9] = { 0x4EB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_265)
{
    // 122CA 003F;	
    // (𒋊) CUNEIFORM SIGN SHIM TIMES DIN	[4EB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122CA, 0x003F };
    uint32_t const ces[9] = { 0x4EB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_266)
{
    // 122CA 0061;	
    // (𒋊) CUNEIFORM SIGN SHIM TIMES DIN	[4EB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122CA, 0x0061 };
    uint32_t const ces[9] = { 0x4EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_267)
{
    // 122CA 0041;	
    // (𒋊) CUNEIFORM SIGN SHIM TIMES DIN	[4EB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122CA, 0x0041 };
    uint32_t const ces[9] = { 0x4EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_268)
{
    // 122CA 0062;	
    // (𒋊) CUNEIFORM SIGN SHIM TIMES DIN	[4EB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122CA, 0x0062 };
    uint32_t const ces[9] = { 0x4EB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_269)
{
    // 122CB 0021;	
    // (𒋋) CUNEIFORM SIGN SHIM TIMES GAR	[4EB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122CB, 0x0021 };
    uint32_t const ces[9] = { 0x4EB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_270)
{
    // 122CB 003F;	
    // (𒋋) CUNEIFORM SIGN SHIM TIMES GAR	[4EB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122CB, 0x003F };
    uint32_t const ces[9] = { 0x4EB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_271)
{
    // 122CB 0061;	
    // (𒋋) CUNEIFORM SIGN SHIM TIMES GAR	[4EB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122CB, 0x0061 };
    uint32_t const ces[9] = { 0x4EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_272)
{
    // 122CB 0041;	
    // (𒋋) CUNEIFORM SIGN SHIM TIMES GAR	[4EB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122CB, 0x0041 };
    uint32_t const ces[9] = { 0x4EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_273)
{
    // 122CB 0062;	
    // (𒋋) CUNEIFORM SIGN SHIM TIMES GAR	[4EB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122CB, 0x0062 };
    uint32_t const ces[9] = { 0x4EB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_274)
{
    // 122CC 0021;	
    // (𒋌) CUNEIFORM SIGN SHIM TIMES IGI	[4EBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122CC, 0x0021 };
    uint32_t const ces[9] = { 0x4EBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_275)
{
    // 122CC 003F;	
    // (𒋌) CUNEIFORM SIGN SHIM TIMES IGI	[4EBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122CC, 0x003F };
    uint32_t const ces[9] = { 0x4EBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_276)
{
    // 122CC 0061;	
    // (𒋌) CUNEIFORM SIGN SHIM TIMES IGI	[4EBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122CC, 0x0061 };
    uint32_t const ces[9] = { 0x4EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_277)
{
    // 122CC 0041;	
    // (𒋌) CUNEIFORM SIGN SHIM TIMES IGI	[4EBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122CC, 0x0041 };
    uint32_t const ces[9] = { 0x4EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_278)
{
    // 122CC 0062;	
    // (𒋌) CUNEIFORM SIGN SHIM TIMES IGI	[4EBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122CC, 0x0062 };
    uint32_t const ces[9] = { 0x4EBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_279)
{
    // 122CD 0021;	
    // (𒋍) CUNEIFORM SIGN SHIM TIMES IGI GUNU	[4EBB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122CD, 0x0021 };
    uint32_t const ces[9] = { 0x4EBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_280)
{
    // 122CD 003F;	
    // (𒋍) CUNEIFORM SIGN SHIM TIMES IGI GUNU	[4EBB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122CD, 0x003F };
    uint32_t const ces[9] = { 0x4EBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_281)
{
    // 122CD 0061;	
    // (𒋍) CUNEIFORM SIGN SHIM TIMES IGI GUNU	[4EBB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122CD, 0x0061 };
    uint32_t const ces[9] = { 0x4EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_282)
{
    // 122CD 0041;	
    // (𒋍) CUNEIFORM SIGN SHIM TIMES IGI GUNU	[4EBB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122CD, 0x0041 };
    uint32_t const ces[9] = { 0x4EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_283)
{
    // 122CD 0062;	
    // (𒋍) CUNEIFORM SIGN SHIM TIMES IGI GUNU	[4EBB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122CD, 0x0062 };
    uint32_t const ces[9] = { 0x4EBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_284)
{
    // 122CE 0021;	
    // (𒋎) CUNEIFORM SIGN SHIM TIMES KUSHU2	[4EBC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122CE, 0x0021 };
    uint32_t const ces[9] = { 0x4EBC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_285)
{
    // 122CE 003F;	
    // (𒋎) CUNEIFORM SIGN SHIM TIMES KUSHU2	[4EBC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122CE, 0x003F };
    uint32_t const ces[9] = { 0x4EBC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_286)
{
    // 122CE 0061;	
    // (𒋎) CUNEIFORM SIGN SHIM TIMES KUSHU2	[4EBC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122CE, 0x0061 };
    uint32_t const ces[9] = { 0x4EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_287)
{
    // 122CE 0041;	
    // (𒋎) CUNEIFORM SIGN SHIM TIMES KUSHU2	[4EBC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122CE, 0x0041 };
    uint32_t const ces[9] = { 0x4EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_288)
{
    // 122CE 0062;	
    // (𒋎) CUNEIFORM SIGN SHIM TIMES KUSHU2	[4EBC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122CE, 0x0062 };
    uint32_t const ces[9] = { 0x4EBC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_289)
{
    // 122CF 0021;	
    // (𒋏) CUNEIFORM SIGN SHIM TIMES LUL	[4EBD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122CF, 0x0021 };
    uint32_t const ces[9] = { 0x4EBD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_290)
{
    // 122CF 003F;	
    // (𒋏) CUNEIFORM SIGN SHIM TIMES LUL	[4EBD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122CF, 0x003F };
    uint32_t const ces[9] = { 0x4EBD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_291)
{
    // 122CF 0061;	
    // (𒋏) CUNEIFORM SIGN SHIM TIMES LUL	[4EBD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122CF, 0x0061 };
    uint32_t const ces[9] = { 0x4EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_292)
{
    // 122CF 0041;	
    // (𒋏) CUNEIFORM SIGN SHIM TIMES LUL	[4EBD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122CF, 0x0041 };
    uint32_t const ces[9] = { 0x4EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_293)
{
    // 122CF 0062;	
    // (𒋏) CUNEIFORM SIGN SHIM TIMES LUL	[4EBD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122CF, 0x0062 };
    uint32_t const ces[9] = { 0x4EBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_294)
{
    // 122D0 0021;	
    // (𒋐) CUNEIFORM SIGN SHIM TIMES MUG	[4EBE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D0, 0x0021 };
    uint32_t const ces[9] = { 0x4EBE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_295)
{
    // 122D0 003F;	
    // (𒋐) CUNEIFORM SIGN SHIM TIMES MUG	[4EBE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D0, 0x003F };
    uint32_t const ces[9] = { 0x4EBE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_296)
{
    // 122D0 0061;	
    // (𒋐) CUNEIFORM SIGN SHIM TIMES MUG	[4EBE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D0, 0x0061 };
    uint32_t const ces[9] = { 0x4EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_297)
{
    // 122D0 0041;	
    // (𒋐) CUNEIFORM SIGN SHIM TIMES MUG	[4EBE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122D0, 0x0041 };
    uint32_t const ces[9] = { 0x4EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_298)
{
    // 122D0 0062;	
    // (𒋐) CUNEIFORM SIGN SHIM TIMES MUG	[4EBE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D0, 0x0062 };
    uint32_t const ces[9] = { 0x4EBE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_299)
{
    // 122D1 0021;	
    // (𒋑) CUNEIFORM SIGN SHIM TIMES SAL	[4EBF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D1, 0x0021 };
    uint32_t const ces[9] = { 0x4EBF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_300)
{
    // 122D1 003F;	
    // (𒋑) CUNEIFORM SIGN SHIM TIMES SAL	[4EBF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D1, 0x003F };
    uint32_t const ces[9] = { 0x4EBF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_301)
{
    // 122D1 0061;	
    // (𒋑) CUNEIFORM SIGN SHIM TIMES SAL	[4EBF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D1, 0x0061 };
    uint32_t const ces[9] = { 0x4EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_302)
{
    // 122D1 0041;	
    // (𒋑) CUNEIFORM SIGN SHIM TIMES SAL	[4EBF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122D1, 0x0041 };
    uint32_t const ces[9] = { 0x4EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_303)
{
    // 122D1 0062;	
    // (𒋑) CUNEIFORM SIGN SHIM TIMES SAL	[4EBF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D1, 0x0062 };
    uint32_t const ces[9] = { 0x4EBF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_304)
{
    // 122D2 0021;	
    // (𒋒) CUNEIFORM SIGN SHINIG	[4EC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D2, 0x0021 };
    uint32_t const ces[9] = { 0x4EC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_305)
{
    // 122D2 003F;	
    // (𒋒) CUNEIFORM SIGN SHINIG	[4EC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D2, 0x003F };
    uint32_t const ces[9] = { 0x4EC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_306)
{
    // 122D2 0061;	
    // (𒋒) CUNEIFORM SIGN SHINIG	[4EC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D2, 0x0061 };
    uint32_t const ces[9] = { 0x4EC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_307)
{
    // 122D2 0041;	
    // (𒋒) CUNEIFORM SIGN SHINIG	[4EC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122D2, 0x0041 };
    uint32_t const ces[9] = { 0x4EC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_308)
{
    // 122D2 0062;	
    // (𒋒) CUNEIFORM SIGN SHINIG	[4EC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D2, 0x0062 };
    uint32_t const ces[9] = { 0x4EC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_309)
{
    // 122D3 0021;	
    // (𒋓) CUNEIFORM SIGN SHIR	[4EC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D3, 0x0021 };
    uint32_t const ces[9] = { 0x4EC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_310)
{
    // 122D3 003F;	
    // (𒋓) CUNEIFORM SIGN SHIR	[4EC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D3, 0x003F };
    uint32_t const ces[9] = { 0x4EC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_311)
{
    // 122D3 0061;	
    // (𒋓) CUNEIFORM SIGN SHIR	[4EC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D3, 0x0061 };
    uint32_t const ces[9] = { 0x4EC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_312)
{
    // 122D3 0041;	
    // (𒋓) CUNEIFORM SIGN SHIR	[4EC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122D3, 0x0041 };
    uint32_t const ces[9] = { 0x4EC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_313)
{
    // 122D3 0062;	
    // (𒋓) CUNEIFORM SIGN SHIR	[4EC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D3, 0x0062 };
    uint32_t const ces[9] = { 0x4EC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_314)
{
    // 122D6 0021;	
    // (𒋖) CUNEIFORM SIGN SHITA	[4EC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D6, 0x0021 };
    uint32_t const ces[9] = { 0x4EC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_315)
{
    // 122D6 003F;	
    // (𒋖) CUNEIFORM SIGN SHITA	[4EC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D6, 0x003F };
    uint32_t const ces[9] = { 0x4EC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_316)
{
    // 122D6 0061;	
    // (𒋖) CUNEIFORM SIGN SHITA	[4EC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D6, 0x0061 };
    uint32_t const ces[9] = { 0x4EC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_317)
{
    // 122D6 0041;	
    // (𒋖) CUNEIFORM SIGN SHITA	[4EC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122D6, 0x0041 };
    uint32_t const ces[9] = { 0x4EC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_318)
{
    // 122D6 0062;	
    // (𒋖) CUNEIFORM SIGN SHITA	[4EC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D6, 0x0062 };
    uint32_t const ces[9] = { 0x4EC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_319)
{
    // 122D7 0021;	
    // (𒋗) CUNEIFORM SIGN SHU	[4EC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D7, 0x0021 };
    uint32_t const ces[9] = { 0x4EC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_320)
{
    // 122D7 003F;	
    // (𒋗) CUNEIFORM SIGN SHU	[4EC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D7, 0x003F };
    uint32_t const ces[9] = { 0x4EC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_321)
{
    // 122D7 0061;	
    // (𒋗) CUNEIFORM SIGN SHU	[4EC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D7, 0x0061 };
    uint32_t const ces[9] = { 0x4EC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_322)
{
    // 122D7 0041;	
    // (𒋗) CUNEIFORM SIGN SHU	[4EC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122D7, 0x0041 };
    uint32_t const ces[9] = { 0x4EC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_323)
{
    // 122D7 0062;	
    // (𒋗) CUNEIFORM SIGN SHU	[4EC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D7, 0x0062 };
    uint32_t const ces[9] = { 0x4EC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_324)
{
    // 122D8 0021;	
    // (𒋘) CUNEIFORM SIGN SHU OVER INVERTED SHU	[4EC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D8, 0x0021 };
    uint32_t const ces[9] = { 0x4EC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_325)
{
    // 122D8 003F;	
    // (𒋘) CUNEIFORM SIGN SHU OVER INVERTED SHU	[4EC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D8, 0x003F };
    uint32_t const ces[9] = { 0x4EC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_326)
{
    // 122D8 0061;	
    // (𒋘) CUNEIFORM SIGN SHU OVER INVERTED SHU	[4EC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D8, 0x0061 };
    uint32_t const ces[9] = { 0x4EC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_327)
{
    // 122D8 0041;	
    // (𒋘) CUNEIFORM SIGN SHU OVER INVERTED SHU	[4EC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122D8, 0x0041 };
    uint32_t const ces[9] = { 0x4EC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_328)
{
    // 122D8 0062;	
    // (𒋘) CUNEIFORM SIGN SHU OVER INVERTED SHU	[4EC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D8, 0x0062 };
    uint32_t const ces[9] = { 0x4EC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_329)
{
    // 122D9 0021;	
    // (𒋙) CUNEIFORM SIGN SHU2	[4EC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D9, 0x0021 };
    uint32_t const ces[9] = { 0x4EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_330)
{
    // 122D9 003F;	
    // (𒋙) CUNEIFORM SIGN SHU2	[4EC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D9, 0x003F };
    uint32_t const ces[9] = { 0x4EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_331)
{
    // 122D9 0061;	
    // (𒋙) CUNEIFORM SIGN SHU2	[4EC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D9, 0x0061 };
    uint32_t const ces[9] = { 0x4EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_332)
{
    // 122D9 0041;	
    // (𒋙) CUNEIFORM SIGN SHU2	[4EC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122D9, 0x0041 };
    uint32_t const ces[9] = { 0x4EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_333)
{
    // 122D9 0062;	
    // (𒋙) CUNEIFORM SIGN SHU2	[4EC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D9, 0x0062 };
    uint32_t const ces[9] = { 0x4EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_334)
{
    // 122DA 0021;	
    // (𒋚) CUNEIFORM SIGN SHUBUR	[4EC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122DA, 0x0021 };
    uint32_t const ces[9] = { 0x4EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_335)
{
    // 122DA 003F;	
    // (𒋚) CUNEIFORM SIGN SHUBUR	[4EC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122DA, 0x003F };
    uint32_t const ces[9] = { 0x4EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_336)
{
    // 122DA 0061;	
    // (𒋚) CUNEIFORM SIGN SHUBUR	[4EC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122DA, 0x0061 };
    uint32_t const ces[9] = { 0x4EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_337)
{
    // 122DA 0041;	
    // (𒋚) CUNEIFORM SIGN SHUBUR	[4EC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122DA, 0x0041 };
    uint32_t const ces[9] = { 0x4EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_338)
{
    // 122DA 0062;	
    // (𒋚) CUNEIFORM SIGN SHUBUR	[4EC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122DA, 0x0062 };
    uint32_t const ces[9] = { 0x4EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_339)
{
    // 122DB 0021;	
    // (𒋛) CUNEIFORM SIGN SI	[4EC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122DB, 0x0021 };
    uint32_t const ces[9] = { 0x4EC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_340)
{
    // 122DB 003F;	
    // (𒋛) CUNEIFORM SIGN SI	[4EC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122DB, 0x003F };
    uint32_t const ces[9] = { 0x4EC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_341)
{
    // 122DB 0061;	
    // (𒋛) CUNEIFORM SIGN SI	[4EC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122DB, 0x0061 };
    uint32_t const ces[9] = { 0x4EC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_342)
{
    // 122DB 0041;	
    // (𒋛) CUNEIFORM SIGN SI	[4EC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122DB, 0x0041 };
    uint32_t const ces[9] = { 0x4EC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_343)
{
    // 122DB 0062;	
    // (𒋛) CUNEIFORM SIGN SI	[4EC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122DB, 0x0062 };
    uint32_t const ces[9] = { 0x4EC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_344)
{
    // 122DC 0021;	
    // (𒋜) CUNEIFORM SIGN SI GUNU	[4EC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122DC, 0x0021 };
    uint32_t const ces[9] = { 0x4EC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_345)
{
    // 122DC 003F;	
    // (𒋜) CUNEIFORM SIGN SI GUNU	[4EC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122DC, 0x003F };
    uint32_t const ces[9] = { 0x4EC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_346)
{
    // 122DC 0061;	
    // (𒋜) CUNEIFORM SIGN SI GUNU	[4EC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122DC, 0x0061 };
    uint32_t const ces[9] = { 0x4EC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_347)
{
    // 122DC 0041;	
    // (𒋜) CUNEIFORM SIGN SI GUNU	[4EC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122DC, 0x0041 };
    uint32_t const ces[9] = { 0x4EC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_348)
{
    // 122DC 0062;	
    // (𒋜) CUNEIFORM SIGN SI GUNU	[4EC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122DC, 0x0062 };
    uint32_t const ces[9] = { 0x4EC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_349)
{
    // 122DD 0021;	
    // (𒋝) CUNEIFORM SIGN SIG	[4EC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122DD, 0x0021 };
    uint32_t const ces[9] = { 0x4EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_350)
{
    // 122DD 003F;	
    // (𒋝) CUNEIFORM SIGN SIG	[4EC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122DD, 0x003F };
    uint32_t const ces[9] = { 0x4EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_351)
{
    // 122DD 0061;	
    // (𒋝) CUNEIFORM SIGN SIG	[4EC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122DD, 0x0061 };
    uint32_t const ces[9] = { 0x4EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_352)
{
    // 122DD 0041;	
    // (𒋝) CUNEIFORM SIGN SIG	[4EC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122DD, 0x0041 };
    uint32_t const ces[9] = { 0x4EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_353)
{
    // 122DD 0062;	
    // (𒋝) CUNEIFORM SIGN SIG	[4EC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122DD, 0x0062 };
    uint32_t const ces[9] = { 0x4EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_354)
{
    // 122DE 0021;	
    // (𒋞) CUNEIFORM SIGN SIG4	[4ECA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122DE, 0x0021 };
    uint32_t const ces[9] = { 0x4ECA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_355)
{
    // 122DE 003F;	
    // (𒋞) CUNEIFORM SIGN SIG4	[4ECA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122DE, 0x003F };
    uint32_t const ces[9] = { 0x4ECA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_356)
{
    // 122DE 0061;	
    // (𒋞) CUNEIFORM SIGN SIG4	[4ECA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122DE, 0x0061 };
    uint32_t const ces[9] = { 0x4ECA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_357)
{
    // 122DE 0041;	
    // (𒋞) CUNEIFORM SIGN SIG4	[4ECA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122DE, 0x0041 };
    uint32_t const ces[9] = { 0x4ECA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_358)
{
    // 122DE 0062;	
    // (𒋞) CUNEIFORM SIGN SIG4	[4ECA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122DE, 0x0062 };
    uint32_t const ces[9] = { 0x4ECA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_359)
{
    // 122DF 0021;	
    // (𒋟) CUNEIFORM SIGN SIG4 OVER SIG4 SHU2	[4ECB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122DF, 0x0021 };
    uint32_t const ces[9] = { 0x4ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_360)
{
    // 122DF 003F;	
    // (𒋟) CUNEIFORM SIGN SIG4 OVER SIG4 SHU2	[4ECB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122DF, 0x003F };
    uint32_t const ces[9] = { 0x4ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_361)
{
    // 122DF 0061;	
    // (𒋟) CUNEIFORM SIGN SIG4 OVER SIG4 SHU2	[4ECB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122DF, 0x0061 };
    uint32_t const ces[9] = { 0x4ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_362)
{
    // 122DF 0041;	
    // (𒋟) CUNEIFORM SIGN SIG4 OVER SIG4 SHU2	[4ECB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122DF, 0x0041 };
    uint32_t const ces[9] = { 0x4ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_363)
{
    // 122DF 0062;	
    // (𒋟) CUNEIFORM SIGN SIG4 OVER SIG4 SHU2	[4ECB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122DF, 0x0062 };
    uint32_t const ces[9] = { 0x4ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_364)
{
    // 122E0 0021;	
    // (𒋠) CUNEIFORM SIGN SIK2	[4ECC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E0, 0x0021 };
    uint32_t const ces[9] = { 0x4ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_365)
{
    // 122E0 003F;	
    // (𒋠) CUNEIFORM SIGN SIK2	[4ECC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E0, 0x003F };
    uint32_t const ces[9] = { 0x4ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_366)
{
    // 122E0 0061;	
    // (𒋠) CUNEIFORM SIGN SIK2	[4ECC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E0, 0x0061 };
    uint32_t const ces[9] = { 0x4ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_367)
{
    // 122E0 0041;	
    // (𒋠) CUNEIFORM SIGN SIK2	[4ECC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122E0, 0x0041 };
    uint32_t const ces[9] = { 0x4ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_368)
{
    // 122E0 0062;	
    // (𒋠) CUNEIFORM SIGN SIK2	[4ECC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E0, 0x0062 };
    uint32_t const ces[9] = { 0x4ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_369)
{
    // 122E1 0021;	
    // (𒋡) CUNEIFORM SIGN SILA3	[4ECD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E1, 0x0021 };
    uint32_t const ces[9] = { 0x4ECD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_370)
{
    // 122E1 003F;	
    // (𒋡) CUNEIFORM SIGN SILA3	[4ECD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E1, 0x003F };
    uint32_t const ces[9] = { 0x4ECD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_371)
{
    // 122E1 0061;	
    // (𒋡) CUNEIFORM SIGN SILA3	[4ECD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E1, 0x0061 };
    uint32_t const ces[9] = { 0x4ECD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_372)
{
    // 122E1 0041;	
    // (𒋡) CUNEIFORM SIGN SILA3	[4ECD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122E1, 0x0041 };
    uint32_t const ces[9] = { 0x4ECD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_373)
{
    // 122E1 0062;	
    // (𒋡) CUNEIFORM SIGN SILA3	[4ECD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E1, 0x0062 };
    uint32_t const ces[9] = { 0x4ECD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_374)
{
    // 122E2 0021;	
    // (𒋢) CUNEIFORM SIGN SU	[4ECE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E2, 0x0021 };
    uint32_t const ces[9] = { 0x4ECE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_375)
{
    // 122E2 003F;	
    // (𒋢) CUNEIFORM SIGN SU	[4ECE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E2, 0x003F };
    uint32_t const ces[9] = { 0x4ECE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_376)
{
    // 122E2 0061;	
    // (𒋢) CUNEIFORM SIGN SU	[4ECE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E2, 0x0061 };
    uint32_t const ces[9] = { 0x4ECE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_377)
{
    // 122E2 0041;	
    // (𒋢) CUNEIFORM SIGN SU	[4ECE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122E2, 0x0041 };
    uint32_t const ces[9] = { 0x4ECE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_378)
{
    // 122E2 0062;	
    // (𒋢) CUNEIFORM SIGN SU	[4ECE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E2, 0x0062 };
    uint32_t const ces[9] = { 0x4ECE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_379)
{
    // 122E3 0021;	
    // (𒋣) CUNEIFORM SIGN SU OVER SU	[4ECF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E3, 0x0021 };
    uint32_t const ces[9] = { 0x4ECF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_380)
{
    // 122E3 003F;	
    // (𒋣) CUNEIFORM SIGN SU OVER SU	[4ECF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E3, 0x003F };
    uint32_t const ces[9] = { 0x4ECF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_381)
{
    // 122E3 0061;	
    // (𒋣) CUNEIFORM SIGN SU OVER SU	[4ECF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E3, 0x0061 };
    uint32_t const ces[9] = { 0x4ECF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_382)
{
    // 122E3 0041;	
    // (𒋣) CUNEIFORM SIGN SU OVER SU	[4ECF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122E3, 0x0041 };
    uint32_t const ces[9] = { 0x4ECF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_383)
{
    // 122E3 0062;	
    // (𒋣) CUNEIFORM SIGN SU OVER SU	[4ECF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E3, 0x0062 };
    uint32_t const ces[9] = { 0x4ECF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_384)
{
    // 122E4 0021;	
    // (𒋤) CUNEIFORM SIGN SUD	[4ED0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E4, 0x0021 };
    uint32_t const ces[9] = { 0x4ED0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_385)
{
    // 122E4 003F;	
    // (𒋤) CUNEIFORM SIGN SUD	[4ED0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E4, 0x003F };
    uint32_t const ces[9] = { 0x4ED0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_386)
{
    // 122E4 0061;	
    // (𒋤) CUNEIFORM SIGN SUD	[4ED0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E4, 0x0061 };
    uint32_t const ces[9] = { 0x4ED0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_387)
{
    // 122E4 0041;	
    // (𒋤) CUNEIFORM SIGN SUD	[4ED0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122E4, 0x0041 };
    uint32_t const ces[9] = { 0x4ED0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_388)
{
    // 122E4 0062;	
    // (𒋤) CUNEIFORM SIGN SUD	[4ED0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E4, 0x0062 };
    uint32_t const ces[9] = { 0x4ED0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_389)
{
    // 122E5 0021;	
    // (𒋥) CUNEIFORM SIGN SUD2	[4ED1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E5, 0x0021 };
    uint32_t const ces[9] = { 0x4ED1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_390)
{
    // 122E5 003F;	
    // (𒋥) CUNEIFORM SIGN SUD2	[4ED1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E5, 0x003F };
    uint32_t const ces[9] = { 0x4ED1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_391)
{
    // 122E5 0061;	
    // (𒋥) CUNEIFORM SIGN SUD2	[4ED1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E5, 0x0061 };
    uint32_t const ces[9] = { 0x4ED1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_392)
{
    // 122E5 0041;	
    // (𒋥) CUNEIFORM SIGN SUD2	[4ED1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122E5, 0x0041 };
    uint32_t const ces[9] = { 0x4ED1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_393)
{
    // 122E5 0062;	
    // (𒋥) CUNEIFORM SIGN SUD2	[4ED1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E5, 0x0062 };
    uint32_t const ces[9] = { 0x4ED1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_394)
{
    // 122E6 0021;	
    // (𒋦) CUNEIFORM SIGN SUHUR	[4ED2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E6, 0x0021 };
    uint32_t const ces[9] = { 0x4ED2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_395)
{
    // 122E6 003F;	
    // (𒋦) CUNEIFORM SIGN SUHUR	[4ED2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E6, 0x003F };
    uint32_t const ces[9] = { 0x4ED2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_396)
{
    // 122E6 0061;	
    // (𒋦) CUNEIFORM SIGN SUHUR	[4ED2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E6, 0x0061 };
    uint32_t const ces[9] = { 0x4ED2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_397)
{
    // 122E6 0041;	
    // (𒋦) CUNEIFORM SIGN SUHUR	[4ED2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122E6, 0x0041 };
    uint32_t const ces[9] = { 0x4ED2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_398)
{
    // 122E6 0062;	
    // (𒋦) CUNEIFORM SIGN SUHUR	[4ED2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E6, 0x0062 };
    uint32_t const ces[9] = { 0x4ED2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_399)
{
    // 122E7 0021;	
    // (𒋧) CUNEIFORM SIGN SUM	[4ED3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E7, 0x0021 };
    uint32_t const ces[9] = { 0x4ED3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_400)
{
    // 122E7 003F;	
    // (𒋧) CUNEIFORM SIGN SUM	[4ED3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E7, 0x003F };
    uint32_t const ces[9] = { 0x4ED3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_401)
{
    // 122E7 0061;	
    // (𒋧) CUNEIFORM SIGN SUM	[4ED3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E7, 0x0061 };
    uint32_t const ces[9] = { 0x4ED3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_402)
{
    // 122E7 0041;	
    // (𒋧) CUNEIFORM SIGN SUM	[4ED3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122E7, 0x0041 };
    uint32_t const ces[9] = { 0x4ED3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_403)
{
    // 122E7 0062;	
    // (𒋧) CUNEIFORM SIGN SUM	[4ED3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E7, 0x0062 };
    uint32_t const ces[9] = { 0x4ED3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_404)
{
    // 122E8 0021;	
    // (𒋨) CUNEIFORM SIGN SUMASH	[4ED4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E8, 0x0021 };
    uint32_t const ces[9] = { 0x4ED4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_405)
{
    // 122E8 003F;	
    // (𒋨) CUNEIFORM SIGN SUMASH	[4ED4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E8, 0x003F };
    uint32_t const ces[9] = { 0x4ED4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_406)
{
    // 122E8 0061;	
    // (𒋨) CUNEIFORM SIGN SUMASH	[4ED4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E8, 0x0061 };
    uint32_t const ces[9] = { 0x4ED4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_407)
{
    // 122E8 0041;	
    // (𒋨) CUNEIFORM SIGN SUMASH	[4ED4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122E8, 0x0041 };
    uint32_t const ces[9] = { 0x4ED4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_408)
{
    // 122E8 0062;	
    // (𒋨) CUNEIFORM SIGN SUMASH	[4ED4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E8, 0x0062 };
    uint32_t const ces[9] = { 0x4ED4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_409)
{
    // 122E9 0021;	
    // (𒋩) CUNEIFORM SIGN SUR	[4ED5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E9, 0x0021 };
    uint32_t const ces[9] = { 0x4ED5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_410)
{
    // 122E9 003F;	
    // (𒋩) CUNEIFORM SIGN SUR	[4ED5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E9, 0x003F };
    uint32_t const ces[9] = { 0x4ED5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_411)
{
    // 122E9 0061;	
    // (𒋩) CUNEIFORM SIGN SUR	[4ED5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E9, 0x0061 };
    uint32_t const ces[9] = { 0x4ED5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_412)
{
    // 122E9 0041;	
    // (𒋩) CUNEIFORM SIGN SUR	[4ED5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122E9, 0x0041 };
    uint32_t const ces[9] = { 0x4ED5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_413)
{
    // 122E9 0062;	
    // (𒋩) CUNEIFORM SIGN SUR	[4ED5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E9, 0x0062 };
    uint32_t const ces[9] = { 0x4ED5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_414)
{
    // 122EA 0021;	
    // (𒋪) CUNEIFORM SIGN SUR9	[4ED6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122EA, 0x0021 };
    uint32_t const ces[9] = { 0x4ED6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_415)
{
    // 122EA 003F;	
    // (𒋪) CUNEIFORM SIGN SUR9	[4ED6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122EA, 0x003F };
    uint32_t const ces[9] = { 0x4ED6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_416)
{
    // 122EA 0061;	
    // (𒋪) CUNEIFORM SIGN SUR9	[4ED6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122EA, 0x0061 };
    uint32_t const ces[9] = { 0x4ED6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_417)
{
    // 122EA 0041;	
    // (𒋪) CUNEIFORM SIGN SUR9	[4ED6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122EA, 0x0041 };
    uint32_t const ces[9] = { 0x4ED6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_418)
{
    // 122EA 0062;	
    // (𒋪) CUNEIFORM SIGN SUR9	[4ED6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122EA, 0x0062 };
    uint32_t const ces[9] = { 0x4ED6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_419)
{
    // 122EB 0021;	
    // (𒋫) CUNEIFORM SIGN TA	[4ED7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122EB, 0x0021 };
    uint32_t const ces[9] = { 0x4ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_420)
{
    // 122EB 003F;	
    // (𒋫) CUNEIFORM SIGN TA	[4ED7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122EB, 0x003F };
    uint32_t const ces[9] = { 0x4ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_421)
{
    // 122EB 0061;	
    // (𒋫) CUNEIFORM SIGN TA	[4ED7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122EB, 0x0061 };
    uint32_t const ces[9] = { 0x4ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_422)
{
    // 122EB 0041;	
    // (𒋫) CUNEIFORM SIGN TA	[4ED7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122EB, 0x0041 };
    uint32_t const ces[9] = { 0x4ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_423)
{
    // 122EB 0062;	
    // (𒋫) CUNEIFORM SIGN TA	[4ED7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122EB, 0x0062 };
    uint32_t const ces[9] = { 0x4ED7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_424)
{
    // 122EC 0021;	
    // (𒋬) CUNEIFORM SIGN TA ASTERISK	[4ED8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122EC, 0x0021 };
    uint32_t const ces[9] = { 0x4ED8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_425)
{
    // 122EC 003F;	
    // (𒋬) CUNEIFORM SIGN TA ASTERISK	[4ED8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122EC, 0x003F };
    uint32_t const ces[9] = { 0x4ED8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_426)
{
    // 122EC 0061;	
    // (𒋬) CUNEIFORM SIGN TA ASTERISK	[4ED8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122EC, 0x0061 };
    uint32_t const ces[9] = { 0x4ED8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_427)
{
    // 122EC 0041;	
    // (𒋬) CUNEIFORM SIGN TA ASTERISK	[4ED8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122EC, 0x0041 };
    uint32_t const ces[9] = { 0x4ED8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_428)
{
    // 122EC 0062;	
    // (𒋬) CUNEIFORM SIGN TA ASTERISK	[4ED8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122EC, 0x0062 };
    uint32_t const ces[9] = { 0x4ED8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_429)
{
    // 122ED 0021;	
    // (𒋭) CUNEIFORM SIGN TA TIMES HI	[4ED9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122ED, 0x0021 };
    uint32_t const ces[9] = { 0x4ED9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_430)
{
    // 122ED 003F;	
    // (𒋭) CUNEIFORM SIGN TA TIMES HI	[4ED9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122ED, 0x003F };
    uint32_t const ces[9] = { 0x4ED9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_431)
{
    // 122ED 0061;	
    // (𒋭) CUNEIFORM SIGN TA TIMES HI	[4ED9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122ED, 0x0061 };
    uint32_t const ces[9] = { 0x4ED9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_432)
{
    // 122ED 0041;	
    // (𒋭) CUNEIFORM SIGN TA TIMES HI	[4ED9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122ED, 0x0041 };
    uint32_t const ces[9] = { 0x4ED9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_433)
{
    // 122ED 0062;	
    // (𒋭) CUNEIFORM SIGN TA TIMES HI	[4ED9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122ED, 0x0062 };
    uint32_t const ces[9] = { 0x4ED9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_434)
{
    // 122EE 0021;	
    // (𒋮) CUNEIFORM SIGN TA TIMES MI	[4EDA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122EE, 0x0021 };
    uint32_t const ces[9] = { 0x4EDA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_435)
{
    // 122EE 003F;	
    // (𒋮) CUNEIFORM SIGN TA TIMES MI	[4EDA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122EE, 0x003F };
    uint32_t const ces[9] = { 0x4EDA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_436)
{
    // 122EE 0061;	
    // (𒋮) CUNEIFORM SIGN TA TIMES MI	[4EDA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122EE, 0x0061 };
    uint32_t const ces[9] = { 0x4EDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_437)
{
    // 122EE 0041;	
    // (𒋮) CUNEIFORM SIGN TA TIMES MI	[4EDA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122EE, 0x0041 };
    uint32_t const ces[9] = { 0x4EDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_438)
{
    // 122EE 0062;	
    // (𒋮) CUNEIFORM SIGN TA TIMES MI	[4EDA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122EE, 0x0062 };
    uint32_t const ces[9] = { 0x4EDA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_439)
{
    // 122EF 0021;	
    // (𒋯) CUNEIFORM SIGN TA GUNU	[4EDB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122EF, 0x0021 };
    uint32_t const ces[9] = { 0x4EDB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_440)
{
    // 122EF 003F;	
    // (𒋯) CUNEIFORM SIGN TA GUNU	[4EDB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122EF, 0x003F };
    uint32_t const ces[9] = { 0x4EDB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_441)
{
    // 122EF 0061;	
    // (𒋯) CUNEIFORM SIGN TA GUNU	[4EDB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122EF, 0x0061 };
    uint32_t const ces[9] = { 0x4EDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_442)
{
    // 122EF 0041;	
    // (𒋯) CUNEIFORM SIGN TA GUNU	[4EDB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122EF, 0x0041 };
    uint32_t const ces[9] = { 0x4EDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_443)
{
    // 122EF 0062;	
    // (𒋯) CUNEIFORM SIGN TA GUNU	[4EDB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122EF, 0x0062 };
    uint32_t const ces[9] = { 0x4EDB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_444)
{
    // 122F0 0021;	
    // (𒋰) CUNEIFORM SIGN TAB	[4EDC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F0, 0x0021 };
    uint32_t const ces[9] = { 0x4EDC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_445)
{
    // 122F0 003F;	
    // (𒋰) CUNEIFORM SIGN TAB	[4EDC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F0, 0x003F };
    uint32_t const ces[9] = { 0x4EDC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_446)
{
    // 122F0 0061;	
    // (𒋰) CUNEIFORM SIGN TAB	[4EDC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F0, 0x0061 };
    uint32_t const ces[9] = { 0x4EDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_447)
{
    // 122F0 0041;	
    // (𒋰) CUNEIFORM SIGN TAB	[4EDC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122F0, 0x0041 };
    uint32_t const ces[9] = { 0x4EDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_448)
{
    // 122F0 0062;	
    // (𒋰) CUNEIFORM SIGN TAB	[4EDC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F0, 0x0062 };
    uint32_t const ces[9] = { 0x4EDC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_449)
{
    // 122F1 0021;	
    // (𒋱) CUNEIFORM SIGN TAB OVER TAB NI OVER NI DISH OVER DISH	[4EDD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F1, 0x0021 };
    uint32_t const ces[9] = { 0x4EDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_450)
{
    // 122F1 003F;	
    // (𒋱) CUNEIFORM SIGN TAB OVER TAB NI OVER NI DISH OVER DISH	[4EDD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F1, 0x003F };
    uint32_t const ces[9] = { 0x4EDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_451)
{
    // 122F1 0061;	
    // (𒋱) CUNEIFORM SIGN TAB OVER TAB NI OVER NI DISH OVER DISH	[4EDD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F1, 0x0061 };
    uint32_t const ces[9] = { 0x4EDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_452)
{
    // 122F1 0041;	
    // (𒋱) CUNEIFORM SIGN TAB OVER TAB NI OVER NI DISH OVER DISH	[4EDD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122F1, 0x0041 };
    uint32_t const ces[9] = { 0x4EDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_453)
{
    // 122F1 0062;	
    // (𒋱) CUNEIFORM SIGN TAB OVER TAB NI OVER NI DISH OVER DISH	[4EDD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F1, 0x0062 };
    uint32_t const ces[9] = { 0x4EDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_454)
{
    // 122F2 0021;	
    // (𒋲) CUNEIFORM SIGN TAB SQUARED	[4EDE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F2, 0x0021 };
    uint32_t const ces[9] = { 0x4EDE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_455)
{
    // 122F2 003F;	
    // (𒋲) CUNEIFORM SIGN TAB SQUARED	[4EDE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F2, 0x003F };
    uint32_t const ces[9] = { 0x4EDE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_456)
{
    // 122F2 0061;	
    // (𒋲) CUNEIFORM SIGN TAB SQUARED	[4EDE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F2, 0x0061 };
    uint32_t const ces[9] = { 0x4EDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_457)
{
    // 122F2 0041;	
    // (𒋲) CUNEIFORM SIGN TAB SQUARED	[4EDE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122F2, 0x0041 };
    uint32_t const ces[9] = { 0x4EDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_458)
{
    // 122F2 0062;	
    // (𒋲) CUNEIFORM SIGN TAB SQUARED	[4EDE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F2, 0x0062 };
    uint32_t const ces[9] = { 0x4EDE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_459)
{
    // 122F3 0021;	
    // (𒋳) CUNEIFORM SIGN TAG	[4EDF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F3, 0x0021 };
    uint32_t const ces[9] = { 0x4EDF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_460)
{
    // 122F3 003F;	
    // (𒋳) CUNEIFORM SIGN TAG	[4EDF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F3, 0x003F };
    uint32_t const ces[9] = { 0x4EDF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_461)
{
    // 122F3 0061;	
    // (𒋳) CUNEIFORM SIGN TAG	[4EDF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F3, 0x0061 };
    uint32_t const ces[9] = { 0x4EDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_462)
{
    // 122F3 0041;	
    // (𒋳) CUNEIFORM SIGN TAG	[4EDF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122F3, 0x0041 };
    uint32_t const ces[9] = { 0x4EDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_463)
{
    // 122F3 0062;	
    // (𒋳) CUNEIFORM SIGN TAG	[4EDF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F3, 0x0062 };
    uint32_t const ces[9] = { 0x4EDF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_464)
{
    // 122F4 0021;	
    // (𒋴) CUNEIFORM SIGN TAG TIMES BI	[4EE0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F4, 0x0021 };
    uint32_t const ces[9] = { 0x4EE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_465)
{
    // 122F4 003F;	
    // (𒋴) CUNEIFORM SIGN TAG TIMES BI	[4EE0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F4, 0x003F };
    uint32_t const ces[9] = { 0x4EE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_466)
{
    // 122F4 0061;	
    // (𒋴) CUNEIFORM SIGN TAG TIMES BI	[4EE0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F4, 0x0061 };
    uint32_t const ces[9] = { 0x4EE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_467)
{
    // 122F4 0041;	
    // (𒋴) CUNEIFORM SIGN TAG TIMES BI	[4EE0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122F4, 0x0041 };
    uint32_t const ces[9] = { 0x4EE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_468)
{
    // 122F4 0062;	
    // (𒋴) CUNEIFORM SIGN TAG TIMES BI	[4EE0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F4, 0x0062 };
    uint32_t const ces[9] = { 0x4EE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_469)
{
    // 122F5 0021;	
    // (𒋵) CUNEIFORM SIGN TAG TIMES GUD	[4EE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F5, 0x0021 };
    uint32_t const ces[9] = { 0x4EE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_470)
{
    // 122F5 003F;	
    // (𒋵) CUNEIFORM SIGN TAG TIMES GUD	[4EE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F5, 0x003F };
    uint32_t const ces[9] = { 0x4EE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_471)
{
    // 122F5 0061;	
    // (𒋵) CUNEIFORM SIGN TAG TIMES GUD	[4EE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F5, 0x0061 };
    uint32_t const ces[9] = { 0x4EE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_472)
{
    // 122F5 0041;	
    // (𒋵) CUNEIFORM SIGN TAG TIMES GUD	[4EE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122F5, 0x0041 };
    uint32_t const ces[9] = { 0x4EE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_473)
{
    // 122F5 0062;	
    // (𒋵) CUNEIFORM SIGN TAG TIMES GUD	[4EE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F5, 0x0062 };
    uint32_t const ces[9] = { 0x4EE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_474)
{
    // 122F6 0021;	
    // (𒋶) CUNEIFORM SIGN TAG TIMES SHE	[4EE2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F6, 0x0021 };
    uint32_t const ces[9] = { 0x4EE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_475)
{
    // 122F6 003F;	
    // (𒋶) CUNEIFORM SIGN TAG TIMES SHE	[4EE2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F6, 0x003F };
    uint32_t const ces[9] = { 0x4EE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_476)
{
    // 122F6 0061;	
    // (𒋶) CUNEIFORM SIGN TAG TIMES SHE	[4EE2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F6, 0x0061 };
    uint32_t const ces[9] = { 0x4EE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_477)
{
    // 122F6 0041;	
    // (𒋶) CUNEIFORM SIGN TAG TIMES SHE	[4EE2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122F6, 0x0041 };
    uint32_t const ces[9] = { 0x4EE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_478)
{
    // 122F6 0062;	
    // (𒋶) CUNEIFORM SIGN TAG TIMES SHE	[4EE2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F6, 0x0062 };
    uint32_t const ces[9] = { 0x4EE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_479)
{
    // 122F7 0021;	
    // (𒋷) CUNEIFORM SIGN TAG TIMES SHU	[4EE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F7, 0x0021 };
    uint32_t const ces[9] = { 0x4EE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_480)
{
    // 122F7 003F;	
    // (𒋷) CUNEIFORM SIGN TAG TIMES SHU	[4EE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F7, 0x003F };
    uint32_t const ces[9] = { 0x4EE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_481)
{
    // 122F7 0061;	
    // (𒋷) CUNEIFORM SIGN TAG TIMES SHU	[4EE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F7, 0x0061 };
    uint32_t const ces[9] = { 0x4EE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_482)
{
    // 122F7 0041;	
    // (𒋷) CUNEIFORM SIGN TAG TIMES SHU	[4EE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122F7, 0x0041 };
    uint32_t const ces[9] = { 0x4EE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_483)
{
    // 122F7 0062;	
    // (𒋷) CUNEIFORM SIGN TAG TIMES SHU	[4EE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F7, 0x0062 };
    uint32_t const ces[9] = { 0x4EE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_484)
{
    // 122F8 0021;	
    // (𒋸) CUNEIFORM SIGN TAG TIMES TUG2	[4EE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F8, 0x0021 };
    uint32_t const ces[9] = { 0x4EE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_485)
{
    // 122F8 003F;	
    // (𒋸) CUNEIFORM SIGN TAG TIMES TUG2	[4EE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F8, 0x003F };
    uint32_t const ces[9] = { 0x4EE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_486)
{
    // 122F8 0061;	
    // (𒋸) CUNEIFORM SIGN TAG TIMES TUG2	[4EE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F8, 0x0061 };
    uint32_t const ces[9] = { 0x4EE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_487)
{
    // 122F8 0041;	
    // (𒋸) CUNEIFORM SIGN TAG TIMES TUG2	[4EE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122F8, 0x0041 };
    uint32_t const ces[9] = { 0x4EE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_488)
{
    // 122F8 0062;	
    // (𒋸) CUNEIFORM SIGN TAG TIMES TUG2	[4EE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F8, 0x0062 };
    uint32_t const ces[9] = { 0x4EE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_489)
{
    // 122F9 0021;	
    // (𒋹) CUNEIFORM SIGN TAG TIMES UD	[4EE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F9, 0x0021 };
    uint32_t const ces[9] = { 0x4EE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_490)
{
    // 122F9 003F;	
    // (𒋹) CUNEIFORM SIGN TAG TIMES UD	[4EE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F9, 0x003F };
    uint32_t const ces[9] = { 0x4EE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_491)
{
    // 122F9 0061;	
    // (𒋹) CUNEIFORM SIGN TAG TIMES UD	[4EE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F9, 0x0061 };
    uint32_t const ces[9] = { 0x4EE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_492)
{
    // 122F9 0041;	
    // (𒋹) CUNEIFORM SIGN TAG TIMES UD	[4EE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122F9, 0x0041 };
    uint32_t const ces[9] = { 0x4EE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_493)
{
    // 122F9 0062;	
    // (𒋹) CUNEIFORM SIGN TAG TIMES UD	[4EE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F9, 0x0062 };
    uint32_t const ces[9] = { 0x4EE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_494)
{
    // 122FA 0021;	
    // (𒋺) CUNEIFORM SIGN TAK4	[4EE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122FA, 0x0021 };
    uint32_t const ces[9] = { 0x4EE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_495)
{
    // 122FA 003F;	
    // (𒋺) CUNEIFORM SIGN TAK4	[4EE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122FA, 0x003F };
    uint32_t const ces[9] = { 0x4EE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_496)
{
    // 122FA 0061;	
    // (𒋺) CUNEIFORM SIGN TAK4	[4EE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122FA, 0x0061 };
    uint32_t const ces[9] = { 0x4EE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_497)
{
    // 122FA 0041;	
    // (𒋺) CUNEIFORM SIGN TAK4	[4EE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122FA, 0x0041 };
    uint32_t const ces[9] = { 0x4EE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_498)
{
    // 122FA 0062;	
    // (𒋺) CUNEIFORM SIGN TAK4	[4EE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122FA, 0x0062 };
    uint32_t const ces[9] = { 0x4EE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_292_499)
{
    // 122FB 0021;	
    // (𒋻) CUNEIFORM SIGN TAR	[4EE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122FB, 0x0021 };
    uint32_t const ces[9] = { 0x4EE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

