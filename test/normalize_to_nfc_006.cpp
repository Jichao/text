// Warning! This file is autogenerated.
#include <boost/text/normalize.hpp>
#include <boost/text/utility.hpp>

#include <gtest/gtest.h>

#include <algorithm>



TEST(normalization, nfc_006_000)
{
    // 2091;2091;2091;0065;0065; 
    // (ₑ; ₑ; ₑ; e; e; ) LATIN SUBSCRIPT SMALL LETTER E
    {
        std::array<uint32_t, 1> const source = {{ 0x2091 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2091 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_001)
{
    // 2092;2092;2092;006F;006F; 
    // (ₒ; ₒ; ₒ; o; o; ) LATIN SUBSCRIPT SMALL LETTER O
    {
        std::array<uint32_t, 1> const source = {{ 0x2092 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2092 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_002)
{
    // 2093;2093;2093;0078;0078; 
    // (ₓ; ₓ; ₓ; x; x; ) LATIN SUBSCRIPT SMALL LETTER X
    {
        std::array<uint32_t, 1> const source = {{ 0x2093 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2093 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_003)
{
    // 2094;2094;2094;0259;0259; 
    // (ₔ; ₔ; ₔ; ə; ə; ) LATIN SUBSCRIPT SMALL LETTER SCHWA
    {
        std::array<uint32_t, 1> const source = {{ 0x2094 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2094 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_004)
{
    // 2095;2095;2095;0068;0068; 
    // (ₕ; ₕ; ₕ; h; h; ) LATIN SUBSCRIPT SMALL LETTER H
    {
        std::array<uint32_t, 1> const source = {{ 0x2095 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2095 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_005)
{
    // 2096;2096;2096;006B;006B; 
    // (ₖ; ₖ; ₖ; k; k; ) LATIN SUBSCRIPT SMALL LETTER K
    {
        std::array<uint32_t, 1> const source = {{ 0x2096 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2096 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_006)
{
    // 2097;2097;2097;006C;006C; 
    // (ₗ; ₗ; ₗ; l; l; ) LATIN SUBSCRIPT SMALL LETTER L
    {
        std::array<uint32_t, 1> const source = {{ 0x2097 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2097 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_007)
{
    // 2098;2098;2098;006D;006D; 
    // (ₘ; ₘ; ₘ; m; m; ) LATIN SUBSCRIPT SMALL LETTER M
    {
        std::array<uint32_t, 1> const source = {{ 0x2098 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2098 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_008)
{
    // 2099;2099;2099;006E;006E; 
    // (ₙ; ₙ; ₙ; n; n; ) LATIN SUBSCRIPT SMALL LETTER N
    {
        std::array<uint32_t, 1> const source = {{ 0x2099 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2099 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_009)
{
    // 209A;209A;209A;0070;0070; 
    // (ₚ; ₚ; ₚ; p; p; ) LATIN SUBSCRIPT SMALL LETTER P
    {
        std::array<uint32_t, 1> const source = {{ 0x209A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x209A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_010)
{
    // 209B;209B;209B;0073;0073; 
    // (ₛ; ₛ; ₛ; s; s; ) LATIN SUBSCRIPT SMALL LETTER S
    {
        std::array<uint32_t, 1> const source = {{ 0x209B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x209B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_011)
{
    // 209C;209C;209C;0074;0074; 
    // (ₜ; ₜ; ₜ; t; t; ) LATIN SUBSCRIPT SMALL LETTER T
    {
        std::array<uint32_t, 1> const source = {{ 0x209C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x209C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_012)
{
    // 20A8;20A8;20A8;0052 0073;0052 0073; 
    // (₨; ₨; ₨; Rs; Rs; ) RUPEE SIGN
    {
        std::array<uint32_t, 1> const source = {{ 0x20A8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x20A8 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_013)
{
    // 2100;2100;2100;0061 002F 0063;0061 002F 0063; 
    // (℀; ℀; ℀; a/c; a/c; ) ACCOUNT OF
    {
        std::array<uint32_t, 1> const source = {{ 0x2100 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2100 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_014)
{
    // 2101;2101;2101;0061 002F 0073;0061 002F 0073; 
    // (℁; ℁; ℁; a/s; a/s; ) ADDRESSED TO THE SUBJECT
    {
        std::array<uint32_t, 1> const source = {{ 0x2101 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2101 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_015)
{
    // 2102;2102;2102;0043;0043; 
    // (ℂ; ℂ; ℂ; C; C; ) DOUBLE-STRUCK CAPITAL C
    {
        std::array<uint32_t, 1> const source = {{ 0x2102 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2102 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_016)
{
    // 2103;2103;2103;00B0 0043;00B0 0043; 
    // (℃; ℃; ℃; °C; °C; ) DEGREE CELSIUS
    {
        std::array<uint32_t, 1> const source = {{ 0x2103 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2103 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_017)
{
    // 2105;2105;2105;0063 002F 006F;0063 002F 006F; 
    // (℅; ℅; ℅; c/o; c/o; ) CARE OF
    {
        std::array<uint32_t, 1> const source = {{ 0x2105 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2105 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_018)
{
    // 2106;2106;2106;0063 002F 0075;0063 002F 0075; 
    // (℆; ℆; ℆; c/u; c/u; ) CADA UNA
    {
        std::array<uint32_t, 1> const source = {{ 0x2106 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2106 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_019)
{
    // 2107;2107;2107;0190;0190; 
    // (ℇ; ℇ; ℇ; Ɛ; Ɛ; ) EULER CONSTANT
    {
        std::array<uint32_t, 1> const source = {{ 0x2107 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2107 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_020)
{
    // 2109;2109;2109;00B0 0046;00B0 0046; 
    // (℉; ℉; ℉; °F; °F; ) DEGREE FAHRENHEIT
    {
        std::array<uint32_t, 1> const source = {{ 0x2109 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2109 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_021)
{
    // 210A;210A;210A;0067;0067; 
    // (ℊ; ℊ; ℊ; g; g; ) SCRIPT SMALL G
    {
        std::array<uint32_t, 1> const source = {{ 0x210A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x210A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_022)
{
    // 210B;210B;210B;0048;0048; 
    // (ℋ; ℋ; ℋ; H; H; ) SCRIPT CAPITAL H
    {
        std::array<uint32_t, 1> const source = {{ 0x210B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x210B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_023)
{
    // 210C;210C;210C;0048;0048; 
    // (ℌ; ℌ; ℌ; H; H; ) BLACK-LETTER CAPITAL H
    {
        std::array<uint32_t, 1> const source = {{ 0x210C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x210C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_024)
{
    // 210D;210D;210D;0048;0048; 
    // (ℍ; ℍ; ℍ; H; H; ) DOUBLE-STRUCK CAPITAL H
    {
        std::array<uint32_t, 1> const source = {{ 0x210D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x210D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_025)
{
    // 210E;210E;210E;0068;0068; 
    // (ℎ; ℎ; ℎ; h; h; ) PLANCK CONSTANT
    {
        std::array<uint32_t, 1> const source = {{ 0x210E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x210E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_026)
{
    // 210F;210F;210F;0127;0127; 
    // (ℏ; ℏ; ℏ; ħ; ħ; ) PLANCK CONSTANT OVER TWO PI
    {
        std::array<uint32_t, 1> const source = {{ 0x210F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x210F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_027)
{
    // 2110;2110;2110;0049;0049; 
    // (ℐ; ℐ; ℐ; I; I; ) SCRIPT CAPITAL I
    {
        std::array<uint32_t, 1> const source = {{ 0x2110 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2110 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_028)
{
    // 2111;2111;2111;0049;0049; 
    // (ℑ; ℑ; ℑ; I; I; ) BLACK-LETTER CAPITAL I
    {
        std::array<uint32_t, 1> const source = {{ 0x2111 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2111 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_029)
{
    // 2112;2112;2112;004C;004C; 
    // (ℒ; ℒ; ℒ; L; L; ) SCRIPT CAPITAL L
    {
        std::array<uint32_t, 1> const source = {{ 0x2112 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2112 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_030)
{
    // 2113;2113;2113;006C;006C; 
    // (ℓ; ℓ; ℓ; l; l; ) SCRIPT SMALL L
    {
        std::array<uint32_t, 1> const source = {{ 0x2113 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2113 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_031)
{
    // 2115;2115;2115;004E;004E; 
    // (ℕ; ℕ; ℕ; N; N; ) DOUBLE-STRUCK CAPITAL N
    {
        std::array<uint32_t, 1> const source = {{ 0x2115 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2115 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_032)
{
    // 2116;2116;2116;004E 006F;004E 006F; 
    // (№; №; №; No; No; ) NUMERO SIGN
    {
        std::array<uint32_t, 1> const source = {{ 0x2116 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2116 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_033)
{
    // 2119;2119;2119;0050;0050; 
    // (ℙ; ℙ; ℙ; P; P; ) DOUBLE-STRUCK CAPITAL P
    {
        std::array<uint32_t, 1> const source = {{ 0x2119 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2119 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_034)
{
    // 211A;211A;211A;0051;0051; 
    // (ℚ; ℚ; ℚ; Q; Q; ) DOUBLE-STRUCK CAPITAL Q
    {
        std::array<uint32_t, 1> const source = {{ 0x211A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x211A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_035)
{
    // 211B;211B;211B;0052;0052; 
    // (ℛ; ℛ; ℛ; R; R; ) SCRIPT CAPITAL R
    {
        std::array<uint32_t, 1> const source = {{ 0x211B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x211B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_036)
{
    // 211C;211C;211C;0052;0052; 
    // (ℜ; ℜ; ℜ; R; R; ) BLACK-LETTER CAPITAL R
    {
        std::array<uint32_t, 1> const source = {{ 0x211C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x211C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_037)
{
    // 211D;211D;211D;0052;0052; 
    // (ℝ; ℝ; ℝ; R; R; ) DOUBLE-STRUCK CAPITAL R
    {
        std::array<uint32_t, 1> const source = {{ 0x211D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x211D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_038)
{
    // 2120;2120;2120;0053 004D;0053 004D; 
    // (℠; ℠; ℠; SM; SM; ) SERVICE MARK
    {
        std::array<uint32_t, 1> const source = {{ 0x2120 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2120 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_039)
{
    // 2121;2121;2121;0054 0045 004C;0054 0045 004C; 
    // (℡; ℡; ℡; TEL; TEL; ) TELEPHONE SIGN
    {
        std::array<uint32_t, 1> const source = {{ 0x2121 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2121 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_040)
{
    // 2122;2122;2122;0054 004D;0054 004D; 
    // (™; ™; ™; TM; TM; ) TRADE MARK SIGN
    {
        std::array<uint32_t, 1> const source = {{ 0x2122 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2122 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_041)
{
    // 2124;2124;2124;005A;005A; 
    // (ℤ; ℤ; ℤ; Z; Z; ) DOUBLE-STRUCK CAPITAL Z
    {
        std::array<uint32_t, 1> const source = {{ 0x2124 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2124 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_042)
{
    // 2126;03A9;03A9;03A9;03A9; 
    // (Ω; Ω; Ω; Ω; Ω; ) OHM SIGN
    {
        std::array<uint32_t, 1> const source = {{ 0x2126 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x03A9 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_043)
{
    // 2128;2128;2128;005A;005A; 
    // (ℨ; ℨ; ℨ; Z; Z; ) BLACK-LETTER CAPITAL Z
    {
        std::array<uint32_t, 1> const source = {{ 0x2128 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2128 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_044)
{
    // 212A;004B;004B;004B;004B; 
    // (K; K; K; K; K; ) KELVIN SIGN
    {
        std::array<uint32_t, 1> const source = {{ 0x212A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x004B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_045)
{
    // 212B;00C5;0041 030A;00C5;0041 030A; 
    // (Å; Å; A◌̊; Å; A◌̊; ) ANGSTROM SIGN
    {
        std::array<uint32_t, 1> const source = {{ 0x212B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x00C5 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_046)
{
    // 212C;212C;212C;0042;0042; 
    // (ℬ; ℬ; ℬ; B; B; ) SCRIPT CAPITAL B
    {
        std::array<uint32_t, 1> const source = {{ 0x212C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x212C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_047)
{
    // 212D;212D;212D;0043;0043; 
    // (ℭ; ℭ; ℭ; C; C; ) BLACK-LETTER CAPITAL C
    {
        std::array<uint32_t, 1> const source = {{ 0x212D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x212D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_048)
{
    // 212F;212F;212F;0065;0065; 
    // (ℯ; ℯ; ℯ; e; e; ) SCRIPT SMALL E
    {
        std::array<uint32_t, 1> const source = {{ 0x212F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x212F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_049)
{
    // 2130;2130;2130;0045;0045; 
    // (ℰ; ℰ; ℰ; E; E; ) SCRIPT CAPITAL E
    {
        std::array<uint32_t, 1> const source = {{ 0x2130 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2130 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_050)
{
    // 2131;2131;2131;0046;0046; 
    // (ℱ; ℱ; ℱ; F; F; ) SCRIPT CAPITAL F
    {
        std::array<uint32_t, 1> const source = {{ 0x2131 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2131 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_051)
{
    // 2133;2133;2133;004D;004D; 
    // (ℳ; ℳ; ℳ; M; M; ) SCRIPT CAPITAL M
    {
        std::array<uint32_t, 1> const source = {{ 0x2133 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2133 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_052)
{
    // 2134;2134;2134;006F;006F; 
    // (ℴ; ℴ; ℴ; o; o; ) SCRIPT SMALL O
    {
        std::array<uint32_t, 1> const source = {{ 0x2134 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2134 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_053)
{
    // 2135;2135;2135;05D0;05D0; 
    // (ℵ; ℵ; ℵ; א; א; ) ALEF SYMBOL
    {
        std::array<uint32_t, 1> const source = {{ 0x2135 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2135 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_054)
{
    // 2136;2136;2136;05D1;05D1; 
    // (ℶ; ℶ; ℶ; ב; ב; ) BET SYMBOL
    {
        std::array<uint32_t, 1> const source = {{ 0x2136 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2136 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_055)
{
    // 2137;2137;2137;05D2;05D2; 
    // (ℷ; ℷ; ℷ; ג; ג; ) GIMEL SYMBOL
    {
        std::array<uint32_t, 1> const source = {{ 0x2137 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2137 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_056)
{
    // 2138;2138;2138;05D3;05D3; 
    // (ℸ; ℸ; ℸ; ד; ד; ) DALET SYMBOL
    {
        std::array<uint32_t, 1> const source = {{ 0x2138 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2138 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_057)
{
    // 2139;2139;2139;0069;0069; 
    // (ℹ; ℹ; ℹ; i; i; ) INFORMATION SOURCE
    {
        std::array<uint32_t, 1> const source = {{ 0x2139 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2139 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_058)
{
    // 213B;213B;213B;0046 0041 0058;0046 0041 0058; 
    // (℻; ℻; ℻; FAX; FAX; ) FACSIMILE SIGN
    {
        std::array<uint32_t, 1> const source = {{ 0x213B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x213B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_059)
{
    // 213C;213C;213C;03C0;03C0; 
    // (ℼ; ℼ; ℼ; π; π; ) DOUBLE-STRUCK SMALL PI
    {
        std::array<uint32_t, 1> const source = {{ 0x213C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x213C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_060)
{
    // 213D;213D;213D;03B3;03B3; 
    // (ℽ; ℽ; ℽ; γ; γ; ) DOUBLE-STRUCK SMALL GAMMA
    {
        std::array<uint32_t, 1> const source = {{ 0x213D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x213D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_061)
{
    // 213E;213E;213E;0393;0393; 
    // (ℾ; ℾ; ℾ; Γ; Γ; ) DOUBLE-STRUCK CAPITAL GAMMA
    {
        std::array<uint32_t, 1> const source = {{ 0x213E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x213E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_062)
{
    // 213F;213F;213F;03A0;03A0; 
    // (ℿ; ℿ; ℿ; Π; Π; ) DOUBLE-STRUCK CAPITAL PI
    {
        std::array<uint32_t, 1> const source = {{ 0x213F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x213F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_063)
{
    // 2140;2140;2140;2211;2211; 
    // (⅀; ⅀; ⅀; ∑; ∑; ) DOUBLE-STRUCK N-ARY SUMMATION
    {
        std::array<uint32_t, 1> const source = {{ 0x2140 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2140 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_064)
{
    // 2145;2145;2145;0044;0044; 
    // (ⅅ; ⅅ; ⅅ; D; D; ) DOUBLE-STRUCK ITALIC CAPITAL D
    {
        std::array<uint32_t, 1> const source = {{ 0x2145 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2145 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_065)
{
    // 2146;2146;2146;0064;0064; 
    // (ⅆ; ⅆ; ⅆ; d; d; ) DOUBLE-STRUCK ITALIC SMALL D
    {
        std::array<uint32_t, 1> const source = {{ 0x2146 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2146 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_066)
{
    // 2147;2147;2147;0065;0065; 
    // (ⅇ; ⅇ; ⅇ; e; e; ) DOUBLE-STRUCK ITALIC SMALL E
    {
        std::array<uint32_t, 1> const source = {{ 0x2147 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2147 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_067)
{
    // 2148;2148;2148;0069;0069; 
    // (ⅈ; ⅈ; ⅈ; i; i; ) DOUBLE-STRUCK ITALIC SMALL I
    {
        std::array<uint32_t, 1> const source = {{ 0x2148 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2148 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_068)
{
    // 2149;2149;2149;006A;006A; 
    // (ⅉ; ⅉ; ⅉ; j; j; ) DOUBLE-STRUCK ITALIC SMALL J
    {
        std::array<uint32_t, 1> const source = {{ 0x2149 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2149 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_069)
{
    // 2150;2150;2150;0031 2044 0037;0031 2044 0037; 
    // (⅐; ⅐; ⅐; 1⁄7; 1⁄7; ) VULGAR FRACTION ONE SEVENTH
    {
        std::array<uint32_t, 1> const source = {{ 0x2150 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2150 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_070)
{
    // 2151;2151;2151;0031 2044 0039;0031 2044 0039; 
    // (⅑; ⅑; ⅑; 1⁄9; 1⁄9; ) VULGAR FRACTION ONE NINTH
    {
        std::array<uint32_t, 1> const source = {{ 0x2151 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2151 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_071)
{
    // 2152;2152;2152;0031 2044 0031 0030;0031 2044 0031 0030; 
    // (⅒; ⅒; ⅒; 1⁄10; 1⁄10; ) VULGAR FRACTION ONE TENTH
    {
        std::array<uint32_t, 1> const source = {{ 0x2152 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2152 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_072)
{
    // 2153;2153;2153;0031 2044 0033;0031 2044 0033; 
    // (⅓; ⅓; ⅓; 1⁄3; 1⁄3; ) VULGAR FRACTION ONE THIRD
    {
        std::array<uint32_t, 1> const source = {{ 0x2153 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2153 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_073)
{
    // 2154;2154;2154;0032 2044 0033;0032 2044 0033; 
    // (⅔; ⅔; ⅔; 2⁄3; 2⁄3; ) VULGAR FRACTION TWO THIRDS
    {
        std::array<uint32_t, 1> const source = {{ 0x2154 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2154 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_074)
{
    // 2155;2155;2155;0031 2044 0035;0031 2044 0035; 
    // (⅕; ⅕; ⅕; 1⁄5; 1⁄5; ) VULGAR FRACTION ONE FIFTH
    {
        std::array<uint32_t, 1> const source = {{ 0x2155 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2155 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_075)
{
    // 2156;2156;2156;0032 2044 0035;0032 2044 0035; 
    // (⅖; ⅖; ⅖; 2⁄5; 2⁄5; ) VULGAR FRACTION TWO FIFTHS
    {
        std::array<uint32_t, 1> const source = {{ 0x2156 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2156 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_076)
{
    // 2157;2157;2157;0033 2044 0035;0033 2044 0035; 
    // (⅗; ⅗; ⅗; 3⁄5; 3⁄5; ) VULGAR FRACTION THREE FIFTHS
    {
        std::array<uint32_t, 1> const source = {{ 0x2157 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2157 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_077)
{
    // 2158;2158;2158;0034 2044 0035;0034 2044 0035; 
    // (⅘; ⅘; ⅘; 4⁄5; 4⁄5; ) VULGAR FRACTION FOUR FIFTHS
    {
        std::array<uint32_t, 1> const source = {{ 0x2158 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2158 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_078)
{
    // 2159;2159;2159;0031 2044 0036;0031 2044 0036; 
    // (⅙; ⅙; ⅙; 1⁄6; 1⁄6; ) VULGAR FRACTION ONE SIXTH
    {
        std::array<uint32_t, 1> const source = {{ 0x2159 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2159 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_079)
{
    // 215A;215A;215A;0035 2044 0036;0035 2044 0036; 
    // (⅚; ⅚; ⅚; 5⁄6; 5⁄6; ) VULGAR FRACTION FIVE SIXTHS
    {
        std::array<uint32_t, 1> const source = {{ 0x215A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x215A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_080)
{
    // 215B;215B;215B;0031 2044 0038;0031 2044 0038; 
    // (⅛; ⅛; ⅛; 1⁄8; 1⁄8; ) VULGAR FRACTION ONE EIGHTH
    {
        std::array<uint32_t, 1> const source = {{ 0x215B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x215B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_081)
{
    // 215C;215C;215C;0033 2044 0038;0033 2044 0038; 
    // (⅜; ⅜; ⅜; 3⁄8; 3⁄8; ) VULGAR FRACTION THREE EIGHTHS
    {
        std::array<uint32_t, 1> const source = {{ 0x215C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x215C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_082)
{
    // 215D;215D;215D;0035 2044 0038;0035 2044 0038; 
    // (⅝; ⅝; ⅝; 5⁄8; 5⁄8; ) VULGAR FRACTION FIVE EIGHTHS
    {
        std::array<uint32_t, 1> const source = {{ 0x215D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x215D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_083)
{
    // 215E;215E;215E;0037 2044 0038;0037 2044 0038; 
    // (⅞; ⅞; ⅞; 7⁄8; 7⁄8; ) VULGAR FRACTION SEVEN EIGHTHS
    {
        std::array<uint32_t, 1> const source = {{ 0x215E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x215E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_084)
{
    // 215F;215F;215F;0031 2044;0031 2044; 
    // (⅟; ⅟; ⅟; 1⁄; 1⁄; ) FRACTION NUMERATOR ONE
    {
        std::array<uint32_t, 1> const source = {{ 0x215F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x215F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_085)
{
    // 2160;2160;2160;0049;0049; 
    // (Ⅰ; Ⅰ; Ⅰ; I; I; ) ROMAN NUMERAL ONE
    {
        std::array<uint32_t, 1> const source = {{ 0x2160 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2160 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_086)
{
    // 2161;2161;2161;0049 0049;0049 0049; 
    // (Ⅱ; Ⅱ; Ⅱ; II; II; ) ROMAN NUMERAL TWO
    {
        std::array<uint32_t, 1> const source = {{ 0x2161 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2161 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_087)
{
    // 2162;2162;2162;0049 0049 0049;0049 0049 0049; 
    // (Ⅲ; Ⅲ; Ⅲ; III; III; ) ROMAN NUMERAL THREE
    {
        std::array<uint32_t, 1> const source = {{ 0x2162 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2162 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_088)
{
    // 2163;2163;2163;0049 0056;0049 0056; 
    // (Ⅳ; Ⅳ; Ⅳ; IV; IV; ) ROMAN NUMERAL FOUR
    {
        std::array<uint32_t, 1> const source = {{ 0x2163 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2163 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_089)
{
    // 2164;2164;2164;0056;0056; 
    // (Ⅴ; Ⅴ; Ⅴ; V; V; ) ROMAN NUMERAL FIVE
    {
        std::array<uint32_t, 1> const source = {{ 0x2164 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2164 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_090)
{
    // 2165;2165;2165;0056 0049;0056 0049; 
    // (Ⅵ; Ⅵ; Ⅵ; VI; VI; ) ROMAN NUMERAL SIX
    {
        std::array<uint32_t, 1> const source = {{ 0x2165 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2165 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_091)
{
    // 2166;2166;2166;0056 0049 0049;0056 0049 0049; 
    // (Ⅶ; Ⅶ; Ⅶ; VII; VII; ) ROMAN NUMERAL SEVEN
    {
        std::array<uint32_t, 1> const source = {{ 0x2166 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2166 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_092)
{
    // 2167;2167;2167;0056 0049 0049 0049;0056 0049 0049 0049; 
    // (Ⅷ; Ⅷ; Ⅷ; VIII; VIII; ) ROMAN NUMERAL EIGHT
    {
        std::array<uint32_t, 1> const source = {{ 0x2167 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2167 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_093)
{
    // 2168;2168;2168;0049 0058;0049 0058; 
    // (Ⅸ; Ⅸ; Ⅸ; IX; IX; ) ROMAN NUMERAL NINE
    {
        std::array<uint32_t, 1> const source = {{ 0x2168 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2168 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_094)
{
    // 2169;2169;2169;0058;0058; 
    // (Ⅹ; Ⅹ; Ⅹ; X; X; ) ROMAN NUMERAL TEN
    {
        std::array<uint32_t, 1> const source = {{ 0x2169 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2169 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_095)
{
    // 216A;216A;216A;0058 0049;0058 0049; 
    // (Ⅺ; Ⅺ; Ⅺ; XI; XI; ) ROMAN NUMERAL ELEVEN
    {
        std::array<uint32_t, 1> const source = {{ 0x216A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x216A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_096)
{
    // 216B;216B;216B;0058 0049 0049;0058 0049 0049; 
    // (Ⅻ; Ⅻ; Ⅻ; XII; XII; ) ROMAN NUMERAL TWELVE
    {
        std::array<uint32_t, 1> const source = {{ 0x216B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x216B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_097)
{
    // 216C;216C;216C;004C;004C; 
    // (Ⅼ; Ⅼ; Ⅼ; L; L; ) ROMAN NUMERAL FIFTY
    {
        std::array<uint32_t, 1> const source = {{ 0x216C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x216C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_098)
{
    // 216D;216D;216D;0043;0043; 
    // (Ⅽ; Ⅽ; Ⅽ; C; C; ) ROMAN NUMERAL ONE HUNDRED
    {
        std::array<uint32_t, 1> const source = {{ 0x216D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x216D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_099)
{
    // 216E;216E;216E;0044;0044; 
    // (Ⅾ; Ⅾ; Ⅾ; D; D; ) ROMAN NUMERAL FIVE HUNDRED
    {
        std::array<uint32_t, 1> const source = {{ 0x216E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x216E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_100)
{
    // 216F;216F;216F;004D;004D; 
    // (Ⅿ; Ⅿ; Ⅿ; M; M; ) ROMAN NUMERAL ONE THOUSAND
    {
        std::array<uint32_t, 1> const source = {{ 0x216F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x216F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_101)
{
    // 2170;2170;2170;0069;0069; 
    // (ⅰ; ⅰ; ⅰ; i; i; ) SMALL ROMAN NUMERAL ONE
    {
        std::array<uint32_t, 1> const source = {{ 0x2170 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2170 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_102)
{
    // 2171;2171;2171;0069 0069;0069 0069; 
    // (ⅱ; ⅱ; ⅱ; ii; ii; ) SMALL ROMAN NUMERAL TWO
    {
        std::array<uint32_t, 1> const source = {{ 0x2171 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2171 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_103)
{
    // 2172;2172;2172;0069 0069 0069;0069 0069 0069; 
    // (ⅲ; ⅲ; ⅲ; iii; iii; ) SMALL ROMAN NUMERAL THREE
    {
        std::array<uint32_t, 1> const source = {{ 0x2172 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2172 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_104)
{
    // 2173;2173;2173;0069 0076;0069 0076; 
    // (ⅳ; ⅳ; ⅳ; iv; iv; ) SMALL ROMAN NUMERAL FOUR
    {
        std::array<uint32_t, 1> const source = {{ 0x2173 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2173 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_105)
{
    // 2174;2174;2174;0076;0076; 
    // (ⅴ; ⅴ; ⅴ; v; v; ) SMALL ROMAN NUMERAL FIVE
    {
        std::array<uint32_t, 1> const source = {{ 0x2174 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2174 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_106)
{
    // 2175;2175;2175;0076 0069;0076 0069; 
    // (ⅵ; ⅵ; ⅵ; vi; vi; ) SMALL ROMAN NUMERAL SIX
    {
        std::array<uint32_t, 1> const source = {{ 0x2175 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2175 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_107)
{
    // 2176;2176;2176;0076 0069 0069;0076 0069 0069; 
    // (ⅶ; ⅶ; ⅶ; vii; vii; ) SMALL ROMAN NUMERAL SEVEN
    {
        std::array<uint32_t, 1> const source = {{ 0x2176 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2176 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_108)
{
    // 2177;2177;2177;0076 0069 0069 0069;0076 0069 0069 0069; 
    // (ⅷ; ⅷ; ⅷ; viii; viii; ) SMALL ROMAN NUMERAL EIGHT
    {
        std::array<uint32_t, 1> const source = {{ 0x2177 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2177 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_109)
{
    // 2178;2178;2178;0069 0078;0069 0078; 
    // (ⅸ; ⅸ; ⅸ; ix; ix; ) SMALL ROMAN NUMERAL NINE
    {
        std::array<uint32_t, 1> const source = {{ 0x2178 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2178 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_110)
{
    // 2179;2179;2179;0078;0078; 
    // (ⅹ; ⅹ; ⅹ; x; x; ) SMALL ROMAN NUMERAL TEN
    {
        std::array<uint32_t, 1> const source = {{ 0x2179 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2179 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_111)
{
    // 217A;217A;217A;0078 0069;0078 0069; 
    // (ⅺ; ⅺ; ⅺ; xi; xi; ) SMALL ROMAN NUMERAL ELEVEN
    {
        std::array<uint32_t, 1> const source = {{ 0x217A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x217A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_112)
{
    // 217B;217B;217B;0078 0069 0069;0078 0069 0069; 
    // (ⅻ; ⅻ; ⅻ; xii; xii; ) SMALL ROMAN NUMERAL TWELVE
    {
        std::array<uint32_t, 1> const source = {{ 0x217B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x217B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_113)
{
    // 217C;217C;217C;006C;006C; 
    // (ⅼ; ⅼ; ⅼ; l; l; ) SMALL ROMAN NUMERAL FIFTY
    {
        std::array<uint32_t, 1> const source = {{ 0x217C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x217C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_114)
{
    // 217D;217D;217D;0063;0063; 
    // (ⅽ; ⅽ; ⅽ; c; c; ) SMALL ROMAN NUMERAL ONE HUNDRED
    {
        std::array<uint32_t, 1> const source = {{ 0x217D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x217D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_115)
{
    // 217E;217E;217E;0064;0064; 
    // (ⅾ; ⅾ; ⅾ; d; d; ) SMALL ROMAN NUMERAL FIVE HUNDRED
    {
        std::array<uint32_t, 1> const source = {{ 0x217E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x217E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_116)
{
    // 217F;217F;217F;006D;006D; 
    // (ⅿ; ⅿ; ⅿ; m; m; ) SMALL ROMAN NUMERAL ONE THOUSAND
    {
        std::array<uint32_t, 1> const source = {{ 0x217F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x217F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_117)
{
    // 2189;2189;2189;0030 2044 0033;0030 2044 0033; 
    // (↉; ↉; ↉; 0⁄3; 0⁄3; ) VULGAR FRACTION ZERO THIRDS
    {
        std::array<uint32_t, 1> const source = {{ 0x2189 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2189 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_118)
{
    // 219A;219A;2190 0338;219A;2190 0338; 
    // (↚; ↚; ←◌̸; ↚; ←◌̸; ) LEFTWARDS ARROW WITH STROKE
    {
        std::array<uint32_t, 1> const source = {{ 0x219A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x219A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_119)
{
    // 219B;219B;2192 0338;219B;2192 0338; 
    // (↛; ↛; →◌̸; ↛; →◌̸; ) RIGHTWARDS ARROW WITH STROKE
    {
        std::array<uint32_t, 1> const source = {{ 0x219B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x219B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_120)
{
    // 21AE;21AE;2194 0338;21AE;2194 0338; 
    // (↮; ↮; ↔◌̸; ↮; ↔◌̸; ) LEFT RIGHT ARROW WITH STROKE
    {
        std::array<uint32_t, 1> const source = {{ 0x21AE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x21AE }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_121)
{
    // 21CD;21CD;21D0 0338;21CD;21D0 0338; 
    // (⇍; ⇍; ⇐◌̸; ⇍; ⇐◌̸; ) LEFTWARDS DOUBLE ARROW WITH STROKE
    {
        std::array<uint32_t, 1> const source = {{ 0x21CD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x21CD }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_122)
{
    // 21CE;21CE;21D4 0338;21CE;21D4 0338; 
    // (⇎; ⇎; ⇔◌̸; ⇎; ⇔◌̸; ) LEFT RIGHT DOUBLE ARROW WITH STROKE
    {
        std::array<uint32_t, 1> const source = {{ 0x21CE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x21CE }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_123)
{
    // 21CF;21CF;21D2 0338;21CF;21D2 0338; 
    // (⇏; ⇏; ⇒◌̸; ⇏; ⇒◌̸; ) RIGHTWARDS DOUBLE ARROW WITH STROKE
    {
        std::array<uint32_t, 1> const source = {{ 0x21CF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x21CF }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_124)
{
    // 2204;2204;2203 0338;2204;2203 0338; 
    // (∄; ∄; ∃◌̸; ∄; ∃◌̸; ) THERE DOES NOT EXIST
    {
        std::array<uint32_t, 1> const source = {{ 0x2204 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2204 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_125)
{
    // 2209;2209;2208 0338;2209;2208 0338; 
    // (∉; ∉; ∈◌̸; ∉; ∈◌̸; ) NOT AN ELEMENT OF
    {
        std::array<uint32_t, 1> const source = {{ 0x2209 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2209 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_126)
{
    // 220C;220C;220B 0338;220C;220B 0338; 
    // (∌; ∌; ∋◌̸; ∌; ∋◌̸; ) DOES NOT CONTAIN AS MEMBER
    {
        std::array<uint32_t, 1> const source = {{ 0x220C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x220C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_127)
{
    // 2224;2224;2223 0338;2224;2223 0338; 
    // (∤; ∤; ∣◌̸; ∤; ∣◌̸; ) DOES NOT DIVIDE
    {
        std::array<uint32_t, 1> const source = {{ 0x2224 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2224 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_128)
{
    // 2226;2226;2225 0338;2226;2225 0338; 
    // (∦; ∦; ∥◌̸; ∦; ∥◌̸; ) NOT PARALLEL TO
    {
        std::array<uint32_t, 1> const source = {{ 0x2226 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2226 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_129)
{
    // 222C;222C;222C;222B 222B;222B 222B; 
    // (∬; ∬; ∬; ∫∫; ∫∫; ) DOUBLE INTEGRAL
    {
        std::array<uint32_t, 1> const source = {{ 0x222C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x222C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_130)
{
    // 222D;222D;222D;222B 222B 222B;222B 222B 222B; 
    // (∭; ∭; ∭; ∫∫∫; ∫∫∫; ) TRIPLE INTEGRAL
    {
        std::array<uint32_t, 1> const source = {{ 0x222D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x222D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_131)
{
    // 222F;222F;222F;222E 222E;222E 222E; 
    // (∯; ∯; ∯; ∮∮; ∮∮; ) SURFACE INTEGRAL
    {
        std::array<uint32_t, 1> const source = {{ 0x222F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x222F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_132)
{
    // 2230;2230;2230;222E 222E 222E;222E 222E 222E; 
    // (∰; ∰; ∰; ∮∮∮; ∮∮∮; ) VOLUME INTEGRAL
    {
        std::array<uint32_t, 1> const source = {{ 0x2230 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2230 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_133)
{
    // 2241;2241;223C 0338;2241;223C 0338; 
    // (≁; ≁; ∼◌̸; ≁; ∼◌̸; ) NOT TILDE
    {
        std::array<uint32_t, 1> const source = {{ 0x2241 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2241 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_134)
{
    // 2244;2244;2243 0338;2244;2243 0338; 
    // (≄; ≄; ≃◌̸; ≄; ≃◌̸; ) NOT ASYMPTOTICALLY EQUAL TO
    {
        std::array<uint32_t, 1> const source = {{ 0x2244 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2244 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_135)
{
    // 2247;2247;2245 0338;2247;2245 0338; 
    // (≇; ≇; ≅◌̸; ≇; ≅◌̸; ) NEITHER APPROXIMATELY NOR ACTUALLY EQUAL TO
    {
        std::array<uint32_t, 1> const source = {{ 0x2247 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2247 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_136)
{
    // 2249;2249;2248 0338;2249;2248 0338; 
    // (≉; ≉; ≈◌̸; ≉; ≈◌̸; ) NOT ALMOST EQUAL TO
    {
        std::array<uint32_t, 1> const source = {{ 0x2249 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2249 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_137)
{
    // 2260;2260;003D 0338;2260;003D 0338; 
    // (≠; ≠; =◌̸; ≠; =◌̸; ) NOT EQUAL TO
    {
        std::array<uint32_t, 1> const source = {{ 0x2260 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2260 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_138)
{
    // 2262;2262;2261 0338;2262;2261 0338; 
    // (≢; ≢; ≡◌̸; ≢; ≡◌̸; ) NOT IDENTICAL TO
    {
        std::array<uint32_t, 1> const source = {{ 0x2262 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2262 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_139)
{
    // 226D;226D;224D 0338;226D;224D 0338; 
    // (≭; ≭; ≍◌̸; ≭; ≍◌̸; ) NOT EQUIVALENT TO
    {
        std::array<uint32_t, 1> const source = {{ 0x226D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x226D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_140)
{
    // 226E;226E;003C 0338;226E;003C 0338; 
    // (≮; ≮; <◌̸; ≮; <◌̸; ) NOT LESS-THAN
    {
        std::array<uint32_t, 1> const source = {{ 0x226E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x226E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_141)
{
    // 226F;226F;003E 0338;226F;003E 0338; 
    // (≯; ≯; >◌̸; ≯; >◌̸; ) NOT GREATER-THAN
    {
        std::array<uint32_t, 1> const source = {{ 0x226F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x226F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_142)
{
    // 2270;2270;2264 0338;2270;2264 0338; 
    // (≰; ≰; ≤◌̸; ≰; ≤◌̸; ) NEITHER LESS-THAN NOR EQUAL TO
    {
        std::array<uint32_t, 1> const source = {{ 0x2270 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2270 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_143)
{
    // 2271;2271;2265 0338;2271;2265 0338; 
    // (≱; ≱; ≥◌̸; ≱; ≥◌̸; ) NEITHER GREATER-THAN NOR EQUAL TO
    {
        std::array<uint32_t, 1> const source = {{ 0x2271 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2271 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_144)
{
    // 2274;2274;2272 0338;2274;2272 0338; 
    // (≴; ≴; ≲◌̸; ≴; ≲◌̸; ) NEITHER LESS-THAN NOR EQUIVALENT TO
    {
        std::array<uint32_t, 1> const source = {{ 0x2274 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2274 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_145)
{
    // 2275;2275;2273 0338;2275;2273 0338; 
    // (≵; ≵; ≳◌̸; ≵; ≳◌̸; ) NEITHER GREATER-THAN NOR EQUIVALENT TO
    {
        std::array<uint32_t, 1> const source = {{ 0x2275 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2275 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_146)
{
    // 2278;2278;2276 0338;2278;2276 0338; 
    // (≸; ≸; ≶◌̸; ≸; ≶◌̸; ) NEITHER LESS-THAN NOR GREATER-THAN
    {
        std::array<uint32_t, 1> const source = {{ 0x2278 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2278 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_147)
{
    // 2279;2279;2277 0338;2279;2277 0338; 
    // (≹; ≹; ≷◌̸; ≹; ≷◌̸; ) NEITHER GREATER-THAN NOR LESS-THAN
    {
        std::array<uint32_t, 1> const source = {{ 0x2279 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2279 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_148)
{
    // 2280;2280;227A 0338;2280;227A 0338; 
    // (⊀; ⊀; ≺◌̸; ⊀; ≺◌̸; ) DOES NOT PRECEDE
    {
        std::array<uint32_t, 1> const source = {{ 0x2280 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2280 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_149)
{
    // 2281;2281;227B 0338;2281;227B 0338; 
    // (⊁; ⊁; ≻◌̸; ⊁; ≻◌̸; ) DOES NOT SUCCEED
    {
        std::array<uint32_t, 1> const source = {{ 0x2281 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2281 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_150)
{
    // 2284;2284;2282 0338;2284;2282 0338; 
    // (⊄; ⊄; ⊂◌̸; ⊄; ⊂◌̸; ) NOT A SUBSET OF
    {
        std::array<uint32_t, 1> const source = {{ 0x2284 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2284 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_151)
{
    // 2285;2285;2283 0338;2285;2283 0338; 
    // (⊅; ⊅; ⊃◌̸; ⊅; ⊃◌̸; ) NOT A SUPERSET OF
    {
        std::array<uint32_t, 1> const source = {{ 0x2285 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2285 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_152)
{
    // 2288;2288;2286 0338;2288;2286 0338; 
    // (⊈; ⊈; ⊆◌̸; ⊈; ⊆◌̸; ) NEITHER A SUBSET OF NOR EQUAL TO
    {
        std::array<uint32_t, 1> const source = {{ 0x2288 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2288 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_153)
{
    // 2289;2289;2287 0338;2289;2287 0338; 
    // (⊉; ⊉; ⊇◌̸; ⊉; ⊇◌̸; ) NEITHER A SUPERSET OF NOR EQUAL TO
    {
        std::array<uint32_t, 1> const source = {{ 0x2289 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2289 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_154)
{
    // 22AC;22AC;22A2 0338;22AC;22A2 0338; 
    // (⊬; ⊬; ⊢◌̸; ⊬; ⊢◌̸; ) DOES NOT PROVE
    {
        std::array<uint32_t, 1> const source = {{ 0x22AC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x22AC }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_155)
{
    // 22AD;22AD;22A8 0338;22AD;22A8 0338; 
    // (⊭; ⊭; ⊨◌̸; ⊭; ⊨◌̸; ) NOT TRUE
    {
        std::array<uint32_t, 1> const source = {{ 0x22AD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x22AD }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_156)
{
    // 22AE;22AE;22A9 0338;22AE;22A9 0338; 
    // (⊮; ⊮; ⊩◌̸; ⊮; ⊩◌̸; ) DOES NOT FORCE
    {
        std::array<uint32_t, 1> const source = {{ 0x22AE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x22AE }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_157)
{
    // 22AF;22AF;22AB 0338;22AF;22AB 0338; 
    // (⊯; ⊯; ⊫◌̸; ⊯; ⊫◌̸; ) NEGATED DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE
    {
        std::array<uint32_t, 1> const source = {{ 0x22AF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x22AF }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_158)
{
    // 22E0;22E0;227C 0338;22E0;227C 0338; 
    // (⋠; ⋠; ≼◌̸; ⋠; ≼◌̸; ) DOES NOT PRECEDE OR EQUAL
    {
        std::array<uint32_t, 1> const source = {{ 0x22E0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x22E0 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_159)
{
    // 22E1;22E1;227D 0338;22E1;227D 0338; 
    // (⋡; ⋡; ≽◌̸; ⋡; ≽◌̸; ) DOES NOT SUCCEED OR EQUAL
    {
        std::array<uint32_t, 1> const source = {{ 0x22E1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x22E1 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_160)
{
    // 22E2;22E2;2291 0338;22E2;2291 0338; 
    // (⋢; ⋢; ⊑◌̸; ⋢; ⊑◌̸; ) NOT SQUARE IMAGE OF OR EQUAL TO
    {
        std::array<uint32_t, 1> const source = {{ 0x22E2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x22E2 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_161)
{
    // 22E3;22E3;2292 0338;22E3;2292 0338; 
    // (⋣; ⋣; ⊒◌̸; ⋣; ⊒◌̸; ) NOT SQUARE ORIGINAL OF OR EQUAL TO
    {
        std::array<uint32_t, 1> const source = {{ 0x22E3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x22E3 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_162)
{
    // 22EA;22EA;22B2 0338;22EA;22B2 0338; 
    // (⋪; ⋪; ⊲◌̸; ⋪; ⊲◌̸; ) NOT NORMAL SUBGROUP OF
    {
        std::array<uint32_t, 1> const source = {{ 0x22EA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x22EA }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_163)
{
    // 22EB;22EB;22B3 0338;22EB;22B3 0338; 
    // (⋫; ⋫; ⊳◌̸; ⋫; ⊳◌̸; ) DOES NOT CONTAIN AS NORMAL SUBGROUP
    {
        std::array<uint32_t, 1> const source = {{ 0x22EB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x22EB }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_164)
{
    // 22EC;22EC;22B4 0338;22EC;22B4 0338; 
    // (⋬; ⋬; ⊴◌̸; ⋬; ⊴◌̸; ) NOT NORMAL SUBGROUP OF OR EQUAL TO
    {
        std::array<uint32_t, 1> const source = {{ 0x22EC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x22EC }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_165)
{
    // 22ED;22ED;22B5 0338;22ED;22B5 0338; 
    // (⋭; ⋭; ⊵◌̸; ⋭; ⊵◌̸; ) DOES NOT CONTAIN AS NORMAL SUBGROUP OR EQUAL
    {
        std::array<uint32_t, 1> const source = {{ 0x22ED }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x22ED }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_166)
{
    // 2329;3008;3008;3008;3008; 
    // (〈; 〈; 〈; 〈; 〈; ) LEFT-POINTING ANGLE BRACKET
    {
        std::array<uint32_t, 1> const source = {{ 0x2329 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3008 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_167)
{
    // 232A;3009;3009;3009;3009; 
    // (〉; 〉; 〉; 〉; 〉; ) RIGHT-POINTING ANGLE BRACKET
    {
        std::array<uint32_t, 1> const source = {{ 0x232A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3009 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_168)
{
    // 2460;2460;2460;0031;0031; 
    // (①; ①; ①; 1; 1; ) CIRCLED DIGIT ONE
    {
        std::array<uint32_t, 1> const source = {{ 0x2460 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2460 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_169)
{
    // 2461;2461;2461;0032;0032; 
    // (②; ②; ②; 2; 2; ) CIRCLED DIGIT TWO
    {
        std::array<uint32_t, 1> const source = {{ 0x2461 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2461 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_170)
{
    // 2462;2462;2462;0033;0033; 
    // (③; ③; ③; 3; 3; ) CIRCLED DIGIT THREE
    {
        std::array<uint32_t, 1> const source = {{ 0x2462 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2462 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_171)
{
    // 2463;2463;2463;0034;0034; 
    // (④; ④; ④; 4; 4; ) CIRCLED DIGIT FOUR
    {
        std::array<uint32_t, 1> const source = {{ 0x2463 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2463 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_172)
{
    // 2464;2464;2464;0035;0035; 
    // (⑤; ⑤; ⑤; 5; 5; ) CIRCLED DIGIT FIVE
    {
        std::array<uint32_t, 1> const source = {{ 0x2464 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2464 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_173)
{
    // 2465;2465;2465;0036;0036; 
    // (⑥; ⑥; ⑥; 6; 6; ) CIRCLED DIGIT SIX
    {
        std::array<uint32_t, 1> const source = {{ 0x2465 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2465 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_174)
{
    // 2466;2466;2466;0037;0037; 
    // (⑦; ⑦; ⑦; 7; 7; ) CIRCLED DIGIT SEVEN
    {
        std::array<uint32_t, 1> const source = {{ 0x2466 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2466 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_175)
{
    // 2467;2467;2467;0038;0038; 
    // (⑧; ⑧; ⑧; 8; 8; ) CIRCLED DIGIT EIGHT
    {
        std::array<uint32_t, 1> const source = {{ 0x2467 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2467 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_176)
{
    // 2468;2468;2468;0039;0039; 
    // (⑨; ⑨; ⑨; 9; 9; ) CIRCLED DIGIT NINE
    {
        std::array<uint32_t, 1> const source = {{ 0x2468 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2468 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_177)
{
    // 2469;2469;2469;0031 0030;0031 0030; 
    // (⑩; ⑩; ⑩; 10; 10; ) CIRCLED NUMBER TEN
    {
        std::array<uint32_t, 1> const source = {{ 0x2469 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2469 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_178)
{
    // 246A;246A;246A;0031 0031;0031 0031; 
    // (⑪; ⑪; ⑪; 11; 11; ) CIRCLED NUMBER ELEVEN
    {
        std::array<uint32_t, 1> const source = {{ 0x246A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x246A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_179)
{
    // 246B;246B;246B;0031 0032;0031 0032; 
    // (⑫; ⑫; ⑫; 12; 12; ) CIRCLED NUMBER TWELVE
    {
        std::array<uint32_t, 1> const source = {{ 0x246B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x246B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_180)
{
    // 246C;246C;246C;0031 0033;0031 0033; 
    // (⑬; ⑬; ⑬; 13; 13; ) CIRCLED NUMBER THIRTEEN
    {
        std::array<uint32_t, 1> const source = {{ 0x246C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x246C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_181)
{
    // 246D;246D;246D;0031 0034;0031 0034; 
    // (⑭; ⑭; ⑭; 14; 14; ) CIRCLED NUMBER FOURTEEN
    {
        std::array<uint32_t, 1> const source = {{ 0x246D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x246D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_182)
{
    // 246E;246E;246E;0031 0035;0031 0035; 
    // (⑮; ⑮; ⑮; 15; 15; ) CIRCLED NUMBER FIFTEEN
    {
        std::array<uint32_t, 1> const source = {{ 0x246E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x246E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_183)
{
    // 246F;246F;246F;0031 0036;0031 0036; 
    // (⑯; ⑯; ⑯; 16; 16; ) CIRCLED NUMBER SIXTEEN
    {
        std::array<uint32_t, 1> const source = {{ 0x246F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x246F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_184)
{
    // 2470;2470;2470;0031 0037;0031 0037; 
    // (⑰; ⑰; ⑰; 17; 17; ) CIRCLED NUMBER SEVENTEEN
    {
        std::array<uint32_t, 1> const source = {{ 0x2470 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2470 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_185)
{
    // 2471;2471;2471;0031 0038;0031 0038; 
    // (⑱; ⑱; ⑱; 18; 18; ) CIRCLED NUMBER EIGHTEEN
    {
        std::array<uint32_t, 1> const source = {{ 0x2471 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2471 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_186)
{
    // 2472;2472;2472;0031 0039;0031 0039; 
    // (⑲; ⑲; ⑲; 19; 19; ) CIRCLED NUMBER NINETEEN
    {
        std::array<uint32_t, 1> const source = {{ 0x2472 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2472 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_187)
{
    // 2473;2473;2473;0032 0030;0032 0030; 
    // (⑳; ⑳; ⑳; 20; 20; ) CIRCLED NUMBER TWENTY
    {
        std::array<uint32_t, 1> const source = {{ 0x2473 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2473 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_188)
{
    // 2474;2474;2474;0028 0031 0029;0028 0031 0029; 
    // (⑴; ⑴; ⑴; (1); (1); ) PARENTHESIZED DIGIT ONE
    {
        std::array<uint32_t, 1> const source = {{ 0x2474 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2474 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_189)
{
    // 2475;2475;2475;0028 0032 0029;0028 0032 0029; 
    // (⑵; ⑵; ⑵; (2); (2); ) PARENTHESIZED DIGIT TWO
    {
        std::array<uint32_t, 1> const source = {{ 0x2475 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2475 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_190)
{
    // 2476;2476;2476;0028 0033 0029;0028 0033 0029; 
    // (⑶; ⑶; ⑶; (3); (3); ) PARENTHESIZED DIGIT THREE
    {
        std::array<uint32_t, 1> const source = {{ 0x2476 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2476 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_191)
{
    // 2477;2477;2477;0028 0034 0029;0028 0034 0029; 
    // (⑷; ⑷; ⑷; (4); (4); ) PARENTHESIZED DIGIT FOUR
    {
        std::array<uint32_t, 1> const source = {{ 0x2477 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2477 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_192)
{
    // 2478;2478;2478;0028 0035 0029;0028 0035 0029; 
    // (⑸; ⑸; ⑸; (5); (5); ) PARENTHESIZED DIGIT FIVE
    {
        std::array<uint32_t, 1> const source = {{ 0x2478 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2478 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_193)
{
    // 2479;2479;2479;0028 0036 0029;0028 0036 0029; 
    // (⑹; ⑹; ⑹; (6); (6); ) PARENTHESIZED DIGIT SIX
    {
        std::array<uint32_t, 1> const source = {{ 0x2479 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2479 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_194)
{
    // 247A;247A;247A;0028 0037 0029;0028 0037 0029; 
    // (⑺; ⑺; ⑺; (7); (7); ) PARENTHESIZED DIGIT SEVEN
    {
        std::array<uint32_t, 1> const source = {{ 0x247A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x247A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_195)
{
    // 247B;247B;247B;0028 0038 0029;0028 0038 0029; 
    // (⑻; ⑻; ⑻; (8); (8); ) PARENTHESIZED DIGIT EIGHT
    {
        std::array<uint32_t, 1> const source = {{ 0x247B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x247B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_196)
{
    // 247C;247C;247C;0028 0039 0029;0028 0039 0029; 
    // (⑼; ⑼; ⑼; (9); (9); ) PARENTHESIZED DIGIT NINE
    {
        std::array<uint32_t, 1> const source = {{ 0x247C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x247C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_197)
{
    // 247D;247D;247D;0028 0031 0030 0029;0028 0031 0030 0029; 
    // (⑽; ⑽; ⑽; (10); (10); ) PARENTHESIZED NUMBER TEN
    {
        std::array<uint32_t, 1> const source = {{ 0x247D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x247D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_198)
{
    // 247E;247E;247E;0028 0031 0031 0029;0028 0031 0031 0029; 
    // (⑾; ⑾; ⑾; (11); (11); ) PARENTHESIZED NUMBER ELEVEN
    {
        std::array<uint32_t, 1> const source = {{ 0x247E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x247E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_006_199)
{
    // 247F;247F;247F;0028 0031 0032 0029;0028 0031 0032 0029; 
    // (⑿; ⑿; ⑿; (12); (12); ) PARENTHESIZED NUMBER TWELVE
    {
        std::array<uint32_t, 1> const source = {{ 0x247F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x247F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


