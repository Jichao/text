// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_101_000)
{
    // E0190 0062;	
    // (󠆐) VARIATION SELECTOR-161	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0190, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_001)
{
    // E0191 0062;	
    // (󠆑) VARIATION SELECTOR-162	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0191, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_002)
{
    // E0192 0062;	
    // (󠆒) VARIATION SELECTOR-163	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0192, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_003)
{
    // E0193 0062;	
    // (󠆓) VARIATION SELECTOR-164	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0193, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_004)
{
    // E0194 0062;	
    // (󠆔) VARIATION SELECTOR-165	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0194, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_005)
{
    // E0195 0062;	
    // (󠆕) VARIATION SELECTOR-166	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0195, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_006)
{
    // E0196 0062;	
    // (󠆖) VARIATION SELECTOR-167	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0196, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_007)
{
    // E0197 0062;	
    // (󠆗) VARIATION SELECTOR-168	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0197, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_008)
{
    // E0198 0062;	
    // (󠆘) VARIATION SELECTOR-169	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0198, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_009)
{
    // E0199 0062;	
    // (󠆙) VARIATION SELECTOR-170	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0199, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_010)
{
    // E019A 0062;	
    // (󠆚) VARIATION SELECTOR-171	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE019A, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_011)
{
    // E019B 0062;	
    // (󠆛) VARIATION SELECTOR-172	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE019B, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_012)
{
    // E019C 0062;	
    // (󠆜) VARIATION SELECTOR-173	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE019C, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_013)
{
    // E019D 0062;	
    // (󠆝) VARIATION SELECTOR-174	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE019D, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_014)
{
    // E019E 0062;	
    // (󠆞) VARIATION SELECTOR-175	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE019E, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_015)
{
    // E019F 0062;	
    // (󠆟) VARIATION SELECTOR-176	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE019F, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_016)
{
    // E01A0 0062;	
    // (󠆠) VARIATION SELECTOR-177	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01A0, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_017)
{
    // E01A1 0062;	
    // (󠆡) VARIATION SELECTOR-178	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01A1, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_018)
{
    // E01A2 0062;	
    // (󠆢) VARIATION SELECTOR-179	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01A2, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_019)
{
    // E01A3 0062;	
    // (󠆣) VARIATION SELECTOR-180	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01A3, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_020)
{
    // E01A4 0062;	
    // (󠆤) VARIATION SELECTOR-181	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01A4, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_021)
{
    // E01A5 0062;	
    // (󠆥) VARIATION SELECTOR-182	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01A5, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_022)
{
    // E01A6 0062;	
    // (󠆦) VARIATION SELECTOR-183	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01A6, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_023)
{
    // E01A7 0062;	
    // (󠆧) VARIATION SELECTOR-184	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01A7, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_024)
{
    // E01A8 0062;	
    // (󠆨) VARIATION SELECTOR-185	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01A8, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_025)
{
    // E01A9 0062;	
    // (󠆩) VARIATION SELECTOR-186	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01A9, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_026)
{
    // E01AA 0062;	
    // (󠆪) VARIATION SELECTOR-187	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01AA, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_027)
{
    // E01AB 0062;	
    // (󠆫) VARIATION SELECTOR-188	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01AB, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_028)
{
    // E01AC 0062;	
    // (󠆬) VARIATION SELECTOR-189	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01AC, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_029)
{
    // E01AD 0062;	
    // (󠆭) VARIATION SELECTOR-190	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01AD, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_030)
{
    // E01AE 0062;	
    // (󠆮) VARIATION SELECTOR-191	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01AE, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_031)
{
    // E01AF 0062;	
    // (󠆯) VARIATION SELECTOR-192	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01AF, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_032)
{
    // E01B0 0062;	
    // (󠆰) VARIATION SELECTOR-193	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01B0, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_033)
{
    // E01B1 0062;	
    // (󠆱) VARIATION SELECTOR-194	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01B1, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_034)
{
    // E01B2 0062;	
    // (󠆲) VARIATION SELECTOR-195	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01B2, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_035)
{
    // E01B3 0062;	
    // (󠆳) VARIATION SELECTOR-196	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01B3, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_036)
{
    // E01B4 0062;	
    // (󠆴) VARIATION SELECTOR-197	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01B4, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_037)
{
    // E01B5 0062;	
    // (󠆵) VARIATION SELECTOR-198	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01B5, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_038)
{
    // E01B6 0062;	
    // (󠆶) VARIATION SELECTOR-199	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01B6, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_039)
{
    // E01B7 0062;	
    // (󠆷) VARIATION SELECTOR-200	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01B7, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_040)
{
    // E01B8 0062;	
    // (󠆸) VARIATION SELECTOR-201	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01B8, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_041)
{
    // E01B9 0062;	
    // (󠆹) VARIATION SELECTOR-202	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01B9, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_042)
{
    // E01BA 0062;	
    // (󠆺) VARIATION SELECTOR-203	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01BA, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_043)
{
    // E01BB 0062;	
    // (󠆻) VARIATION SELECTOR-204	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01BB, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_044)
{
    // E01BC 0062;	
    // (󠆼) VARIATION SELECTOR-205	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01BC, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_045)
{
    // E01BD 0062;	
    // (󠆽) VARIATION SELECTOR-206	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01BD, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_046)
{
    // E01BE 0062;	
    // (󠆾) VARIATION SELECTOR-207	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01BE, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_047)
{
    // E01BF 0062;	
    // (󠆿) VARIATION SELECTOR-208	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01BF, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_048)
{
    // E01C0 0062;	
    // (󠇀) VARIATION SELECTOR-209	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01C0, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_049)
{
    // E01C1 0062;	
    // (󠇁) VARIATION SELECTOR-210	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01C1, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_050)
{
    // E01C2 0062;	
    // (󠇂) VARIATION SELECTOR-211	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01C2, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_051)
{
    // E01C3 0062;	
    // (󠇃) VARIATION SELECTOR-212	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01C3, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_052)
{
    // E01C4 0062;	
    // (󠇄) VARIATION SELECTOR-213	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01C4, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_053)
{
    // E01C5 0062;	
    // (󠇅) VARIATION SELECTOR-214	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01C5, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_054)
{
    // E01C6 0062;	
    // (󠇆) VARIATION SELECTOR-215	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01C6, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_055)
{
    // E01C7 0062;	
    // (󠇇) VARIATION SELECTOR-216	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01C7, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_056)
{
    // E01C8 0062;	
    // (󠇈) VARIATION SELECTOR-217	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01C8, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_057)
{
    // E01C9 0062;	
    // (󠇉) VARIATION SELECTOR-218	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01C9, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_058)
{
    // E01CA 0062;	
    // (󠇊) VARIATION SELECTOR-219	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01CA, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_059)
{
    // E01CB 0062;	
    // (󠇋) VARIATION SELECTOR-220	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01CB, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_060)
{
    // E01CC 0062;	
    // (󠇌) VARIATION SELECTOR-221	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01CC, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_061)
{
    // E01CD 0062;	
    // (󠇍) VARIATION SELECTOR-222	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01CD, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_062)
{
    // E01CE 0062;	
    // (󠇎) VARIATION SELECTOR-223	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01CE, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_063)
{
    // E01CF 0062;	
    // (󠇏) VARIATION SELECTOR-224	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01CF, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_064)
{
    // E01D0 0062;	
    // (󠇐) VARIATION SELECTOR-225	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01D0, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_065)
{
    // E01D1 0062;	
    // (󠇑) VARIATION SELECTOR-226	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01D1, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_066)
{
    // E01D2 0062;	
    // (󠇒) VARIATION SELECTOR-227	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01D2, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_067)
{
    // E01D3 0062;	
    // (󠇓) VARIATION SELECTOR-228	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01D3, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_068)
{
    // E01D4 0062;	
    // (󠇔) VARIATION SELECTOR-229	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01D4, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_069)
{
    // E01D5 0062;	
    // (󠇕) VARIATION SELECTOR-230	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01D5, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_070)
{
    // E01D6 0062;	
    // (󠇖) VARIATION SELECTOR-231	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01D6, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_071)
{
    // E01D7 0062;	
    // (󠇗) VARIATION SELECTOR-232	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01D7, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_072)
{
    // E01D8 0062;	
    // (󠇘) VARIATION SELECTOR-233	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01D8, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_073)
{
    // E01D9 0062;	
    // (󠇙) VARIATION SELECTOR-234	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01D9, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_074)
{
    // E01DA 0062;	
    // (󠇚) VARIATION SELECTOR-235	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01DA, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_075)
{
    // E01DB 0062;	
    // (󠇛) VARIATION SELECTOR-236	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01DB, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_076)
{
    // E01DC 0062;	
    // (󠇜) VARIATION SELECTOR-237	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01DC, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_077)
{
    // E01DD 0062;	
    // (󠇝) VARIATION SELECTOR-238	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01DD, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_078)
{
    // E01DE 0062;	
    // (󠇞) VARIATION SELECTOR-239	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01DE, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_079)
{
    // E01DF 0062;	
    // (󠇟) VARIATION SELECTOR-240	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01DF, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_080)
{
    // E01E0 0062;	
    // (󠇠) VARIATION SELECTOR-241	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01E0, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_081)
{
    // E01E1 0062;	
    // (󠇡) VARIATION SELECTOR-242	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01E1, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_082)
{
    // E01E2 0062;	
    // (󠇢) VARIATION SELECTOR-243	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01E2, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_083)
{
    // E01E3 0062;	
    // (󠇣) VARIATION SELECTOR-244	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01E3, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_084)
{
    // E01E4 0062;	
    // (󠇤) VARIATION SELECTOR-245	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01E4, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_085)
{
    // E01E5 0062;	
    // (󠇥) VARIATION SELECTOR-246	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01E5, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_086)
{
    // E01E6 0062;	
    // (󠇦) VARIATION SELECTOR-247	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01E6, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_087)
{
    // E01E7 0062;	
    // (󠇧) VARIATION SELECTOR-248	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01E7, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_088)
{
    // E01E8 0062;	
    // (󠇨) VARIATION SELECTOR-249	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01E8, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_089)
{
    // E01E9 0062;	
    // (󠇩) VARIATION SELECTOR-250	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01E9, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_090)
{
    // E01EA 0062;	
    // (󠇪) VARIATION SELECTOR-251	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01EA, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_091)
{
    // E01EB 0062;	
    // (󠇫) VARIATION SELECTOR-252	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01EB, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_092)
{
    // E01EC 0062;	
    // (󠇬) VARIATION SELECTOR-253	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01EC, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_093)
{
    // E01ED 0062;	
    // (󠇭) VARIATION SELECTOR-254	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01ED, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_094)
{
    // E01EE 0062;	
    // (󠇮) VARIATION SELECTOR-255	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01EE, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_095)
{
    // E01EF 0062;	
    // (󠇯) VARIATION SELECTOR-256	[1CC6 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01EF, 0x0062 };
    uint32_t const ces[6] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_096)
{
    // 0062 0307 0334;	
    // (ḃ) LATIN SMALL LETTER B, COMBINING DOT ABOVE	[1CC6 | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0062, 0x0307, 0x0334 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_097)
{
    // 0062 0334 0307;	
    // (b̴) LATIN SMALL LETTER B, COMBINING TILDE OVERLAY	[1CC6 | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0062, 0x0334, 0x0307 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_098)
{
    // 1E03 0334;	
    // (ḃ) LATIN SMALL LETTER B WITH DOT ABOVE	[1CC6 | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E03, 0x0334 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_099)
{
    // 0042 0307 0334;	
    // (Ḃ) LATIN CAPITAL LETTER B, COMBINING DOT ABOVE	[1CC6 | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0042, 0x0307, 0x0334 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_100)
{
    // 0042 0334 0307;	
    // (B̴) LATIN CAPITAL LETTER B, COMBINING TILDE OVERLAY	[1CC6 | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0042, 0x0334, 0x0307 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_101)
{
    // 1E02 0334;	
    // (Ḃ) LATIN CAPITAL LETTER B WITH DOT ABOVE	[1CC6 | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E02, 0x0334 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_102)
{
    // 0062 0323 0334;	
    // (ḅ) LATIN SMALL LETTER B, COMBINING DOT BELOW	[1CC6 | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0062, 0x0323, 0x0334 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_103)
{
    // 0062 0334 0323;	
    // (b̴) LATIN SMALL LETTER B, COMBINING TILDE OVERLAY	[1CC6 | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0062, 0x0334, 0x0323 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_104)
{
    // 1E05 0334;	
    // (ḅ) LATIN SMALL LETTER B WITH DOT BELOW	[1CC6 | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E05, 0x0334 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_105)
{
    // 0042 0323 0334;	
    // (Ḅ) LATIN CAPITAL LETTER B, COMBINING DOT BELOW	[1CC6 | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0042, 0x0323, 0x0334 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_106)
{
    // 0042 0334 0323;	
    // (B̴) LATIN CAPITAL LETTER B, COMBINING TILDE OVERLAY	[1CC6 | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0042, 0x0334, 0x0323 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_107)
{
    // 1E04 0334;	
    // (Ḅ) LATIN CAPITAL LETTER B WITH DOT BELOW	[1CC6 | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E04, 0x0334 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_108)
{
    // 0062 0331 0334;	
    // (ḇ) LATIN SMALL LETTER B, COMBINING MACRON BELOW	[1CC6 | 0020 004A 0049 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0062, 0x0331, 0x0334 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x0020, 0x004A, 0x0049, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_109)
{
    // 0062 0334 0331;	
    // (b̴) LATIN SMALL LETTER B, COMBINING TILDE OVERLAY	[1CC6 | 0020 004A 0049 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0062, 0x0334, 0x0331 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x0020, 0x004A, 0x0049, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_110)
{
    // 1E07 0334;	
    // (ḇ) LATIN SMALL LETTER B WITH LINE BELOW	[1CC6 | 0020 004A 0049 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E07, 0x0334 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x0020, 0x004A, 0x0049, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_111)
{
    // 0042 0331 0334;	
    // (Ḇ) LATIN CAPITAL LETTER B, COMBINING MACRON BELOW	[1CC6 | 0020 004A 0049 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0042, 0x0331, 0x0334 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x0020, 0x004A, 0x0049, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_112)
{
    // 0042 0334 0331;	
    // (B̴) LATIN CAPITAL LETTER B, COMBINING TILDE OVERLAY	[1CC6 | 0020 004A 0049 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0042, 0x0334, 0x0331 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x0020, 0x004A, 0x0049, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_113)
{
    // 1E06 0334;	
    // (Ḇ) LATIN CAPITAL LETTER B WITH LINE BELOW	[1CC6 | 0020 004A 0049 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E06, 0x0334 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x0020, 0x004A, 0x0049, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_114)
{
    // 0332 0062;	
    // (̲) COMBINING LOW LINE	[1CC6 | 0021 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0332, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0021, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_115)
{
    // 0313 0062;	
    // (̓) COMBINING COMMA ABOVE	[1CC6 | 0022 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0313, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_116)
{
    // 0343 0062;	
    // (̓) COMBINING GREEK KORONIS	[1CC6 | 0022 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0343, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_117)
{
    // 0486 0062;	
    // (҆) COMBINING CYRILLIC PSILI PNEUMATA	[1CC6 | 0022 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0486, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_118)
{
    // 2CF1 0062;	
    // (⳱) COPTIC COMBINING SPIRITUS LENIS	[1CC6 | 0022 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CF1, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_119)
{
    // 0314 0062;	
    // (̔) COMBINING REVERSED COMMA ABOVE	[1CC6 | 0023 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0314, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_120)
{
    // 0485 0062;	
    // (҅) COMBINING CYRILLIC DASIA PNEUMATA	[1CC6 | 0023 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0485, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_121)
{
    // 2CF0 0062;	
    // (⳰) COPTIC COMBINING SPIRITUS ASPER	[1CC6 | 0023 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CF0, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_122)
{
    // 0301 0062;	
    // (́) COMBINING ACUTE ACCENT	[1CC6 | 0024 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0301, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_123)
{
    // 0341 0062;	
    // (́) COMBINING ACUTE TONE MARK	[1CC6 | 0024 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0341, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_124)
{
    // 0954 0062;	
    // (॔) DEVANAGARI ACUTE ACCENT	[1CC6 | 0024 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0954, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_125)
{
    // 0300 0062;	
    // (̀) COMBINING GRAVE ACCENT	[1CC6 | 0025 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0300, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_126)
{
    // 0340 0062;	
    // (̀) COMBINING GRAVE TONE MARK	[1CC6 | 0025 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0340, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_127)
{
    // 0953 0062;	
    // (॓) DEVANAGARI GRAVE ACCENT	[1CC6 | 0025 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0953, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_128)
{
    // 0306 0062;	
    // (̆) COMBINING BREVE	[1CC6 | 0026 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0306, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_129)
{
    // 0302 0062;	
    // (̂) COMBINING CIRCUMFLEX ACCENT	[1CC6 | 0027 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0302, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_130)
{
    // 030C 0062;	
    // (̌) COMBINING CARON	[1CC6 | 0028 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x030C, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_131)
{
    // 030A 0062;	
    // (̊) COMBINING RING ABOVE	[1CC6 | 0029 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x030A, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0029, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_132)
{
    // 0342 0062;	
    // (͂) COMBINING GREEK PERISPOMENI	[1CC6 | 002A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0342, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_133)
{
    // 0308 0062;	
    // (̈) COMBINING DIAERESIS	[1CC6 | 002B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0308, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_134)
{
    // 0344 0062;	
    // (̈́) COMBINING GREEK DIALYTIKA TONOS	[1CC6 | 002B 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0344, 0x0062 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_135)
{
    // 030B 0062;	
    // (̋) COMBINING DOUBLE ACUTE ACCENT	[1CC6 | 002C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x030B, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x002C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_136)
{
    // 0303 0062;	
    // (̃) COMBINING TILDE	[1CC6 | 002D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0303, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_137)
{
    // 0307 0062;	
    // (̇) COMBINING DOT ABOVE	[1CC6 | 002E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0307, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_138)
{
    // 0338 0062;	
    // (̸) COMBINING LONG SOLIDUS OVERLAY	[1CC6 | 002F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0338, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_139)
{
    // 0327 0062;	
    // (̧) COMBINING CEDILLA	[1CC6 | 0030 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0327, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0030, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_140)
{
    // 0328 0062;	
    // (̨) COMBINING OGONEK	[1CC6 | 0031 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0328, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_141)
{
    // 0304 0062;	
    // (̄) COMBINING MACRON	[1CC6 | 0032 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0304, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_142)
{
    // 030D 0062;	
    // (̍) COMBINING VERTICAL LINE ABOVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x030D, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_143)
{
    // 030E 0062;	
    // (̎) COMBINING DOUBLE VERTICAL LINE ABOVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x030E, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_144)
{
    // 0312 0062;	
    // (̒) COMBINING TURNED COMMA ABOVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0312, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_145)
{
    // 0315 0062;	
    // (̕) COMBINING COMMA ABOVE RIGHT	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0315, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_146)
{
    // 031A 0062;	
    // (̚) COMBINING LEFT ANGLE ABOVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x031A, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_147)
{
    // 033D 0062;	
    // (̽) COMBINING X ABOVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x033D, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_148)
{
    // 033E 0062;	
    // (̾) COMBINING VERTICAL TILDE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x033E, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_149)
{
    // 033F 0062;	
    // (̿) COMBINING DOUBLE OVERLINE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x033F, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_150)
{
    // 0346 0062;	
    // (͆) COMBINING BRIDGE ABOVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0346, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_151)
{
    // 034A 0062;	
    // (͊) COMBINING NOT TILDE ABOVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x034A, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_152)
{
    // 034B 0062;	
    // (͋) COMBINING HOMOTHETIC ABOVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x034B, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_153)
{
    // 034C 0062;	
    // (͌) COMBINING ALMOST EQUAL TO ABOVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x034C, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_154)
{
    // 0350 0062;	
    // (͐) COMBINING RIGHT ARROWHEAD ABOVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0350, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_155)
{
    // 0351 0062;	
    // (͑) COMBINING LEFT HALF RING ABOVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0351, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_156)
{
    // 0352 0062;	
    // (͒) COMBINING FERMATA	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0352, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_157)
{
    // 0357 0062;	
    // (͗) COMBINING RIGHT HALF RING ABOVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0357, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_158)
{
    // 035B 0062;	
    // (͛) COMBINING ZIGZAG ABOVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x035B, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_159)
{
    // 035D 0062;	
    // (͝) COMBINING DOUBLE BREVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x035D, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_160)
{
    // 035E 0062;	
    // (͞) COMBINING DOUBLE MACRON	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x035E, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_161)
{
    // 0484 0062;	
    // (҄) COMBINING CYRILLIC PALATALIZATION	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0484, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_162)
{
    // 0487 0062;	
    // (҇) COMBINING CYRILLIC POKRYTIE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0487, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_163)
{
    // 0741 0062;	
    // (݁) SYRIAC QUSHSHAYA	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0741, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_164)
{
    // 0745 0062;	
    // (݅) SYRIAC THREE DOTS ABOVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0745, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_165)
{
    // 17CB 0062;	
    // (់) KHMER SIGN BANTOC	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17CB, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_166)
{
    // 17CC 0062;	
    // (៌) KHMER SIGN ROBAT	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17CC, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_167)
{
    // 17CD 0062;	
    // (៍) KHMER SIGN TOANDAKHIAT	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17CD, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_168)
{
    // 17CE 0062;	
    // (៎) KHMER SIGN KAKABAT	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17CE, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_169)
{
    // 17CF 0062;	
    // (៏) KHMER SIGN AHSDA	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17CF, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_170)
{
    // 17D0 0062;	
    // (័) KHMER SIGN SAMYOK SANNYA	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17D0, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_171)
{
    // 17D1 0062;	
    // (៑) KHMER SIGN VIRIAM	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17D1, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_172)
{
    // 17DD 0062;	
    // (៝) KHMER SIGN ATTHACAN	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17DD, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_173)
{
    // 1AB0 0062;	
    // (᪰) COMBINING DOUBLED CIRCUMFLEX ACCENT	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB0, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_174)
{
    // 1AB1 0062;	
    // (᪱) COMBINING DIAERESIS-RING	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB1, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_175)
{
    // 1AB2 0062;	
    // (᪲) COMBINING INFINITY	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB2, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_176)
{
    // 1AB3 0062;	
    // (᪳) COMBINING DOWNWARDS ARROW	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB3, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_177)
{
    // 1AB4 0062;	
    // (᪴) COMBINING TRIPLE DOT	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB4, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_178)
{
    // 1ABB 0062;	
    // (᪻) COMBINING PARENTHESES ABOVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1ABB, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_179)
{
    // 1ABC 0062;	
    // (᪼) COMBINING DOUBLE PARENTHESES ABOVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1ABC, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_180)
{
    // 1DC0 0062;	
    // (᷀) COMBINING DOTTED GRAVE ACCENT	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC0, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_181)
{
    // 1DC1 0062;	
    // (᷁) COMBINING DOTTED ACUTE ACCENT	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC1, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_182)
{
    // 1DC3 0062;	
    // (᷃) COMBINING SUSPENSION MARK	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC3, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_183)
{
    // 1DC4 0062;	
    // (᷄) COMBINING MACRON-ACUTE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC4, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_184)
{
    // 1DC5 0062;	
    // (᷅) COMBINING GRAVE-MACRON	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC5, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_185)
{
    // 1DC6 0062;	
    // (᷆) COMBINING MACRON-GRAVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC6, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_186)
{
    // 1DC7 0062;	
    // (᷇) COMBINING ACUTE-MACRON	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC7, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_187)
{
    // 1DC8 0062;	
    // (᷈) COMBINING GRAVE-ACUTE-GRAVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC8, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_188)
{
    // 1DC9 0062;	
    // (᷉) COMBINING ACUTE-GRAVE-ACUTE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC9, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_189)
{
    // 1DCB 0062;	
    // (᷋) COMBINING BREVE-MACRON	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DCB, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_190)
{
    // 1DCC 0062;	
    // (᷌) COMBINING MACRON-BREVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DCC, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_191)
{
    // 1DCD 0062;	
    // (᷍) COMBINING DOUBLE CIRCUMFLEX ABOVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DCD, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_192)
{
    // 1DCE 0062;	
    // (᷎) COMBINING OGONEK ABOVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DCE, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_193)
{
    // 1DD1 0062;	
    // (᷑) COMBINING UR ABOVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DD1, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_194)
{
    // 1DF5 0062;	
    // (᷵) COMBINING UP TACK ABOVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DF5, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_195)
{
    // 1DF6 0062;	
    // (᷶) COMBINING KAVYKA ABOVE RIGHT	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DF6, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_196)
{
    // 1DF7 0062;	
    // (᷷) COMBINING KAVYKA ABOVE LEFT	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DF7, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_197)
{
    // 1DF8 0062;	
    // (᷸) COMBINING DOT ABOVE LEFT	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DF8, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_198)
{
    // 1DFB 0062;	
    // (᷻) COMBINING DELETION MARK	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DFB, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_199)
{
    // 1DFE 0062;	
    // (᷾) COMBINING LEFT ARROWHEAD ABOVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DFE, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_200)
{
    // 20F0 0062;	
    // (⃰) COMBINING ASTERISK ABOVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20F0, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_201)
{
    // 2CEF 0062;	
    // (⳯) COPTIC COMBINING NI ABOVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CEF, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_202)
{
    // A67C 0062;	
    // (꙼) COMBINING CYRILLIC KAVYKA	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA67C, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_203)
{
    // A67D 0062;	
    // (꙽) COMBINING CYRILLIC PAYEROK	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA67D, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_204)
{
    // 10AE5 0062;	
    // (𐫥) MANICHAEAN ABBREVIATION MARK ABOVE	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE5, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_205)
{
    // 1BC9D 0062;	
    // (𛲝) DUPLOYAN THICK LETTER SELECTOR	[1CC6 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC9D, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_206)
{
    // 0316 0062;	
    // (̖) COMBINING GRAVE ACCENT BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0316, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_207)
{
    // 0317 0062;	
    // (̗) COMBINING ACUTE ACCENT BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0317, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_208)
{
    // 0318 0062;	
    // (̘) COMBINING LEFT TACK BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0318, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_209)
{
    // 0319 0062;	
    // (̙) COMBINING RIGHT TACK BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0319, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_210)
{
    // 031C 0062;	
    // (̜) COMBINING LEFT HALF RING BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x031C, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_211)
{
    // 031D 0062;	
    // (̝) COMBINING UP TACK BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x031D, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_212)
{
    // 031E 0062;	
    // (̞) COMBINING DOWN TACK BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x031E, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_213)
{
    // 031F 0062;	
    // (̟) COMBINING PLUS SIGN BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x031F, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_214)
{
    // 0320 0062;	
    // (̠) COMBINING MINUS SIGN BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0320, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_215)
{
    // 0329 0062;	
    // (̩) COMBINING VERTICAL LINE BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0329, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_216)
{
    // 032A 0062;	
    // (̪) COMBINING BRIDGE BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x032A, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_217)
{
    // 032B 0062;	
    // (̫) COMBINING INVERTED DOUBLE ARCH BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x032B, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_218)
{
    // 032C 0062;	
    // (̬) COMBINING CARON BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x032C, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_219)
{
    // 032F 0062;	
    // (̯) COMBINING INVERTED BREVE BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x032F, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_220)
{
    // 0333 0062;	
    // (̳) COMBINING DOUBLE LOW LINE	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0333, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_221)
{
    // 033A 0062;	
    // (̺) COMBINING INVERTED BRIDGE BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x033A, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_222)
{
    // 033B 0062;	
    // (̻) COMBINING SQUARE BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x033B, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_223)
{
    // 033C 0062;	
    // (̼) COMBINING SEAGULL BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x033C, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_224)
{
    // 0347 0062;	
    // (͇) COMBINING EQUALS SIGN BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0347, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_225)
{
    // 0348 0062;	
    // (͈) COMBINING DOUBLE VERTICAL LINE BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0348, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_226)
{
    // 0349 0062;	
    // (͉) COMBINING LEFT ANGLE BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0349, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_227)
{
    // 034D 0062;	
    // (͍) COMBINING LEFT RIGHT ARROW BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x034D, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_228)
{
    // 034E 0062;	
    // (͎) COMBINING UPWARDS ARROW BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x034E, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_229)
{
    // 0353 0062;	
    // (͓) COMBINING X BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0353, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_230)
{
    // 0354 0062;	
    // (͔) COMBINING LEFT ARROWHEAD BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0354, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_231)
{
    // 0355 0062;	
    // (͕) COMBINING RIGHT ARROWHEAD BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0355, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_232)
{
    // 0356 0062;	
    // (͖) COMBINING RIGHT ARROWHEAD AND UP ARROWHEAD BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0356, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_233)
{
    // 0359 0062;	
    // (͙) COMBINING ASTERISK BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0359, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_234)
{
    // 035A 0062;	
    // (͚) COMBINING DOUBLE RING BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x035A, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_235)
{
    // 035C 0062;	
    // (͜) COMBINING DOUBLE BREVE BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x035C, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_236)
{
    // 035F 0062;	
    // (͟) COMBINING DOUBLE MACRON BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x035F, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_237)
{
    // 0362 0062;	
    // (͢) COMBINING DOUBLE RIGHTWARDS ARROW BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0362, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_238)
{
    // 0742 0062;	
    // (݂) SYRIAC RUKKAKHA	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0742, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_239)
{
    // 0746 0062;	
    // (݆) SYRIAC THREE DOTS BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0746, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_240)
{
    // 0859 0062;	
    // (࡙) MANDAIC AFFRICATION MARK	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0859, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_241)
{
    // 085A 0062;	
    // (࡚) MANDAIC VOCALIZATION MARK	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x085A, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_242)
{
    // 085B 0062;	
    // (࡛) MANDAIC GEMINATION MARK	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x085B, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_243)
{
    // 1AB5 0062;	
    // (᪵) COMBINING X-X BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB5, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_244)
{
    // 1AB6 0062;	
    // (᪶) COMBINING WIGGLY LINE BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB6, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_245)
{
    // 1AB7 0062;	
    // (᪷) COMBINING OPEN MARK BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB7, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_246)
{
    // 1AB8 0062;	
    // (᪸) COMBINING DOUBLE OPEN MARK BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB8, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_247)
{
    // 1AB9 0062;	
    // (᪹) COMBINING LIGHT CENTRALIZATION STROKE BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB9, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_248)
{
    // 1ABA 0062;	
    // (᪺) COMBINING STRONG CENTRALIZATION STROKE BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1ABA, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_249)
{
    // 1ABD 0062;	
    // (᪽) COMBINING PARENTHESES BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1ABD, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_250)
{
    // 1DC2 0062;	
    // (᷂) COMBINING SNAKE BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC2, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_251)
{
    // 1DCF 0062;	
    // (᷏) COMBINING ZIGZAG BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DCF, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_252)
{
    // 1DD0 0062;	
    // (᷐) COMBINING IS BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DD0, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_253)
{
    // 1DF9 0062;	
    // (᷹) COMBINING WIDE INVERTED BRIDGE BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DF9, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_254)
{
    // 1DFC 0062;	
    // (᷼) COMBINING DOUBLE INVERTED BREVE BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DFC, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_255)
{
    // 1DFD 0062;	
    // (᷽) COMBINING ALMOST EQUAL TO BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DFD, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_256)
{
    // 1DFF 0062;	
    // (᷿) COMBINING RIGHT ARROWHEAD AND DOWN ARROWHEAD BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DFF, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_257)
{
    // 20EC 0062;	
    // (⃬) COMBINING RIGHTWARDS HARPOON WITH BARB DOWNWARDS	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20EC, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_258)
{
    // 20ED 0062;	
    // (⃭) COMBINING LEFTWARDS HARPOON WITH BARB DOWNWARDS	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20ED, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_259)
{
    // 20EE 0062;	
    // (⃮) COMBINING LEFT ARROW BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20EE, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_260)
{
    // 20EF 0062;	
    // (⃯) COMBINING RIGHT ARROW BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20EF, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_261)
{
    // FE27 0062;	
    // (︧) COMBINING LIGATURE LEFT HALF BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFE27, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_262)
{
    // 10A0D 0062;	
    // (𐨍) KHAROSHTHI SIGN DOUBLE RING BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A0D, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_263)
{
    // 10AE6 0062;	
    // (𐫦) MANICHAEAN ABBREVIATION MARK BELOW	[1CC6 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE6, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_264)
{
    // 0336 0062;	
    // (̶) COMBINING LONG STROKE OVERLAY	[1CC6 | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0336, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_265)
{
    // 0337 0062;	
    // (̷) COMBINING SHORT SOLIDUS OVERLAY	[1CC6 | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0337, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_266)
{
    // 20D8 0062;	
    // (⃘) COMBINING RING OVERLAY	[1CC6 | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D8, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_267)
{
    // 20D9 0062;	
    // (⃙) COMBINING CLOCKWISE RING OVERLAY	[1CC6 | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D9, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_268)
{
    // 20DA 0062;	
    // (⃚) COMBINING ANTICLOCKWISE RING OVERLAY	[1CC6 | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20DA, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_269)
{
    // 20E5 0062;	
    // (⃥) COMBINING REVERSE SOLIDUS OVERLAY	[1CC6 | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20E5, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_270)
{
    // 20EA 0062;	
    // (⃪) COMBINING LEFTWARDS ARROW OVERLAY	[1CC6 | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20EA, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_271)
{
    // 20EB 0062;	
    // (⃫) COMBINING LONG DOUBLE SOLIDUS OVERLAY	[1CC6 | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20EB, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_272)
{
    // 1BC9E 0062;	
    // (𛲞) DUPLOYAN DOUBLE MARK	[1CC6 | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC9E, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_273)
{
    // 1ABE 0062;	
    // (᪾) COMBINING PARENTHESES OVERLAY	[1CC6 | 0036 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1ABE, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_274)
{
    // 20DD 0062;	
    // (⃝) COMBINING ENCLOSING CIRCLE	[1CC6 | 0036 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20DD, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_275)
{
    // 20DE 0062;	
    // (⃞) COMBINING ENCLOSING SQUARE	[1CC6 | 0036 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20DE, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_276)
{
    // 20DF 0062;	
    // (⃟) COMBINING ENCLOSING DIAMOND	[1CC6 | 0036 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20DF, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_277)
{
    // 20E0 0062;	
    // (⃠) COMBINING ENCLOSING CIRCLE BACKSLASH	[1CC6 | 0036 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20E0, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_278)
{
    // 20E2 0062;	
    // (⃢) COMBINING ENCLOSING SCREEN	[1CC6 | 0036 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20E2, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_279)
{
    // 20E3 0062;	
    // (⃣) COMBINING ENCLOSING KEYCAP	[1CC6 | 0036 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20E3, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_280)
{
    // 20E4 0062;	
    // (⃤) COMBINING ENCLOSING UPWARD POINTING TRIANGLE	[1CC6 | 0036 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20E4, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_281)
{
    // 3099 0062;	
    // (゙) COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[1CC6 | 0037 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3099, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0037, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_282)
{
    // FF9E 0062;	
    // (ﾞ) HALFWIDTH KATAKANA VOICED SOUND MARK	[1CC6 | 0037 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF9E, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0037, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_283)
{
    // 309A 0062;	
    // (゚) COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[1CC6 | 0038 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x309A, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0038, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_284)
{
    // FF9F 0062;	
    // (ﾟ) HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK	[1CC6 | 0038 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF9F, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0038, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_285)
{
    // 0335 0062;	
    // (̵) COMBINING SHORT STROKE OVERLAY	[1CC6 | 0039 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0335, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0039, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_286)
{
    // 0305 0062;	
    // (̅) COMBINING OVERLINE	[1CC6 | 003A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0305, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x003A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_287)
{
    // 0309 0062;	
    // (̉) COMBINING HOOK ABOVE	[1CC6 | 003B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0309, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_288)
{
    // 030F 0062;	
    // (̏) COMBINING DOUBLE GRAVE ACCENT	[1CC6 | 003C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x030F, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_289)
{
    // 0310 0062;	
    // (̐) COMBINING CANDRABINDU	[1CC6 | 003D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0310, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x003D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_290)
{
    // 0311 0062;	
    // (̑) COMBINING INVERTED BREVE	[1CC6 | 003E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0311, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_291)
{
    // 031B 0062;	
    // (̛) COMBINING HORN	[1CC6 | 003F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x031B, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x003F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_292)
{
    // 0321 0062;	
    // (̡) COMBINING PALATALIZED HOOK BELOW	[1CC6 | 0040 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0321, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0040, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_293)
{
    // 0322 0062;	
    // (̢) COMBINING RETROFLEX HOOK BELOW	[1CC6 | 0041 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0322, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0041, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_294)
{
    // 0323 0062;	
    // (̣) COMBINING DOT BELOW	[1CC6 | 0042 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0323, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_295)
{
    // 0324 0062;	
    // (̤) COMBINING DIAERESIS BELOW	[1CC6 | 0043 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0324, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0043, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_296)
{
    // 0325 0062;	
    // (̥) COMBINING RING BELOW	[1CC6 | 0044 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0325, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0044, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_297)
{
    // 0326 0062;	
    // (̦) COMBINING COMMA BELOW	[1CC6 | 0045 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0326, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0045, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_298)
{
    // 032D 0062;	
    // (̭) COMBINING CIRCUMFLEX ACCENT BELOW	[1CC6 | 0046 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x032D, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0046, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_299)
{
    // 032E 0062;	
    // (̮) COMBINING BREVE BELOW	[1CC6 | 0047 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x032E, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0047, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_300)
{
    // 0330 0062;	
    // (̰) COMBINING TILDE BELOW	[1CC6 | 0048 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0330, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0048, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_301)
{
    // 0331 0062;	
    // (̱) COMBINING MACRON BELOW	[1CC6 | 0049 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0331, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0049, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_302)
{
    // 0334 0062;	
    // (b) LATIN SMALL LETTER B	[1CC6 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_303)
{
    // 0334 1DE8;	
    // (ᷨ) COMBINING LATIN SMALL LETTER B	[1CC6 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x1DE8 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_304)
{
    // 1DE8 0334;	
    // (ᷨ) COMBINING LATIN SMALL LETTER B	[1CC6 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x1DE8, 0x0334 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_305)
{
    // 0339 0062;	
    // (̹) COMBINING RIGHT HALF RING BELOW	[1CC6 | 004B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0339, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x004B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_306)
{
    // 0345 0062;	
    // (ͅ) COMBINING GREEK YPOGEGRAMMENI	[1CC6 | 004C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0345, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_307)
{
    // 0358 0062;	
    // (͘) COMBINING DOT ABOVE RIGHT	[1CC6 | 004D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0358, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x004D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_308)
{
    // 0360 0062;	
    // (͠) COMBINING DOUBLE TILDE	[1CC6 | 004E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0360, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x004E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_309)
{
    // FE22 0062;	
    // (︢) COMBINING DOUBLE TILDE LEFT HALF	[1CC6 | 004E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFE22, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x004E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_310)
{
    // FE29 0062;	
    // (︩) COMBINING TILDE LEFT HALF BELOW	[1CC6 | 004E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFE29, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x004E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_311)
{
    // 0361 0062;	
    // (͡) COMBINING DOUBLE INVERTED BREVE	[1CC6 | 004F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0361, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x004F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_312)
{
    // FE20 0062;	
    // (︠) COMBINING LIGATURE LEFT HALF	[1CC6 | 004F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFE20, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x004F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_313)
{
    // 0483 0062;	
    // (҃) COMBINING CYRILLIC TITLO	[1CC6 | 0050 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0483, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0050, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_314)
{
    // FE2E 0062;	
    // (︮) COMBINING CYRILLIC TITLO LEFT HALF	[1CC6 | 0050 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFE2E, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0050, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_315)
{
    // A66F 0062;	
    // (꙯) COMBINING CYRILLIC VZMET	[1CC6 | 0051 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA66F, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0051, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_316)
{
    // 05B0 0062;	
    // (ְ) HEBREW POINT SHEVA	[1CC6 | 0052 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B0, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0052, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_317)
{
    // 05B1 0062;	
    // (ֱ) HEBREW POINT HATAF SEGOL	[1CC6 | 0053 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B1, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0053, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_318)
{
    // 05B2 0062;	
    // (ֲ) HEBREW POINT HATAF PATAH	[1CC6 | 0054 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B2, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0054, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_319)
{
    // 05B3 0062;	
    // (ֳ) HEBREW POINT HATAF QAMATS	[1CC6 | 0055 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B3, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0055, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_320)
{
    // 05B4 0062;	
    // (ִ) HEBREW POINT HIRIQ	[1CC6 | 0056 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B4, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0056, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_321)
{
    // 05B5 0062;	
    // (ֵ) HEBREW POINT TSERE	[1CC6 | 0057 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B5, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0057, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_322)
{
    // 05B6 0062;	
    // (ֶ) HEBREW POINT SEGOL	[1CC6 | 0058 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B6, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0058, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_323)
{
    // 05B7 0062;	
    // (ַ) HEBREW POINT PATAH	[1CC6 | 0059 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B7, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0059, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_324)
{
    // 05B8 0062;	
    // (ָ) HEBREW POINT QAMATS	[1CC6 | 005A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B8, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x005A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_325)
{
    // 05C7 0062;	
    // (ׇ) HEBREW POINT QAMATS QATAN	[1CC6 | 005A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05C7, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x005A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_326)
{
    // 05B9 0062;	
    // (ֹ) HEBREW POINT HOLAM	[1CC6 | 005B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B9, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x005B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_327)
{
    // 05BA 0062;	
    // (ֺ) HEBREW POINT HOLAM HASER FOR VAV	[1CC6 | 005B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05BA, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x005B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_328)
{
    // 05BB 0062;	
    // (ֻ) HEBREW POINT QUBUTS	[1CC6 | 005C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05BB, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x005C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_329)
{
    // 05C2 0062;	
    // (ׂ) HEBREW POINT SIN DOT	[1CC6 | 005D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05C2, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x005D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_330)
{
    // 05C1 0062;	
    // (ׁ) HEBREW POINT SHIN DOT	[1CC6 | 005E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05C1, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x005E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_331)
{
    // 05BC 0062;	
    // (ּ) HEBREW POINT DAGESH OR MAPIQ	[1CC6 | 005F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05BC, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_332)
{
    // 05BF 0062;	
    // (ֿ) HEBREW POINT RAFE	[1CC6 | 0060 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05BF, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0060, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_333)
{
    // FB1E 0062;	
    // (ﬞ) HEBREW POINT JUDEO-SPANISH VARIKA	[1CC6 | 0061 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFB1E, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0061, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_334)
{
    // 081C 0062;	
    // (ࠜ) SAMARITAN VOWEL SIGN LONG E	[1CC6 | 0062 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x081C, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0062, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_335)
{
    // 081D 0062;	
    // (ࠝ) SAMARITAN VOWEL SIGN E	[1CC6 | 0062 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x081D, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0062, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_336)
{
    // 081E 0062;	
    // (ࠞ) SAMARITAN VOWEL SIGN OVERLONG AA	[1CC6 | 0063 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x081E, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0063, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_337)
{
    // 081F 0062;	
    // (ࠟ) SAMARITAN VOWEL SIGN LONG AA	[1CC6 | 0063 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x081F, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0063, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_338)
{
    // 0820 0062;	
    // (ࠠ) SAMARITAN VOWEL SIGN AA	[1CC6 | 0063 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0820, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0063, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_339)
{
    // 0821 0062;	
    // (ࠡ) SAMARITAN VOWEL SIGN OVERLONG A	[1CC6 | 0064 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0821, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0064, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_340)
{
    // 0822 0062;	
    // (ࠢ) SAMARITAN VOWEL SIGN LONG A	[1CC6 | 0064 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0822, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0064, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_341)
{
    // 0823 0062;	
    // (ࠣ) SAMARITAN VOWEL SIGN A	[1CC6 | 0064 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0823, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0064, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_342)
{
    // 0824 0062;	
    // (‎‎ࠤ‎‎) SAMARITAN MODIFIER LETTER SHORT A	[1CC6 | 0065 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0824, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0065, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_343)
{
    // 0825 0062;	
    // (ࠥ) SAMARITAN VOWEL SIGN SHORT A	[1CC6 | 0065 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0825, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0065, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_344)
{
    // 0826 0062;	
    // (ࠦ) SAMARITAN VOWEL SIGN LONG U	[1CC6 | 0066 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0826, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0066, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_345)
{
    // 0827 0062;	
    // (ࠧ) SAMARITAN VOWEL SIGN U	[1CC6 | 0066 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0827, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0066, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_346)
{
    // 0828 0062;	
    // (‎‎ࠨ‎‎) SAMARITAN MODIFIER LETTER I	[1CC6 | 0067 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0828, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0067, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_347)
{
    // 0829 0062;	
    // (ࠩ) SAMARITAN VOWEL SIGN LONG I	[1CC6 | 0067 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0829, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0067, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_348)
{
    // 082A 0062;	
    // (ࠪ) SAMARITAN VOWEL SIGN I	[1CC6 | 0067 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x082A, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0067, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_349)
{
    // 082B 0062;	
    // (ࠫ) SAMARITAN VOWEL SIGN O	[1CC6 | 0068 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x082B, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0068, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_350)
{
    // 082C 0062;	
    // (ࠬ) SAMARITAN VOWEL SIGN SUKUN	[1CC6 | 0069 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x082C, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0069, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_351)
{
    // 0818 0062;	
    // (࠘) SAMARITAN MARK OCCLUSION	[1CC6 | 006A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0818, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x006A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_352)
{
    // 0819 0062;	
    // (࠙) SAMARITAN MARK DAGESH	[1CC6 | 006B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0819, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x006B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_353)
{
    // 082D 0062;	
    // (࠭) SAMARITAN MARK NEQUDAA	[1CC6 | 006C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x082D, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x006C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_354)
{
    // 064B 0062;	
    // (ً) ARABIC FATHATAN	[1CC6 | 006D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x064B, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x006D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_355)
{
    // FE71 0062;	
    // (‎‎ﹱ‎‎) ARABIC TATWEEL WITH FATHATAN ABOVE	[1CC6 | 006D 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE71, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x006D, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_356)
{
    // FE70 0062;	
    // (‎‎ﹰ‎‎) ARABIC FATHATAN ISOLATED FORM	[1CC6 | 006D 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE70, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x006D, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_357)
{
    // 08F0 0062;	
    // (ࣰ) ARABIC OPEN FATHATAN	[1CC6 | 006E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F0, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x006E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_358)
{
    // 08E7 0062;	
    // (ࣧ) ARABIC CURLY FATHATAN	[1CC6 | 006F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E7, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x006F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_359)
{
    // 064C 0062;	
    // (ٌ) ARABIC DAMMATAN	[1CC6 | 0070 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x064C, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0070, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_360)
{
    // FE72 0062;	
    // (‎‎ﹲ‎‎) ARABIC DAMMATAN ISOLATED FORM	[1CC6 | 0070 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE72, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0070, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_361)
{
    // FC5E 0062;	
    // (‎‎ﱞ‎‎) ARABIC LIGATURE SHADDA WITH DAMMATAN ISOLATED FORM	[1CC6 | 0070 0080 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC5E, 0x0062 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x0070, 0x0080, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_362)
{
    // 08F1 0062;	
    // (ࣱ) ARABIC OPEN DAMMATAN	[1CC6 | 0071 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F1, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0071, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_363)
{
    // 08E8 0062;	
    // (ࣨ) ARABIC CURLY DAMMATAN	[1CC6 | 0072 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E8, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0072, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_364)
{
    // 064D 0062;	
    // (ٍ) ARABIC KASRATAN	[1CC6 | 0073 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x064D, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0073, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_365)
{
    // FE74 0062;	
    // (‎‎ﹴ‎‎) ARABIC KASRATAN ISOLATED FORM	[1CC6 | 0073 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE74, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0073, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_366)
{
    // FC5F 0062;	
    // (‎‎ﱟ‎‎) ARABIC LIGATURE SHADDA WITH KASRATAN ISOLATED FORM	[1CC6 | 0073 0080 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC5F, 0x0062 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x0073, 0x0080, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_367)
{
    // 08F2 0062;	
    // (ࣲ) ARABIC OPEN KASRATAN	[1CC6 | 0074 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F2, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0074, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_368)
{
    // 08E9 0062;	
    // (ࣩ) ARABIC CURLY KASRATAN	[1CC6 | 0075 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E9, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0075, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_369)
{
    // 064E 0062;	
    // (َ) ARABIC FATHA	[1CC6 | 0076 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x064E, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0076, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_370)
{
    // FE77 0062;	
    // (‎‎ﹷ‎‎) ARABIC FATHA MEDIAL FORM	[1CC6 | 0076 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE77, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0076, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_371)
{
    // FE76 0062;	
    // (‎‎ﹶ‎‎) ARABIC FATHA ISOLATED FORM	[1CC6 | 0076 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE76, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0076, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_372)
{
    // FCF2 0062;	
    // (‎‎ﳲ‎‎) ARABIC LIGATURE SHADDA WITH FATHA MEDIAL FORM	[1CC6 | 0076 0080 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCF2, 0x0062 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x0076, 0x0080, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_373)
{
    // FC60 0062;	
    // (‎‎ﱠ‎‎) ARABIC LIGATURE SHADDA WITH FATHA ISOLATED FORM	[1CC6 | 0076 0080 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC60, 0x0062 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x0076, 0x0080, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_374)
{
    // 08E4 0062;	
    // (ࣤ) ARABIC CURLY FATHA	[1CC6 | 0077 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E4, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0077, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_375)
{
    // 08F4 0062;	
    // (ࣴ) ARABIC FATHA WITH RING	[1CC6 | 0078 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F4, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0078, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_376)
{
    // 08F5 0062;	
    // (ࣵ) ARABIC FATHA WITH DOT ABOVE	[1CC6 | 0079 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F5, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0079, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_377)
{
    // 064F 0062;	
    // (ُ) ARABIC DAMMA	[1CC6 | 007A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x064F, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x007A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_378)
{
    // FE79 0062;	
    // (‎‎ﹹ‎‎) ARABIC DAMMA MEDIAL FORM	[1CC6 | 007A 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE79, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x007A, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_379)
{
    // FE78 0062;	
    // (‎‎ﹸ‎‎) ARABIC DAMMA ISOLATED FORM	[1CC6 | 007A 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE78, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x007A, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_380)
{
    // FCF3 0062;	
    // (‎‎ﳳ‎‎) ARABIC LIGATURE SHADDA WITH DAMMA MEDIAL FORM	[1CC6 | 007A 0080 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCF3, 0x0062 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x007A, 0x0080, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_381)
{
    // FC61 0062;	
    // (‎‎ﱡ‎‎) ARABIC LIGATURE SHADDA WITH DAMMA ISOLATED FORM	[1CC6 | 007A 0080 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC61, 0x0062 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x007A, 0x0080, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_382)
{
    // 08E5 0062;	
    // (ࣥ) ARABIC CURLY DAMMA	[1CC6 | 007B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E5, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x007B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_383)
{
    // 08FE 0062;	
    // (ࣾ) ARABIC DAMMA WITH DOT	[1CC6 | 007C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FE, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x007C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_384)
{
    // 0650 0062;	
    // (ِ) ARABIC KASRA	[1CC6 | 007D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0650, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x007D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_385)
{
    // FE7B 0062;	
    // (‎‎ﹻ‎‎) ARABIC KASRA MEDIAL FORM	[1CC6 | 007D 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE7B, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x007D, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_386)
{
    // FE7A 0062;	
    // (‎‎ﹺ‎‎) ARABIC KASRA ISOLATED FORM	[1CC6 | 007D 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE7A, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x007D, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_387)
{
    // FCF4 0062;	
    // (‎‎ﳴ‎‎) ARABIC LIGATURE SHADDA WITH KASRA MEDIAL FORM	[1CC6 | 007D 0080 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCF4, 0x0062 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x007D, 0x0080, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_388)
{
    // FC62 0062;	
    // (‎‎ﱢ‎‎) ARABIC LIGATURE SHADDA WITH KASRA ISOLATED FORM	[1CC6 | 007D 0080 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC62, 0x0062 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x007D, 0x0080, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_389)
{
    // 08E6 0062;	
    // (ࣦ) ARABIC CURLY KASRA	[1CC6 | 007E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E6, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x007E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_390)
{
    // 08F6 0062;	
    // (ࣶ) ARABIC KASRA WITH DOT BELOW	[1CC6 | 007F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F6, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x007F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_391)
{
    // 0651 0062;	
    // (ّ) ARABIC SHADDA	[1CC6 | 0080 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0651, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0080, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_392)
{
    // 0AFB 0062;	
    // (ૻ) GUJARATI SIGN SHADDA	[1CC6 | 0080 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AFB, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0080, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_393)
{
    // 11237 0062;	
    // (𑈷) KHOJKI SIGN SHADDA	[1CC6 | 0080 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11237, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0080, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_394)
{
    // FE7D 0062;	
    // (‎‎ﹽ‎‎) ARABIC SHADDA MEDIAL FORM	[1CC6 | 0080 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE7D, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0080, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_395)
{
    // FE7C 0062;	
    // (‎‎ﹼ‎‎) ARABIC SHADDA ISOLATED FORM	[1CC6 | 0080 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE7C, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0080, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_396)
{
    // FC63 0062;	
    // (‎‎ﱣ‎‎) ARABIC LIGATURE SHADDA WITH SUPERSCRIPT ALEF ISOLATED FORM	[1CC6 | 0080 0098 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC63, 0x0062 };
    uint32_t const ces[10] = { 0x1CC6, 0x0000, 0x0080, 0x0098, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_397)
{
    // 0652 0062;	
    // (ْ) ARABIC SUKUN	[1CC6 | 0081 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0652, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0081, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_398)
{
    // 0AFA 0062;	
    // (ૺ) GUJARATI SIGN SUKUN	[1CC6 | 0081 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AFA, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0081, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_399)
{
    // 1123E 0062;	
    // (𑈾) KHOJKI SIGN SUKUN	[1CC6 | 0081 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1123E, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0081, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_400)
{
    // FE7F 0062;	
    // (‎‎ﹿ‎‎) ARABIC SUKUN MEDIAL FORM	[1CC6 | 0081 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE7F, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0081, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_401)
{
    // FE7E 0062;	
    // (‎‎ﹾ‎‎) ARABIC SUKUN ISOLATED FORM	[1CC6 | 0081 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE7E, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0081, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_402)
{
    // 0653 0062;	
    // (ٓ) ARABIC MADDAH ABOVE	[1CC6 | 0082 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0653, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0082, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_403)
{
    // 0AFC 0062;	
    // (ૼ) GUJARATI SIGN MADDAH	[1CC6 | 0082 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AFC, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0082, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_404)
{
    // 0654 0062;	
    // (ٔ) ARABIC HAMZA ABOVE	[1CC6 | 0083 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0654, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0083, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_405)
{
    // 0655 0062;	
    // (ٕ) ARABIC HAMZA BELOW	[1CC6 | 0084 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0655, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0084, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_406)
{
    // 065F 0062;	
    // (ٟ) ARABIC WAVY HAMZA BELOW	[1CC6 | 0085 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x065F, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0085, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_407)
{
    // 0656 0062;	
    // (ٖ) ARABIC SUBSCRIPT ALEF	[1CC6 | 0086 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0656, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0086, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_408)
{
    // 0657 0062;	
    // (ٗ) ARABIC INVERTED DAMMA	[1CC6 | 0087 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0657, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0087, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_409)
{
    // 0658 0062;	
    // (٘) ARABIC MARK NOON GHUNNA	[1CC6 | 0088 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0658, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0088, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_410)
{
    // 08FF 0062;	
    // (ࣿ) ARABIC MARK SIDEWAYS NOON GHUNNA	[1CC6 | 0089 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FF, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0089, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_411)
{
    // 0659 0062;	
    // (ٙ) ARABIC ZWARAKAY	[1CC6 | 008A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0659, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x008A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_412)
{
    // 065A 0062;	
    // (ٚ) ARABIC VOWEL SIGN SMALL V ABOVE	[1CC6 | 008B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x065A, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x008B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_413)
{
    // 065B 0062;	
    // (ٛ) ARABIC VOWEL SIGN INVERTED SMALL V ABOVE	[1CC6 | 008C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x065B, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x008C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_414)
{
    // 065C 0062;	
    // (ٜ) ARABIC VOWEL SIGN DOT BELOW	[1CC6 | 008D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x065C, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x008D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_415)
{
    // 065D 0062;	
    // (ٝ) ARABIC REVERSED DAMMA	[1CC6 | 008E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x065D, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x008E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_416)
{
    // 065E 0062;	
    // (ٞ) ARABIC FATHA WITH TWO DOTS	[1CC6 | 008F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x065E, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x008F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_417)
{
    // 08E3 0062;	
    // (ࣣ) ARABIC TURNED DAMMA BELOW	[1CC6 | 0090 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E3, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0090, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_418)
{
    // 08F7 0062;	
    // (ࣷ) ARABIC LEFT ARROWHEAD ABOVE	[1CC6 | 0091 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F7, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0091, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_419)
{
    // 08F8 0062;	
    // (ࣸ) ARABIC RIGHT ARROWHEAD ABOVE	[1CC6 | 0092 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F8, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0092, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_420)
{
    // 08FD 0062;	
    // (ࣽ) ARABIC RIGHT ARROWHEAD ABOVE WITH DOT	[1CC6 | 0093 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FD, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0093, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_421)
{
    // 08FB 0062;	
    // (ࣻ) ARABIC DOUBLE RIGHT ARROWHEAD ABOVE	[1CC6 | 0094 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FB, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0094, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_422)
{
    // 08FC 0062;	
    // (ࣼ) ARABIC DOUBLE RIGHT ARROWHEAD ABOVE WITH DOT	[1CC6 | 0095 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FC, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0095, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_423)
{
    // 08F9 0062;	
    // (ࣹ) ARABIC LEFT ARROWHEAD BELOW	[1CC6 | 0096 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F9, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0096, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_424)
{
    // 08FA 0062;	
    // (ࣺ) ARABIC RIGHT ARROWHEAD BELOW	[1CC6 | 0097 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FA, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0097, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_425)
{
    // 0670 0062;	
    // (ٰ) ARABIC LETTER SUPERSCRIPT ALEF	[1CC6 | 0098 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0670, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0098, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_426)
{
    // 0711 0062;	
    // (ܑ) SYRIAC LETTER SUPERSCRIPT ALAPH	[1CC6 | 0099 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0711, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x0099, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_427)
{
    // 0730 0062;	
    // (ܰ) SYRIAC PTHAHA ABOVE	[1CC6 | 009A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0730, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x009A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_428)
{
    // 0731 0062;	
    // (ܱ) SYRIAC PTHAHA BELOW	[1CC6 | 009B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0731, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x009B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_429)
{
    // 0732 0062;	
    // (ܲ) SYRIAC PTHAHA DOTTED	[1CC6 | 009C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0732, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x009C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_430)
{
    // 0733 0062;	
    // (ܳ) SYRIAC ZQAPHA ABOVE	[1CC6 | 009D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0733, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x009D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_431)
{
    // 0734 0062;	
    // (ܴ) SYRIAC ZQAPHA BELOW	[1CC6 | 009E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0734, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x009E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_432)
{
    // 0735 0062;	
    // (ܵ) SYRIAC ZQAPHA DOTTED	[1CC6 | 009F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0735, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x009F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_433)
{
    // 0736 0062;	
    // (ܶ) SYRIAC RBASA ABOVE	[1CC6 | 00A0 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0736, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00A0, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_434)
{
    // 0737 0062;	
    // (ܷ) SYRIAC RBASA BELOW	[1CC6 | 00A1 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0737, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00A1, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_435)
{
    // 0738 0062;	
    // (ܸ) SYRIAC DOTTED ZLAMA HORIZONTAL	[1CC6 | 00A2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0738, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00A2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_436)
{
    // 0739 0062;	
    // (ܹ) SYRIAC DOTTED ZLAMA ANGULAR	[1CC6 | 00A3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0739, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00A3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_437)
{
    // 073A 0062;	
    // (ܺ) SYRIAC HBASA ABOVE	[1CC6 | 00A4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x073A, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00A4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_438)
{
    // 073B 0062;	
    // (ܻ) SYRIAC HBASA BELOW	[1CC6 | 00A5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x073B, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00A5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_439)
{
    // 073C 0062;	
    // (ܼ) SYRIAC HBASA-ESASA DOTTED	[1CC6 | 00A6 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x073C, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00A6, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_440)
{
    // 073D 0062;	
    // (ܽ) SYRIAC ESASA ABOVE	[1CC6 | 00A7 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x073D, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00A7, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_441)
{
    // 073E 0062;	
    // (ܾ) SYRIAC ESASA BELOW	[1CC6 | 00A8 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x073E, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00A8, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_442)
{
    // 073F 0062;	
    // (ܿ) SYRIAC RWAHA	[1CC6 | 00A9 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x073F, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00A9, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_443)
{
    // 07EB 0062;	
    // (߫) NKO COMBINING SHORT HIGH TONE	[1CC6 | 00AA 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07EB, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00AA, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_444)
{
    // 07EC 0062;	
    // (߬) NKO COMBINING SHORT LOW TONE	[1CC6 | 00AB 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07EC, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00AB, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_445)
{
    // 07ED 0062;	
    // (߭) NKO COMBINING SHORT RISING TONE	[1CC6 | 00AC 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07ED, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00AC, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_446)
{
    // 07EE 0062;	
    // (߮) NKO COMBINING LONG DESCENDING TONE	[1CC6 | 00AD 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07EE, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00AD, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_447)
{
    // 07EF 0062;	
    // (߯) NKO COMBINING LONG HIGH TONE	[1CC6 | 00AE 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07EF, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00AE, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_448)
{
    // 07F0 0062;	
    // (߰) NKO COMBINING LONG LOW TONE	[1CC6 | 00AF 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F0, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00AF, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_449)
{
    // 07F1 0062;	
    // (߱) NKO COMBINING LONG RISING TONE	[1CC6 | 00B0 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F1, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00B0, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_450)
{
    // 07F2 0062;	
    // (߲) NKO COMBINING NASALIZATION MARK	[1CC6 | 00B1 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F2, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00B1, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_451)
{
    // 07F3 0062;	
    // (߳) NKO COMBINING DOUBLE DOT ABOVE	[1CC6 | 00B2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F3, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00B2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_452)
{
    // 135F 0062;	
    // (፟) ETHIOPIC COMBINING GEMINATION MARK	[1CC6 | 00B3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x135F, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00B3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_453)
{
    // 135E 0062;	
    // (፞) ETHIOPIC COMBINING VOWEL LENGTH MARK	[1CC6 | 00B4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x135E, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00B4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_454)
{
    // 135D 0062;	
    // (፝) ETHIOPIC COMBINING GEMINATION AND VOWEL LENGTH MARK	[1CC6 | 00B5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x135D, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00B5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_455)
{
    // A6F0 0062;	
    // (꛰) BAMUM COMBINING MARK KOQNDON	[1CC6 | 00B6 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F0, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00B6, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_456)
{
    // A6F1 0062;	
    // (꛱) BAMUM COMBINING MARK TUKWENTIS	[1CC6 | 00B7 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F1, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00B7, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_457)
{
    // 16AF0 0062;	
    // (𖫰) BASSA VAH COMBINING HIGH TONE	[1CC6 | 00B8 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF0, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00B8, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_458)
{
    // 16AF1 0062;	
    // (𖫱) BASSA VAH COMBINING LOW TONE	[1CC6 | 00B9 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF1, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00B9, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_459)
{
    // 16AF2 0062;	
    // (𖫲) BASSA VAH COMBINING MID TONE	[1CC6 | 00BA 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF2, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00BA, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_460)
{
    // 16AF3 0062;	
    // (𖫳) BASSA VAH COMBINING LOW-MID TONE	[1CC6 | 00BB 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF3, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00BB, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_461)
{
    // 16AF4 0062;	
    // (𖫴) BASSA VAH COMBINING HIGH-LOW TONE	[1CC6 | 00BC 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF4, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00BC, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_462)
{
    // 1E944 0062;	
    // (𞥄) ADLAM ALIF LENGTHENER	[1CC6 | 00BD 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E944, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00BD, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_463)
{
    // 1E945 0062;	
    // (𞥅) ADLAM VOWEL LENGTHENER	[1CC6 | 00BD 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E945, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00BD, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_464)
{
    // 1E946 0062;	
    // (𞥆) ADLAM GEMINATION MARK	[1CC6 | 00BD 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E946, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00BD, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_465)
{
    // 1E94A 0062;	
    // (𞥊) ADLAM NUKTA	[1CC6 | 00BE 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E94A, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00BE, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_466)
{
    // 1E947 0062;	
    // (𞥇) ADLAM HAMZA	[1CC6 | 00BF 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E947, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00BF, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_467)
{
    // 1E948 0062;	
    // (𞥈) ADLAM CONSONANT MODIFIER	[1CC6 | 00C0 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E948, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C0, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_468)
{
    // 1E949 0062;	
    // (𞥉) ADLAM GEMINATE CONSONANT MODIFIER	[1CC6 | 00C1 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E949, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C1, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_469)
{
    // 093C 0062;	
    // (़) DEVANAGARI SIGN NUKTA	[1CC6 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x093C, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_470)
{
    // 09BC 0062;	
    // (়) BENGALI SIGN NUKTA	[1CC6 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09BC, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_471)
{
    // 0A3C 0062;	
    // (਼) GURMUKHI SIGN NUKTA	[1CC6 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A3C, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_472)
{
    // 0ABC 0062;	
    // (઼) GUJARATI SIGN NUKTA	[1CC6 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ABC, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_473)
{
    // 0AFD 0062;	
    // (૽) GUJARATI SIGN THREE-DOT NUKTA ABOVE	[1CC6 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AFD, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_474)
{
    // 0AFE 0062;	
    // (૾) GUJARATI SIGN CIRCLE NUKTA ABOVE	[1CC6 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AFE, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_475)
{
    // 0AFF 0062;	
    // (૿) GUJARATI SIGN TWO-CIRCLE NUKTA ABOVE	[1CC6 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AFF, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_476)
{
    // 0B3C 0062;	
    // (଼) ORIYA SIGN NUKTA	[1CC6 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B3C, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_477)
{
    // 0CBC 0062;	
    // (಼) KANNADA SIGN NUKTA	[1CC6 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CBC, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_478)
{
    // 1B34 0062;	
    // (᬴) BALINESE SIGN REREKAN	[1CC6 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B34, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_479)
{
    // 1BE6 0062;	
    // (᯦) BATAK SIGN TOMPI	[1CC6 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BE6, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_480)
{
    // 1C37 0062;	
    // (᰷) LEPCHA SIGN NUKTA	[1CC6 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C37, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_481)
{
    // A9B3 0062;	
    // (꦳) JAVANESE SIGN CECAK TELU	[1CC6 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9B3, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_482)
{
    // 110BA 0062;	
    // (𑂺) KAITHI SIGN NUKTA	[1CC6 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110BA, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_483)
{
    // 11173 0062;	
    // (𑅳) MAHAJANI SIGN NUKTA	[1CC6 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11173, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_484)
{
    // 111CA 0062;	
    // (𑇊) SHARADA SIGN NUKTA	[1CC6 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111CA, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_485)
{
    // 11236 0062;	
    // (𑈶) KHOJKI SIGN NUKTA	[1CC6 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11236, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_486)
{
    // 112E9 0062;	
    // (𑋩) KHUDAWADI SIGN NUKTA	[1CC6 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E9, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_487)
{
    // 1133C 0062;	
    // (𑌼) GRANTHA SIGN NUKTA	[1CC6 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1133C, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_488)
{
    // 11446 0062;	
    // (𑑆) NEWA SIGN NUKTA	[1CC6 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11446, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_489)
{
    // 114C3 0062;	
    // (𑓃) TIRHUTA SIGN NUKTA	[1CC6 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C3, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_490)
{
    // 115C0 0062;	
    // (𑗀) SIDDHAM SIGN NUKTA	[1CC6 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C0, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_491)
{
    // 116B7 0062;	
    // (𑚷) TAKRI SIGN NUKTA	[1CC6 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B7, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_492)
{
    // 11A33 0062;	
    // (𑨳) ZANABAZAR SQUARE FINAL CONSONANT MARK	[1CC6 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A33, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_493)
{
    // 11D42 0062;	
    // (𑵂) MASARAM GONDI SIGN NUKTA	[1CC6 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D42, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_494)
{
    // 0900 0062;	
    // (ऀ) DEVANAGARI SIGN INVERTED CANDRABINDU	[1CC6 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0900, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_495)
{
    // 0901 0062;	
    // (ँ) DEVANAGARI SIGN CANDRABINDU	[1CC6 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0901, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_496)
{
    // 0981 0062;	
    // (ঁ) BENGALI SIGN CANDRABINDU	[1CC6 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0981, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_497)
{
    // 0A01 0062;	
    // (ਁ) GURMUKHI SIGN ADAK BINDI	[1CC6 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A01, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_498)
{
    // 0A81 0062;	
    // (ઁ) GUJARATI SIGN CANDRABINDU	[1CC6 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A81, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_101_499)
{
    // 0B01 0062;	
    // (ଁ) ORIYA SIGN CANDRABINDU	[1CC6 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B01, 0x0062 };
    uint32_t const ces[8] = { 0x1CC6, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

