// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_033_000)
{
    // 1F1F6 0041;	
    // (🇶) REGIONAL INDICATOR SYMBOL LETTER Q	[0A2E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1F6, 0x0041 };
    uint32_t const ces[9] = { 0x0A2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_001)
{
    // 1F1F6 0062;	
    // (🇶) REGIONAL INDICATOR SYMBOL LETTER Q	[0A2E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F6, 0x0062 };
    uint32_t const ces[9] = { 0x0A2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_002)
{
    // 1F1F7 0021;	
    // (🇷) REGIONAL INDICATOR SYMBOL LETTER R	[0A2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F7, 0x0021 };
    uint32_t const ces[9] = { 0x0A2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_003)
{
    // 1F1F7 003F;	
    // (🇷) REGIONAL INDICATOR SYMBOL LETTER R	[0A2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F7, 0x003F };
    uint32_t const ces[9] = { 0x0A2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_004)
{
    // 1F1F7 0061;	
    // (🇷) REGIONAL INDICATOR SYMBOL LETTER R	[0A2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F7, 0x0061 };
    uint32_t const ces[9] = { 0x0A2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_005)
{
    // 1F1F7 0041;	
    // (🇷) REGIONAL INDICATOR SYMBOL LETTER R	[0A2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1F7, 0x0041 };
    uint32_t const ces[9] = { 0x0A2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_006)
{
    // 1F1F7 0062;	
    // (🇷) REGIONAL INDICATOR SYMBOL LETTER R	[0A2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F7, 0x0062 };
    uint32_t const ces[9] = { 0x0A2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_007)
{
    // 1F1F8 0021;	
    // (🇸) REGIONAL INDICATOR SYMBOL LETTER S	[0A30 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F8, 0x0021 };
    uint32_t const ces[9] = { 0x0A30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_008)
{
    // 1F1F8 003F;	
    // (🇸) REGIONAL INDICATOR SYMBOL LETTER S	[0A30 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F8, 0x003F };
    uint32_t const ces[9] = { 0x0A30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_009)
{
    // 1F1F8 0061;	
    // (🇸) REGIONAL INDICATOR SYMBOL LETTER S	[0A30 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F8, 0x0061 };
    uint32_t const ces[9] = { 0x0A30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_010)
{
    // 1F1F8 0041;	
    // (🇸) REGIONAL INDICATOR SYMBOL LETTER S	[0A30 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1F8, 0x0041 };
    uint32_t const ces[9] = { 0x0A30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_011)
{
    // 1F1F8 0062;	
    // (🇸) REGIONAL INDICATOR SYMBOL LETTER S	[0A30 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F8, 0x0062 };
    uint32_t const ces[9] = { 0x0A30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_012)
{
    // 1F1F9 0021;	
    // (🇹) REGIONAL INDICATOR SYMBOL LETTER T	[0A31 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F9, 0x0021 };
    uint32_t const ces[9] = { 0x0A31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_013)
{
    // 1F1F9 003F;	
    // (🇹) REGIONAL INDICATOR SYMBOL LETTER T	[0A31 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F9, 0x003F };
    uint32_t const ces[9] = { 0x0A31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_014)
{
    // 1F1F9 0061;	
    // (🇹) REGIONAL INDICATOR SYMBOL LETTER T	[0A31 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F9, 0x0061 };
    uint32_t const ces[9] = { 0x0A31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_015)
{
    // 1F1F9 0041;	
    // (🇹) REGIONAL INDICATOR SYMBOL LETTER T	[0A31 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1F9, 0x0041 };
    uint32_t const ces[9] = { 0x0A31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_016)
{
    // 1F1F9 0062;	
    // (🇹) REGIONAL INDICATOR SYMBOL LETTER T	[0A31 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F9, 0x0062 };
    uint32_t const ces[9] = { 0x0A31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_017)
{
    // 1F1FA 0021;	
    // (🇺) REGIONAL INDICATOR SYMBOL LETTER U	[0A32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1FA, 0x0021 };
    uint32_t const ces[9] = { 0x0A32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_018)
{
    // 1F1FA 003F;	
    // (🇺) REGIONAL INDICATOR SYMBOL LETTER U	[0A32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1FA, 0x003F };
    uint32_t const ces[9] = { 0x0A32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_019)
{
    // 1F1FA 0061;	
    // (🇺) REGIONAL INDICATOR SYMBOL LETTER U	[0A32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1FA, 0x0061 };
    uint32_t const ces[9] = { 0x0A32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_020)
{
    // 1F1FA 0041;	
    // (🇺) REGIONAL INDICATOR SYMBOL LETTER U	[0A32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1FA, 0x0041 };
    uint32_t const ces[9] = { 0x0A32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_021)
{
    // 1F1FA 0062;	
    // (🇺) REGIONAL INDICATOR SYMBOL LETTER U	[0A32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1FA, 0x0062 };
    uint32_t const ces[9] = { 0x0A32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_022)
{
    // 1F1FB 0021;	
    // (🇻) REGIONAL INDICATOR SYMBOL LETTER V	[0A33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1FB, 0x0021 };
    uint32_t const ces[9] = { 0x0A33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_023)
{
    // 1F1FB 003F;	
    // (🇻) REGIONAL INDICATOR SYMBOL LETTER V	[0A33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1FB, 0x003F };
    uint32_t const ces[9] = { 0x0A33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_024)
{
    // 1F1FB 0061;	
    // (🇻) REGIONAL INDICATOR SYMBOL LETTER V	[0A33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1FB, 0x0061 };
    uint32_t const ces[9] = { 0x0A33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_025)
{
    // 1F1FB 0041;	
    // (🇻) REGIONAL INDICATOR SYMBOL LETTER V	[0A33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1FB, 0x0041 };
    uint32_t const ces[9] = { 0x0A33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_026)
{
    // 1F1FB 0062;	
    // (🇻) REGIONAL INDICATOR SYMBOL LETTER V	[0A33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1FB, 0x0062 };
    uint32_t const ces[9] = { 0x0A33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_027)
{
    // 1F1FC 0021;	
    // (🇼) REGIONAL INDICATOR SYMBOL LETTER W	[0A34 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1FC, 0x0021 };
    uint32_t const ces[9] = { 0x0A34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_028)
{
    // 1F1FC 003F;	
    // (🇼) REGIONAL INDICATOR SYMBOL LETTER W	[0A34 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1FC, 0x003F };
    uint32_t const ces[9] = { 0x0A34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_029)
{
    // 1F1FC 0061;	
    // (🇼) REGIONAL INDICATOR SYMBOL LETTER W	[0A34 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1FC, 0x0061 };
    uint32_t const ces[9] = { 0x0A34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_030)
{
    // 1F1FC 0041;	
    // (🇼) REGIONAL INDICATOR SYMBOL LETTER W	[0A34 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1FC, 0x0041 };
    uint32_t const ces[9] = { 0x0A34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_031)
{
    // 1F1FC 0062;	
    // (🇼) REGIONAL INDICATOR SYMBOL LETTER W	[0A34 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1FC, 0x0062 };
    uint32_t const ces[9] = { 0x0A34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_032)
{
    // 1F1FD 0021;	
    // (🇽) REGIONAL INDICATOR SYMBOL LETTER X	[0A35 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1FD, 0x0021 };
    uint32_t const ces[9] = { 0x0A35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_033)
{
    // 1F1FD 003F;	
    // (🇽) REGIONAL INDICATOR SYMBOL LETTER X	[0A35 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1FD, 0x003F };
    uint32_t const ces[9] = { 0x0A35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_034)
{
    // 1F1FD 0061;	
    // (🇽) REGIONAL INDICATOR SYMBOL LETTER X	[0A35 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1FD, 0x0061 };
    uint32_t const ces[9] = { 0x0A35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_035)
{
    // 1F1FD 0041;	
    // (🇽) REGIONAL INDICATOR SYMBOL LETTER X	[0A35 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1FD, 0x0041 };
    uint32_t const ces[9] = { 0x0A35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_036)
{
    // 1F1FD 0062;	
    // (🇽) REGIONAL INDICATOR SYMBOL LETTER X	[0A35 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1FD, 0x0062 };
    uint32_t const ces[9] = { 0x0A35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_037)
{
    // 1F1FE 0021;	
    // (🇾) REGIONAL INDICATOR SYMBOL LETTER Y	[0A36 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1FE, 0x0021 };
    uint32_t const ces[9] = { 0x0A36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_038)
{
    // 1F1FE 003F;	
    // (🇾) REGIONAL INDICATOR SYMBOL LETTER Y	[0A36 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1FE, 0x003F };
    uint32_t const ces[9] = { 0x0A36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_039)
{
    // 1F1FE 0061;	
    // (🇾) REGIONAL INDICATOR SYMBOL LETTER Y	[0A36 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1FE, 0x0061 };
    uint32_t const ces[9] = { 0x0A36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_040)
{
    // 1F1FE 0041;	
    // (🇾) REGIONAL INDICATOR SYMBOL LETTER Y	[0A36 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1FE, 0x0041 };
    uint32_t const ces[9] = { 0x0A36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_041)
{
    // 1F1FE 0062;	
    // (🇾) REGIONAL INDICATOR SYMBOL LETTER Y	[0A36 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1FE, 0x0062 };
    uint32_t const ces[9] = { 0x0A36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_042)
{
    // 1F1FF 0021;	
    // (🇿) REGIONAL INDICATOR SYMBOL LETTER Z	[0A37 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1FF, 0x0021 };
    uint32_t const ces[9] = { 0x0A37, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_043)
{
    // 1F1FF 003F;	
    // (🇿) REGIONAL INDICATOR SYMBOL LETTER Z	[0A37 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1FF, 0x003F };
    uint32_t const ces[9] = { 0x0A37, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_044)
{
    // 1F1FF 0061;	
    // (🇿) REGIONAL INDICATOR SYMBOL LETTER Z	[0A37 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1FF, 0x0061 };
    uint32_t const ces[9] = { 0x0A37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_045)
{
    // 1F1FF 0041;	
    // (🇿) REGIONAL INDICATOR SYMBOL LETTER Z	[0A37 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1FF, 0x0041 };
    uint32_t const ces[9] = { 0x0A37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_046)
{
    // 1F1FF 0062;	
    // (🇿) REGIONAL INDICATOR SYMBOL LETTER Z	[0A37 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1FF, 0x0062 };
    uint32_t const ces[9] = { 0x0A37, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_047)
{
    // 2700 0021;	
    // (✀) BLACK SAFETY SCISSORS	[0A38 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2700, 0x0021 };
    uint32_t const ces[9] = { 0x0A38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_048)
{
    // 2700 003F;	
    // (✀) BLACK SAFETY SCISSORS	[0A38 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2700, 0x003F };
    uint32_t const ces[9] = { 0x0A38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_049)
{
    // 2700 0061;	
    // (✀) BLACK SAFETY SCISSORS	[0A38 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2700, 0x0061 };
    uint32_t const ces[9] = { 0x0A38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_050)
{
    // 2700 0041;	
    // (✀) BLACK SAFETY SCISSORS	[0A38 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2700, 0x0041 };
    uint32_t const ces[9] = { 0x0A38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_051)
{
    // 2700 0062;	
    // (✀) BLACK SAFETY SCISSORS	[0A38 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2700, 0x0062 };
    uint32_t const ces[9] = { 0x0A38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_052)
{
    // 2701 0021;	
    // (✁) UPPER BLADE SCISSORS	[0A39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2701, 0x0021 };
    uint32_t const ces[9] = { 0x0A39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_053)
{
    // 2701 003F;	
    // (✁) UPPER BLADE SCISSORS	[0A39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2701, 0x003F };
    uint32_t const ces[9] = { 0x0A39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_054)
{
    // 2701 0061;	
    // (✁) UPPER BLADE SCISSORS	[0A39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2701, 0x0061 };
    uint32_t const ces[9] = { 0x0A39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_055)
{
    // 2701 0041;	
    // (✁) UPPER BLADE SCISSORS	[0A39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2701, 0x0041 };
    uint32_t const ces[9] = { 0x0A39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_056)
{
    // 2701 0062;	
    // (✁) UPPER BLADE SCISSORS	[0A39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2701, 0x0062 };
    uint32_t const ces[9] = { 0x0A39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_057)
{
    // 2702 0021;	
    // (✂) BLACK SCISSORS	[0A3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2702, 0x0021 };
    uint32_t const ces[9] = { 0x0A3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_058)
{
    // 2702 003F;	
    // (✂) BLACK SCISSORS	[0A3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2702, 0x003F };
    uint32_t const ces[9] = { 0x0A3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_059)
{
    // 2702 0061;	
    // (✂) BLACK SCISSORS	[0A3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2702, 0x0061 };
    uint32_t const ces[9] = { 0x0A3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_060)
{
    // 2702 0041;	
    // (✂) BLACK SCISSORS	[0A3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2702, 0x0041 };
    uint32_t const ces[9] = { 0x0A3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_061)
{
    // 2702 0062;	
    // (✂) BLACK SCISSORS	[0A3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2702, 0x0062 };
    uint32_t const ces[9] = { 0x0A3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_062)
{
    // 2703 0021;	
    // (✃) LOWER BLADE SCISSORS	[0A3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2703, 0x0021 };
    uint32_t const ces[9] = { 0x0A3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_063)
{
    // 2703 003F;	
    // (✃) LOWER BLADE SCISSORS	[0A3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2703, 0x003F };
    uint32_t const ces[9] = { 0x0A3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_064)
{
    // 2703 0061;	
    // (✃) LOWER BLADE SCISSORS	[0A3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2703, 0x0061 };
    uint32_t const ces[9] = { 0x0A3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_065)
{
    // 2703 0041;	
    // (✃) LOWER BLADE SCISSORS	[0A3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2703, 0x0041 };
    uint32_t const ces[9] = { 0x0A3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_066)
{
    // 2703 0062;	
    // (✃) LOWER BLADE SCISSORS	[0A3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2703, 0x0062 };
    uint32_t const ces[9] = { 0x0A3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_067)
{
    // 2704 0021;	
    // (✄) WHITE SCISSORS	[0A3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2704, 0x0021 };
    uint32_t const ces[9] = { 0x0A3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_068)
{
    // 2704 003F;	
    // (✄) WHITE SCISSORS	[0A3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2704, 0x003F };
    uint32_t const ces[9] = { 0x0A3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_069)
{
    // 2704 0061;	
    // (✄) WHITE SCISSORS	[0A3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2704, 0x0061 };
    uint32_t const ces[9] = { 0x0A3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_070)
{
    // 2704 0041;	
    // (✄) WHITE SCISSORS	[0A3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2704, 0x0041 };
    uint32_t const ces[9] = { 0x0A3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_071)
{
    // 2704 0062;	
    // (✄) WHITE SCISSORS	[0A3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2704, 0x0062 };
    uint32_t const ces[9] = { 0x0A3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_072)
{
    // 2705 0021;	
    // (✅) WHITE HEAVY CHECK MARK	[0A3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2705, 0x0021 };
    uint32_t const ces[9] = { 0x0A3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_073)
{
    // 2705 003F;	
    // (✅) WHITE HEAVY CHECK MARK	[0A3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2705, 0x003F };
    uint32_t const ces[9] = { 0x0A3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_074)
{
    // 2705 0061;	
    // (✅) WHITE HEAVY CHECK MARK	[0A3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2705, 0x0061 };
    uint32_t const ces[9] = { 0x0A3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_075)
{
    // 2705 0041;	
    // (✅) WHITE HEAVY CHECK MARK	[0A3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2705, 0x0041 };
    uint32_t const ces[9] = { 0x0A3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_076)
{
    // 2705 0062;	
    // (✅) WHITE HEAVY CHECK MARK	[0A3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2705, 0x0062 };
    uint32_t const ces[9] = { 0x0A3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_077)
{
    // 2706 0021;	
    // (✆) TELEPHONE LOCATION SIGN	[0A3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2706, 0x0021 };
    uint32_t const ces[9] = { 0x0A3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_078)
{
    // 2706 003F;	
    // (✆) TELEPHONE LOCATION SIGN	[0A3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2706, 0x003F };
    uint32_t const ces[9] = { 0x0A3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_079)
{
    // 2706 0061;	
    // (✆) TELEPHONE LOCATION SIGN	[0A3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2706, 0x0061 };
    uint32_t const ces[9] = { 0x0A3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_080)
{
    // 2706 0041;	
    // (✆) TELEPHONE LOCATION SIGN	[0A3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2706, 0x0041 };
    uint32_t const ces[9] = { 0x0A3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_081)
{
    // 2706 0062;	
    // (✆) TELEPHONE LOCATION SIGN	[0A3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2706, 0x0062 };
    uint32_t const ces[9] = { 0x0A3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_082)
{
    // 2707 0021;	
    // (✇) TAPE DRIVE	[0A3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2707, 0x0021 };
    uint32_t const ces[9] = { 0x0A3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_083)
{
    // 2707 003F;	
    // (✇) TAPE DRIVE	[0A3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2707, 0x003F };
    uint32_t const ces[9] = { 0x0A3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_084)
{
    // 2707 0061;	
    // (✇) TAPE DRIVE	[0A3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2707, 0x0061 };
    uint32_t const ces[9] = { 0x0A3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_085)
{
    // 2707 0041;	
    // (✇) TAPE DRIVE	[0A3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2707, 0x0041 };
    uint32_t const ces[9] = { 0x0A3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_086)
{
    // 2707 0062;	
    // (✇) TAPE DRIVE	[0A3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2707, 0x0062 };
    uint32_t const ces[9] = { 0x0A3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_087)
{
    // 2708 0021;	
    // (✈) AIRPLANE	[0A40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2708, 0x0021 };
    uint32_t const ces[9] = { 0x0A40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_088)
{
    // 2708 003F;	
    // (✈) AIRPLANE	[0A40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2708, 0x003F };
    uint32_t const ces[9] = { 0x0A40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_089)
{
    // 2708 0061;	
    // (✈) AIRPLANE	[0A40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2708, 0x0061 };
    uint32_t const ces[9] = { 0x0A40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_090)
{
    // 2708 0041;	
    // (✈) AIRPLANE	[0A40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2708, 0x0041 };
    uint32_t const ces[9] = { 0x0A40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_091)
{
    // 2708 0062;	
    // (✈) AIRPLANE	[0A40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2708, 0x0062 };
    uint32_t const ces[9] = { 0x0A40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_092)
{
    // 2709 0021;	
    // (✉) ENVELOPE	[0A41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2709, 0x0021 };
    uint32_t const ces[9] = { 0x0A41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_093)
{
    // 2709 003F;	
    // (✉) ENVELOPE	[0A41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2709, 0x003F };
    uint32_t const ces[9] = { 0x0A41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_094)
{
    // 2709 0061;	
    // (✉) ENVELOPE	[0A41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2709, 0x0061 };
    uint32_t const ces[9] = { 0x0A41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_095)
{
    // 2709 0041;	
    // (✉) ENVELOPE	[0A41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2709, 0x0041 };
    uint32_t const ces[9] = { 0x0A41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_096)
{
    // 2709 0062;	
    // (✉) ENVELOPE	[0A41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2709, 0x0062 };
    uint32_t const ces[9] = { 0x0A41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_097)
{
    // 270A 0021;	
    // (✊) RAISED FIST	[0A42 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x270A, 0x0021 };
    uint32_t const ces[9] = { 0x0A42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_098)
{
    // 270A 003F;	
    // (✊) RAISED FIST	[0A42 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x270A, 0x003F };
    uint32_t const ces[9] = { 0x0A42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_099)
{
    // 270A 0061;	
    // (✊) RAISED FIST	[0A42 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x270A, 0x0061 };
    uint32_t const ces[9] = { 0x0A42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_100)
{
    // 270A 0041;	
    // (✊) RAISED FIST	[0A42 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x270A, 0x0041 };
    uint32_t const ces[9] = { 0x0A42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_101)
{
    // 270A 0062;	
    // (✊) RAISED FIST	[0A42 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x270A, 0x0062 };
    uint32_t const ces[9] = { 0x0A42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_102)
{
    // 270B 0021;	
    // (✋) RAISED HAND	[0A43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x270B, 0x0021 };
    uint32_t const ces[9] = { 0x0A43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_103)
{
    // 270B 003F;	
    // (✋) RAISED HAND	[0A43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x270B, 0x003F };
    uint32_t const ces[9] = { 0x0A43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_104)
{
    // 270B 0061;	
    // (✋) RAISED HAND	[0A43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x270B, 0x0061 };
    uint32_t const ces[9] = { 0x0A43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_105)
{
    // 270B 0041;	
    // (✋) RAISED HAND	[0A43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x270B, 0x0041 };
    uint32_t const ces[9] = { 0x0A43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_106)
{
    // 270B 0062;	
    // (✋) RAISED HAND	[0A43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x270B, 0x0062 };
    uint32_t const ces[9] = { 0x0A43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_107)
{
    // 270C 0021;	
    // (✌) VICTORY HAND	[0A44 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x270C, 0x0021 };
    uint32_t const ces[9] = { 0x0A44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_108)
{
    // 270C 003F;	
    // (✌) VICTORY HAND	[0A44 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x270C, 0x003F };
    uint32_t const ces[9] = { 0x0A44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_109)
{
    // 270C 0061;	
    // (✌) VICTORY HAND	[0A44 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x270C, 0x0061 };
    uint32_t const ces[9] = { 0x0A44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_110)
{
    // 270C 0041;	
    // (✌) VICTORY HAND	[0A44 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x270C, 0x0041 };
    uint32_t const ces[9] = { 0x0A44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_111)
{
    // 270C 0062;	
    // (✌) VICTORY HAND	[0A44 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x270C, 0x0062 };
    uint32_t const ces[9] = { 0x0A44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_112)
{
    // 270D 0021;	
    // (✍) WRITING HAND	[0A45 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x270D, 0x0021 };
    uint32_t const ces[9] = { 0x0A45, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_113)
{
    // 270D 003F;	
    // (✍) WRITING HAND	[0A45 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x270D, 0x003F };
    uint32_t const ces[9] = { 0x0A45, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_114)
{
    // 270D 0061;	
    // (✍) WRITING HAND	[0A45 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x270D, 0x0061 };
    uint32_t const ces[9] = { 0x0A45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_115)
{
    // 270D 0041;	
    // (✍) WRITING HAND	[0A45 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x270D, 0x0041 };
    uint32_t const ces[9] = { 0x0A45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_116)
{
    // 270D 0062;	
    // (✍) WRITING HAND	[0A45 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x270D, 0x0062 };
    uint32_t const ces[9] = { 0x0A45, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_117)
{
    // 270E 0021;	
    // (✎) LOWER RIGHT PENCIL	[0A46 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x270E, 0x0021 };
    uint32_t const ces[9] = { 0x0A46, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_118)
{
    // 270E 003F;	
    // (✎) LOWER RIGHT PENCIL	[0A46 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x270E, 0x003F };
    uint32_t const ces[9] = { 0x0A46, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_119)
{
    // 270E 0061;	
    // (✎) LOWER RIGHT PENCIL	[0A46 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x270E, 0x0061 };
    uint32_t const ces[9] = { 0x0A46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_120)
{
    // 270E 0041;	
    // (✎) LOWER RIGHT PENCIL	[0A46 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x270E, 0x0041 };
    uint32_t const ces[9] = { 0x0A46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_121)
{
    // 270E 0062;	
    // (✎) LOWER RIGHT PENCIL	[0A46 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x270E, 0x0062 };
    uint32_t const ces[9] = { 0x0A46, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_122)
{
    // 270F 0021;	
    // (✏) PENCIL	[0A47 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x270F, 0x0021 };
    uint32_t const ces[9] = { 0x0A47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_123)
{
    // 270F 003F;	
    // (✏) PENCIL	[0A47 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x270F, 0x003F };
    uint32_t const ces[9] = { 0x0A47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_124)
{
    // 270F 0061;	
    // (✏) PENCIL	[0A47 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x270F, 0x0061 };
    uint32_t const ces[9] = { 0x0A47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_125)
{
    // 270F 0041;	
    // (✏) PENCIL	[0A47 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x270F, 0x0041 };
    uint32_t const ces[9] = { 0x0A47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_126)
{
    // 270F 0062;	
    // (✏) PENCIL	[0A47 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x270F, 0x0062 };
    uint32_t const ces[9] = { 0x0A47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_127)
{
    // 2710 0021;	
    // (✐) UPPER RIGHT PENCIL	[0A48 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2710, 0x0021 };
    uint32_t const ces[9] = { 0x0A48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_128)
{
    // 2710 003F;	
    // (✐) UPPER RIGHT PENCIL	[0A48 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2710, 0x003F };
    uint32_t const ces[9] = { 0x0A48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_129)
{
    // 2710 0061;	
    // (✐) UPPER RIGHT PENCIL	[0A48 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2710, 0x0061 };
    uint32_t const ces[9] = { 0x0A48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_130)
{
    // 2710 0041;	
    // (✐) UPPER RIGHT PENCIL	[0A48 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2710, 0x0041 };
    uint32_t const ces[9] = { 0x0A48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_131)
{
    // 2710 0062;	
    // (✐) UPPER RIGHT PENCIL	[0A48 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2710, 0x0062 };
    uint32_t const ces[9] = { 0x0A48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_132)
{
    // 2711 0021;	
    // (✑) WHITE NIB	[0A49 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2711, 0x0021 };
    uint32_t const ces[9] = { 0x0A49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_133)
{
    // 2711 003F;	
    // (✑) WHITE NIB	[0A49 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2711, 0x003F };
    uint32_t const ces[9] = { 0x0A49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_134)
{
    // 2711 0061;	
    // (✑) WHITE NIB	[0A49 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2711, 0x0061 };
    uint32_t const ces[9] = { 0x0A49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_135)
{
    // 2711 0041;	
    // (✑) WHITE NIB	[0A49 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2711, 0x0041 };
    uint32_t const ces[9] = { 0x0A49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_136)
{
    // 2711 0062;	
    // (✑) WHITE NIB	[0A49 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2711, 0x0062 };
    uint32_t const ces[9] = { 0x0A49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_137)
{
    // 2712 0021;	
    // (✒) BLACK NIB	[0A4A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2712, 0x0021 };
    uint32_t const ces[9] = { 0x0A4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_138)
{
    // 2712 003F;	
    // (✒) BLACK NIB	[0A4A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2712, 0x003F };
    uint32_t const ces[9] = { 0x0A4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_139)
{
    // 2712 0061;	
    // (✒) BLACK NIB	[0A4A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2712, 0x0061 };
    uint32_t const ces[9] = { 0x0A4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_140)
{
    // 2712 0041;	
    // (✒) BLACK NIB	[0A4A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2712, 0x0041 };
    uint32_t const ces[9] = { 0x0A4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_141)
{
    // 2712 0062;	
    // (✒) BLACK NIB	[0A4A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2712, 0x0062 };
    uint32_t const ces[9] = { 0x0A4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_142)
{
    // 2713 0021;	
    // (✓) CHECK MARK	[0A4B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2713, 0x0021 };
    uint32_t const ces[9] = { 0x0A4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_143)
{
    // 2713 003F;	
    // (✓) CHECK MARK	[0A4B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2713, 0x003F };
    uint32_t const ces[9] = { 0x0A4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_144)
{
    // 2713 0061;	
    // (✓) CHECK MARK	[0A4B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2713, 0x0061 };
    uint32_t const ces[9] = { 0x0A4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_145)
{
    // 2713 0041;	
    // (✓) CHECK MARK	[0A4B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2713, 0x0041 };
    uint32_t const ces[9] = { 0x0A4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_146)
{
    // 2713 0062;	
    // (✓) CHECK MARK	[0A4B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2713, 0x0062 };
    uint32_t const ces[9] = { 0x0A4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_147)
{
    // 2714 0021;	
    // (✔) HEAVY CHECK MARK	[0A4C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2714, 0x0021 };
    uint32_t const ces[9] = { 0x0A4C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_148)
{
    // 2714 003F;	
    // (✔) HEAVY CHECK MARK	[0A4C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2714, 0x003F };
    uint32_t const ces[9] = { 0x0A4C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_149)
{
    // 2714 0061;	
    // (✔) HEAVY CHECK MARK	[0A4C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2714, 0x0061 };
    uint32_t const ces[9] = { 0x0A4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_150)
{
    // 2714 0041;	
    // (✔) HEAVY CHECK MARK	[0A4C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2714, 0x0041 };
    uint32_t const ces[9] = { 0x0A4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_151)
{
    // 2714 0062;	
    // (✔) HEAVY CHECK MARK	[0A4C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2714, 0x0062 };
    uint32_t const ces[9] = { 0x0A4C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_152)
{
    // 2715 0021;	
    // (✕) MULTIPLICATION X	[0A4D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2715, 0x0021 };
    uint32_t const ces[9] = { 0x0A4D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_153)
{
    // 2715 003F;	
    // (✕) MULTIPLICATION X	[0A4D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2715, 0x003F };
    uint32_t const ces[9] = { 0x0A4D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_154)
{
    // 2715 0061;	
    // (✕) MULTIPLICATION X	[0A4D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2715, 0x0061 };
    uint32_t const ces[9] = { 0x0A4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_155)
{
    // 2715 0041;	
    // (✕) MULTIPLICATION X	[0A4D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2715, 0x0041 };
    uint32_t const ces[9] = { 0x0A4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_156)
{
    // 2715 0062;	
    // (✕) MULTIPLICATION X	[0A4D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2715, 0x0062 };
    uint32_t const ces[9] = { 0x0A4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_157)
{
    // 2716 0021;	
    // (✖) HEAVY MULTIPLICATION X	[0A4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2716, 0x0021 };
    uint32_t const ces[9] = { 0x0A4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_158)
{
    // 2716 003F;	
    // (✖) HEAVY MULTIPLICATION X	[0A4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2716, 0x003F };
    uint32_t const ces[9] = { 0x0A4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_159)
{
    // 2716 0061;	
    // (✖) HEAVY MULTIPLICATION X	[0A4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2716, 0x0061 };
    uint32_t const ces[9] = { 0x0A4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_160)
{
    // 2716 0041;	
    // (✖) HEAVY MULTIPLICATION X	[0A4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2716, 0x0041 };
    uint32_t const ces[9] = { 0x0A4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_161)
{
    // 2716 0062;	
    // (✖) HEAVY MULTIPLICATION X	[0A4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2716, 0x0062 };
    uint32_t const ces[9] = { 0x0A4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_162)
{
    // 2717 0021;	
    // (✗) BALLOT X	[0A4F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2717, 0x0021 };
    uint32_t const ces[9] = { 0x0A4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_163)
{
    // 2717 003F;	
    // (✗) BALLOT X	[0A4F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2717, 0x003F };
    uint32_t const ces[9] = { 0x0A4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_164)
{
    // 2717 0061;	
    // (✗) BALLOT X	[0A4F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2717, 0x0061 };
    uint32_t const ces[9] = { 0x0A4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_165)
{
    // 2717 0041;	
    // (✗) BALLOT X	[0A4F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2717, 0x0041 };
    uint32_t const ces[9] = { 0x0A4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_166)
{
    // 2717 0062;	
    // (✗) BALLOT X	[0A4F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2717, 0x0062 };
    uint32_t const ces[9] = { 0x0A4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_167)
{
    // 2718 0021;	
    // (✘) HEAVY BALLOT X	[0A50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2718, 0x0021 };
    uint32_t const ces[9] = { 0x0A50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_168)
{
    // 2718 003F;	
    // (✘) HEAVY BALLOT X	[0A50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2718, 0x003F };
    uint32_t const ces[9] = { 0x0A50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_169)
{
    // 2718 0061;	
    // (✘) HEAVY BALLOT X	[0A50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2718, 0x0061 };
    uint32_t const ces[9] = { 0x0A50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_170)
{
    // 2718 0041;	
    // (✘) HEAVY BALLOT X	[0A50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2718, 0x0041 };
    uint32_t const ces[9] = { 0x0A50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_171)
{
    // 2718 0062;	
    // (✘) HEAVY BALLOT X	[0A50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2718, 0x0062 };
    uint32_t const ces[9] = { 0x0A50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_172)
{
    // 2719 0021;	
    // (✙) OUTLINED GREEK CROSS	[0A51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2719, 0x0021 };
    uint32_t const ces[9] = { 0x0A51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_173)
{
    // 2719 003F;	
    // (✙) OUTLINED GREEK CROSS	[0A51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2719, 0x003F };
    uint32_t const ces[9] = { 0x0A51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_174)
{
    // 2719 0061;	
    // (✙) OUTLINED GREEK CROSS	[0A51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2719, 0x0061 };
    uint32_t const ces[9] = { 0x0A51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_175)
{
    // 2719 0041;	
    // (✙) OUTLINED GREEK CROSS	[0A51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2719, 0x0041 };
    uint32_t const ces[9] = { 0x0A51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_176)
{
    // 2719 0062;	
    // (✙) OUTLINED GREEK CROSS	[0A51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2719, 0x0062 };
    uint32_t const ces[9] = { 0x0A51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_177)
{
    // 271A 0021;	
    // (✚) HEAVY GREEK CROSS	[0A52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x271A, 0x0021 };
    uint32_t const ces[9] = { 0x0A52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_178)
{
    // 271A 003F;	
    // (✚) HEAVY GREEK CROSS	[0A52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x271A, 0x003F };
    uint32_t const ces[9] = { 0x0A52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_179)
{
    // 271A 0061;	
    // (✚) HEAVY GREEK CROSS	[0A52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x271A, 0x0061 };
    uint32_t const ces[9] = { 0x0A52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_180)
{
    // 271A 0041;	
    // (✚) HEAVY GREEK CROSS	[0A52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x271A, 0x0041 };
    uint32_t const ces[9] = { 0x0A52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_181)
{
    // 271A 0062;	
    // (✚) HEAVY GREEK CROSS	[0A52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x271A, 0x0062 };
    uint32_t const ces[9] = { 0x0A52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_182)
{
    // 271B 0021;	
    // (✛) OPEN CENTRE CROSS	[0A53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x271B, 0x0021 };
    uint32_t const ces[9] = { 0x0A53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_183)
{
    // 271B 003F;	
    // (✛) OPEN CENTRE CROSS	[0A53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x271B, 0x003F };
    uint32_t const ces[9] = { 0x0A53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_184)
{
    // 271B 0061;	
    // (✛) OPEN CENTRE CROSS	[0A53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x271B, 0x0061 };
    uint32_t const ces[9] = { 0x0A53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_185)
{
    // 271B 0041;	
    // (✛) OPEN CENTRE CROSS	[0A53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x271B, 0x0041 };
    uint32_t const ces[9] = { 0x0A53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_186)
{
    // 271B 0062;	
    // (✛) OPEN CENTRE CROSS	[0A53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x271B, 0x0062 };
    uint32_t const ces[9] = { 0x0A53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_187)
{
    // 271C 0021;	
    // (✜) HEAVY OPEN CENTRE CROSS	[0A54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x271C, 0x0021 };
    uint32_t const ces[9] = { 0x0A54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_188)
{
    // 271C 003F;	
    // (✜) HEAVY OPEN CENTRE CROSS	[0A54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x271C, 0x003F };
    uint32_t const ces[9] = { 0x0A54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_189)
{
    // 271C 0061;	
    // (✜) HEAVY OPEN CENTRE CROSS	[0A54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x271C, 0x0061 };
    uint32_t const ces[9] = { 0x0A54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_190)
{
    // 271C 0041;	
    // (✜) HEAVY OPEN CENTRE CROSS	[0A54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x271C, 0x0041 };
    uint32_t const ces[9] = { 0x0A54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_191)
{
    // 271C 0062;	
    // (✜) HEAVY OPEN CENTRE CROSS	[0A54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x271C, 0x0062 };
    uint32_t const ces[9] = { 0x0A54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_192)
{
    // 271D 0021;	
    // (✝) LATIN CROSS	[0A55 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x271D, 0x0021 };
    uint32_t const ces[9] = { 0x0A55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_193)
{
    // 271D 003F;	
    // (✝) LATIN CROSS	[0A55 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x271D, 0x003F };
    uint32_t const ces[9] = { 0x0A55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_194)
{
    // 271D 0061;	
    // (✝) LATIN CROSS	[0A55 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x271D, 0x0061 };
    uint32_t const ces[9] = { 0x0A55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_195)
{
    // 271D 0041;	
    // (✝) LATIN CROSS	[0A55 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x271D, 0x0041 };
    uint32_t const ces[9] = { 0x0A55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_196)
{
    // 271D 0062;	
    // (✝) LATIN CROSS	[0A55 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x271D, 0x0062 };
    uint32_t const ces[9] = { 0x0A55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_197)
{
    // 271E 0021;	
    // (✞) SHADOWED WHITE LATIN CROSS	[0A56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x271E, 0x0021 };
    uint32_t const ces[9] = { 0x0A56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_198)
{
    // 271E 003F;	
    // (✞) SHADOWED WHITE LATIN CROSS	[0A56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x271E, 0x003F };
    uint32_t const ces[9] = { 0x0A56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_199)
{
    // 271E 0061;	
    // (✞) SHADOWED WHITE LATIN CROSS	[0A56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x271E, 0x0061 };
    uint32_t const ces[9] = { 0x0A56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_200)
{
    // 271E 0041;	
    // (✞) SHADOWED WHITE LATIN CROSS	[0A56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x271E, 0x0041 };
    uint32_t const ces[9] = { 0x0A56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_201)
{
    // 271E 0062;	
    // (✞) SHADOWED WHITE LATIN CROSS	[0A56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x271E, 0x0062 };
    uint32_t const ces[9] = { 0x0A56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_202)
{
    // 271F 0021;	
    // (✟) OUTLINED LATIN CROSS	[0A57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x271F, 0x0021 };
    uint32_t const ces[9] = { 0x0A57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_203)
{
    // 271F 003F;	
    // (✟) OUTLINED LATIN CROSS	[0A57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x271F, 0x003F };
    uint32_t const ces[9] = { 0x0A57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_204)
{
    // 271F 0061;	
    // (✟) OUTLINED LATIN CROSS	[0A57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x271F, 0x0061 };
    uint32_t const ces[9] = { 0x0A57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_205)
{
    // 271F 0041;	
    // (✟) OUTLINED LATIN CROSS	[0A57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x271F, 0x0041 };
    uint32_t const ces[9] = { 0x0A57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_206)
{
    // 271F 0062;	
    // (✟) OUTLINED LATIN CROSS	[0A57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x271F, 0x0062 };
    uint32_t const ces[9] = { 0x0A57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_207)
{
    // 2720 0021;	
    // (✠) MALTESE CROSS	[0A58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2720, 0x0021 };
    uint32_t const ces[9] = { 0x0A58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_208)
{
    // 2720 003F;	
    // (✠) MALTESE CROSS	[0A58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2720, 0x003F };
    uint32_t const ces[9] = { 0x0A58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_209)
{
    // 2720 0061;	
    // (✠) MALTESE CROSS	[0A58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2720, 0x0061 };
    uint32_t const ces[9] = { 0x0A58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_210)
{
    // 2720 0041;	
    // (✠) MALTESE CROSS	[0A58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2720, 0x0041 };
    uint32_t const ces[9] = { 0x0A58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_211)
{
    // 2720 0062;	
    // (✠) MALTESE CROSS	[0A58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2720, 0x0062 };
    uint32_t const ces[9] = { 0x0A58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_212)
{
    // 2721 0021;	
    // (✡) STAR OF DAVID	[0A59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2721, 0x0021 };
    uint32_t const ces[9] = { 0x0A59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_213)
{
    // 2721 003F;	
    // (✡) STAR OF DAVID	[0A59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2721, 0x003F };
    uint32_t const ces[9] = { 0x0A59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_214)
{
    // 2721 0061;	
    // (✡) STAR OF DAVID	[0A59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2721, 0x0061 };
    uint32_t const ces[9] = { 0x0A59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_215)
{
    // 2721 0041;	
    // (✡) STAR OF DAVID	[0A59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2721, 0x0041 };
    uint32_t const ces[9] = { 0x0A59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_216)
{
    // 2721 0062;	
    // (✡) STAR OF DAVID	[0A59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2721, 0x0062 };
    uint32_t const ces[9] = { 0x0A59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_217)
{
    // 2722 0021;	
    // (✢) FOUR TEARDROP-SPOKED ASTERISK	[0A5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2722, 0x0021 };
    uint32_t const ces[9] = { 0x0A5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_218)
{
    // 2722 003F;	
    // (✢) FOUR TEARDROP-SPOKED ASTERISK	[0A5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2722, 0x003F };
    uint32_t const ces[9] = { 0x0A5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_219)
{
    // 2722 0061;	
    // (✢) FOUR TEARDROP-SPOKED ASTERISK	[0A5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2722, 0x0061 };
    uint32_t const ces[9] = { 0x0A5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_220)
{
    // 2722 0041;	
    // (✢) FOUR TEARDROP-SPOKED ASTERISK	[0A5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2722, 0x0041 };
    uint32_t const ces[9] = { 0x0A5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_221)
{
    // 2722 0062;	
    // (✢) FOUR TEARDROP-SPOKED ASTERISK	[0A5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2722, 0x0062 };
    uint32_t const ces[9] = { 0x0A5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_222)
{
    // 2723 0021;	
    // (✣) FOUR BALLOON-SPOKED ASTERISK	[0A5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2723, 0x0021 };
    uint32_t const ces[9] = { 0x0A5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_223)
{
    // 2723 003F;	
    // (✣) FOUR BALLOON-SPOKED ASTERISK	[0A5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2723, 0x003F };
    uint32_t const ces[9] = { 0x0A5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_224)
{
    // 2723 0061;	
    // (✣) FOUR BALLOON-SPOKED ASTERISK	[0A5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2723, 0x0061 };
    uint32_t const ces[9] = { 0x0A5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_225)
{
    // 2723 0041;	
    // (✣) FOUR BALLOON-SPOKED ASTERISK	[0A5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2723, 0x0041 };
    uint32_t const ces[9] = { 0x0A5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_226)
{
    // 2723 0062;	
    // (✣) FOUR BALLOON-SPOKED ASTERISK	[0A5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2723, 0x0062 };
    uint32_t const ces[9] = { 0x0A5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_227)
{
    // 2724 0021;	
    // (✤) HEAVY FOUR BALLOON-SPOKED ASTERISK	[0A5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2724, 0x0021 };
    uint32_t const ces[9] = { 0x0A5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_228)
{
    // 2724 003F;	
    // (✤) HEAVY FOUR BALLOON-SPOKED ASTERISK	[0A5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2724, 0x003F };
    uint32_t const ces[9] = { 0x0A5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_229)
{
    // 2724 0061;	
    // (✤) HEAVY FOUR BALLOON-SPOKED ASTERISK	[0A5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2724, 0x0061 };
    uint32_t const ces[9] = { 0x0A5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_230)
{
    // 2724 0041;	
    // (✤) HEAVY FOUR BALLOON-SPOKED ASTERISK	[0A5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2724, 0x0041 };
    uint32_t const ces[9] = { 0x0A5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_231)
{
    // 2724 0062;	
    // (✤) HEAVY FOUR BALLOON-SPOKED ASTERISK	[0A5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2724, 0x0062 };
    uint32_t const ces[9] = { 0x0A5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_232)
{
    // 2725 0021;	
    // (✥) FOUR CLUB-SPOKED ASTERISK	[0A5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2725, 0x0021 };
    uint32_t const ces[9] = { 0x0A5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_233)
{
    // 2725 003F;	
    // (✥) FOUR CLUB-SPOKED ASTERISK	[0A5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2725, 0x003F };
    uint32_t const ces[9] = { 0x0A5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_234)
{
    // 2725 0061;	
    // (✥) FOUR CLUB-SPOKED ASTERISK	[0A5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2725, 0x0061 };
    uint32_t const ces[9] = { 0x0A5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_235)
{
    // 2725 0041;	
    // (✥) FOUR CLUB-SPOKED ASTERISK	[0A5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2725, 0x0041 };
    uint32_t const ces[9] = { 0x0A5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_236)
{
    // 2725 0062;	
    // (✥) FOUR CLUB-SPOKED ASTERISK	[0A5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2725, 0x0062 };
    uint32_t const ces[9] = { 0x0A5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_237)
{
    // 2726 0021;	
    // (✦) BLACK FOUR POINTED STAR	[0A5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2726, 0x0021 };
    uint32_t const ces[9] = { 0x0A5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_238)
{
    // 2726 003F;	
    // (✦) BLACK FOUR POINTED STAR	[0A5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2726, 0x003F };
    uint32_t const ces[9] = { 0x0A5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_239)
{
    // 2726 0061;	
    // (✦) BLACK FOUR POINTED STAR	[0A5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2726, 0x0061 };
    uint32_t const ces[9] = { 0x0A5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_240)
{
    // 2726 0041;	
    // (✦) BLACK FOUR POINTED STAR	[0A5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2726, 0x0041 };
    uint32_t const ces[9] = { 0x0A5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_241)
{
    // 2726 0062;	
    // (✦) BLACK FOUR POINTED STAR	[0A5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2726, 0x0062 };
    uint32_t const ces[9] = { 0x0A5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_242)
{
    // 2727 0021;	
    // (✧) WHITE FOUR POINTED STAR	[0A5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2727, 0x0021 };
    uint32_t const ces[9] = { 0x0A5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_243)
{
    // 2727 003F;	
    // (✧) WHITE FOUR POINTED STAR	[0A5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2727, 0x003F };
    uint32_t const ces[9] = { 0x0A5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_244)
{
    // 2727 0061;	
    // (✧) WHITE FOUR POINTED STAR	[0A5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2727, 0x0061 };
    uint32_t const ces[9] = { 0x0A5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_245)
{
    // 2727 0041;	
    // (✧) WHITE FOUR POINTED STAR	[0A5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2727, 0x0041 };
    uint32_t const ces[9] = { 0x0A5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_246)
{
    // 2727 0062;	
    // (✧) WHITE FOUR POINTED STAR	[0A5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2727, 0x0062 };
    uint32_t const ces[9] = { 0x0A5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_247)
{
    // 2728 0021;	
    // (✨) SPARKLES	[0A60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2728, 0x0021 };
    uint32_t const ces[9] = { 0x0A60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_248)
{
    // 2728 003F;	
    // (✨) SPARKLES	[0A60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2728, 0x003F };
    uint32_t const ces[9] = { 0x0A60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_249)
{
    // 2728 0061;	
    // (✨) SPARKLES	[0A60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2728, 0x0061 };
    uint32_t const ces[9] = { 0x0A60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_250)
{
    // 2728 0041;	
    // (✨) SPARKLES	[0A60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2728, 0x0041 };
    uint32_t const ces[9] = { 0x0A60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_251)
{
    // 2728 0062;	
    // (✨) SPARKLES	[0A60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2728, 0x0062 };
    uint32_t const ces[9] = { 0x0A60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_252)
{
    // 2729 0021;	
    // (✩) STRESS OUTLINED WHITE STAR	[0A61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2729, 0x0021 };
    uint32_t const ces[9] = { 0x0A61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_253)
{
    // 2729 003F;	
    // (✩) STRESS OUTLINED WHITE STAR	[0A61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2729, 0x003F };
    uint32_t const ces[9] = { 0x0A61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_254)
{
    // 2729 0061;	
    // (✩) STRESS OUTLINED WHITE STAR	[0A61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2729, 0x0061 };
    uint32_t const ces[9] = { 0x0A61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_255)
{
    // 2729 0041;	
    // (✩) STRESS OUTLINED WHITE STAR	[0A61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2729, 0x0041 };
    uint32_t const ces[9] = { 0x0A61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_256)
{
    // 2729 0062;	
    // (✩) STRESS OUTLINED WHITE STAR	[0A61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2729, 0x0062 };
    uint32_t const ces[9] = { 0x0A61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_257)
{
    // 272A 0021;	
    // (✪) CIRCLED WHITE STAR	[0A62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x272A, 0x0021 };
    uint32_t const ces[9] = { 0x0A62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_258)
{
    // 272A 003F;	
    // (✪) CIRCLED WHITE STAR	[0A62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x272A, 0x003F };
    uint32_t const ces[9] = { 0x0A62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_259)
{
    // 272A 0061;	
    // (✪) CIRCLED WHITE STAR	[0A62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x272A, 0x0061 };
    uint32_t const ces[9] = { 0x0A62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_260)
{
    // 272A 0041;	
    // (✪) CIRCLED WHITE STAR	[0A62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x272A, 0x0041 };
    uint32_t const ces[9] = { 0x0A62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_261)
{
    // 272A 0062;	
    // (✪) CIRCLED WHITE STAR	[0A62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x272A, 0x0062 };
    uint32_t const ces[9] = { 0x0A62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_262)
{
    // 272B 0021;	
    // (✫) OPEN CENTRE BLACK STAR	[0A63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x272B, 0x0021 };
    uint32_t const ces[9] = { 0x0A63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_263)
{
    // 272B 003F;	
    // (✫) OPEN CENTRE BLACK STAR	[0A63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x272B, 0x003F };
    uint32_t const ces[9] = { 0x0A63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_264)
{
    // 272B 0061;	
    // (✫) OPEN CENTRE BLACK STAR	[0A63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x272B, 0x0061 };
    uint32_t const ces[9] = { 0x0A63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_265)
{
    // 272B 0041;	
    // (✫) OPEN CENTRE BLACK STAR	[0A63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x272B, 0x0041 };
    uint32_t const ces[9] = { 0x0A63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_266)
{
    // 272B 0062;	
    // (✫) OPEN CENTRE BLACK STAR	[0A63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x272B, 0x0062 };
    uint32_t const ces[9] = { 0x0A63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_267)
{
    // 272C 0021;	
    // (✬) BLACK CENTRE WHITE STAR	[0A64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x272C, 0x0021 };
    uint32_t const ces[9] = { 0x0A64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_268)
{
    // 272C 003F;	
    // (✬) BLACK CENTRE WHITE STAR	[0A64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x272C, 0x003F };
    uint32_t const ces[9] = { 0x0A64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_269)
{
    // 272C 0061;	
    // (✬) BLACK CENTRE WHITE STAR	[0A64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x272C, 0x0061 };
    uint32_t const ces[9] = { 0x0A64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_270)
{
    // 272C 0041;	
    // (✬) BLACK CENTRE WHITE STAR	[0A64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x272C, 0x0041 };
    uint32_t const ces[9] = { 0x0A64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_271)
{
    // 272C 0062;	
    // (✬) BLACK CENTRE WHITE STAR	[0A64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x272C, 0x0062 };
    uint32_t const ces[9] = { 0x0A64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_272)
{
    // 272D 0021;	
    // (✭) OUTLINED BLACK STAR	[0A65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x272D, 0x0021 };
    uint32_t const ces[9] = { 0x0A65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_273)
{
    // 272D 003F;	
    // (✭) OUTLINED BLACK STAR	[0A65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x272D, 0x003F };
    uint32_t const ces[9] = { 0x0A65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_274)
{
    // 272D 0061;	
    // (✭) OUTLINED BLACK STAR	[0A65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x272D, 0x0061 };
    uint32_t const ces[9] = { 0x0A65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_275)
{
    // 272D 0041;	
    // (✭) OUTLINED BLACK STAR	[0A65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x272D, 0x0041 };
    uint32_t const ces[9] = { 0x0A65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_276)
{
    // 272D 0062;	
    // (✭) OUTLINED BLACK STAR	[0A65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x272D, 0x0062 };
    uint32_t const ces[9] = { 0x0A65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_277)
{
    // 272E 0021;	
    // (✮) HEAVY OUTLINED BLACK STAR	[0A66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x272E, 0x0021 };
    uint32_t const ces[9] = { 0x0A66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_278)
{
    // 272E 003F;	
    // (✮) HEAVY OUTLINED BLACK STAR	[0A66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x272E, 0x003F };
    uint32_t const ces[9] = { 0x0A66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_279)
{
    // 272E 0061;	
    // (✮) HEAVY OUTLINED BLACK STAR	[0A66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x272E, 0x0061 };
    uint32_t const ces[9] = { 0x0A66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_280)
{
    // 272E 0041;	
    // (✮) HEAVY OUTLINED BLACK STAR	[0A66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x272E, 0x0041 };
    uint32_t const ces[9] = { 0x0A66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_281)
{
    // 272E 0062;	
    // (✮) HEAVY OUTLINED BLACK STAR	[0A66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x272E, 0x0062 };
    uint32_t const ces[9] = { 0x0A66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_282)
{
    // 272F 0021;	
    // (✯) PINWHEEL STAR	[0A67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x272F, 0x0021 };
    uint32_t const ces[9] = { 0x0A67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_283)
{
    // 272F 003F;	
    // (✯) PINWHEEL STAR	[0A67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x272F, 0x003F };
    uint32_t const ces[9] = { 0x0A67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_284)
{
    // 272F 0061;	
    // (✯) PINWHEEL STAR	[0A67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x272F, 0x0061 };
    uint32_t const ces[9] = { 0x0A67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_285)
{
    // 272F 0041;	
    // (✯) PINWHEEL STAR	[0A67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x272F, 0x0041 };
    uint32_t const ces[9] = { 0x0A67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_286)
{
    // 272F 0062;	
    // (✯) PINWHEEL STAR	[0A67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x272F, 0x0062 };
    uint32_t const ces[9] = { 0x0A67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_287)
{
    // 2730 0021;	
    // (✰) SHADOWED WHITE STAR	[0A68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2730, 0x0021 };
    uint32_t const ces[9] = { 0x0A68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_288)
{
    // 2730 003F;	
    // (✰) SHADOWED WHITE STAR	[0A68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2730, 0x003F };
    uint32_t const ces[9] = { 0x0A68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_289)
{
    // 2730 0061;	
    // (✰) SHADOWED WHITE STAR	[0A68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2730, 0x0061 };
    uint32_t const ces[9] = { 0x0A68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_290)
{
    // 2730 0041;	
    // (✰) SHADOWED WHITE STAR	[0A68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2730, 0x0041 };
    uint32_t const ces[9] = { 0x0A68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_291)
{
    // 2730 0062;	
    // (✰) SHADOWED WHITE STAR	[0A68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2730, 0x0062 };
    uint32_t const ces[9] = { 0x0A68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_292)
{
    // 2731 0021;	
    // (✱) HEAVY ASTERISK	[0A69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2731, 0x0021 };
    uint32_t const ces[9] = { 0x0A69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_293)
{
    // 2731 003F;	
    // (✱) HEAVY ASTERISK	[0A69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2731, 0x003F };
    uint32_t const ces[9] = { 0x0A69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_294)
{
    // 2731 0061;	
    // (✱) HEAVY ASTERISK	[0A69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2731, 0x0061 };
    uint32_t const ces[9] = { 0x0A69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_295)
{
    // 2731 0041;	
    // (✱) HEAVY ASTERISK	[0A69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2731, 0x0041 };
    uint32_t const ces[9] = { 0x0A69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_296)
{
    // 2731 0062;	
    // (✱) HEAVY ASTERISK	[0A69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2731, 0x0062 };
    uint32_t const ces[9] = { 0x0A69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_297)
{
    // 2732 0021;	
    // (✲) OPEN CENTRE ASTERISK	[0A6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2732, 0x0021 };
    uint32_t const ces[9] = { 0x0A6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_298)
{
    // 2732 003F;	
    // (✲) OPEN CENTRE ASTERISK	[0A6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2732, 0x003F };
    uint32_t const ces[9] = { 0x0A6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_299)
{
    // 2732 0061;	
    // (✲) OPEN CENTRE ASTERISK	[0A6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2732, 0x0061 };
    uint32_t const ces[9] = { 0x0A6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_300)
{
    // 2732 0041;	
    // (✲) OPEN CENTRE ASTERISK	[0A6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2732, 0x0041 };
    uint32_t const ces[9] = { 0x0A6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_301)
{
    // 2732 0062;	
    // (✲) OPEN CENTRE ASTERISK	[0A6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2732, 0x0062 };
    uint32_t const ces[9] = { 0x0A6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_302)
{
    // 2733 0021;	
    // (✳) EIGHT SPOKED ASTERISK	[0A6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2733, 0x0021 };
    uint32_t const ces[9] = { 0x0A6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_303)
{
    // 2733 003F;	
    // (✳) EIGHT SPOKED ASTERISK	[0A6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2733, 0x003F };
    uint32_t const ces[9] = { 0x0A6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_304)
{
    // 2733 0061;	
    // (✳) EIGHT SPOKED ASTERISK	[0A6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2733, 0x0061 };
    uint32_t const ces[9] = { 0x0A6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_305)
{
    // 2733 0041;	
    // (✳) EIGHT SPOKED ASTERISK	[0A6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2733, 0x0041 };
    uint32_t const ces[9] = { 0x0A6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_306)
{
    // 2733 0062;	
    // (✳) EIGHT SPOKED ASTERISK	[0A6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2733, 0x0062 };
    uint32_t const ces[9] = { 0x0A6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_307)
{
    // 2734 0021;	
    // (✴) EIGHT POINTED BLACK STAR	[0A6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2734, 0x0021 };
    uint32_t const ces[9] = { 0x0A6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_308)
{
    // 2734 003F;	
    // (✴) EIGHT POINTED BLACK STAR	[0A6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2734, 0x003F };
    uint32_t const ces[9] = { 0x0A6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_309)
{
    // 2734 0061;	
    // (✴) EIGHT POINTED BLACK STAR	[0A6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2734, 0x0061 };
    uint32_t const ces[9] = { 0x0A6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_310)
{
    // 2734 0041;	
    // (✴) EIGHT POINTED BLACK STAR	[0A6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2734, 0x0041 };
    uint32_t const ces[9] = { 0x0A6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_311)
{
    // 2734 0062;	
    // (✴) EIGHT POINTED BLACK STAR	[0A6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2734, 0x0062 };
    uint32_t const ces[9] = { 0x0A6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_312)
{
    // 2735 0021;	
    // (✵) EIGHT POINTED PINWHEEL STAR	[0A6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2735, 0x0021 };
    uint32_t const ces[9] = { 0x0A6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_313)
{
    // 2735 003F;	
    // (✵) EIGHT POINTED PINWHEEL STAR	[0A6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2735, 0x003F };
    uint32_t const ces[9] = { 0x0A6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_314)
{
    // 2735 0061;	
    // (✵) EIGHT POINTED PINWHEEL STAR	[0A6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2735, 0x0061 };
    uint32_t const ces[9] = { 0x0A6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_315)
{
    // 2735 0041;	
    // (✵) EIGHT POINTED PINWHEEL STAR	[0A6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2735, 0x0041 };
    uint32_t const ces[9] = { 0x0A6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_316)
{
    // 2735 0062;	
    // (✵) EIGHT POINTED PINWHEEL STAR	[0A6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2735, 0x0062 };
    uint32_t const ces[9] = { 0x0A6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_317)
{
    // 2736 0021;	
    // (✶) SIX POINTED BLACK STAR	[0A6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2736, 0x0021 };
    uint32_t const ces[9] = { 0x0A6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_318)
{
    // 2736 003F;	
    // (✶) SIX POINTED BLACK STAR	[0A6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2736, 0x003F };
    uint32_t const ces[9] = { 0x0A6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_319)
{
    // 2736 0061;	
    // (✶) SIX POINTED BLACK STAR	[0A6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2736, 0x0061 };
    uint32_t const ces[9] = { 0x0A6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_320)
{
    // 2736 0041;	
    // (✶) SIX POINTED BLACK STAR	[0A6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2736, 0x0041 };
    uint32_t const ces[9] = { 0x0A6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_321)
{
    // 2736 0062;	
    // (✶) SIX POINTED BLACK STAR	[0A6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2736, 0x0062 };
    uint32_t const ces[9] = { 0x0A6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_322)
{
    // 2737 0021;	
    // (✷) EIGHT POINTED RECTILINEAR BLACK STAR	[0A6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2737, 0x0021 };
    uint32_t const ces[9] = { 0x0A6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_323)
{
    // 2737 003F;	
    // (✷) EIGHT POINTED RECTILINEAR BLACK STAR	[0A6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2737, 0x003F };
    uint32_t const ces[9] = { 0x0A6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_324)
{
    // 2737 0061;	
    // (✷) EIGHT POINTED RECTILINEAR BLACK STAR	[0A6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2737, 0x0061 };
    uint32_t const ces[9] = { 0x0A6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_325)
{
    // 2737 0041;	
    // (✷) EIGHT POINTED RECTILINEAR BLACK STAR	[0A6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2737, 0x0041 };
    uint32_t const ces[9] = { 0x0A6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_326)
{
    // 2737 0062;	
    // (✷) EIGHT POINTED RECTILINEAR BLACK STAR	[0A6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2737, 0x0062 };
    uint32_t const ces[9] = { 0x0A6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_327)
{
    // 2738 0021;	
    // (✸) HEAVY EIGHT POINTED RECTILINEAR BLACK STAR	[0A70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2738, 0x0021 };
    uint32_t const ces[9] = { 0x0A70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_328)
{
    // 2738 003F;	
    // (✸) HEAVY EIGHT POINTED RECTILINEAR BLACK STAR	[0A70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2738, 0x003F };
    uint32_t const ces[9] = { 0x0A70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_329)
{
    // 2738 0061;	
    // (✸) HEAVY EIGHT POINTED RECTILINEAR BLACK STAR	[0A70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2738, 0x0061 };
    uint32_t const ces[9] = { 0x0A70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_330)
{
    // 2738 0041;	
    // (✸) HEAVY EIGHT POINTED RECTILINEAR BLACK STAR	[0A70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2738, 0x0041 };
    uint32_t const ces[9] = { 0x0A70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_331)
{
    // 2738 0062;	
    // (✸) HEAVY EIGHT POINTED RECTILINEAR BLACK STAR	[0A70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2738, 0x0062 };
    uint32_t const ces[9] = { 0x0A70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_332)
{
    // 2739 0021;	
    // (✹) TWELVE POINTED BLACK STAR	[0A71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2739, 0x0021 };
    uint32_t const ces[9] = { 0x0A71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_333)
{
    // 2739 003F;	
    // (✹) TWELVE POINTED BLACK STAR	[0A71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2739, 0x003F };
    uint32_t const ces[9] = { 0x0A71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_334)
{
    // 2739 0061;	
    // (✹) TWELVE POINTED BLACK STAR	[0A71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2739, 0x0061 };
    uint32_t const ces[9] = { 0x0A71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_335)
{
    // 2739 0041;	
    // (✹) TWELVE POINTED BLACK STAR	[0A71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2739, 0x0041 };
    uint32_t const ces[9] = { 0x0A71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_336)
{
    // 2739 0062;	
    // (✹) TWELVE POINTED BLACK STAR	[0A71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2739, 0x0062 };
    uint32_t const ces[9] = { 0x0A71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_337)
{
    // 273A 0021;	
    // (✺) SIXTEEN POINTED ASTERISK	[0A72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x273A, 0x0021 };
    uint32_t const ces[9] = { 0x0A72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_338)
{
    // 273A 003F;	
    // (✺) SIXTEEN POINTED ASTERISK	[0A72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x273A, 0x003F };
    uint32_t const ces[9] = { 0x0A72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_339)
{
    // 273A 0061;	
    // (✺) SIXTEEN POINTED ASTERISK	[0A72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x273A, 0x0061 };
    uint32_t const ces[9] = { 0x0A72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_340)
{
    // 273A 0041;	
    // (✺) SIXTEEN POINTED ASTERISK	[0A72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x273A, 0x0041 };
    uint32_t const ces[9] = { 0x0A72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_341)
{
    // 273A 0062;	
    // (✺) SIXTEEN POINTED ASTERISK	[0A72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x273A, 0x0062 };
    uint32_t const ces[9] = { 0x0A72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_342)
{
    // 273B 0021;	
    // (✻) TEARDROP-SPOKED ASTERISK	[0A73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x273B, 0x0021 };
    uint32_t const ces[9] = { 0x0A73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_343)
{
    // 273B 003F;	
    // (✻) TEARDROP-SPOKED ASTERISK	[0A73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x273B, 0x003F };
    uint32_t const ces[9] = { 0x0A73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_344)
{
    // 273B 0061;	
    // (✻) TEARDROP-SPOKED ASTERISK	[0A73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x273B, 0x0061 };
    uint32_t const ces[9] = { 0x0A73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_345)
{
    // 273B 0041;	
    // (✻) TEARDROP-SPOKED ASTERISK	[0A73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x273B, 0x0041 };
    uint32_t const ces[9] = { 0x0A73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_346)
{
    // 273B 0062;	
    // (✻) TEARDROP-SPOKED ASTERISK	[0A73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x273B, 0x0062 };
    uint32_t const ces[9] = { 0x0A73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_347)
{
    // 273C 0021;	
    // (✼) OPEN CENTRE TEARDROP-SPOKED ASTERISK	[0A74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x273C, 0x0021 };
    uint32_t const ces[9] = { 0x0A74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_348)
{
    // 273C 003F;	
    // (✼) OPEN CENTRE TEARDROP-SPOKED ASTERISK	[0A74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x273C, 0x003F };
    uint32_t const ces[9] = { 0x0A74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_349)
{
    // 273C 0061;	
    // (✼) OPEN CENTRE TEARDROP-SPOKED ASTERISK	[0A74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x273C, 0x0061 };
    uint32_t const ces[9] = { 0x0A74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_350)
{
    // 273C 0041;	
    // (✼) OPEN CENTRE TEARDROP-SPOKED ASTERISK	[0A74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x273C, 0x0041 };
    uint32_t const ces[9] = { 0x0A74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_351)
{
    // 273C 0062;	
    // (✼) OPEN CENTRE TEARDROP-SPOKED ASTERISK	[0A74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x273C, 0x0062 };
    uint32_t const ces[9] = { 0x0A74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_352)
{
    // 273D 0021;	
    // (✽) HEAVY TEARDROP-SPOKED ASTERISK	[0A75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x273D, 0x0021 };
    uint32_t const ces[9] = { 0x0A75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_353)
{
    // 273D 003F;	
    // (✽) HEAVY TEARDROP-SPOKED ASTERISK	[0A75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x273D, 0x003F };
    uint32_t const ces[9] = { 0x0A75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_354)
{
    // 273D 0061;	
    // (✽) HEAVY TEARDROP-SPOKED ASTERISK	[0A75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x273D, 0x0061 };
    uint32_t const ces[9] = { 0x0A75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_355)
{
    // 273D 0041;	
    // (✽) HEAVY TEARDROP-SPOKED ASTERISK	[0A75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x273D, 0x0041 };
    uint32_t const ces[9] = { 0x0A75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_356)
{
    // 273D 0062;	
    // (✽) HEAVY TEARDROP-SPOKED ASTERISK	[0A75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x273D, 0x0062 };
    uint32_t const ces[9] = { 0x0A75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_357)
{
    // 273E 0021;	
    // (✾) SIX PETALLED BLACK AND WHITE FLORETTE	[0A76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x273E, 0x0021 };
    uint32_t const ces[9] = { 0x0A76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_358)
{
    // 273E 003F;	
    // (✾) SIX PETALLED BLACK AND WHITE FLORETTE	[0A76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x273E, 0x003F };
    uint32_t const ces[9] = { 0x0A76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_359)
{
    // 273E 0061;	
    // (✾) SIX PETALLED BLACK AND WHITE FLORETTE	[0A76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x273E, 0x0061 };
    uint32_t const ces[9] = { 0x0A76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_360)
{
    // 273E 0041;	
    // (✾) SIX PETALLED BLACK AND WHITE FLORETTE	[0A76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x273E, 0x0041 };
    uint32_t const ces[9] = { 0x0A76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_361)
{
    // 273E 0062;	
    // (✾) SIX PETALLED BLACK AND WHITE FLORETTE	[0A76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x273E, 0x0062 };
    uint32_t const ces[9] = { 0x0A76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_362)
{
    // 273F 0021;	
    // (✿) BLACK FLORETTE	[0A77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x273F, 0x0021 };
    uint32_t const ces[9] = { 0x0A77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_363)
{
    // 273F 003F;	
    // (✿) BLACK FLORETTE	[0A77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x273F, 0x003F };
    uint32_t const ces[9] = { 0x0A77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_364)
{
    // 273F 0061;	
    // (✿) BLACK FLORETTE	[0A77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x273F, 0x0061 };
    uint32_t const ces[9] = { 0x0A77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_365)
{
    // 273F 0041;	
    // (✿) BLACK FLORETTE	[0A77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x273F, 0x0041 };
    uint32_t const ces[9] = { 0x0A77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_366)
{
    // 273F 0062;	
    // (✿) BLACK FLORETTE	[0A77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x273F, 0x0062 };
    uint32_t const ces[9] = { 0x0A77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_367)
{
    // 2740 0021;	
    // (❀) WHITE FLORETTE	[0A78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2740, 0x0021 };
    uint32_t const ces[9] = { 0x0A78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_368)
{
    // 2740 003F;	
    // (❀) WHITE FLORETTE	[0A78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2740, 0x003F };
    uint32_t const ces[9] = { 0x0A78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_369)
{
    // 2740 0061;	
    // (❀) WHITE FLORETTE	[0A78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2740, 0x0061 };
    uint32_t const ces[9] = { 0x0A78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_370)
{
    // 2740 0041;	
    // (❀) WHITE FLORETTE	[0A78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2740, 0x0041 };
    uint32_t const ces[9] = { 0x0A78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_371)
{
    // 2740 0062;	
    // (❀) WHITE FLORETTE	[0A78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2740, 0x0062 };
    uint32_t const ces[9] = { 0x0A78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_372)
{
    // 2741 0021;	
    // (❁) EIGHT PETALLED OUTLINED BLACK FLORETTE	[0A79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2741, 0x0021 };
    uint32_t const ces[9] = { 0x0A79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_373)
{
    // 2741 003F;	
    // (❁) EIGHT PETALLED OUTLINED BLACK FLORETTE	[0A79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2741, 0x003F };
    uint32_t const ces[9] = { 0x0A79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_374)
{
    // 2741 0061;	
    // (❁) EIGHT PETALLED OUTLINED BLACK FLORETTE	[0A79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2741, 0x0061 };
    uint32_t const ces[9] = { 0x0A79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_375)
{
    // 2741 0041;	
    // (❁) EIGHT PETALLED OUTLINED BLACK FLORETTE	[0A79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2741, 0x0041 };
    uint32_t const ces[9] = { 0x0A79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_376)
{
    // 2741 0062;	
    // (❁) EIGHT PETALLED OUTLINED BLACK FLORETTE	[0A79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2741, 0x0062 };
    uint32_t const ces[9] = { 0x0A79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_377)
{
    // 2742 0021;	
    // (❂) CIRCLED OPEN CENTRE EIGHT POINTED STAR	[0A7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2742, 0x0021 };
    uint32_t const ces[9] = { 0x0A7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_378)
{
    // 2742 003F;	
    // (❂) CIRCLED OPEN CENTRE EIGHT POINTED STAR	[0A7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2742, 0x003F };
    uint32_t const ces[9] = { 0x0A7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_379)
{
    // 2742 0061;	
    // (❂) CIRCLED OPEN CENTRE EIGHT POINTED STAR	[0A7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2742, 0x0061 };
    uint32_t const ces[9] = { 0x0A7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_380)
{
    // 2742 0041;	
    // (❂) CIRCLED OPEN CENTRE EIGHT POINTED STAR	[0A7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2742, 0x0041 };
    uint32_t const ces[9] = { 0x0A7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_381)
{
    // 2742 0062;	
    // (❂) CIRCLED OPEN CENTRE EIGHT POINTED STAR	[0A7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2742, 0x0062 };
    uint32_t const ces[9] = { 0x0A7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_382)
{
    // 2743 0021;	
    // (❃) HEAVY TEARDROP-SPOKED PINWHEEL ASTERISK	[0A7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2743, 0x0021 };
    uint32_t const ces[9] = { 0x0A7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_383)
{
    // 2743 003F;	
    // (❃) HEAVY TEARDROP-SPOKED PINWHEEL ASTERISK	[0A7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2743, 0x003F };
    uint32_t const ces[9] = { 0x0A7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_384)
{
    // 2743 0061;	
    // (❃) HEAVY TEARDROP-SPOKED PINWHEEL ASTERISK	[0A7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2743, 0x0061 };
    uint32_t const ces[9] = { 0x0A7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_385)
{
    // 2743 0041;	
    // (❃) HEAVY TEARDROP-SPOKED PINWHEEL ASTERISK	[0A7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2743, 0x0041 };
    uint32_t const ces[9] = { 0x0A7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_386)
{
    // 2743 0062;	
    // (❃) HEAVY TEARDROP-SPOKED PINWHEEL ASTERISK	[0A7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2743, 0x0062 };
    uint32_t const ces[9] = { 0x0A7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_387)
{
    // 2744 0021;	
    // (❄) SNOWFLAKE	[0A7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2744, 0x0021 };
    uint32_t const ces[9] = { 0x0A7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_388)
{
    // 2744 003F;	
    // (❄) SNOWFLAKE	[0A7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2744, 0x003F };
    uint32_t const ces[9] = { 0x0A7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_389)
{
    // 2744 0061;	
    // (❄) SNOWFLAKE	[0A7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2744, 0x0061 };
    uint32_t const ces[9] = { 0x0A7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_390)
{
    // 2744 0041;	
    // (❄) SNOWFLAKE	[0A7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2744, 0x0041 };
    uint32_t const ces[9] = { 0x0A7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_391)
{
    // 2744 0062;	
    // (❄) SNOWFLAKE	[0A7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2744, 0x0062 };
    uint32_t const ces[9] = { 0x0A7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_392)
{
    // 2745 0021;	
    // (❅) TIGHT TRIFOLIATE SNOWFLAKE	[0A7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2745, 0x0021 };
    uint32_t const ces[9] = { 0x0A7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_393)
{
    // 2745 003F;	
    // (❅) TIGHT TRIFOLIATE SNOWFLAKE	[0A7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2745, 0x003F };
    uint32_t const ces[9] = { 0x0A7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_394)
{
    // 2745 0061;	
    // (❅) TIGHT TRIFOLIATE SNOWFLAKE	[0A7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2745, 0x0061 };
    uint32_t const ces[9] = { 0x0A7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_395)
{
    // 2745 0041;	
    // (❅) TIGHT TRIFOLIATE SNOWFLAKE	[0A7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2745, 0x0041 };
    uint32_t const ces[9] = { 0x0A7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_396)
{
    // 2745 0062;	
    // (❅) TIGHT TRIFOLIATE SNOWFLAKE	[0A7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2745, 0x0062 };
    uint32_t const ces[9] = { 0x0A7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_397)
{
    // 2746 0021;	
    // (❆) HEAVY CHEVRON SNOWFLAKE	[0A7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2746, 0x0021 };
    uint32_t const ces[9] = { 0x0A7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_398)
{
    // 2746 003F;	
    // (❆) HEAVY CHEVRON SNOWFLAKE	[0A7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2746, 0x003F };
    uint32_t const ces[9] = { 0x0A7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_399)
{
    // 2746 0061;	
    // (❆) HEAVY CHEVRON SNOWFLAKE	[0A7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2746, 0x0061 };
    uint32_t const ces[9] = { 0x0A7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_400)
{
    // 2746 0041;	
    // (❆) HEAVY CHEVRON SNOWFLAKE	[0A7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2746, 0x0041 };
    uint32_t const ces[9] = { 0x0A7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_401)
{
    // 2746 0062;	
    // (❆) HEAVY CHEVRON SNOWFLAKE	[0A7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2746, 0x0062 };
    uint32_t const ces[9] = { 0x0A7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_402)
{
    // 2747 0021;	
    // (❇) SPARKLE	[0A7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2747, 0x0021 };
    uint32_t const ces[9] = { 0x0A7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_403)
{
    // 2747 003F;	
    // (❇) SPARKLE	[0A7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2747, 0x003F };
    uint32_t const ces[9] = { 0x0A7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_404)
{
    // 2747 0061;	
    // (❇) SPARKLE	[0A7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2747, 0x0061 };
    uint32_t const ces[9] = { 0x0A7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_405)
{
    // 2747 0041;	
    // (❇) SPARKLE	[0A7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2747, 0x0041 };
    uint32_t const ces[9] = { 0x0A7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_406)
{
    // 2747 0062;	
    // (❇) SPARKLE	[0A7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2747, 0x0062 };
    uint32_t const ces[9] = { 0x0A7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_407)
{
    // 2748 0021;	
    // (❈) HEAVY SPARKLE	[0A80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2748, 0x0021 };
    uint32_t const ces[9] = { 0x0A80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_408)
{
    // 2748 003F;	
    // (❈) HEAVY SPARKLE	[0A80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2748, 0x003F };
    uint32_t const ces[9] = { 0x0A80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_409)
{
    // 2748 0061;	
    // (❈) HEAVY SPARKLE	[0A80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2748, 0x0061 };
    uint32_t const ces[9] = { 0x0A80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_410)
{
    // 2748 0041;	
    // (❈) HEAVY SPARKLE	[0A80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2748, 0x0041 };
    uint32_t const ces[9] = { 0x0A80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_411)
{
    // 2748 0062;	
    // (❈) HEAVY SPARKLE	[0A80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2748, 0x0062 };
    uint32_t const ces[9] = { 0x0A80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_412)
{
    // 2749 0021;	
    // (❉) BALLOON-SPOKED ASTERISK	[0A81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2749, 0x0021 };
    uint32_t const ces[9] = { 0x0A81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_413)
{
    // 2749 003F;	
    // (❉) BALLOON-SPOKED ASTERISK	[0A81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2749, 0x003F };
    uint32_t const ces[9] = { 0x0A81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_414)
{
    // 2749 0061;	
    // (❉) BALLOON-SPOKED ASTERISK	[0A81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2749, 0x0061 };
    uint32_t const ces[9] = { 0x0A81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_415)
{
    // 2749 0041;	
    // (❉) BALLOON-SPOKED ASTERISK	[0A81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2749, 0x0041 };
    uint32_t const ces[9] = { 0x0A81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_416)
{
    // 2749 0062;	
    // (❉) BALLOON-SPOKED ASTERISK	[0A81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2749, 0x0062 };
    uint32_t const ces[9] = { 0x0A81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_417)
{
    // 274A 0021;	
    // (❊) EIGHT TEARDROP-SPOKED PROPELLER ASTERISK	[0A82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x274A, 0x0021 };
    uint32_t const ces[9] = { 0x0A82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_418)
{
    // 274A 003F;	
    // (❊) EIGHT TEARDROP-SPOKED PROPELLER ASTERISK	[0A82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x274A, 0x003F };
    uint32_t const ces[9] = { 0x0A82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_419)
{
    // 274A 0061;	
    // (❊) EIGHT TEARDROP-SPOKED PROPELLER ASTERISK	[0A82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x274A, 0x0061 };
    uint32_t const ces[9] = { 0x0A82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_420)
{
    // 274A 0041;	
    // (❊) EIGHT TEARDROP-SPOKED PROPELLER ASTERISK	[0A82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x274A, 0x0041 };
    uint32_t const ces[9] = { 0x0A82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_421)
{
    // 274A 0062;	
    // (❊) EIGHT TEARDROP-SPOKED PROPELLER ASTERISK	[0A82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x274A, 0x0062 };
    uint32_t const ces[9] = { 0x0A82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_422)
{
    // 274B 0021;	
    // (❋) HEAVY EIGHT TEARDROP-SPOKED PROPELLER ASTERISK	[0A83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x274B, 0x0021 };
    uint32_t const ces[9] = { 0x0A83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_423)
{
    // 274B 003F;	
    // (❋) HEAVY EIGHT TEARDROP-SPOKED PROPELLER ASTERISK	[0A83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x274B, 0x003F };
    uint32_t const ces[9] = { 0x0A83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_424)
{
    // 274B 0061;	
    // (❋) HEAVY EIGHT TEARDROP-SPOKED PROPELLER ASTERISK	[0A83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x274B, 0x0061 };
    uint32_t const ces[9] = { 0x0A83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_425)
{
    // 274B 0041;	
    // (❋) HEAVY EIGHT TEARDROP-SPOKED PROPELLER ASTERISK	[0A83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x274B, 0x0041 };
    uint32_t const ces[9] = { 0x0A83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_426)
{
    // 274B 0062;	
    // (❋) HEAVY EIGHT TEARDROP-SPOKED PROPELLER ASTERISK	[0A83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x274B, 0x0062 };
    uint32_t const ces[9] = { 0x0A83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_427)
{
    // 274C 0021;	
    // (❌) CROSS MARK	[0A84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x274C, 0x0021 };
    uint32_t const ces[9] = { 0x0A84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_428)
{
    // 274C 003F;	
    // (❌) CROSS MARK	[0A84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x274C, 0x003F };
    uint32_t const ces[9] = { 0x0A84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_429)
{
    // 274C 0061;	
    // (❌) CROSS MARK	[0A84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x274C, 0x0061 };
    uint32_t const ces[9] = { 0x0A84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_430)
{
    // 274C 0041;	
    // (❌) CROSS MARK	[0A84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x274C, 0x0041 };
    uint32_t const ces[9] = { 0x0A84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_431)
{
    // 274C 0062;	
    // (❌) CROSS MARK	[0A84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x274C, 0x0062 };
    uint32_t const ces[9] = { 0x0A84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_432)
{
    // 274D 0021;	
    // (❍) SHADOWED WHITE CIRCLE	[0A85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x274D, 0x0021 };
    uint32_t const ces[9] = { 0x0A85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_433)
{
    // 274D 003F;	
    // (❍) SHADOWED WHITE CIRCLE	[0A85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x274D, 0x003F };
    uint32_t const ces[9] = { 0x0A85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_434)
{
    // 274D 0061;	
    // (❍) SHADOWED WHITE CIRCLE	[0A85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x274D, 0x0061 };
    uint32_t const ces[9] = { 0x0A85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_435)
{
    // 274D 0041;	
    // (❍) SHADOWED WHITE CIRCLE	[0A85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x274D, 0x0041 };
    uint32_t const ces[9] = { 0x0A85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_436)
{
    // 274D 0062;	
    // (❍) SHADOWED WHITE CIRCLE	[0A85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x274D, 0x0062 };
    uint32_t const ces[9] = { 0x0A85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_437)
{
    // 274E 0021;	
    // (❎) NEGATIVE SQUARED CROSS MARK	[0A86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x274E, 0x0021 };
    uint32_t const ces[9] = { 0x0A86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_438)
{
    // 274E 003F;	
    // (❎) NEGATIVE SQUARED CROSS MARK	[0A86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x274E, 0x003F };
    uint32_t const ces[9] = { 0x0A86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_439)
{
    // 274E 0061;	
    // (❎) NEGATIVE SQUARED CROSS MARK	[0A86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x274E, 0x0061 };
    uint32_t const ces[9] = { 0x0A86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_440)
{
    // 274E 0041;	
    // (❎) NEGATIVE SQUARED CROSS MARK	[0A86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x274E, 0x0041 };
    uint32_t const ces[9] = { 0x0A86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_441)
{
    // 274E 0062;	
    // (❎) NEGATIVE SQUARED CROSS MARK	[0A86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x274E, 0x0062 };
    uint32_t const ces[9] = { 0x0A86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_442)
{
    // 274F 0021;	
    // (❏) LOWER RIGHT DROP-SHADOWED WHITE SQUARE	[0A87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x274F, 0x0021 };
    uint32_t const ces[9] = { 0x0A87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_443)
{
    // 274F 003F;	
    // (❏) LOWER RIGHT DROP-SHADOWED WHITE SQUARE	[0A87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x274F, 0x003F };
    uint32_t const ces[9] = { 0x0A87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_444)
{
    // 274F 0061;	
    // (❏) LOWER RIGHT DROP-SHADOWED WHITE SQUARE	[0A87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x274F, 0x0061 };
    uint32_t const ces[9] = { 0x0A87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_445)
{
    // 274F 0041;	
    // (❏) LOWER RIGHT DROP-SHADOWED WHITE SQUARE	[0A87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x274F, 0x0041 };
    uint32_t const ces[9] = { 0x0A87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_446)
{
    // 274F 0062;	
    // (❏) LOWER RIGHT DROP-SHADOWED WHITE SQUARE	[0A87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x274F, 0x0062 };
    uint32_t const ces[9] = { 0x0A87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_447)
{
    // 2750 0021;	
    // (❐) UPPER RIGHT DROP-SHADOWED WHITE SQUARE	[0A88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2750, 0x0021 };
    uint32_t const ces[9] = { 0x0A88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_448)
{
    // 2750 003F;	
    // (❐) UPPER RIGHT DROP-SHADOWED WHITE SQUARE	[0A88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2750, 0x003F };
    uint32_t const ces[9] = { 0x0A88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_449)
{
    // 2750 0061;	
    // (❐) UPPER RIGHT DROP-SHADOWED WHITE SQUARE	[0A88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2750, 0x0061 };
    uint32_t const ces[9] = { 0x0A88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_450)
{
    // 2750 0041;	
    // (❐) UPPER RIGHT DROP-SHADOWED WHITE SQUARE	[0A88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2750, 0x0041 };
    uint32_t const ces[9] = { 0x0A88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_451)
{
    // 2750 0062;	
    // (❐) UPPER RIGHT DROP-SHADOWED WHITE SQUARE	[0A88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2750, 0x0062 };
    uint32_t const ces[9] = { 0x0A88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_452)
{
    // 2751 0021;	
    // (❑) LOWER RIGHT SHADOWED WHITE SQUARE	[0A89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2751, 0x0021 };
    uint32_t const ces[9] = { 0x0A89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_453)
{
    // 2751 003F;	
    // (❑) LOWER RIGHT SHADOWED WHITE SQUARE	[0A89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2751, 0x003F };
    uint32_t const ces[9] = { 0x0A89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_454)
{
    // 2751 0061;	
    // (❑) LOWER RIGHT SHADOWED WHITE SQUARE	[0A89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2751, 0x0061 };
    uint32_t const ces[9] = { 0x0A89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_455)
{
    // 2751 0041;	
    // (❑) LOWER RIGHT SHADOWED WHITE SQUARE	[0A89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2751, 0x0041 };
    uint32_t const ces[9] = { 0x0A89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_456)
{
    // 2751 0062;	
    // (❑) LOWER RIGHT SHADOWED WHITE SQUARE	[0A89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2751, 0x0062 };
    uint32_t const ces[9] = { 0x0A89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_457)
{
    // 2752 0021;	
    // (❒) UPPER RIGHT SHADOWED WHITE SQUARE	[0A8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2752, 0x0021 };
    uint32_t const ces[9] = { 0x0A8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_458)
{
    // 2752 003F;	
    // (❒) UPPER RIGHT SHADOWED WHITE SQUARE	[0A8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2752, 0x003F };
    uint32_t const ces[9] = { 0x0A8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_459)
{
    // 2752 0061;	
    // (❒) UPPER RIGHT SHADOWED WHITE SQUARE	[0A8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2752, 0x0061 };
    uint32_t const ces[9] = { 0x0A8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_460)
{
    // 2752 0041;	
    // (❒) UPPER RIGHT SHADOWED WHITE SQUARE	[0A8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2752, 0x0041 };
    uint32_t const ces[9] = { 0x0A8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_461)
{
    // 2752 0062;	
    // (❒) UPPER RIGHT SHADOWED WHITE SQUARE	[0A8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2752, 0x0062 };
    uint32_t const ces[9] = { 0x0A8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_462)
{
    // 2753 0021;	
    // (❓) BLACK QUESTION MARK ORNAMENT	[0A8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2753, 0x0021 };
    uint32_t const ces[9] = { 0x0A8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_463)
{
    // 2753 003F;	
    // (❓) BLACK QUESTION MARK ORNAMENT	[0A8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2753, 0x003F };
    uint32_t const ces[9] = { 0x0A8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_464)
{
    // 2753 0061;	
    // (❓) BLACK QUESTION MARK ORNAMENT	[0A8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2753, 0x0061 };
    uint32_t const ces[9] = { 0x0A8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_465)
{
    // 2753 0041;	
    // (❓) BLACK QUESTION MARK ORNAMENT	[0A8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2753, 0x0041 };
    uint32_t const ces[9] = { 0x0A8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_466)
{
    // 2753 0062;	
    // (❓) BLACK QUESTION MARK ORNAMENT	[0A8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2753, 0x0062 };
    uint32_t const ces[9] = { 0x0A8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_467)
{
    // 2754 0021;	
    // (❔) WHITE QUESTION MARK ORNAMENT	[0A8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2754, 0x0021 };
    uint32_t const ces[9] = { 0x0A8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_468)
{
    // 2754 003F;	
    // (❔) WHITE QUESTION MARK ORNAMENT	[0A8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2754, 0x003F };
    uint32_t const ces[9] = { 0x0A8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_469)
{
    // 2754 0061;	
    // (❔) WHITE QUESTION MARK ORNAMENT	[0A8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2754, 0x0061 };
    uint32_t const ces[9] = { 0x0A8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_470)
{
    // 2754 0041;	
    // (❔) WHITE QUESTION MARK ORNAMENT	[0A8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2754, 0x0041 };
    uint32_t const ces[9] = { 0x0A8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_471)
{
    // 2754 0062;	
    // (❔) WHITE QUESTION MARK ORNAMENT	[0A8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2754, 0x0062 };
    uint32_t const ces[9] = { 0x0A8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_472)
{
    // 2755 0021;	
    // (❕) WHITE EXCLAMATION MARK ORNAMENT	[0A8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2755, 0x0021 };
    uint32_t const ces[9] = { 0x0A8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_473)
{
    // 2755 003F;	
    // (❕) WHITE EXCLAMATION MARK ORNAMENT	[0A8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2755, 0x003F };
    uint32_t const ces[9] = { 0x0A8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_474)
{
    // 2755 0061;	
    // (❕) WHITE EXCLAMATION MARK ORNAMENT	[0A8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2755, 0x0061 };
    uint32_t const ces[9] = { 0x0A8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_475)
{
    // 2755 0041;	
    // (❕) WHITE EXCLAMATION MARK ORNAMENT	[0A8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2755, 0x0041 };
    uint32_t const ces[9] = { 0x0A8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_476)
{
    // 2755 0062;	
    // (❕) WHITE EXCLAMATION MARK ORNAMENT	[0A8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2755, 0x0062 };
    uint32_t const ces[9] = { 0x0A8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_477)
{
    // 2756 0021;	
    // (❖) BLACK DIAMOND MINUS WHITE X	[0A8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2756, 0x0021 };
    uint32_t const ces[9] = { 0x0A8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_478)
{
    // 2756 003F;	
    // (❖) BLACK DIAMOND MINUS WHITE X	[0A8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2756, 0x003F };
    uint32_t const ces[9] = { 0x0A8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_479)
{
    // 2756 0061;	
    // (❖) BLACK DIAMOND MINUS WHITE X	[0A8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2756, 0x0061 };
    uint32_t const ces[9] = { 0x0A8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_480)
{
    // 2756 0041;	
    // (❖) BLACK DIAMOND MINUS WHITE X	[0A8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2756, 0x0041 };
    uint32_t const ces[9] = { 0x0A8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_481)
{
    // 2756 0062;	
    // (❖) BLACK DIAMOND MINUS WHITE X	[0A8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2756, 0x0062 };
    uint32_t const ces[9] = { 0x0A8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_482)
{
    // 2757 0021;	
    // (❗) HEAVY EXCLAMATION MARK SYMBOL	[0A8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2757, 0x0021 };
    uint32_t const ces[9] = { 0x0A8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_483)
{
    // 2757 003F;	
    // (❗) HEAVY EXCLAMATION MARK SYMBOL	[0A8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2757, 0x003F };
    uint32_t const ces[9] = { 0x0A8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_484)
{
    // 2757 0061;	
    // (❗) HEAVY EXCLAMATION MARK SYMBOL	[0A8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2757, 0x0061 };
    uint32_t const ces[9] = { 0x0A8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_485)
{
    // 2757 0041;	
    // (❗) HEAVY EXCLAMATION MARK SYMBOL	[0A8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2757, 0x0041 };
    uint32_t const ces[9] = { 0x0A8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_486)
{
    // 2757 0062;	
    // (❗) HEAVY EXCLAMATION MARK SYMBOL	[0A8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2757, 0x0062 };
    uint32_t const ces[9] = { 0x0A8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_487)
{
    // 2758 0021;	
    // (❘) LIGHT VERTICAL BAR	[0A90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2758, 0x0021 };
    uint32_t const ces[9] = { 0x0A90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_488)
{
    // 2758 003F;	
    // (❘) LIGHT VERTICAL BAR	[0A90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2758, 0x003F };
    uint32_t const ces[9] = { 0x0A90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_489)
{
    // 2758 0061;	
    // (❘) LIGHT VERTICAL BAR	[0A90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2758, 0x0061 };
    uint32_t const ces[9] = { 0x0A90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_490)
{
    // 2758 0041;	
    // (❘) LIGHT VERTICAL BAR	[0A90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2758, 0x0041 };
    uint32_t const ces[9] = { 0x0A90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_491)
{
    // 2758 0062;	
    // (❘) LIGHT VERTICAL BAR	[0A90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2758, 0x0062 };
    uint32_t const ces[9] = { 0x0A90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_492)
{
    // 2759 0021;	
    // (❙) MEDIUM VERTICAL BAR	[0A91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2759, 0x0021 };
    uint32_t const ces[9] = { 0x0A91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_493)
{
    // 2759 003F;	
    // (❙) MEDIUM VERTICAL BAR	[0A91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2759, 0x003F };
    uint32_t const ces[9] = { 0x0A91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_494)
{
    // 2759 0061;	
    // (❙) MEDIUM VERTICAL BAR	[0A91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2759, 0x0061 };
    uint32_t const ces[9] = { 0x0A91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_495)
{
    // 2759 0041;	
    // (❙) MEDIUM VERTICAL BAR	[0A91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2759, 0x0041 };
    uint32_t const ces[9] = { 0x0A91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_496)
{
    // 2759 0062;	
    // (❙) MEDIUM VERTICAL BAR	[0A91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2759, 0x0062 };
    uint32_t const ces[9] = { 0x0A91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_497)
{
    // 275A 0021;	
    // (❚) HEAVY VERTICAL BAR	[0A92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x275A, 0x0021 };
    uint32_t const ces[9] = { 0x0A92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_498)
{
    // 275A 003F;	
    // (❚) HEAVY VERTICAL BAR	[0A92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x275A, 0x003F };
    uint32_t const ces[9] = { 0x0A92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_033_499)
{
    // 275A 0061;	
    // (❚) HEAVY VERTICAL BAR	[0A92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x275A, 0x0061 };
    uint32_t const ces[9] = { 0x0A92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

