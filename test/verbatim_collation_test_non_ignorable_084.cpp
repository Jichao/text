// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_084_000)
{
    // 10859 0061;	
    // (‚Äé‚Äéê°ô‚Äé‚Äé) IMPERIAL ARAMAIC NUMBER TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10859, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_001)
{
    // 1087A 0061;	
    // (‚Äé‚Äéê°∫‚Äé‚Äé) PALMYRENE NUMBER TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1087A, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_002)
{
    // 108A8 0061;	
    // (‚Äé‚Äéê¢®‚Äé‚Äé) NABATAEAN NUMBER TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108A8, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_003)
{
    // 1091A 0061;	
    // (‚Äé‚Äéê§ö‚Äé‚Äé) PHOENICIAN NUMBER TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1091A, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_004)
{
    // 109C1 0061;	
    // (‚Äé‚ÄéêßÅ‚Äé‚Äé) MEROITIC CURSIVE NUMBER TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C1, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_005)
{
    // 10A41 0061;	
    // (‚Äé‚Äéê©Å‚Äé‚Äé) KHAROSHTHI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A41, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_006)
{
    // 10B59 0061;	
    // (‚Äé‚Äéê≠ô‚Äé‚Äé) INSCRIPTIONAL PARTHIAN NUMBER TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B59, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_007)
{
    // 10B79 0061;	
    // (‚Äé‚Äéê≠π‚Äé‚Äé) INSCRIPTIONAL PAHLAVI NUMBER TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B79, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_008)
{
    // 10BAA 0061;	
    // (‚Äé‚ÄéêÆ™‚Äé‚Äé) PSALTER PAHLAVI NUMBER TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10BAA, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_009)
{
    // 10E61 0061;	
    // (‚Äéêπ°‚Äé) RUMI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E61, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_010)
{
    // 11053 0061;	
    // (ëÅì) BRAHMI NUMBER TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11053, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_011)
{
    // 11068 0061;	
    // (ëÅ®) BRAHMI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11068, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_012)
{
    // 110F2 0061;	
    // (ëÉ≤) SORA SOMPENG DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F2, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_013)
{
    // 11138 0061;	
    // (ëÑ∏) CHAKMA DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11138, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_014)
{
    // 111D2 0061;	
    // (ëáí) SHARADA DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D2, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_015)
{
    // 111E2 0061;	
    // (ëá¢) SINHALA ARCHAIC DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E2, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_016)
{
    // 112F2 0061;	
    // (ëã≤) KHUDAWADI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F2, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_017)
{
    // 11452 0061;	
    // (ëëí) NEWA DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11452, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_018)
{
    // 114D2 0061;	
    // (ëìí) TIRHUTA DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D2, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_019)
{
    // 11652 0061;	
    // (ëôí) MODI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11652, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_020)
{
    // 116C2 0061;	
    // (ëõÇ) TAKRI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C2, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_021)
{
    // 11732 0061;	
    // (ëú≤) AHOM DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11732, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_022)
{
    // 118E2 0061;	
    // (ë£¢) WARANG CITI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E2, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_023)
{
    // 11C52 0061;	
    // (ë±í) BHAIKSUKI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C52, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_024)
{
    // 11C5B 0061;	
    // (ë±õ) BHAIKSUKI NUMBER TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C5B, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_025)
{
    // 11D52 0061;	
    // (ëµí) MASARAM GONDI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D52, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_026)
{
    // 12400 0061;	
    // (íêÄ) CUNEIFORM NUMERIC SIGN TWO ASH	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12400, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_027)
{
    // 12416 0061;	
    // (íêñ) CUNEIFORM NUMERIC SIGN TWO GESH2	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12416, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_028)
{
    // 1241F 0061;	
    // (íêü) CUNEIFORM NUMERIC SIGN TWO GESHU	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1241F, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_029)
{
    // 12423 0061;	
    // (íê£) CUNEIFORM NUMERIC SIGN TWO SHAR2	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12423, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_030)
{
    // 1242D 0061;	
    // (íê≠) CUNEIFORM NUMERIC SIGN TWO SHARU	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1242D, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_031)
{
    // 12435 0061;	
    // (íêµ) CUNEIFORM NUMERIC SIGN TWO BURU	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12435, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_032)
{
    // 1244A 0061;	
    // (íëä) CUNEIFORM NUMERIC SIGN TWO ASH TENU	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1244A, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_033)
{
    // 12450 0061;	
    // (íëê) CUNEIFORM NUMERIC SIGN TWO BAN2	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12450, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_034)
{
    // 12456 0061;	
    // (íëñ) CUNEIFORM NUMERIC SIGN NIGIDAMIN	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12456, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_035)
{
    // 12459 0061;	
    // (íëô) CUNEIFORM NUMERIC SIGN TWO ESHE3	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12459, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_036)
{
    // 16A62 0061;	
    // (ñ©¢) MRO DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A62, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_037)
{
    // 16B52 0061;	
    // (ñ≠í) PAHAWH HMONG DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B52, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_038)
{
    // 1D361 0061;	
    // (ùç°) COUNTING ROD UNIT DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D361, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_039)
{
    // 1E8C8 0061;	
    // (‚Äé‚Äéû£à‚Äé‚Äé) MENDE KIKAKUI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8C8, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_040)
{
    // 1E952 0061;	
    // (‚Äé‚Äéû•í‚Äé‚Äé) ADLAM DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E952, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_041)
{
    // 0032 0041;	
    // (2) DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0032, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_042)
{
    // 0662 0041;	
    // (‚ÄéŸ¢‚Äé) ARABIC-INDIC DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0662, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_043)
{
    // 06F2 0041;	
    // (€≤) EXTENDED ARABIC-INDIC DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06F2, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_044)
{
    // 07C2 0041;	
    // (‚Äé‚ÄéﬂÇ‚Äé‚Äé) NKO DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x07C2, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_045)
{
    // 0968 0041;	
    // (‡•®) DEVANAGARI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0968, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_046)
{
    // 09E8 0041;	
    // (‡ß®) BENGALI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x09E8, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_047)
{
    // 0A68 0041;	
    // (‡©®) GURMUKHI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A68, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_048)
{
    // 0AE8 0041;	
    // (‡´®) GUJARATI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AE8, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_049)
{
    // 0B68 0041;	
    // (‡≠®) ORIYA DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B68, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_050)
{
    // 0BE8 0041;	
    // (‡Ø®) TAMIL DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BE8, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_051)
{
    // 0C68 0041;	
    // (‡±®) TELUGU DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C68, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_052)
{
    // 0C7A 0041;	
    // (‡±∫) TELUGU FRACTION DIGIT TWO FOR ODD POWERS OF FOUR	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C7A, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_053)
{
    // 0C7D 0041;	
    // (‡±Ω) TELUGU FRACTION DIGIT TWO FOR EVEN POWERS OF FOUR	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C7D, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_054)
{
    // 0CE8 0041;	
    // (‡≥®) KANNADA DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CE8, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_055)
{
    // 0D68 0041;	
    // (‡µ®) MALAYALAM DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D68, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_056)
{
    // 0DE8 0041;	
    // (‡∑®) SINHALA LITH DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DE8, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_057)
{
    // 0E52 0041;	
    // (‡πí) THAI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E52, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_058)
{
    // 0ED2 0041;	
    // (‡ªí) LAO DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0ED2, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_059)
{
    // 0F22 0041;	
    // (‡º¢) TIBETAN DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F22, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_060)
{
    // 1042 0041;	
    // (·ÅÇ) MYANMAR DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1042, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_061)
{
    // 1092 0041;	
    // (·Çí) MYANMAR SHAN DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1092, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_062)
{
    // 136A 0041;	
    // (·ç™) ETHIOPIC DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x136A, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_063)
{
    // 17E2 0041;	
    // (·ü¢) KHMER DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17E2, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_064)
{
    // 17F2 0041;	
    // (·ü≤) KHMER SYMBOL LEK ATTAK PII	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17F2, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_065)
{
    // 1812 0041;	
    // (·†í) MONGOLIAN DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1812, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_066)
{
    // 1948 0041;	
    // (·•à) LIMBU DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1948, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_067)
{
    // 19D2 0041;	
    // (·ßí) NEW TAI LUE DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19D2, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_068)
{
    // 1A82 0041;	
    // (·™Ç) TAI THAM HORA DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A82, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_069)
{
    // 1A92 0041;	
    // (·™í) TAI THAM THAM DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A92, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_070)
{
    // 1B52 0041;	
    // (·≠í) BALINESE DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B52, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_071)
{
    // 1BB2 0041;	
    // (·Æ≤) SUNDANESE DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BB2, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_072)
{
    // 1C42 0041;	
    // (·±Ç) LEPCHA DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C42, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_073)
{
    // 1C52 0041;	
    // (·±í) OL CHIKI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C52, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_074)
{
    // 3022 0041;	
    // („Ä¢) HANGZHOU NUMERAL TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3022, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_075)
{
    // A622 0041;	
    // (Íò¢) VAI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA622, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_076)
{
    // A8D2 0041;	
    // (Í£í) SAURASHTRA DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA8D2, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_077)
{
    // A902 0041;	
    // (Í§Ç) KAYAH LI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA902, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_078)
{
    // A9D2 0041;	
    // (Íßí) JAVANESE DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9D2, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_079)
{
    // A9F2 0041;	
    // (Íß≤) MYANMAR TAI LAING DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9F2, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_080)
{
    // AA52 0041;	
    // (Í©í) CHAM DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA52, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_081)
{
    // ABF2 0041;	
    // (ÍØ≤) MEETEI MAYEK DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABF2, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_082)
{
    // 10108 0041;	
    // (êÑà) AEGEAN NUMBER TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10108, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_083)
{
    // 1015B 0041;	
    // (êÖõ) GREEK ACROPHONIC EPIDAUREAN TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1015B, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_084)
{
    // 1015C 0041;	
    // (êÖú) GREEK ACROPHONIC THESPIAN TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1015C, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_085)
{
    // 1015D 0041;	
    // (êÖù) GREEK ACROPHONIC CYRENAIC TWO DRACHMAS	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1015D, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_086)
{
    // 1015E 0041;	
    // (êÖû) GREEK ACROPHONIC EPIDAUREAN TWO DRACHMAS	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1015E, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_087)
{
    // 102E2 0041;	
    // (êã¢) COPTIC EPACT DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102E2, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_088)
{
    // 103D2 0041;	
    // (êèí) OLD PERSIAN NUMBER TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103D2, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_089)
{
    // 104A2 0041;	
    // (êí¢) OSMANYA DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104A2, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_090)
{
    // 10859 0041;	
    // (‚Äé‚Äéê°ô‚Äé‚Äé) IMPERIAL ARAMAIC NUMBER TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10859, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_091)
{
    // 1087A 0041;	
    // (‚Äé‚Äéê°∫‚Äé‚Äé) PALMYRENE NUMBER TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1087A, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_092)
{
    // 108A8 0041;	
    // (‚Äé‚Äéê¢®‚Äé‚Äé) NABATAEAN NUMBER TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x108A8, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_093)
{
    // 1091A 0041;	
    // (‚Äé‚Äéê§ö‚Äé‚Äé) PHOENICIAN NUMBER TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1091A, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_094)
{
    // 109C1 0041;	
    // (‚Äé‚ÄéêßÅ‚Äé‚Äé) MEROITIC CURSIVE NUMBER TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109C1, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_095)
{
    // 10A41 0041;	
    // (‚Äé‚Äéê©Å‚Äé‚Äé) KHAROSHTHI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A41, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_096)
{
    // 10B59 0041;	
    // (‚Äé‚Äéê≠ô‚Äé‚Äé) INSCRIPTIONAL PARTHIAN NUMBER TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B59, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_097)
{
    // 10B79 0041;	
    // (‚Äé‚Äéê≠π‚Äé‚Äé) INSCRIPTIONAL PAHLAVI NUMBER TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B79, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_098)
{
    // 10BAA 0041;	
    // (‚Äé‚ÄéêÆ™‚Äé‚Äé) PSALTER PAHLAVI NUMBER TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10BAA, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_099)
{
    // 10E61 0041;	
    // (‚Äéêπ°‚Äé) RUMI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E61, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_100)
{
    // 11053 0041;	
    // (ëÅì) BRAHMI NUMBER TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11053, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_101)
{
    // 11068 0041;	
    // (ëÅ®) BRAHMI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11068, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_102)
{
    // 110F2 0041;	
    // (ëÉ≤) SORA SOMPENG DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110F2, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_103)
{
    // 11138 0041;	
    // (ëÑ∏) CHAKMA DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11138, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_104)
{
    // 111D2 0041;	
    // (ëáí) SHARADA DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111D2, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_105)
{
    // 111E2 0041;	
    // (ëá¢) SINHALA ARCHAIC DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111E2, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_106)
{
    // 112F2 0041;	
    // (ëã≤) KHUDAWADI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112F2, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_107)
{
    // 11452 0041;	
    // (ëëí) NEWA DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11452, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_108)
{
    // 114D2 0041;	
    // (ëìí) TIRHUTA DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114D2, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_109)
{
    // 11652 0041;	
    // (ëôí) MODI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11652, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_110)
{
    // 116C2 0041;	
    // (ëõÇ) TAKRI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116C2, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_111)
{
    // 11732 0041;	
    // (ëú≤) AHOM DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11732, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_112)
{
    // 118E2 0041;	
    // (ë£¢) WARANG CITI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x118E2, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_113)
{
    // 11C52 0041;	
    // (ë±í) BHAIKSUKI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C52, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_114)
{
    // 11C5B 0041;	
    // (ë±õ) BHAIKSUKI NUMBER TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C5B, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_115)
{
    // 11D52 0041;	
    // (ëµí) MASARAM GONDI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11D52, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_116)
{
    // 12400 0041;	
    // (íêÄ) CUNEIFORM NUMERIC SIGN TWO ASH	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12400, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_117)
{
    // 12416 0041;	
    // (íêñ) CUNEIFORM NUMERIC SIGN TWO GESH2	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12416, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_118)
{
    // 1241F 0041;	
    // (íêü) CUNEIFORM NUMERIC SIGN TWO GESHU	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1241F, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_119)
{
    // 12423 0041;	
    // (íê£) CUNEIFORM NUMERIC SIGN TWO SHAR2	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12423, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_120)
{
    // 1242D 0041;	
    // (íê≠) CUNEIFORM NUMERIC SIGN TWO SHARU	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1242D, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_121)
{
    // 12435 0041;	
    // (íêµ) CUNEIFORM NUMERIC SIGN TWO BURU	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12435, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_122)
{
    // 1244A 0041;	
    // (íëä) CUNEIFORM NUMERIC SIGN TWO ASH TENU	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1244A, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_123)
{
    // 12450 0041;	
    // (íëê) CUNEIFORM NUMERIC SIGN TWO BAN2	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12450, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_124)
{
    // 12456 0041;	
    // (íëñ) CUNEIFORM NUMERIC SIGN NIGIDAMIN	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12456, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_125)
{
    // 12459 0041;	
    // (íëô) CUNEIFORM NUMERIC SIGN TWO ESHE3	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12459, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_126)
{
    // 16A62 0041;	
    // (ñ©¢) MRO DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A62, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_127)
{
    // 16B52 0041;	
    // (ñ≠í) PAHAWH HMONG DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B52, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_128)
{
    // 1D361 0041;	
    // (ùç°) COUNTING ROD UNIT DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D361, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_129)
{
    // 1E8C8 0041;	
    // (‚Äé‚Äéû£à‚Äé‚Äé) MENDE KIKAKUI DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E8C8, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_130)
{
    // 1E952 0041;	
    // (‚Äé‚Äéû•í‚Äé‚Äé) ADLAM DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E952, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_131)
{
    // FF12 0061;	
    // (Ôºí) FULLWIDTH DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF12, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_132)
{
    // FF12 0041;	
    // (Ôºí) FULLWIDTH DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF12, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_133)
{
    // 0F2B 0061;	
    // (‡º´) TIBETAN DIGIT HALF TWO	[1CA5 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F2B, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_134)
{
    // 0F2B 0041;	
    // (‡º´) TIBETAN DIGIT HALF TWO	[1CA5 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x0F2B, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_135)
{
    // 1D7D0 0061;	
    // (ùüê) MATHEMATICAL BOLD DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D0, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_136)
{
    // 1D7DA 0061;	
    // (ùüö) MATHEMATICAL DOUBLE-STRUCK DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7DA, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_137)
{
    // 1D7E4 0061;	
    // (ùü§) MATHEMATICAL SANS-SERIF DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E4, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_138)
{
    // 1D7EE 0061;	
    // (ùüÆ) MATHEMATICAL SANS-SERIF BOLD DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7EE, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_139)
{
    // 1D7F8 0061;	
    // (ùü∏) MATHEMATICAL MONOSPACE DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F8, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_140)
{
    // 1D7D0 0041;	
    // (ùüê) MATHEMATICAL BOLD DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7D0, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_141)
{
    // 1D7DA 0041;	
    // (ùüö) MATHEMATICAL DOUBLE-STRUCK DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7DA, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_142)
{
    // 1D7E4 0041;	
    // (ùü§) MATHEMATICAL SANS-SERIF DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7E4, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_143)
{
    // 1D7EE 0041;	
    // (ùüÆ) MATHEMATICAL SANS-SERIF BOLD DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7EE, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_144)
{
    // 1D7F8 0041;	
    // (ùü∏) MATHEMATICAL MONOSPACE DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7F8, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_145)
{
    // 2461 0061;	
    // (‚ë°) CIRCLED DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2461, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_146)
{
    // 24F6 0061;	
    // (‚ì∂) DOUBLE CIRCLED DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24F6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_147)
{
    // 2777 0061;	
    // (‚ù∑) DINGBAT NEGATIVE CIRCLED DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2777, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_148)
{
    // 2781 0061;	
    // (‚ûÅ) DINGBAT CIRCLED SANS-SERIF DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2781, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_149)
{
    // 278B 0061;	
    // (‚ûã) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x278B, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_150)
{
    // 2461 0041;	
    // (‚ë°) CIRCLED DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x2461, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_151)
{
    // 24F6 0041;	
    // (‚ì∂) DOUBLE CIRCLED DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x24F6, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_152)
{
    // 2777 0041;	
    // (‚ù∑) DINGBAT NEGATIVE CIRCLED DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x2777, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_153)
{
    // 2781 0041;	
    // (‚ûÅ) DINGBAT CIRCLED SANS-SERIF DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x2781, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_154)
{
    // 278B 0041;	
    // (‚ûã) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x278B, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_155)
{
    // 00B2 0061;	
    // (¬≤) SUPERSCRIPT TWO	[1CA5 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x00B2, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_156)
{
    // 00B2 0041;	
    // (¬≤) SUPERSCRIPT TWO	[1CA5 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x00B2, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_157)
{
    // 2082 0061;	
    // (‚ÇÇ) SUBSCRIPT TWO	[1CA5 1CAD | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2082, 0x0061 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_158)
{
    // 2082 0041;	
    // (‚ÇÇ) SUBSCRIPT TWO	[1CA5 1CAD | 0020 0020 | 0015 0008 |]

    uint32_t cps[2] = { 0x2082, 0x0041 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_159)
{
    // 0032 0062;	
    // (2) DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0032, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_160)
{
    // 0662 0062;	
    // (‚ÄéŸ¢‚Äé) ARABIC-INDIC DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0662, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_161)
{
    // 06F2 0062;	
    // (€≤) EXTENDED ARABIC-INDIC DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F2, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_162)
{
    // 07C2 0062;	
    // (‚Äé‚ÄéﬂÇ‚Äé‚Äé) NKO DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C2, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_163)
{
    // 0968 0062;	
    // (‡•®) DEVANAGARI DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0968, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_164)
{
    // 09E8 0062;	
    // (‡ß®) BENGALI DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09E8, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_165)
{
    // 0A68 0062;	
    // (‡©®) GURMUKHI DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A68, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_166)
{
    // 0AE8 0062;	
    // (‡´®) GUJARATI DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AE8, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_167)
{
    // 0B68 0062;	
    // (‡≠®) ORIYA DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B68, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_168)
{
    // 0BE8 0062;	
    // (‡Ø®) TAMIL DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BE8, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_169)
{
    // 0C68 0062;	
    // (‡±®) TELUGU DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C68, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_170)
{
    // 0C7A 0062;	
    // (‡±∫) TELUGU FRACTION DIGIT TWO FOR ODD POWERS OF FOUR	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C7A, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_171)
{
    // 0C7D 0062;	
    // (‡±Ω) TELUGU FRACTION DIGIT TWO FOR EVEN POWERS OF FOUR	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C7D, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_172)
{
    // 0CE8 0062;	
    // (‡≥®) KANNADA DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CE8, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_173)
{
    // 0D68 0062;	
    // (‡µ®) MALAYALAM DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D68, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_174)
{
    // 0DE8 0062;	
    // (‡∑®) SINHALA LITH DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DE8, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_175)
{
    // 0E52 0062;	
    // (‡πí) THAI DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E52, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_176)
{
    // 0ED2 0062;	
    // (‡ªí) LAO DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED2, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_177)
{
    // 0F22 0062;	
    // (‡º¢) TIBETAN DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F22, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_178)
{
    // 1042 0062;	
    // (·ÅÇ) MYANMAR DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1042, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_179)
{
    // 1092 0062;	
    // (·Çí) MYANMAR SHAN DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1092, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_180)
{
    // 136A 0062;	
    // (·ç™) ETHIOPIC DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x136A, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_181)
{
    // 17E2 0062;	
    // (·ü¢) KHMER DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E2, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_182)
{
    // 17F2 0062;	
    // (·ü≤) KHMER SYMBOL LEK ATTAK PII	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F2, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_183)
{
    // 1812 0062;	
    // (·†í) MONGOLIAN DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1812, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_184)
{
    // 1948 0062;	
    // (·•à) LIMBU DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1948, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_185)
{
    // 19D2 0062;	
    // (·ßí) NEW TAI LUE DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D2, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_186)
{
    // 1A82 0062;	
    // (·™Ç) TAI THAM HORA DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A82, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_187)
{
    // 1A92 0062;	
    // (·™í) TAI THAM THAM DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A92, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_188)
{
    // 1B52 0062;	
    // (·≠í) BALINESE DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B52, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_189)
{
    // 1BB2 0062;	
    // (·Æ≤) SUNDANESE DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB2, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_190)
{
    // 1C42 0062;	
    // (·±Ç) LEPCHA DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C42, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_191)
{
    // 1C52 0062;	
    // (·±í) OL CHIKI DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C52, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_192)
{
    // 3022 0062;	
    // („Ä¢) HANGZHOU NUMERAL TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3022, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_193)
{
    // A622 0062;	
    // (Íò¢) VAI DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA622, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_194)
{
    // A8D2 0062;	
    // (Í£í) SAURASHTRA DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D2, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_195)
{
    // A902 0062;	
    // (Í§Ç) KAYAH LI DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA902, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_196)
{
    // A9D2 0062;	
    // (Íßí) JAVANESE DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D2, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_197)
{
    // A9F2 0062;	
    // (Íß≤) MYANMAR TAI LAING DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F2, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_198)
{
    // AA52 0062;	
    // (Í©í) CHAM DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA52, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_199)
{
    // ABF2 0062;	
    // (ÍØ≤) MEETEI MAYEK DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF2, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_200)
{
    // 10108 0062;	
    // (êÑà) AEGEAN NUMBER TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10108, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_201)
{
    // 1015B 0062;	
    // (êÖõ) GREEK ACROPHONIC EPIDAUREAN TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1015B, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_202)
{
    // 1015C 0062;	
    // (êÖú) GREEK ACROPHONIC THESPIAN TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1015C, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_203)
{
    // 1015D 0062;	
    // (êÖù) GREEK ACROPHONIC CYRENAIC TWO DRACHMAS	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1015D, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_204)
{
    // 1015E 0062;	
    // (êÖû) GREEK ACROPHONIC EPIDAUREAN TWO DRACHMAS	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1015E, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_205)
{
    // 102E2 0062;	
    // (êã¢) COPTIC EPACT DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E2, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_206)
{
    // 103D2 0062;	
    // (êèí) OLD PERSIAN NUMBER TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103D2, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_207)
{
    // 104A2 0062;	
    // (êí¢) OSMANYA DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A2, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_208)
{
    // 10859 0062;	
    // (‚Äé‚Äéê°ô‚Äé‚Äé) IMPERIAL ARAMAIC NUMBER TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10859, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_209)
{
    // 1087A 0062;	
    // (‚Äé‚Äéê°∫‚Äé‚Äé) PALMYRENE NUMBER TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1087A, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_210)
{
    // 108A8 0062;	
    // (‚Äé‚Äéê¢®‚Äé‚Äé) NABATAEAN NUMBER TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108A8, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_211)
{
    // 1091A 0062;	
    // (‚Äé‚Äéê§ö‚Äé‚Äé) PHOENICIAN NUMBER TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1091A, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_212)
{
    // 109C1 0062;	
    // (‚Äé‚ÄéêßÅ‚Äé‚Äé) MEROITIC CURSIVE NUMBER TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C1, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_213)
{
    // 10A41 0062;	
    // (‚Äé‚Äéê©Å‚Äé‚Äé) KHAROSHTHI DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A41, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_214)
{
    // 10B59 0062;	
    // (‚Äé‚Äéê≠ô‚Äé‚Äé) INSCRIPTIONAL PARTHIAN NUMBER TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B59, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_215)
{
    // 10B79 0062;	
    // (‚Äé‚Äéê≠π‚Äé‚Äé) INSCRIPTIONAL PAHLAVI NUMBER TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B79, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_216)
{
    // 10BAA 0062;	
    // (‚Äé‚ÄéêÆ™‚Äé‚Äé) PSALTER PAHLAVI NUMBER TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10BAA, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_217)
{
    // 10E61 0062;	
    // (‚Äéêπ°‚Äé) RUMI DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E61, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_218)
{
    // 11053 0062;	
    // (ëÅì) BRAHMI NUMBER TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11053, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_219)
{
    // 11068 0062;	
    // (ëÅ®) BRAHMI DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11068, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_220)
{
    // 110F2 0062;	
    // (ëÉ≤) SORA SOMPENG DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F2, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_221)
{
    // 11138 0062;	
    // (ëÑ∏) CHAKMA DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11138, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_222)
{
    // 111D2 0062;	
    // (ëáí) SHARADA DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D2, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_223)
{
    // 111E2 0062;	
    // (ëá¢) SINHALA ARCHAIC DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E2, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_224)
{
    // 112F2 0062;	
    // (ëã≤) KHUDAWADI DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F2, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_225)
{
    // 11452 0062;	
    // (ëëí) NEWA DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11452, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_226)
{
    // 114D2 0062;	
    // (ëìí) TIRHUTA DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D2, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_227)
{
    // 11652 0062;	
    // (ëôí) MODI DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11652, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_228)
{
    // 116C2 0062;	
    // (ëõÇ) TAKRI DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C2, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_229)
{
    // 11732 0062;	
    // (ëú≤) AHOM DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11732, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_230)
{
    // 118E2 0062;	
    // (ë£¢) WARANG CITI DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E2, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_231)
{
    // 11C52 0062;	
    // (ë±í) BHAIKSUKI DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C52, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_232)
{
    // 11C5B 0062;	
    // (ë±õ) BHAIKSUKI NUMBER TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C5B, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_233)
{
    // 11D52 0062;	
    // (ëµí) MASARAM GONDI DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D52, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_234)
{
    // 12400 0062;	
    // (íêÄ) CUNEIFORM NUMERIC SIGN TWO ASH	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12400, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_235)
{
    // 12416 0062;	
    // (íêñ) CUNEIFORM NUMERIC SIGN TWO GESH2	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12416, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_236)
{
    // 1241F 0062;	
    // (íêü) CUNEIFORM NUMERIC SIGN TWO GESHU	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1241F, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_237)
{
    // 12423 0062;	
    // (íê£) CUNEIFORM NUMERIC SIGN TWO SHAR2	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12423, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_238)
{
    // 1242D 0062;	
    // (íê≠) CUNEIFORM NUMERIC SIGN TWO SHARU	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1242D, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_239)
{
    // 12435 0062;	
    // (íêµ) CUNEIFORM NUMERIC SIGN TWO BURU	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12435, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_240)
{
    // 1244A 0062;	
    // (íëä) CUNEIFORM NUMERIC SIGN TWO ASH TENU	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1244A, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_241)
{
    // 12450 0062;	
    // (íëê) CUNEIFORM NUMERIC SIGN TWO BAN2	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12450, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_242)
{
    // 12456 0062;	
    // (íëñ) CUNEIFORM NUMERIC SIGN NIGIDAMIN	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12456, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_243)
{
    // 12459 0062;	
    // (íëô) CUNEIFORM NUMERIC SIGN TWO ESHE3	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12459, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_244)
{
    // 16A62 0062;	
    // (ñ©¢) MRO DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A62, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_245)
{
    // 16B52 0062;	
    // (ñ≠í) PAHAWH HMONG DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B52, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_246)
{
    // 1D361 0062;	
    // (ùç°) COUNTING ROD UNIT DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D361, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_247)
{
    // 1E8C8 0062;	
    // (‚Äé‚Äéû£à‚Äé‚Äé) MENDE KIKAKUI DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8C8, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_248)
{
    // 1E952 0062;	
    // (‚Äé‚Äéû•í‚Äé‚Äé) ADLAM DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E952, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_249)
{
    // FF12 0062;	
    // (Ôºí) FULLWIDTH DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF12, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_250)
{
    // 0F2B 0062;	
    // (‡º´) TIBETAN DIGIT HALF TWO	[1CA5 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F2B, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_251)
{
    // 1D7D0 0062;	
    // (ùüê) MATHEMATICAL BOLD DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D0, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_252)
{
    // 1D7DA 0062;	
    // (ùüö) MATHEMATICAL DOUBLE-STRUCK DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7DA, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_253)
{
    // 1D7E4 0062;	
    // (ùü§) MATHEMATICAL SANS-SERIF DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E4, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_254)
{
    // 1D7EE 0062;	
    // (ùüÆ) MATHEMATICAL SANS-SERIF BOLD DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7EE, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_255)
{
    // 1D7F8 0062;	
    // (ùü∏) MATHEMATICAL MONOSPACE DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F8, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_256)
{
    // 2461 0062;	
    // (‚ë°) CIRCLED DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2461, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_257)
{
    // 24F6 0062;	
    // (‚ì∂) DOUBLE CIRCLED DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24F6, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_258)
{
    // 2777 0062;	
    // (‚ù∑) DINGBAT NEGATIVE CIRCLED DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2777, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_259)
{
    // 2781 0062;	
    // (‚ûÅ) DINGBAT CIRCLED SANS-SERIF DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2781, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_260)
{
    // 278B 0062;	
    // (‚ûã) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x278B, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_261)
{
    // 00B2 0062;	
    // (¬≤) SUPERSCRIPT TWO	[1CA5 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x00B2, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_262)
{
    // 2082 0062;	
    // (‚ÇÇ) SUBSCRIPT TWO	[1CA5 1CC6 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2082, 0x0062 };
    uint32_t const ces[9] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_263)
{
    // 1F19D 0021;	
    // (üÜù) SQUARED TWO K	[1CA5 1DCB 0261 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x1F19D, 0x0021 };
    uint32_t const ces[12] = { 0x1CA5, 0x1DCB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_264)
{
    // 1F19D 003F;	
    // (üÜù) SQUARED TWO K	[1CA5 1DCB 0267 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x1F19D, 0x003F };
    uint32_t const ces[12] = { 0x1CA5, 0x1DCB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_265)
{
    // 1F19D 0061;	
    // (üÜù) SQUARED TWO K	[1CA5 1DCB 1CAD | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x1F19D, 0x0061 };
    uint32_t const ces[12] = { 0x1CA5, 0x1DCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_266)
{
    // 1F19D 0041;	
    // (üÜù) SQUARED TWO K	[1CA5 1DCB 1CAD | 0020 0020 0020 | 001C 001D 0008 |]

    uint32_t cps[2] = { 0x1F19D, 0x0041 };
    uint32_t const ces[12] = { 0x1CA5, 0x1DCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_267)
{
    // 1F19D 0062;	
    // (üÜù) SQUARED TWO K	[1CA5 1DCB 1CC6 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x1F19D, 0x0062 };
    uint32_t const ces[12] = { 0x1CA5, 0x1DCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_268)
{
    // 1F19C 0021;	
    // (üÜú) SQUARED SECOND SCREEN	[1CA5 1E1F 1CF5 0209 1ED7 1CE0 1E99 0261 | 0020 0020 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001D 001C 001C 0002 |]

    uint32_t cps[2] = { 0x1F19C, 0x0021 };
    uint32_t const ces[27] = { 0x1CA5, 0x1E1F, 0x1CF5, 0x0209, 0x1ED7, 0x1CE0, 0x1E99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001D, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_269)
{
    // 1F19C 003F;	
    // (üÜú) SQUARED SECOND SCREEN	[1CA5 1E1F 1CF5 0209 1ED7 1CE0 1E99 0267 | 0020 0020 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001D 001C 001C 0002 |]

    uint32_t cps[2] = { 0x1F19C, 0x003F };
    uint32_t const ces[27] = { 0x1CA5, 0x1E1F, 0x1CF5, 0x0209, 0x1ED7, 0x1CE0, 0x1E99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001D, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_270)
{
    // 1F19C 0061;	
    // (üÜú) SQUARED SECOND SCREEN	[1CA5 1E1F 1CF5 0209 1ED7 1CE0 1E99 1CAD | 0020 0020 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001D 001C 001C 0002 |]

    uint32_t cps[2] = { 0x1F19C, 0x0061 };
    uint32_t const ces[27] = { 0x1CA5, 0x1E1F, 0x1CF5, 0x0209, 0x1ED7, 0x1CE0, 0x1E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001D, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_271)
{
    // 1F19C 0041;	
    // (üÜú) SQUARED SECOND SCREEN	[1CA5 1E1F 1CF5 0209 1ED7 1CE0 1E99 1CAD | 0020 0020 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001D 001C 001C 0008 |]

    uint32_t cps[2] = { 0x1F19C, 0x0041 };
    uint32_t const ces[27] = { 0x1CA5, 0x1E1F, 0x1CF5, 0x0209, 0x1ED7, 0x1CE0, 0x1E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001D, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_272)
{
    // 1F19C 0062;	
    // (üÜú) SQUARED SECOND SCREEN	[1CA5 1E1F 1CF5 0209 1ED7 1CE0 1E99 1CC6 | 0020 0020 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001D 001C 001C 0002 |]

    uint32_t cps[2] = { 0x1F19C, 0x0062 };
    uint32_t const ces[27] = { 0x1CA5, 0x1E1F, 0x1CF5, 0x0209, 0x1ED7, 0x1CE0, 0x1E99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001D, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_273)
{
    // 33E1 0021;	
    // („è°) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWO	[1CA5 FB40 E5E5 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E1, 0x0021 };
    uint32_t const ces[13] = { 0x1CA5, 0xFB40, 0xE5E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_274)
{
    // 33E1 003F;	
    // („è°) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWO	[1CA5 FB40 E5E5 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E1, 0x003F };
    uint32_t const ces[13] = { 0x1CA5, 0xFB40, 0xE5E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_275)
{
    // 33E1 0061;	
    // („è°) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWO	[1CA5 FB40 E5E5 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E1, 0x0061 };
    uint32_t const ces[13] = { 0x1CA5, 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_276)
{
    // 33E1 0041;	
    // („è°) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWO	[1CA5 FB40 E5E5 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x33E1, 0x0041 };
    uint32_t const ces[13] = { 0x1CA5, 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_277)
{
    // 33E1 0062;	
    // („è°) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWO	[1CA5 FB40 E5E5 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E1, 0x0062 };
    uint32_t const ces[13] = { 0x1CA5, 0xFB40, 0xE5E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_278)
{
    // 32C1 0021;	
    // („ãÅ) IDEOGRAPHIC TELEGRAPH SYMBOL FOR FEBRUARY	[1CA5 FB40 E708 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C1, 0x0021 };
    uint32_t const ces[13] = { 0x1CA5, 0xFB40, 0xE708, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_279)
{
    // 32C1 003F;	
    // („ãÅ) IDEOGRAPHIC TELEGRAPH SYMBOL FOR FEBRUARY	[1CA5 FB40 E708 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C1, 0x003F };
    uint32_t const ces[13] = { 0x1CA5, 0xFB40, 0xE708, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_280)
{
    // 32C1 0061;	
    // („ãÅ) IDEOGRAPHIC TELEGRAPH SYMBOL FOR FEBRUARY	[1CA5 FB40 E708 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C1, 0x0061 };
    uint32_t const ces[13] = { 0x1CA5, 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_281)
{
    // 32C1 0041;	
    // („ãÅ) IDEOGRAPHIC TELEGRAPH SYMBOL FOR FEBRUARY	[1CA5 FB40 E708 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x32C1, 0x0041 };
    uint32_t const ces[13] = { 0x1CA5, 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_282)
{
    // 32C1 0062;	
    // („ãÅ) IDEOGRAPHIC TELEGRAPH SYMBOL FOR FEBRUARY	[1CA5 FB40 E708 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C1, 0x0062 };
    uint32_t const ces[13] = { 0x1CA5, 0xFB40, 0xE708, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_283)
{
    // 335A 0021;	
    // („çö) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWO	[1CA5 FB40 F0B9 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x335A, 0x0021 };
    uint32_t const ces[13] = { 0x1CA5, 0xFB40, 0xF0B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_284)
{
    // 335A 003F;	
    // („çö) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWO	[1CA5 FB40 F0B9 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x335A, 0x003F };
    uint32_t const ces[13] = { 0x1CA5, 0xFB40, 0xF0B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_285)
{
    // 335A 0061;	
    // („çö) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWO	[1CA5 FB40 F0B9 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x335A, 0x0061 };
    uint32_t const ces[13] = { 0x1CA5, 0xFB40, 0xF0B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_286)
{
    // 335A 0041;	
    // („çö) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWO	[1CA5 FB40 F0B9 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x335A, 0x0041 };
    uint32_t const ces[13] = { 0x1CA5, 0xFB40, 0xF0B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_287)
{
    // 335A 0062;	
    // („çö) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWO	[1CA5 FB40 F0B9 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x335A, 0x0062 };
    uint32_t const ces[13] = { 0x1CA5, 0xFB40, 0xF0B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_288)
{
    // 1F104 0021;	
    // (üÑÑ) DIGIT THREE COMMA	[1CA6 0222 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F104, 0x0021 };
    uint32_t const ces[12] = { 0x1CA6, 0x0222, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_289)
{
    // 1F104 003F;	
    // (üÑÑ) DIGIT THREE COMMA	[1CA6 0222 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F104, 0x003F };
    uint32_t const ces[12] = { 0x1CA6, 0x0222, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_290)
{
    // 1F104 0061;	
    // (üÑÑ) DIGIT THREE COMMA	[1CA6 0222 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F104, 0x0061 };
    uint32_t const ces[12] = { 0x1CA6, 0x0222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_291)
{
    // 1F104 0041;	
    // (üÑÑ) DIGIT THREE COMMA	[1CA6 0222 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1F104, 0x0041 };
    uint32_t const ces[12] = { 0x1CA6, 0x0222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_292)
{
    // 1F104 0062;	
    // (üÑÑ) DIGIT THREE COMMA	[1CA6 0222 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F104, 0x0062 };
    uint32_t const ces[12] = { 0x1CA6, 0x0222, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_293)
{
    // 0033 0021;	
    // (3) DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0033, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_294)
{
    // 0663 0021;	
    // (‚ÄéŸ£‚Äé) ARABIC-INDIC DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0663, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_295)
{
    // 06F3 0021;	
    // (€≥) EXTENDED ARABIC-INDIC DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F3, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_296)
{
    // 07C3 0021;	
    // (‚Äé‚ÄéﬂÉ‚Äé‚Äé) NKO DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C3, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_297)
{
    // 0969 0021;	
    // (‡•©) DEVANAGARI DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0969, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_298)
{
    // 09E9 0021;	
    // (‡ß©) BENGALI DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09E9, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_299)
{
    // 0A69 0021;	
    // (‡©©) GURMUKHI DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A69, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_300)
{
    // 0AE9 0021;	
    // (‡´©) GUJARATI DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AE9, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_301)
{
    // 0B69 0021;	
    // (‡≠©) ORIYA DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B69, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_302)
{
    // 0BE9 0021;	
    // (‡Ø©) TAMIL DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BE9, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_303)
{
    // 0C69 0021;	
    // (‡±©) TELUGU DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C69, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_304)
{
    // 0C7B 0021;	
    // (‡±ª) TELUGU FRACTION DIGIT THREE FOR ODD POWERS OF FOUR	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C7B, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_305)
{
    // 0C7E 0021;	
    // (‡±æ) TELUGU FRACTION DIGIT THREE FOR EVEN POWERS OF FOUR	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C7E, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_306)
{
    // 0CE9 0021;	
    // (‡≥©) KANNADA DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CE9, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_307)
{
    // 0D69 0021;	
    // (‡µ©) MALAYALAM DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D69, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_308)
{
    // 0DE9 0021;	
    // (‡∑©) SINHALA LITH DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DE9, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_309)
{
    // 0E53 0021;	
    // (‡πì) THAI DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E53, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_310)
{
    // 0ED3 0021;	
    // (‡ªì) LAO DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED3, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_311)
{
    // 0F23 0021;	
    // (‡º£) TIBETAN DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F23, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_312)
{
    // 1043 0021;	
    // (·ÅÉ) MYANMAR DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1043, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_313)
{
    // 1093 0021;	
    // (·Çì) MYANMAR SHAN DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1093, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_314)
{
    // 136B 0021;	
    // (·ç´) ETHIOPIC DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x136B, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_315)
{
    // 17E3 0021;	
    // (·ü£) KHMER DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E3, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_316)
{
    // 17F3 0021;	
    // (·ü≥) KHMER SYMBOL LEK ATTAK BEI	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F3, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_317)
{
    // 1813 0021;	
    // (·†ì) MONGOLIAN DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1813, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_318)
{
    // 1949 0021;	
    // (·•â) LIMBU DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1949, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_319)
{
    // 19D3 0021;	
    // (·ßì) NEW TAI LUE DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D3, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_320)
{
    // 1A83 0021;	
    // (·™É) TAI THAM HORA DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A83, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_321)
{
    // 1A93 0021;	
    // (·™ì) TAI THAM THAM DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A93, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_322)
{
    // 1B53 0021;	
    // (·≠ì) BALINESE DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B53, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_323)
{
    // 1BB3 0021;	
    // (·Æ≥) SUNDANESE DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB3, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_324)
{
    // 1C43 0021;	
    // (·±É) LEPCHA DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C43, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_325)
{
    // 1C53 0021;	
    // (·±ì) OL CHIKI DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C53, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_326)
{
    // 3023 0021;	
    // („Ä£) HANGZHOU NUMERAL THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3023, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_327)
{
    // A623 0021;	
    // (Íò£) VAI DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA623, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_328)
{
    // A8D3 0021;	
    // (Í£ì) SAURASHTRA DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D3, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_329)
{
    // A903 0021;	
    // (Í§É) KAYAH LI DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA903, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_330)
{
    // A9D3 0021;	
    // (Íßì) JAVANESE DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D3, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_331)
{
    // A9F3 0021;	
    // (Íß≥) MYANMAR TAI LAING DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F3, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_332)
{
    // AA53 0021;	
    // (Í©ì) CHAM DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA53, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_333)
{
    // ABF3 0021;	
    // (ÍØ≥) MEETEI MAYEK DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF3, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_334)
{
    // 10109 0021;	
    // (êÑâ) AEGEAN NUMBER THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10109, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_335)
{
    // 102E3 0021;	
    // (êã£) COPTIC EPACT DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E3, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_336)
{
    // 104A3 0021;	
    // (êí£) OSMANYA DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A3, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_337)
{
    // 1085A 0021;	
    // (‚Äé‚Äéê°ö‚Äé‚Äé) IMPERIAL ARAMAIC NUMBER THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1085A, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_338)
{
    // 1087B 0021;	
    // (‚Äé‚Äéê°ª‚Äé‚Äé) PALMYRENE NUMBER THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1087B, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_339)
{
    // 108A9 0021;	
    // (‚Äé‚Äéê¢©‚Äé‚Äé) NABATAEAN NUMBER THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108A9, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_340)
{
    // 1091B 0021;	
    // (‚Äé‚Äéê§õ‚Äé‚Äé) PHOENICIAN NUMBER THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1091B, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_341)
{
    // 109C2 0021;	
    // (‚Äé‚ÄéêßÇ‚Äé‚Äé) MEROITIC CURSIVE NUMBER THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C2, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_342)
{
    // 10A42 0021;	
    // (‚Äé‚Äéê©Ç‚Äé‚Äé) KHAROSHTHI DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A42, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_343)
{
    // 10B5A 0021;	
    // (‚Äé‚Äéê≠ö‚Äé‚Äé) INSCRIPTIONAL PARTHIAN NUMBER THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B5A, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_344)
{
    // 10B7A 0021;	
    // (‚Äé‚Äéê≠∫‚Äé‚Äé) INSCRIPTIONAL PAHLAVI NUMBER THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B7A, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_345)
{
    // 10BAB 0021;	
    // (‚Äé‚ÄéêÆ´‚Äé‚Äé) PSALTER PAHLAVI NUMBER THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10BAB, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_346)
{
    // 10E62 0021;	
    // (‚Äéêπ¢‚Äé) RUMI DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E62, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_347)
{
    // 11054 0021;	
    // (ëÅî) BRAHMI NUMBER THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11054, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_348)
{
    // 11069 0021;	
    // (ëÅ©) BRAHMI DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11069, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_349)
{
    // 110F3 0021;	
    // (ëÉ≥) SORA SOMPENG DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F3, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_350)
{
    // 11139 0021;	
    // (ëÑπ) CHAKMA DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11139, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_351)
{
    // 111D3 0021;	
    // (ëáì) SHARADA DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D3, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_352)
{
    // 111E3 0021;	
    // (ëá£) SINHALA ARCHAIC DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E3, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_353)
{
    // 112F3 0021;	
    // (ëã≥) KHUDAWADI DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F3, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_354)
{
    // 11453 0021;	
    // (ëëì) NEWA DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11453, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_355)
{
    // 114D3 0021;	
    // (ëìì) TIRHUTA DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D3, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_356)
{
    // 11653 0021;	
    // (ëôì) MODI DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11653, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_357)
{
    // 116C3 0021;	
    // (ëõÉ) TAKRI DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C3, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_358)
{
    // 11733 0021;	
    // (ëú≥) AHOM DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11733, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_359)
{
    // 118E3 0021;	
    // (ë££) WARANG CITI DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E3, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_360)
{
    // 11C53 0021;	
    // (ë±ì) BHAIKSUKI DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C53, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_361)
{
    // 11C5C 0021;	
    // (ë±ú) BHAIKSUKI NUMBER THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C5C, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_362)
{
    // 11D53 0021;	
    // (ëµì) MASARAM GONDI DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D53, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_363)
{
    // 12401 0021;	
    // (íêÅ) CUNEIFORM NUMERIC SIGN THREE ASH	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12401, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_364)
{
    // 12408 0021;	
    // (íêà) CUNEIFORM NUMERIC SIGN THREE DISH	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12408, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_365)
{
    // 12417 0021;	
    // (íêó) CUNEIFORM NUMERIC SIGN THREE GESH2	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12417, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_366)
{
    // 12420 0021;	
    // (íê†) CUNEIFORM NUMERIC SIGN THREE GESHU	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12420, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_367)
{
    // 12424 0021;	
    // (íê§) CUNEIFORM NUMERIC SIGN THREE SHAR2	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12424, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_368)
{
    // 12425 0021;	
    // (íê•) CUNEIFORM NUMERIC SIGN THREE SHAR2 VARIANT FORM	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12425, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_369)
{
    // 1242E 0021;	
    // (íêÆ) CUNEIFORM NUMERIC SIGN THREE SHARU	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1242E, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_370)
{
    // 1242F 0021;	
    // (íêØ) CUNEIFORM NUMERIC SIGN THREE SHARU VARIANT FORM	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1242F, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_371)
{
    // 12436 0021;	
    // (íê∂) CUNEIFORM NUMERIC SIGN THREE BURU	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12436, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_372)
{
    // 12437 0021;	
    // (íê∑) CUNEIFORM NUMERIC SIGN THREE BURU VARIANT FORM	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12437, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_373)
{
    // 1243A 0021;	
    // (íê∫) CUNEIFORM NUMERIC SIGN THREE VARIANT FORM ESH16	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1243A, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_374)
{
    // 1243B 0021;	
    // (íêª) CUNEIFORM NUMERIC SIGN THREE VARIANT FORM ESH21	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1243B, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_375)
{
    // 1244B 0021;	
    // (íëã) CUNEIFORM NUMERIC SIGN THREE ASH TENU	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1244B, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_376)
{
    // 12451 0021;	
    // (íëë) CUNEIFORM NUMERIC SIGN THREE BAN2	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12451, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_377)
{
    // 12457 0021;	
    // (íëó) CUNEIFORM NUMERIC SIGN NIGIDAESH	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12457, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_378)
{
    // 16A63 0021;	
    // (ñ©£) MRO DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A63, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_379)
{
    // 16B53 0021;	
    // (ñ≠ì) PAHAWH HMONG DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B53, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_380)
{
    // 1D362 0021;	
    // (ùç¢) COUNTING ROD UNIT DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D362, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_381)
{
    // 1E8C9 0021;	
    // (‚Äé‚Äéû£â‚Äé‚Äé) MENDE KIKAKUI DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8C9, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_382)
{
    // 1E953 0021;	
    // (‚Äé‚Äéû•ì‚Äé‚Äé) ADLAM DIGIT THREE	[1CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E953, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_383)
{
    // FF13 0021;	
    // (Ôºì) FULLWIDTH DIGIT THREE	[1CA6 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF13, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_384)
{
    // 0F2C 0021;	
    // (‡º¨) TIBETAN DIGIT HALF THREE	[1CA6 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F2C, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_385)
{
    // 1D7D1 0021;	
    // (ùüë) MATHEMATICAL BOLD DIGIT THREE	[1CA6 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D1, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_386)
{
    // 1D7DB 0021;	
    // (ùüõ) MATHEMATICAL DOUBLE-STRUCK DIGIT THREE	[1CA6 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7DB, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_387)
{
    // 1D7E5 0021;	
    // (ùü•) MATHEMATICAL SANS-SERIF DIGIT THREE	[1CA6 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E5, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_388)
{
    // 1D7EF 0021;	
    // (ùüØ) MATHEMATICAL SANS-SERIF BOLD DIGIT THREE	[1CA6 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7EF, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_389)
{
    // 1D7F9 0021;	
    // (ùüπ) MATHEMATICAL MONOSPACE DIGIT THREE	[1CA6 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F9, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_390)
{
    // 2462 0021;	
    // (‚ë¢) CIRCLED DIGIT THREE	[1CA6 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2462, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_391)
{
    // 24F7 0021;	
    // (‚ì∑) DOUBLE CIRCLED DIGIT THREE	[1CA6 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24F7, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_392)
{
    // 2778 0021;	
    // (‚ù∏) DINGBAT NEGATIVE CIRCLED DIGIT THREE	[1CA6 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2778, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_393)
{
    // 2782 0021;	
    // (‚ûÇ) DINGBAT CIRCLED SANS-SERIF DIGIT THREE	[1CA6 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2782, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_394)
{
    // 278C 0021;	
    // (‚ûå) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT THREE	[1CA6 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x278C, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_395)
{
    // 00B3 0021;	
    // (¬≥) SUPERSCRIPT THREE	[1CA6 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x00B3, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_396)
{
    // 2083 0021;	
    // (‚ÇÉ) SUBSCRIPT THREE	[1CA6 0261 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2083, 0x0021 };
    uint32_t const ces[9] = { 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_397)
{
    // 0033 003F;	
    // (3) DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0033, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_398)
{
    // 0663 003F;	
    // (‚ÄéŸ£‚Äé) ARABIC-INDIC DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0663, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_399)
{
    // 06F3 003F;	
    // (€≥) EXTENDED ARABIC-INDIC DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F3, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_400)
{
    // 07C3 003F;	
    // (‚Äé‚ÄéﬂÉ‚Äé‚Äé) NKO DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C3, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_401)
{
    // 0969 003F;	
    // (‡•©) DEVANAGARI DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0969, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_402)
{
    // 09E9 003F;	
    // (‡ß©) BENGALI DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09E9, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_403)
{
    // 0A69 003F;	
    // (‡©©) GURMUKHI DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A69, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_404)
{
    // 0AE9 003F;	
    // (‡´©) GUJARATI DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AE9, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_405)
{
    // 0B69 003F;	
    // (‡≠©) ORIYA DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B69, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_406)
{
    // 0BE9 003F;	
    // (‡Ø©) TAMIL DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BE9, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_407)
{
    // 0C69 003F;	
    // (‡±©) TELUGU DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C69, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_408)
{
    // 0C7B 003F;	
    // (‡±ª) TELUGU FRACTION DIGIT THREE FOR ODD POWERS OF FOUR	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C7B, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_409)
{
    // 0C7E 003F;	
    // (‡±æ) TELUGU FRACTION DIGIT THREE FOR EVEN POWERS OF FOUR	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C7E, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_410)
{
    // 0CE9 003F;	
    // (‡≥©) KANNADA DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CE9, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_411)
{
    // 0D69 003F;	
    // (‡µ©) MALAYALAM DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D69, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_412)
{
    // 0DE9 003F;	
    // (‡∑©) SINHALA LITH DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DE9, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_413)
{
    // 0E53 003F;	
    // (‡πì) THAI DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E53, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_414)
{
    // 0ED3 003F;	
    // (‡ªì) LAO DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED3, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_415)
{
    // 0F23 003F;	
    // (‡º£) TIBETAN DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F23, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_416)
{
    // 1043 003F;	
    // (·ÅÉ) MYANMAR DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1043, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_417)
{
    // 1093 003F;	
    // (·Çì) MYANMAR SHAN DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1093, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_418)
{
    // 136B 003F;	
    // (·ç´) ETHIOPIC DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x136B, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_419)
{
    // 17E3 003F;	
    // (·ü£) KHMER DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E3, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_420)
{
    // 17F3 003F;	
    // (·ü≥) KHMER SYMBOL LEK ATTAK BEI	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F3, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_421)
{
    // 1813 003F;	
    // (·†ì) MONGOLIAN DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1813, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_422)
{
    // 1949 003F;	
    // (·•â) LIMBU DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1949, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_423)
{
    // 19D3 003F;	
    // (·ßì) NEW TAI LUE DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D3, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_424)
{
    // 1A83 003F;	
    // (·™É) TAI THAM HORA DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A83, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_425)
{
    // 1A93 003F;	
    // (·™ì) TAI THAM THAM DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A93, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_426)
{
    // 1B53 003F;	
    // (·≠ì) BALINESE DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B53, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_427)
{
    // 1BB3 003F;	
    // (·Æ≥) SUNDANESE DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB3, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_428)
{
    // 1C43 003F;	
    // (·±É) LEPCHA DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C43, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_429)
{
    // 1C53 003F;	
    // (·±ì) OL CHIKI DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C53, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_430)
{
    // 3023 003F;	
    // („Ä£) HANGZHOU NUMERAL THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3023, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_431)
{
    // A623 003F;	
    // (Íò£) VAI DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA623, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_432)
{
    // A8D3 003F;	
    // (Í£ì) SAURASHTRA DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D3, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_433)
{
    // A903 003F;	
    // (Í§É) KAYAH LI DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA903, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_434)
{
    // A9D3 003F;	
    // (Íßì) JAVANESE DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D3, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_435)
{
    // A9F3 003F;	
    // (Íß≥) MYANMAR TAI LAING DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F3, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_436)
{
    // AA53 003F;	
    // (Í©ì) CHAM DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA53, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_437)
{
    // ABF3 003F;	
    // (ÍØ≥) MEETEI MAYEK DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF3, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_438)
{
    // 10109 003F;	
    // (êÑâ) AEGEAN NUMBER THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10109, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_439)
{
    // 102E3 003F;	
    // (êã£) COPTIC EPACT DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E3, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_440)
{
    // 104A3 003F;	
    // (êí£) OSMANYA DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A3, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_441)
{
    // 1085A 003F;	
    // (‚Äé‚Äéê°ö‚Äé‚Äé) IMPERIAL ARAMAIC NUMBER THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1085A, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_442)
{
    // 1087B 003F;	
    // (‚Äé‚Äéê°ª‚Äé‚Äé) PALMYRENE NUMBER THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1087B, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_443)
{
    // 108A9 003F;	
    // (‚Äé‚Äéê¢©‚Äé‚Äé) NABATAEAN NUMBER THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108A9, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_444)
{
    // 1091B 003F;	
    // (‚Äé‚Äéê§õ‚Äé‚Äé) PHOENICIAN NUMBER THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1091B, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_445)
{
    // 109C2 003F;	
    // (‚Äé‚ÄéêßÇ‚Äé‚Äé) MEROITIC CURSIVE NUMBER THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C2, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_446)
{
    // 10A42 003F;	
    // (‚Äé‚Äéê©Ç‚Äé‚Äé) KHAROSHTHI DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A42, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_447)
{
    // 10B5A 003F;	
    // (‚Äé‚Äéê≠ö‚Äé‚Äé) INSCRIPTIONAL PARTHIAN NUMBER THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B5A, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_448)
{
    // 10B7A 003F;	
    // (‚Äé‚Äéê≠∫‚Äé‚Äé) INSCRIPTIONAL PAHLAVI NUMBER THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B7A, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_449)
{
    // 10BAB 003F;	
    // (‚Äé‚ÄéêÆ´‚Äé‚Äé) PSALTER PAHLAVI NUMBER THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10BAB, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_450)
{
    // 10E62 003F;	
    // (‚Äéêπ¢‚Äé) RUMI DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E62, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_451)
{
    // 11054 003F;	
    // (ëÅî) BRAHMI NUMBER THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11054, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_452)
{
    // 11069 003F;	
    // (ëÅ©) BRAHMI DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11069, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_453)
{
    // 110F3 003F;	
    // (ëÉ≥) SORA SOMPENG DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F3, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_454)
{
    // 11139 003F;	
    // (ëÑπ) CHAKMA DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11139, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_455)
{
    // 111D3 003F;	
    // (ëáì) SHARADA DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D3, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_456)
{
    // 111E3 003F;	
    // (ëá£) SINHALA ARCHAIC DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E3, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_457)
{
    // 112F3 003F;	
    // (ëã≥) KHUDAWADI DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F3, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_458)
{
    // 11453 003F;	
    // (ëëì) NEWA DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11453, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_459)
{
    // 114D3 003F;	
    // (ëìì) TIRHUTA DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D3, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_460)
{
    // 11653 003F;	
    // (ëôì) MODI DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11653, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_461)
{
    // 116C3 003F;	
    // (ëõÉ) TAKRI DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C3, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_462)
{
    // 11733 003F;	
    // (ëú≥) AHOM DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11733, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_463)
{
    // 118E3 003F;	
    // (ë££) WARANG CITI DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E3, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_464)
{
    // 11C53 003F;	
    // (ë±ì) BHAIKSUKI DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C53, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_465)
{
    // 11C5C 003F;	
    // (ë±ú) BHAIKSUKI NUMBER THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C5C, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_466)
{
    // 11D53 003F;	
    // (ëµì) MASARAM GONDI DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D53, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_467)
{
    // 12401 003F;	
    // (íêÅ) CUNEIFORM NUMERIC SIGN THREE ASH	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12401, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_468)
{
    // 12408 003F;	
    // (íêà) CUNEIFORM NUMERIC SIGN THREE DISH	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12408, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_469)
{
    // 12417 003F;	
    // (íêó) CUNEIFORM NUMERIC SIGN THREE GESH2	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12417, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_470)
{
    // 12420 003F;	
    // (íê†) CUNEIFORM NUMERIC SIGN THREE GESHU	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12420, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_471)
{
    // 12424 003F;	
    // (íê§) CUNEIFORM NUMERIC SIGN THREE SHAR2	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12424, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_472)
{
    // 12425 003F;	
    // (íê•) CUNEIFORM NUMERIC SIGN THREE SHAR2 VARIANT FORM	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12425, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_473)
{
    // 1242E 003F;	
    // (íêÆ) CUNEIFORM NUMERIC SIGN THREE SHARU	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1242E, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_474)
{
    // 1242F 003F;	
    // (íêØ) CUNEIFORM NUMERIC SIGN THREE SHARU VARIANT FORM	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1242F, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_475)
{
    // 12436 003F;	
    // (íê∂) CUNEIFORM NUMERIC SIGN THREE BURU	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12436, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_476)
{
    // 12437 003F;	
    // (íê∑) CUNEIFORM NUMERIC SIGN THREE BURU VARIANT FORM	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12437, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_477)
{
    // 1243A 003F;	
    // (íê∫) CUNEIFORM NUMERIC SIGN THREE VARIANT FORM ESH16	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1243A, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_478)
{
    // 1243B 003F;	
    // (íêª) CUNEIFORM NUMERIC SIGN THREE VARIANT FORM ESH21	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1243B, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_479)
{
    // 1244B 003F;	
    // (íëã) CUNEIFORM NUMERIC SIGN THREE ASH TENU	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1244B, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_480)
{
    // 12451 003F;	
    // (íëë) CUNEIFORM NUMERIC SIGN THREE BAN2	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12451, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_481)
{
    // 12457 003F;	
    // (íëó) CUNEIFORM NUMERIC SIGN NIGIDAESH	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12457, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_482)
{
    // 16A63 003F;	
    // (ñ©£) MRO DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A63, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_483)
{
    // 16B53 003F;	
    // (ñ≠ì) PAHAWH HMONG DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B53, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_484)
{
    // 1D362 003F;	
    // (ùç¢) COUNTING ROD UNIT DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D362, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_485)
{
    // 1E8C9 003F;	
    // (‚Äé‚Äéû£â‚Äé‚Äé) MENDE KIKAKUI DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8C9, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_486)
{
    // 1E953 003F;	
    // (‚Äé‚Äéû•ì‚Äé‚Äé) ADLAM DIGIT THREE	[1CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E953, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_487)
{
    // FF13 003F;	
    // (Ôºì) FULLWIDTH DIGIT THREE	[1CA6 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF13, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_488)
{
    // 0F2C 003F;	
    // (‡º¨) TIBETAN DIGIT HALF THREE	[1CA6 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F2C, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_489)
{
    // 1D7D1 003F;	
    // (ùüë) MATHEMATICAL BOLD DIGIT THREE	[1CA6 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D1, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_490)
{
    // 1D7DB 003F;	
    // (ùüõ) MATHEMATICAL DOUBLE-STRUCK DIGIT THREE	[1CA6 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7DB, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_491)
{
    // 1D7E5 003F;	
    // (ùü•) MATHEMATICAL SANS-SERIF DIGIT THREE	[1CA6 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E5, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_492)
{
    // 1D7EF 003F;	
    // (ùüØ) MATHEMATICAL SANS-SERIF BOLD DIGIT THREE	[1CA6 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7EF, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_493)
{
    // 1D7F9 003F;	
    // (ùüπ) MATHEMATICAL MONOSPACE DIGIT THREE	[1CA6 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F9, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_494)
{
    // 2462 003F;	
    // (‚ë¢) CIRCLED DIGIT THREE	[1CA6 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2462, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_495)
{
    // 24F7 003F;	
    // (‚ì∑) DOUBLE CIRCLED DIGIT THREE	[1CA6 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24F7, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_496)
{
    // 2778 003F;	
    // (‚ù∏) DINGBAT NEGATIVE CIRCLED DIGIT THREE	[1CA6 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2778, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_497)
{
    // 2782 003F;	
    // (‚ûÇ) DINGBAT CIRCLED SANS-SERIF DIGIT THREE	[1CA6 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2782, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_498)
{
    // 278C 003F;	
    // (‚ûå) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT THREE	[1CA6 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x278C, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_084_499)
{
    // 00B3 003F;	
    // (¬≥) SUPERSCRIPT THREE	[1CA6 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x00B3, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

