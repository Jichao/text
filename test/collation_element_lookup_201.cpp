// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_201_000)
{
    // 1F818 ; [*1823.0020.0002] 
    // HEAVY LEFTWARDS ARROW WITH EQUILATERAL ARROWHEAD

    uint32_t const cps[1] = { 0x1f818 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1823), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_001)
{
    // 1F819 ; [*1824.0020.0002] 
    // HEAVY UPWARDS ARROW WITH EQUILATERAL ARROWHEAD

    uint32_t const cps[1] = { 0x1f819 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1824), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_002)
{
    // 1F81A ; [*1825.0020.0002] 
    // HEAVY RIGHTWARDS ARROW WITH EQUILATERAL ARROWHEAD

    uint32_t const cps[1] = { 0x1f81a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1825), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_003)
{
    // 1F81B ; [*1826.0020.0002] 
    // HEAVY DOWNWARDS ARROW WITH EQUILATERAL ARROWHEAD

    uint32_t const cps[1] = { 0x1f81b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1826), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_004)
{
    // 1F81C ; [*1827.0020.0002] 
    // HEAVY LEFTWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD

    uint32_t const cps[1] = { 0x1f81c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1827), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_005)
{
    // 1F81D ; [*1828.0020.0002] 
    // HEAVY UPWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD

    uint32_t const cps[1] = { 0x1f81d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1828), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_006)
{
    // 1F81E ; [*1829.0020.0002] 
    // HEAVY RIGHTWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD

    uint32_t const cps[1] = { 0x1f81e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1829), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_007)
{
    // 1F81F ; [*182A.0020.0002] 
    // HEAVY DOWNWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD

    uint32_t const cps[1] = { 0x1f81f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x182a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_008)
{
    // 1F820 ; [*182B.0020.0002] 
    // LEFTWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT

    uint32_t const cps[1] = { 0x1f820 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x182b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_009)
{
    // 1F821 ; [*182C.0020.0002] 
    // UPWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT

    uint32_t const cps[1] = { 0x1f821 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x182c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_010)
{
    // 1F822 ; [*182D.0020.0002] 
    // RIGHTWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT

    uint32_t const cps[1] = { 0x1f822 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x182d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_011)
{
    // 1F823 ; [*182E.0020.0002] 
    // DOWNWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT

    uint32_t const cps[1] = { 0x1f823 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x182e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_012)
{
    // 1F824 ; [*182F.0020.0002] 
    // LEFTWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT

    uint32_t const cps[1] = { 0x1f824 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x182f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_013)
{
    // 1F825 ; [*1830.0020.0002] 
    // UPWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT

    uint32_t const cps[1] = { 0x1f825 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1830), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_014)
{
    // 1F826 ; [*1831.0020.0002] 
    // RIGHTWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT

    uint32_t const cps[1] = { 0x1f826 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1831), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_015)
{
    // 1F827 ; [*1832.0020.0002] 
    // DOWNWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT

    uint32_t const cps[1] = { 0x1f827 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1832), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_016)
{
    // 1F828 ; [*1833.0020.0002] 
    // LEFTWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT

    uint32_t const cps[1] = { 0x1f828 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1833), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_017)
{
    // 1F829 ; [*1834.0020.0002] 
    // UPWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT

    uint32_t const cps[1] = { 0x1f829 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1834), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_018)
{
    // 1F82A ; [*1835.0020.0002] 
    // RIGHTWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT

    uint32_t const cps[1] = { 0x1f82a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1835), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_019)
{
    // 1F82B ; [*1836.0020.0002] 
    // DOWNWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT

    uint32_t const cps[1] = { 0x1f82b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1836), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_020)
{
    // 1F82C ; [*1837.0020.0002] 
    // LEFTWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT

    uint32_t const cps[1] = { 0x1f82c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1837), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_021)
{
    // 1F82D ; [*1838.0020.0002] 
    // UPWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT

    uint32_t const cps[1] = { 0x1f82d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1838), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_022)
{
    // 1F82E ; [*1839.0020.0002] 
    // RIGHTWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT

    uint32_t const cps[1] = { 0x1f82e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1839), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_023)
{
    // 1F82F ; [*183A.0020.0002] 
    // DOWNWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT

    uint32_t const cps[1] = { 0x1f82f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x183a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_024)
{
    // 1F830 ; [*183B.0020.0002] 
    // LEFTWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT

    uint32_t const cps[1] = { 0x1f830 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x183b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_025)
{
    // 1F831 ; [*183C.0020.0002] 
    // UPWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT

    uint32_t const cps[1] = { 0x1f831 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x183c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_026)
{
    // 1F832 ; [*183D.0020.0002] 
    // RIGHTWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT

    uint32_t const cps[1] = { 0x1f832 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x183d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_027)
{
    // 1F833 ; [*183E.0020.0002] 
    // DOWNWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT

    uint32_t const cps[1] = { 0x1f833 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x183e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_028)
{
    // 1F834 ; [*183F.0020.0002] 
    // LEFTWARDS FINGER-POST ARROW

    uint32_t const cps[1] = { 0x1f834 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x183f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_029)
{
    // 1F835 ; [*1840.0020.0002] 
    // UPWARDS FINGER-POST ARROW

    uint32_t const cps[1] = { 0x1f835 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1840), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_030)
{
    // 1F836 ; [*1841.0020.0002] 
    // RIGHTWARDS FINGER-POST ARROW

    uint32_t const cps[1] = { 0x1f836 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1841), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_031)
{
    // 1F837 ; [*1842.0020.0002] 
    // DOWNWARDS FINGER-POST ARROW

    uint32_t const cps[1] = { 0x1f837 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1842), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_032)
{
    // 1F838 ; [*1843.0020.0002] 
    // LEFTWARDS SQUARED ARROW

    uint32_t const cps[1] = { 0x1f838 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1843), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_033)
{
    // 1F839 ; [*1844.0020.0002] 
    // UPWARDS SQUARED ARROW

    uint32_t const cps[1] = { 0x1f839 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1844), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_034)
{
    // 1F83A ; [*1845.0020.0002] 
    // RIGHTWARDS SQUARED ARROW

    uint32_t const cps[1] = { 0x1f83a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1845), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_035)
{
    // 1F83B ; [*1846.0020.0002] 
    // DOWNWARDS SQUARED ARROW

    uint32_t const cps[1] = { 0x1f83b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1846), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_036)
{
    // 1F83C ; [*1847.0020.0002] 
    // LEFTWARDS COMPRESSED ARROW

    uint32_t const cps[1] = { 0x1f83c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1847), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_037)
{
    // 1F83D ; [*1848.0020.0002] 
    // UPWARDS COMPRESSED ARROW

    uint32_t const cps[1] = { 0x1f83d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1848), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_038)
{
    // 1F83E ; [*1849.0020.0002] 
    // RIGHTWARDS COMPRESSED ARROW

    uint32_t const cps[1] = { 0x1f83e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1849), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_039)
{
    // 1F83F ; [*184A.0020.0002] 
    // DOWNWARDS COMPRESSED ARROW

    uint32_t const cps[1] = { 0x1f83f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x184a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_040)
{
    // 1F840 ; [*184B.0020.0002] 
    // LEFTWARDS HEAVY COMPRESSED ARROW

    uint32_t const cps[1] = { 0x1f840 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x184b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_041)
{
    // 1F841 ; [*184C.0020.0002] 
    // UPWARDS HEAVY COMPRESSED ARROW

    uint32_t const cps[1] = { 0x1f841 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x184c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_042)
{
    // 1F842 ; [*184D.0020.0002] 
    // RIGHTWARDS HEAVY COMPRESSED ARROW

    uint32_t const cps[1] = { 0x1f842 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x184d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_043)
{
    // 1F843 ; [*184E.0020.0002] 
    // DOWNWARDS HEAVY COMPRESSED ARROW

    uint32_t const cps[1] = { 0x1f843 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x184e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_044)
{
    // 1F844 ; [*184F.0020.0002] 
    // LEFTWARDS HEAVY ARROW

    uint32_t const cps[1] = { 0x1f844 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x184f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_045)
{
    // 1F845 ; [*1850.0020.0002] 
    // UPWARDS HEAVY ARROW

    uint32_t const cps[1] = { 0x1f845 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1850), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_046)
{
    // 1F846 ; [*1851.0020.0002] 
    // RIGHTWARDS HEAVY ARROW

    uint32_t const cps[1] = { 0x1f846 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1851), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_047)
{
    // 1F847 ; [*1852.0020.0002] 
    // DOWNWARDS HEAVY ARROW

    uint32_t const cps[1] = { 0x1f847 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1852), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_048)
{
    // 1F850 ; [*1853.0020.0002] 
    // LEFTWARDS SANS-SERIF ARROW

    uint32_t const cps[1] = { 0x1f850 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1853), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_049)
{
    // 1F851 ; [*1854.0020.0002] 
    // UPWARDS SANS-SERIF ARROW

    uint32_t const cps[1] = { 0x1f851 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1854), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_050)
{
    // 1F852 ; [*1855.0020.0002] 
    // RIGHTWARDS SANS-SERIF ARROW

    uint32_t const cps[1] = { 0x1f852 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1855), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_051)
{
    // 1F853 ; [*1856.0020.0002] 
    // DOWNWARDS SANS-SERIF ARROW

    uint32_t const cps[1] = { 0x1f853 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1856), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_052)
{
    // 1F854 ; [*1857.0020.0002] 
    // NORTH WEST SANS-SERIF ARROW

    uint32_t const cps[1] = { 0x1f854 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1857), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_053)
{
    // 1F855 ; [*1858.0020.0002] 
    // NORTH EAST SANS-SERIF ARROW

    uint32_t const cps[1] = { 0x1f855 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1858), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_054)
{
    // 1F856 ; [*1859.0020.0002] 
    // SOUTH EAST SANS-SERIF ARROW

    uint32_t const cps[1] = { 0x1f856 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1859), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_055)
{
    // 1F857 ; [*185A.0020.0002] 
    // SOUTH WEST SANS-SERIF ARROW

    uint32_t const cps[1] = { 0x1f857 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x185a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_056)
{
    // 1F858 ; [*185B.0020.0002] 
    // LEFT RIGHT SANS-SERIF ARROW

    uint32_t const cps[1] = { 0x1f858 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x185b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_057)
{
    // 1F859 ; [*185C.0020.0002] 
    // UP DOWN SANS-SERIF ARROW

    uint32_t const cps[1] = { 0x1f859 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x185c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_058)
{
    // 1F860 ; [*185D.0020.0002] 
    // WIDE-HEADED LEFTWARDS LIGHT BARB ARROW

    uint32_t const cps[1] = { 0x1f860 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x185d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_059)
{
    // 1F861 ; [*185E.0020.0002] 
    // WIDE-HEADED UPWARDS LIGHT BARB ARROW

    uint32_t const cps[1] = { 0x1f861 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x185e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_060)
{
    // 1F862 ; [*185F.0020.0002] 
    // WIDE-HEADED RIGHTWARDS LIGHT BARB ARROW

    uint32_t const cps[1] = { 0x1f862 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x185f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_061)
{
    // 1F863 ; [*1860.0020.0002] 
    // WIDE-HEADED DOWNWARDS LIGHT BARB ARROW

    uint32_t const cps[1] = { 0x1f863 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1860), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_062)
{
    // 1F864 ; [*1861.0020.0002] 
    // WIDE-HEADED NORTH WEST LIGHT BARB ARROW

    uint32_t const cps[1] = { 0x1f864 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1861), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_063)
{
    // 1F865 ; [*1862.0020.0002] 
    // WIDE-HEADED NORTH EAST LIGHT BARB ARROW

    uint32_t const cps[1] = { 0x1f865 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1862), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_064)
{
    // 1F866 ; [*1863.0020.0002] 
    // WIDE-HEADED SOUTH EAST LIGHT BARB ARROW

    uint32_t const cps[1] = { 0x1f866 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1863), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_065)
{
    // 1F867 ; [*1864.0020.0002] 
    // WIDE-HEADED SOUTH WEST LIGHT BARB ARROW

    uint32_t const cps[1] = { 0x1f867 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1864), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_066)
{
    // 1F868 ; [*1865.0020.0002] 
    // WIDE-HEADED LEFTWARDS BARB ARROW

    uint32_t const cps[1] = { 0x1f868 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1865), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_067)
{
    // 1F869 ; [*1866.0020.0002] 
    // WIDE-HEADED UPWARDS BARB ARROW

    uint32_t const cps[1] = { 0x1f869 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1866), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_068)
{
    // 1F86A ; [*1867.0020.0002] 
    // WIDE-HEADED RIGHTWARDS BARB ARROW

    uint32_t const cps[1] = { 0x1f86a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1867), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_069)
{
    // 1F86B ; [*1868.0020.0002] 
    // WIDE-HEADED DOWNWARDS BARB ARROW

    uint32_t const cps[1] = { 0x1f86b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1868), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_070)
{
    // 1F86C ; [*1869.0020.0002] 
    // WIDE-HEADED NORTH WEST BARB ARROW

    uint32_t const cps[1] = { 0x1f86c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1869), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_071)
{
    // 1F86D ; [*186A.0020.0002] 
    // WIDE-HEADED NORTH EAST BARB ARROW

    uint32_t const cps[1] = { 0x1f86d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x186a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_072)
{
    // 1F86E ; [*186B.0020.0002] 
    // WIDE-HEADED SOUTH EAST BARB ARROW

    uint32_t const cps[1] = { 0x1f86e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x186b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_073)
{
    // 1F86F ; [*186C.0020.0002] 
    // WIDE-HEADED SOUTH WEST BARB ARROW

    uint32_t const cps[1] = { 0x1f86f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x186c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_074)
{
    // 1F870 ; [*186D.0020.0002] 
    // WIDE-HEADED LEFTWARDS MEDIUM BARB ARROW

    uint32_t const cps[1] = { 0x1f870 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x186d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_075)
{
    // 1F871 ; [*186E.0020.0002] 
    // WIDE-HEADED UPWARDS MEDIUM BARB ARROW

    uint32_t const cps[1] = { 0x1f871 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x186e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_076)
{
    // 1F872 ; [*186F.0020.0002] 
    // WIDE-HEADED RIGHTWARDS MEDIUM BARB ARROW

    uint32_t const cps[1] = { 0x1f872 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x186f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_077)
{
    // 1F873 ; [*1870.0020.0002] 
    // WIDE-HEADED DOWNWARDS MEDIUM BARB ARROW

    uint32_t const cps[1] = { 0x1f873 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1870), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_078)
{
    // 1F874 ; [*1871.0020.0002] 
    // WIDE-HEADED NORTH WEST MEDIUM BARB ARROW

    uint32_t const cps[1] = { 0x1f874 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1871), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_079)
{
    // 1F875 ; [*1872.0020.0002] 
    // WIDE-HEADED NORTH EAST MEDIUM BARB ARROW

    uint32_t const cps[1] = { 0x1f875 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1872), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_080)
{
    // 1F876 ; [*1873.0020.0002] 
    // WIDE-HEADED SOUTH EAST MEDIUM BARB ARROW

    uint32_t const cps[1] = { 0x1f876 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1873), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_081)
{
    // 1F877 ; [*1874.0020.0002] 
    // WIDE-HEADED SOUTH WEST MEDIUM BARB ARROW

    uint32_t const cps[1] = { 0x1f877 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1874), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_082)
{
    // 1F878 ; [*1875.0020.0002] 
    // WIDE-HEADED LEFTWARDS HEAVY BARB ARROW

    uint32_t const cps[1] = { 0x1f878 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1875), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_083)
{
    // 1F879 ; [*1876.0020.0002] 
    // WIDE-HEADED UPWARDS HEAVY BARB ARROW

    uint32_t const cps[1] = { 0x1f879 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1876), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_084)
{
    // 1F87A ; [*1877.0020.0002] 
    // WIDE-HEADED RIGHTWARDS HEAVY BARB ARROW

    uint32_t const cps[1] = { 0x1f87a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1877), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_085)
{
    // 1F87B ; [*1878.0020.0002] 
    // WIDE-HEADED DOWNWARDS HEAVY BARB ARROW

    uint32_t const cps[1] = { 0x1f87b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1878), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_086)
{
    // 1F87C ; [*1879.0020.0002] 
    // WIDE-HEADED NORTH WEST HEAVY BARB ARROW

    uint32_t const cps[1] = { 0x1f87c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1879), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_087)
{
    // 1F87D ; [*187A.0020.0002] 
    // WIDE-HEADED NORTH EAST HEAVY BARB ARROW

    uint32_t const cps[1] = { 0x1f87d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x187a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_088)
{
    // 1F87E ; [*187B.0020.0002] 
    // WIDE-HEADED SOUTH EAST HEAVY BARB ARROW

    uint32_t const cps[1] = { 0x1f87e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x187b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_089)
{
    // 1F87F ; [*187C.0020.0002] 
    // WIDE-HEADED SOUTH WEST HEAVY BARB ARROW

    uint32_t const cps[1] = { 0x1f87f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x187c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_090)
{
    // 1F880 ; [*187D.0020.0002] 
    // WIDE-HEADED LEFTWARDS VERY HEAVY BARB ARROW

    uint32_t const cps[1] = { 0x1f880 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x187d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_091)
{
    // 1F881 ; [*187E.0020.0002] 
    // WIDE-HEADED UPWARDS VERY HEAVY BARB ARROW

    uint32_t const cps[1] = { 0x1f881 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x187e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_092)
{
    // 1F882 ; [*187F.0020.0002] 
    // WIDE-HEADED RIGHTWARDS VERY HEAVY BARB ARROW

    uint32_t const cps[1] = { 0x1f882 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x187f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_093)
{
    // 1F883 ; [*1880.0020.0002] 
    // WIDE-HEADED DOWNWARDS VERY HEAVY BARB ARROW

    uint32_t const cps[1] = { 0x1f883 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1880), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_094)
{
    // 1F884 ; [*1881.0020.0002] 
    // WIDE-HEADED NORTH WEST VERY HEAVY BARB ARROW

    uint32_t const cps[1] = { 0x1f884 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1881), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_095)
{
    // 1F885 ; [*1882.0020.0002] 
    // WIDE-HEADED NORTH EAST VERY HEAVY BARB ARROW

    uint32_t const cps[1] = { 0x1f885 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1882), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_096)
{
    // 1F886 ; [*1883.0020.0002] 
    // WIDE-HEADED SOUTH EAST VERY HEAVY BARB ARROW

    uint32_t const cps[1] = { 0x1f886 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1883), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_097)
{
    // 1F887 ; [*1884.0020.0002] 
    // WIDE-HEADED SOUTH WEST VERY HEAVY BARB ARROW

    uint32_t const cps[1] = { 0x1f887 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1884), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_098)
{
    // 1F890 ; [*1885.0020.0002] 
    // LEFTWARDS TRIANGLE ARROWHEAD

    uint32_t const cps[1] = { 0x1f890 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1885), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_099)
{
    // 1F891 ; [*1886.0020.0002] 
    // UPWARDS TRIANGLE ARROWHEAD

    uint32_t const cps[1] = { 0x1f891 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1886), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_100)
{
    // 1F892 ; [*1887.0020.0002] 
    // RIGHTWARDS TRIANGLE ARROWHEAD

    uint32_t const cps[1] = { 0x1f892 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1887), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_101)
{
    // 1F893 ; [*1888.0020.0002] 
    // DOWNWARDS TRIANGLE ARROWHEAD

    uint32_t const cps[1] = { 0x1f893 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1888), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_102)
{
    // 1F894 ; [*1889.0020.0002] 
    // LEFTWARDS WHITE ARROW WITHIN TRIANGLE ARROWHEAD

    uint32_t const cps[1] = { 0x1f894 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1889), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_103)
{
    // 1F895 ; [*188A.0020.0002] 
    // UPWARDS WHITE ARROW WITHIN TRIANGLE ARROWHEAD

    uint32_t const cps[1] = { 0x1f895 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x188a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_104)
{
    // 1F896 ; [*188B.0020.0002] 
    // RIGHTWARDS WHITE ARROW WITHIN TRIANGLE ARROWHEAD

    uint32_t const cps[1] = { 0x1f896 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x188b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_105)
{
    // 1F897 ; [*188C.0020.0002] 
    // DOWNWARDS WHITE ARROW WITHIN TRIANGLE ARROWHEAD

    uint32_t const cps[1] = { 0x1f897 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x188c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_106)
{
    // 1F898 ; [*188D.0020.0002] 
    // LEFTWARDS ARROW WITH NOTCHED TAIL

    uint32_t const cps[1] = { 0x1f898 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x188d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_107)
{
    // 1F899 ; [*188E.0020.0002] 
    // UPWARDS ARROW WITH NOTCHED TAIL

    uint32_t const cps[1] = { 0x1f899 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x188e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_108)
{
    // 1F89A ; [*188F.0020.0002] 
    // RIGHTWARDS ARROW WITH NOTCHED TAIL

    uint32_t const cps[1] = { 0x1f89a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x188f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_109)
{
    // 1F89B ; [*1890.0020.0002] 
    // DOWNWARDS ARROW WITH NOTCHED TAIL

    uint32_t const cps[1] = { 0x1f89b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1890), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_110)
{
    // 1F89C ; [*1891.0020.0002] 
    // HEAVY ARROW SHAFT WIDTH ONE

    uint32_t const cps[1] = { 0x1f89c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1891), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_111)
{
    // 1F89D ; [*1892.0020.0002] 
    // HEAVY ARROW SHAFT WIDTH TWO THIRDS

    uint32_t const cps[1] = { 0x1f89d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1892), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_112)
{
    // 1F89E ; [*1893.0020.0002] 
    // HEAVY ARROW SHAFT WIDTH ONE HALF

    uint32_t const cps[1] = { 0x1f89e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1893), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_113)
{
    // 1F89F ; [*1894.0020.0002] 
    // HEAVY ARROW SHAFT WIDTH ONE THIRD

    uint32_t const cps[1] = { 0x1f89f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1894), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_114)
{
    // 1F8A0 ; [*1895.0020.0002] 
    // LEFTWARDS BOTTOM-SHADED WHITE ARROW

    uint32_t const cps[1] = { 0x1f8a0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1895), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_115)
{
    // 1F8A1 ; [*1896.0020.0002] 
    // RIGHTWARDS BOTTOM SHADED WHITE ARROW

    uint32_t const cps[1] = { 0x1f8a1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1896), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_116)
{
    // 1F8A2 ; [*1897.0020.0002] 
    // LEFTWARDS TOP SHADED WHITE ARROW

    uint32_t const cps[1] = { 0x1f8a2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1897), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_117)
{
    // 1F8A3 ; [*1898.0020.0002] 
    // RIGHTWARDS TOP SHADED WHITE ARROW

    uint32_t const cps[1] = { 0x1f8a3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1898), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_118)
{
    // 1F8A4 ; [*1899.0020.0002] 
    // LEFTWARDS LEFT-SHADED WHITE ARROW

    uint32_t const cps[1] = { 0x1f8a4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1899), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_119)
{
    // 1F8A5 ; [*189A.0020.0002] 
    // RIGHTWARDS RIGHT-SHADED WHITE ARROW

    uint32_t const cps[1] = { 0x1f8a5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x189a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_120)
{
    // 1F8A6 ; [*189B.0020.0002] 
    // LEFTWARDS RIGHT-SHADED WHITE ARROW

    uint32_t const cps[1] = { 0x1f8a6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x189b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_121)
{
    // 1F8A7 ; [*189C.0020.0002] 
    // RIGHTWARDS LEFT-SHADED WHITE ARROW

    uint32_t const cps[1] = { 0x1f8a7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x189c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_122)
{
    // 1F8A8 ; [*189D.0020.0002] 
    // LEFTWARDS BACK-TILTED SHADOWED WHITE ARROW

    uint32_t const cps[1] = { 0x1f8a8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x189d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_123)
{
    // 1F8A9 ; [*189E.0020.0002] 
    // RIGHTWARDS BACK-TILTED SHADOWED WHITE ARROW

    uint32_t const cps[1] = { 0x1f8a9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x189e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_124)
{
    // 1F8AA ; [*189F.0020.0002] 
    // LEFTWARDS FRONT-TILTED SHADOWED WHITE ARROW

    uint32_t const cps[1] = { 0x1f8aa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x189f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_125)
{
    // 1F8AB ; [*18A0.0020.0002] 
    // RIGHTWARDS FRONT-TILTED SHADOWED WHITE ARROW

    uint32_t const cps[1] = { 0x1f8ab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x18a0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_126)
{
    // 1F8AC ; [*18A1.0020.0002] 
    // WHITE ARROW SHAFT WIDTH ONE

    uint32_t const cps[1] = { 0x1f8ac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x18a1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_127)
{
    // 1F8AD ; [*18A2.0020.0002] 
    // WHITE ARROW SHAFT WIDTH TWO THIRDS

    uint32_t const cps[1] = { 0x1f8ad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x18a2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_128)
{
    // 1F900 ; [*15C7.0020.0002] 
    // CIRCLED CROSS FORMEE WITH FOUR DOTS

    uint32_t const cps[1] = { 0x1f900 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x15c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_129)
{
    // 1F901 ; [*15C8.0020.0002] 
    // CIRCLED CROSS FORMEE WITH TWO DOTS

    uint32_t const cps[1] = { 0x1f901 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x15c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_130)
{
    // 1F902 ; [*15C9.0020.0002] 
    // CIRCLED CROSS FORMEE

    uint32_t const cps[1] = { 0x1f902 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x15c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_131)
{
    // 1F903 ; [*15CA.0020.0002] 
    // LEFT HALF CIRCLE WITH FOUR DOTS

    uint32_t const cps[1] = { 0x1f903 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x15ca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_132)
{
    // 1F904 ; [*15CB.0020.0002] 
    // LEFT HALF CIRCLE WITH THREE DOTS

    uint32_t const cps[1] = { 0x1f904 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x15cb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_133)
{
    // 1F905 ; [*15CC.0020.0002] 
    // LEFT HALF CIRCLE WITH TWO DOTS

    uint32_t const cps[1] = { 0x1f905 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x15cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_134)
{
    // 1F906 ; [*15CD.0020.0002] 
    // LEFT HALF CIRCLE WITH DOT

    uint32_t const cps[1] = { 0x1f906 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x15cd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_135)
{
    // 1F907 ; [*15CE.0020.0002] 
    // LEFT HALF CIRCLE

    uint32_t const cps[1] = { 0x1f907 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x15ce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_136)
{
    // 1F908 ; [*15CF.0020.0002] 
    // DOWNWARD FACING HOOK

    uint32_t const cps[1] = { 0x1f908 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x15cf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_137)
{
    // 1F909 ; [*15D0.0020.0002] 
    // DOWNWARD FACING NOTCHED HOOK

    uint32_t const cps[1] = { 0x1f909 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x15d0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_138)
{
    // 1F90A ; [*15D1.0020.0002] 
    // DOWNWARD FACING HOOK WITH DOT

    uint32_t const cps[1] = { 0x1f90a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x15d1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_139)
{
    // 1F90B ; [*15D2.0020.0002] 
    // DOWNWARD FACING NOTCHED HOOK WITH DOT

    uint32_t const cps[1] = { 0x1f90b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x15d2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_140)
{
    // 1F910 ; [*15D3.0020.0002] 
    // ZIPPER-MOUTH FACE

    uint32_t const cps[1] = { 0x1f910 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x15d3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_141)
{
    // 1F911 ; [*15D4.0020.0002] 
    // MONEY-MOUTH FACE

    uint32_t const cps[1] = { 0x1f911 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x15d4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_142)
{
    // 1F912 ; [*15D5.0020.0002] 
    // FACE WITH THERMOMETER

    uint32_t const cps[1] = { 0x1f912 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x15d5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_143)
{
    // 1F913 ; [*15D6.0020.0002] 
    // NERD FACE

    uint32_t const cps[1] = { 0x1f913 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x15d6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_144)
{
    // 1F914 ; [*15D7.0020.0002] 
    // THINKING FACE

    uint32_t const cps[1] = { 0x1f914 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x15d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_145)
{
    // 1F915 ; [*15D8.0020.0002] 
    // FACE WITH HEAD-BANDAGE

    uint32_t const cps[1] = { 0x1f915 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x15d8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_146)
{
    // 1F916 ; [*15D9.0020.0002] 
    // ROBOT FACE

    uint32_t const cps[1] = { 0x1f916 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x15d9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_147)
{
    // 1F917 ; [*15DA.0020.0002] 
    // HUGGING FACE

    uint32_t const cps[1] = { 0x1f917 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x15da), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_148)
{
    // 1F918 ; [*15DB.0020.0002] 
    // SIGN OF THE HORNS

    uint32_t const cps[1] = { 0x1f918 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x15db), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_201_149)
{
    // 1F919 ; [*15DC.0020.0002] 
    // CALL ME HAND

    uint32_t const cps[1] = { 0x1f919 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x15dc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

